
RTP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005e  00800200  00002fac  00003040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002fac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000acb  0080025e  0080025e  0000309e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000309e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000030d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000638  00000000  00000000  00003110  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007c4a  00000000  00000000  00003748  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002006  00000000  00000000  0000b392  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004131  00000000  00000000  0000d398  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000016b0  00000000  00000000  000114cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002830  00000000  00000000  00012b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000748c  00000000  00000000  000153ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000618  00000000  00000000  0001c838  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	93 c0       	rjmp	.+294    	; 0x128 <__ctors_end>
       2:	00 00       	nop
       4:	b1 c0       	rjmp	.+354    	; 0x168 <__bad_interrupt>
       6:	00 00       	nop
       8:	af c0       	rjmp	.+350    	; 0x168 <__bad_interrupt>
       a:	00 00       	nop
       c:	ad c0       	rjmp	.+346    	; 0x168 <__bad_interrupt>
       e:	00 00       	nop
      10:	ab c0       	rjmp	.+342    	; 0x168 <__bad_interrupt>
      12:	00 00       	nop
      14:	a9 c0       	rjmp	.+338    	; 0x168 <__bad_interrupt>
      16:	00 00       	nop
      18:	a7 c0       	rjmp	.+334    	; 0x168 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a5 c0       	rjmp	.+330    	; 0x168 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a3 c0       	rjmp	.+326    	; 0x168 <__bad_interrupt>
      22:	00 00       	nop
      24:	a1 c0       	rjmp	.+322    	; 0x168 <__bad_interrupt>
      26:	00 00       	nop
      28:	9f c0       	rjmp	.+318    	; 0x168 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	9d c0       	rjmp	.+314    	; 0x168 <__bad_interrupt>
      2e:	00 00       	nop
      30:	d6 c3       	rjmp	.+1964   	; 0x7de <__vector_12>
      32:	00 00       	nop
      34:	99 c0       	rjmp	.+306    	; 0x168 <__bad_interrupt>
      36:	00 00       	nop
      38:	97 c0       	rjmp	.+302    	; 0x168 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	95 c0       	rjmp	.+298    	; 0x168 <__bad_interrupt>
      3e:	00 00       	nop
      40:	93 c0       	rjmp	.+294    	; 0x168 <__bad_interrupt>
      42:	00 00       	nop
      44:	91 c0       	rjmp	.+290    	; 0x168 <__bad_interrupt>
      46:	00 00       	nop
      48:	8f c0       	rjmp	.+286    	; 0x168 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8d c0       	rjmp	.+282    	; 0x168 <__bad_interrupt>
      4e:	00 00       	nop
      50:	8b c0       	rjmp	.+278    	; 0x168 <__bad_interrupt>
      52:	00 00       	nop
      54:	89 c0       	rjmp	.+274    	; 0x168 <__bad_interrupt>
      56:	00 00       	nop
      58:	87 c0       	rjmp	.+270    	; 0x168 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	85 c0       	rjmp	.+266    	; 0x168 <__bad_interrupt>
      5e:	00 00       	nop
      60:	83 c0       	rjmp	.+262    	; 0x168 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__vector_25>
      68:	0c 94 5b 12 	jmp	0x24b6	; 0x24b6 <__vector_26>
      6c:	7d c0       	rjmp	.+250    	; 0x168 <__bad_interrupt>
      6e:	00 00       	nop
      70:	7b c0       	rjmp	.+246    	; 0x168 <__bad_interrupt>
      72:	00 00       	nop
      74:	79 c0       	rjmp	.+242    	; 0x168 <__bad_interrupt>
      76:	00 00       	nop
      78:	77 c0       	rjmp	.+238    	; 0x168 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	75 c0       	rjmp	.+234    	; 0x168 <__bad_interrupt>
      7e:	00 00       	nop
      80:	73 c0       	rjmp	.+230    	; 0x168 <__bad_interrupt>
      82:	00 00       	nop
      84:	71 c0       	rjmp	.+226    	; 0x168 <__bad_interrupt>
      86:	00 00       	nop
      88:	6f c0       	rjmp	.+222    	; 0x168 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6d c0       	rjmp	.+218    	; 0x168 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 9f 12 	jmp	0x253e	; 0x253e <__vector_36>
      94:	0c 94 f1 12 	jmp	0x25e2	; 0x25e2 <__vector_37>
      98:	67 c0       	rjmp	.+206    	; 0x168 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	65 c0       	rjmp	.+202    	; 0x168 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	63 c0       	rjmp	.+198    	; 0x168 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	61 c0       	rjmp	.+194    	; 0x168 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	5f c0       	rjmp	.+190    	; 0x168 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	5d c0       	rjmp	.+186    	; 0x168 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	5b c0       	rjmp	.+182    	; 0x168 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	59 c0       	rjmp	.+178    	; 0x168 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	57 c0       	rjmp	.+174    	; 0x168 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	55 c0       	rjmp	.+170    	; 0x168 <__bad_interrupt>
      be:	00 00       	nop
      c0:	53 c0       	rjmp	.+166    	; 0x168 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	51 c0       	rjmp	.+162    	; 0x168 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	4f c0       	rjmp	.+158    	; 0x168 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 35 13 	jmp	0x266a	; 0x266a <__vector_51>
      d0:	0c 94 87 13 	jmp	0x270e	; 0x270e <__vector_52>
      d4:	49 c0       	rjmp	.+146    	; 0x168 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 cb 13 	jmp	0x2796	; 0x2796 <__vector_54>
      dc:	0c 94 1d 14 	jmp	0x283a	; 0x283a <__vector_55>
      e0:	43 c0       	rjmp	.+134    	; 0x168 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	3a 10       	cpse	r3, r10
      e6:	3a 10       	cpse	r3, r10
      e8:	3a 10       	cpse	r3, r10
      ea:	71 10       	cpse	r7, r1
      ec:	79 10       	cpse	r7, r9
      ee:	8e 10       	cpse	r8, r14
      f0:	3a 10       	cpse	r3, r10
      f2:	3a 10       	cpse	r3, r10
      f4:	71 10       	cpse	r7, r1
      f6:	79 10       	cpse	r7, r9

000000f8 <prvIdleTask>:
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
      f8:	63 d7       	rcall	.+3782   	; 0xfc0 <prvCheckTasksWaitingTermination>
      fa:	80 91 83 0c 	lds	r24, 0x0C83	; 0x800c83 <pxReadyTasksLists>
      fe:	82 30       	cpi	r24, 0x02	; 2
     100:	08 f0       	brcs	.+2      	; 0x104 <prvIdleTask+0xc>
     102:	a9 d2       	rcall	.+1362   	; 0x656 <vPortYield>
     104:	0e 94 b7 10 	call	0x216e	; 0x216e <vApplicationIdleHook>
     108:	f7 cf       	rjmp	.-18     	; 0xf8 <prvIdleTask>

0000010a <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     10a:	cf 93       	push	r28
     10c:	df 93       	push	r29
     10e:	1f 92       	push	r1
     110:	cd b7       	in	r28, 0x3d	; 61
     112:	de b7       	in	r29, 0x3e	; 62
     114:	ce 01       	movw	r24, r28
     116:	01 96       	adiw	r24, 0x01	; 1
     118:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <prvGetNextExpireTime>
     11c:	49 81       	ldd	r20, Y+1	; 0x01
     11e:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <prvProcessTimerOrBlockTask>
     122:	0e 94 04 10 	call	0x2008	; 0x2008 <prvProcessReceivedCommands>
     126:	f6 cf       	rjmp	.-20     	; 0x114 <prvTimerTask+0xa>

00000128 <__ctors_end>:
     128:	11 24       	eor	r1, r1
     12a:	1f be       	out	0x3f, r1	; 63
     12c:	cf ef       	ldi	r28, 0xFF	; 255
     12e:	d1 e2       	ldi	r29, 0x21	; 33
     130:	de bf       	out	0x3e, r29	; 62
     132:	cd bf       	out	0x3d, r28	; 61
     134:	00 e0       	ldi	r16, 0x00	; 0
     136:	0c bf       	out	0x3c, r16	; 60

00000138 <__do_copy_data>:
     138:	12 e0       	ldi	r17, 0x02	; 2
     13a:	a0 e0       	ldi	r26, 0x00	; 0
     13c:	b2 e0       	ldi	r27, 0x02	; 2
     13e:	ec ea       	ldi	r30, 0xAC	; 172
     140:	ff e2       	ldi	r31, 0x2F	; 47
     142:	00 e0       	ldi	r16, 0x00	; 0
     144:	0b bf       	out	0x3b, r16	; 59
     146:	02 c0       	rjmp	.+4      	; 0x14c <__do_copy_data+0x14>
     148:	07 90       	elpm	r0, Z+
     14a:	0d 92       	st	X+, r0
     14c:	ae 35       	cpi	r26, 0x5E	; 94
     14e:	b1 07       	cpc	r27, r17
     150:	d9 f7       	brne	.-10     	; 0x148 <__do_copy_data+0x10>

00000152 <__do_clear_bss>:
     152:	2d e0       	ldi	r18, 0x0D	; 13
     154:	ae e5       	ldi	r26, 0x5E	; 94
     156:	b2 e0       	ldi	r27, 0x02	; 2
     158:	01 c0       	rjmp	.+2      	; 0x15c <.do_clear_bss_start>

0000015a <.do_clear_bss_loop>:
     15a:	1d 92       	st	X+, r1

0000015c <.do_clear_bss_start>:
     15c:	a9 32       	cpi	r26, 0x29	; 41
     15e:	b2 07       	cpc	r27, r18
     160:	e1 f7       	brne	.-8      	; 0x15a <.do_clear_bss_loop>
     162:	3d d0       	rcall	.+122    	; 0x1de <main>
     164:	0c 94 d4 17 	jmp	0x2fa8	; 0x2fa8 <_exit>

00000168 <__bad_interrupt>:
     168:	4b cf       	rjmp	.-362    	; 0x0 <__vectors>

0000016a <messenger>:
	xTaskCreate(messenger, "Sample Task", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
}

void messenger(void *pvParameters)
{		
	PORTA = PORTA & 0b00001111;
     16a:	82 b1       	in	r24, 0x02	; 2
     16c:	8f 70       	andi	r24, 0x0F	; 15
     16e:	82 b9       	out	0x02, r24	; 2
	int counter = 0;
	
	for(;;)
	{
		printf("Not sending\r\n");
     170:	8d e1       	ldi	r24, 0x1D	; 29
     172:	92 e0       	ldi	r25, 0x02	; 2
     174:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <puts>
		PORTA = PORTA | 0b00001111;
     178:	82 b1       	in	r24, 0x02	; 2
     17a:	8f 60       	ori	r24, 0x0F	; 15
     17c:	82 b9       	out	0x02, r24	; 2
		
		vTaskDelay(200);
     17e:	68 ec       	ldi	r22, 0xC8	; 200
     180:	70 e0       	ldi	r23, 0x00	; 0
     182:	80 e0       	ldi	r24, 0x00	; 0
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	0e 94 45 0b 	call	0x168a	; 0x168a <vTaskDelay>
		
			printf("Sending\r\n");
     18a:	8a e2       	ldi	r24, 0x2A	; 42
     18c:	92 e0       	ldi	r25, 0x02	; 2
     18e:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <puts>
			PORTA = PORTA & 0b11110000;
     192:	82 b1       	in	r24, 0x02	; 2
     194:	80 7f       	andi	r24, 0xF0	; 240
     196:	82 b9       	out	0x02, r24	; 2
					
			vTaskDelay(200);
     198:	68 ec       	ldi	r22, 0xC8	; 200
     19a:	70 e0       	ldi	r23, 0x00	; 0
     19c:	80 e0       	ldi	r24, 0x00	; 0
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	0e 94 45 0b 	call	0x168a	; 0x168a <vTaskDelay>
     1a4:	e5 cf       	rjmp	.-54     	; 0x170 <messenger+0x6>

000001a6 <create_tasks_and_semaphores>:
#include <display_7seg.h>

void messenger(void *pvParameters);

void create_tasks_and_semaphores(void)
{
     1a6:	ef 92       	push	r14
     1a8:	ff 92       	push	r15
     1aa:	0f 93       	push	r16
	xTaskCreate(messenger, "Sample Task", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
     1ac:	e1 2c       	mov	r14, r1
     1ae:	f1 2c       	mov	r15, r1
     1b0:	01 e0       	ldi	r16, 0x01	; 1
     1b2:	20 e0       	ldi	r18, 0x00	; 0
     1b4:	30 e0       	ldi	r19, 0x00	; 0
     1b6:	40 ec       	ldi	r20, 0xC0	; 192
     1b8:	50 e0       	ldi	r21, 0x00	; 0
     1ba:	63 e3       	ldi	r22, 0x33	; 51
     1bc:	72 e0       	ldi	r23, 0x02	; 2
     1be:	85 eb       	ldi	r24, 0xB5	; 181
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	c1 d7       	rcall	.+3970   	; 0x1146 <xTaskCreate>
}
     1c4:	0f 91       	pop	r16
     1c6:	ff 90       	pop	r15
     1c8:	ef 90       	pop	r14
     1ca:	08 95       	ret

000001cc <initialiseSystem>:
	}
}

void initialiseSystem()
{
	DDRA =  0b00001111;
     1cc:	8f e0       	ldi	r24, 0x0F	; 15
     1ce:	81 b9       	out	0x01, r24	; 1
	PORTA = 0b11110000;
     1d0:	80 ef       	ldi	r24, 0xF0	; 240
     1d2:	82 b9       	out	0x02, r24	; 2
	stdio_initialise(ser_USART0);
     1d4:	80 e0       	ldi	r24, 0x00	; 0
     1d6:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <stdio_initialise>
	create_tasks_and_semaphores();
     1da:	e5 cf       	rjmp	.-54     	; 0x1a6 <create_tasks_and_semaphores>
     1dc:	08 95       	ret

000001de <main>:
}

 int main(void)
{	
	initialiseSystem();
     1de:	f6 df       	rcall	.-20     	; 0x1cc <initialiseSystem>
	printf("Program Started.\r\n");
     1e0:	8f e3       	ldi	r24, 0x3F	; 63
     1e2:	92 e0       	ldi	r25, 0x02	; 2
     1e4:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <puts>
	vTaskStartScheduler();
     1e8:	f7 d7       	rcall	.+4078   	; 0x11d8 <vTaskStartScheduler>
     1ea:	ff cf       	rjmp	.-2      	; 0x1ea <main+0xc>

000001ec <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     1ec:	e8 e0       	ldi	r30, 0x08	; 8
     1ee:	f1 e0       	ldi	r31, 0x01	; 1
     1f0:	90 81       	ld	r25, Z
     1f2:	90 7f       	andi	r25, 0xF0	; 240
     1f4:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     1f6:	90 81       	ld	r25, Z
     1f8:	8f 70       	andi	r24, 0x0F	; 15
     1fa:	98 2b       	or	r25, r24
     1fc:	90 83       	st	Z, r25
     1fe:	08 95       	ret

00000200 <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     200:	e8 e0       	ldi	r30, 0x08	; 8
     202:	f1 e0       	ldi	r31, 0x01	; 1
     204:	80 81       	ld	r24, Z
     206:	80 7f       	andi	r24, 0xF0	; 240
     208:	80 83       	st	Z, r24
     20a:	08 95       	ret

0000020c <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     20c:	ea e6       	ldi	r30, 0x6A	; 106
     20e:	f2 e0       	ldi	r31, 0x02	; 2
     210:	ae e6       	ldi	r26, 0x6E	; 110
     212:	b2 e0       	ldi	r27, 0x02	; 2
     214:	b1 83       	std	Z+1, r27	; 0x01
     216:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     218:	13 82       	std	Z+3, r1	; 0x03
     21a:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     21c:	ee e2       	ldi	r30, 0x2E	; 46
     21e:	fc e0       	ldi	r31, 0x0C	; 12
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     220:	f0 93 69 02 	sts	0x0269, r31	; 0x800269 <pxEnd+0x1>
     224:	e0 93 68 02 	sts	0x0268, r30	; 0x800268 <pxEnd>
    pxEnd->xBlockSize = 0;
     228:	13 82       	std	Z+3, r1	; 0x03
     22a:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     22c:	11 82       	std	Z+1, r1	; 0x01
     22e:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     230:	80 ec       	ldi	r24, 0xC0	; 192
     232:	99 e0       	ldi	r25, 0x09	; 9
     234:	13 96       	adiw	r26, 0x03	; 3
     236:	9c 93       	st	X, r25
     238:	8e 93       	st	-X, r24
     23a:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     23c:	ed 93       	st	X+, r30
     23e:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     240:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <xMinimumEverFreeBytesRemaining+0x1>
     244:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     248:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <xFreeBytesRemaining+0x1>
     24c:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     250:	80 e0       	ldi	r24, 0x00	; 0
     252:	90 e8       	ldi	r25, 0x80	; 128
     254:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <__data_end+0x1>
     258:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <__data_end>
     25c:	08 95       	ret

0000025e <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     25e:	cf 93       	push	r28
     260:	df 93       	push	r29
     262:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     264:	aa e6       	ldi	r26, 0x6A	; 106
     266:	b2 e0       	ldi	r27, 0x02	; 2
     268:	01 c0       	rjmp	.+2      	; 0x26c <prvInsertBlockIntoFreeList+0xe>
     26a:	df 01       	movw	r26, r30
     26c:	ed 91       	ld	r30, X+
     26e:	fc 91       	ld	r31, X
     270:	11 97       	sbiw	r26, 0x01	; 1
     272:	ec 17       	cp	r30, r28
     274:	fd 07       	cpc	r31, r29
     276:	c8 f3       	brcs	.-14     	; 0x26a <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     278:	12 96       	adiw	r26, 0x02	; 2
     27a:	8d 91       	ld	r24, X+
     27c:	9c 91       	ld	r25, X
     27e:	13 97       	sbiw	r26, 0x03	; 3
     280:	9d 01       	movw	r18, r26
     282:	28 0f       	add	r18, r24
     284:	39 1f       	adc	r19, r25
     286:	c2 17       	cp	r28, r18
     288:	d3 07       	cpc	r29, r19
     28a:	49 f4       	brne	.+18     	; 0x29e <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     28c:	2a 81       	ldd	r18, Y+2	; 0x02
     28e:	3b 81       	ldd	r19, Y+3	; 0x03
     290:	82 0f       	add	r24, r18
     292:	93 1f       	adc	r25, r19
     294:	13 96       	adiw	r26, 0x03	; 3
     296:	9c 93       	st	X, r25
     298:	8e 93       	st	-X, r24
     29a:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     29c:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     29e:	8a 81       	ldd	r24, Y+2	; 0x02
     2a0:	9b 81       	ldd	r25, Y+3	; 0x03
     2a2:	9e 01       	movw	r18, r28
     2a4:	28 0f       	add	r18, r24
     2a6:	39 1f       	adc	r19, r25
     2a8:	e2 17       	cp	r30, r18
     2aa:	f3 07       	cpc	r31, r19
     2ac:	c1 f4       	brne	.+48     	; 0x2de <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     2ae:	20 91 68 02 	lds	r18, 0x0268	; 0x800268 <pxEnd>
     2b2:	30 91 69 02 	lds	r19, 0x0269	; 0x800269 <pxEnd+0x1>
     2b6:	e2 17       	cp	r30, r18
     2b8:	f3 07       	cpc	r31, r19
     2ba:	71 f0       	breq	.+28     	; 0x2d8 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     2bc:	22 81       	ldd	r18, Z+2	; 0x02
     2be:	33 81       	ldd	r19, Z+3	; 0x03
     2c0:	82 0f       	add	r24, r18
     2c2:	93 1f       	adc	r25, r19
     2c4:	9b 83       	std	Y+3, r25	; 0x03
     2c6:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     2c8:	ed 91       	ld	r30, X+
     2ca:	fc 91       	ld	r31, X
     2cc:	11 97       	sbiw	r26, 0x01	; 1
     2ce:	80 81       	ld	r24, Z
     2d0:	91 81       	ldd	r25, Z+1	; 0x01
     2d2:	99 83       	std	Y+1, r25	; 0x01
     2d4:	88 83       	st	Y, r24
     2d6:	05 c0       	rjmp	.+10     	; 0x2e2 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     2d8:	39 83       	std	Y+1, r19	; 0x01
     2da:	28 83       	st	Y, r18
     2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     2de:	f9 83       	std	Y+1, r31	; 0x01
     2e0:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     2e2:	ca 17       	cp	r28, r26
     2e4:	db 07       	cpc	r29, r27
     2e6:	11 f0       	breq	.+4      	; 0x2ec <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     2e8:	cd 93       	st	X+, r28
     2ea:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	08 95       	ret

000002f2 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     2f2:	ef 92       	push	r14
     2f4:	ff 92       	push	r15
     2f6:	0f 93       	push	r16
     2f8:	1f 93       	push	r17
     2fa:	cf 93       	push	r28
     2fc:	df 93       	push	r29
     2fe:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     300:	a8 d7       	rcall	.+3920   	; 0x1252 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     302:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <pxEnd>
     306:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <pxEnd+0x1>
     30a:	89 2b       	or	r24, r25
        {
            prvHeapInit();
     30c:	09 f4       	brne	.+2      	; 0x310 <pvPortMalloc+0x1e>
     30e:	7e df       	rcall	.-260    	; 0x20c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     310:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <__data_end>
     314:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <__data_end+0x1>
     318:	80 23       	and	r24, r16
     31a:	91 23       	and	r25, r17
     31c:	89 2b       	or	r24, r25
     31e:	09 f0       	breq	.+2      	; 0x322 <pvPortMalloc+0x30>
     320:	76 c0       	rjmp	.+236    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     322:	01 15       	cp	r16, r1
     324:	11 05       	cpc	r17, r1
     326:	49 f0       	breq	.+18     	; 0x33a <pvPortMalloc+0x48>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     328:	c8 01       	movw	r24, r16
     32a:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     32c:	08 17       	cp	r16, r24
     32e:	19 07       	cpc	r17, r25
     330:	18 f0       	brcs	.+6      	; 0x338 <pvPortMalloc+0x46>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     332:	00 e0       	ldi	r16, 0x00	; 0
     334:	10 e0       	ldi	r17, 0x00	; 0
     336:	01 c0       	rjmp	.+2      	; 0x33a <pvPortMalloc+0x48>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     338:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     33a:	01 15       	cp	r16, r1
     33c:	11 05       	cpc	r17, r1
     33e:	09 f4       	brne	.+2      	; 0x342 <pvPortMalloc+0x50>
     340:	69 c0       	rjmp	.+210    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     342:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <xFreeBytesRemaining>
     346:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <xFreeBytesRemaining+0x1>
     34a:	80 17       	cp	r24, r16
     34c:	91 07       	cpc	r25, r17
     34e:	08 f4       	brcc	.+2      	; 0x352 <pvPortMalloc+0x60>
     350:	64 c0       	rjmp	.+200    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     352:	c0 91 6a 02 	lds	r28, 0x026A	; 0x80026a <xStart>
     356:	d0 91 6b 02 	lds	r29, 0x026B	; 0x80026b <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     35a:	ea e6       	ldi	r30, 0x6A	; 106
     35c:	f2 e0       	ldi	r31, 0x02	; 2
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     35e:	02 c0       	rjmp	.+4      	; 0x364 <pvPortMalloc+0x72>
                {
                    pxPreviousBlock = pxBlock;
     360:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     362:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     364:	8a 81       	ldd	r24, Y+2	; 0x02
     366:	9b 81       	ldd	r25, Y+3	; 0x03
     368:	80 17       	cp	r24, r16
     36a:	91 07       	cpc	r25, r17
     36c:	20 f4       	brcc	.+8      	; 0x376 <pvPortMalloc+0x84>
     36e:	88 81       	ld	r24, Y
     370:	99 81       	ldd	r25, Y+1	; 0x01
     372:	00 97       	sbiw	r24, 0x00	; 0
     374:	a9 f7       	brne	.-22     	; 0x360 <pvPortMalloc+0x6e>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     376:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <pxEnd>
     37a:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <pxEnd+0x1>
     37e:	c8 17       	cp	r28, r24
     380:	d9 07       	cpc	r29, r25
     382:	09 f4       	brne	.+2      	; 0x386 <pvPortMalloc+0x94>
     384:	4d c0       	rjmp	.+154    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     386:	e0 80       	ld	r14, Z
     388:	f1 80       	ldd	r15, Z+1	; 0x01
     38a:	84 e0       	ldi	r24, 0x04	; 4
     38c:	e8 0e       	add	r14, r24
     38e:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     390:	88 81       	ld	r24, Y
     392:	99 81       	ldd	r25, Y+1	; 0x01
     394:	91 83       	std	Z+1, r25	; 0x01
     396:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     398:	2a 81       	ldd	r18, Y+2	; 0x02
     39a:	3b 81       	ldd	r19, Y+3	; 0x03
     39c:	20 1b       	sub	r18, r16
     39e:	31 0b       	sbc	r19, r17
     3a0:	29 30       	cpi	r18, 0x09	; 9
     3a2:	31 05       	cpc	r19, r1
     3a4:	48 f0       	brcs	.+18     	; 0x3b8 <pvPortMalloc+0xc6>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     3a6:	ce 01       	movw	r24, r28
     3a8:	80 0f       	add	r24, r16
     3aa:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     3ac:	fc 01       	movw	r30, r24
     3ae:	33 83       	std	Z+3, r19	; 0x03
     3b0:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     3b2:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     3b4:	0a 83       	std	Y+2, r16	; 0x02
     3b6:	53 df       	rcall	.-346    	; 0x25e <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     3b8:	2a 81       	ldd	r18, Y+2	; 0x02
     3ba:	3b 81       	ldd	r19, Y+3	; 0x03
     3bc:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <xFreeBytesRemaining>
     3c0:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <xFreeBytesRemaining+0x1>
     3c4:	82 1b       	sub	r24, r18
     3c6:	93 0b       	sbc	r25, r19
     3c8:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <xFreeBytesRemaining+0x1>
     3cc:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     3d0:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <xMinimumEverFreeBytesRemaining>
     3d4:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <xMinimumEverFreeBytesRemaining+0x1>
     3d8:	84 17       	cp	r24, r20
     3da:	95 07       	cpc	r25, r21
     3dc:	20 f4       	brcc	.+8      	; 0x3e6 <pvPortMalloc+0xf4>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     3de:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <xMinimumEverFreeBytesRemaining+0x1>
     3e2:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     3e6:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <__data_end>
     3ea:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <__data_end+0x1>
     3ee:	28 2b       	or	r18, r24
     3f0:	39 2b       	or	r19, r25
     3f2:	3b 83       	std	Y+3, r19	; 0x03
     3f4:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     3f6:	19 82       	std	Y+1, r1	; 0x01
     3f8:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     3fa:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <xNumberOfSuccessfulAllocations>
     3fe:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <xNumberOfSuccessfulAllocations+0x1>
     402:	01 96       	adiw	r24, 0x01	; 1
     404:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <xNumberOfSuccessfulAllocations+0x1>
     408:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <xNumberOfSuccessfulAllocations>
     40c:	0b c0       	rjmp	.+22     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     40e:	e1 2c       	mov	r14, r1
     410:	f1 2c       	mov	r15, r1
     412:	08 c0       	rjmp	.+16     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     414:	e1 2c       	mov	r14, r1
     416:	f1 2c       	mov	r15, r1
     418:	05 c0       	rjmp	.+10     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     41a:	e1 2c       	mov	r14, r1
     41c:	f1 2c       	mov	r15, r1
     41e:	02 c0       	rjmp	.+4      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     420:	e1 2c       	mov	r14, r1
     422:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     424:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     428:	e1 14       	cp	r14, r1
     42a:	f1 04       	cpc	r15, r1
     42c:	11 f4       	brne	.+4      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     42e:	0e 94 c3 10 	call	0x2186	; 0x2186 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     432:	c7 01       	movw	r24, r14
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
     438:	1f 91       	pop	r17
     43a:	0f 91       	pop	r16
     43c:	ff 90       	pop	r15
     43e:	ef 90       	pop	r14
     440:	08 95       	ret

00000442 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     442:	0f 93       	push	r16
     444:	1f 93       	push	r17
     446:	cf 93       	push	r28
     448:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     44a:	00 97       	sbiw	r24, 0x00	; 0
     44c:	89 f1       	breq	.+98     	; 0x4b0 <vPortFree+0x6e>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     44e:	ec 01       	movw	r28, r24
     450:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     452:	4a 81       	ldd	r20, Y+2	; 0x02
     454:	5b 81       	ldd	r21, Y+3	; 0x03
     456:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <__data_end>
     45a:	30 91 5f 02 	lds	r19, 0x025F	; 0x80025f <__data_end+0x1>
     45e:	ba 01       	movw	r22, r20
     460:	62 23       	and	r22, r18
     462:	73 23       	and	r23, r19
     464:	67 2b       	or	r22, r23
     466:	21 f1       	breq	.+72     	; 0x4b0 <vPortFree+0x6e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     468:	68 81       	ld	r22, Y
     46a:	79 81       	ldd	r23, Y+1	; 0x01
     46c:	67 2b       	or	r22, r23
     46e:	01 f5       	brne	.+64     	; 0x4b0 <vPortFree+0x6e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     470:	20 95       	com	r18
     472:	30 95       	com	r19
     474:	24 23       	and	r18, r20
     476:	35 23       	and	r19, r21
     478:	3b 83       	std	Y+3, r19	; 0x03
     47a:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     47c:	ea d6       	rcall	.+3540   	; 0x1252 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     47e:	8a 81       	ldd	r24, Y+2	; 0x02
     480:	9b 81       	ldd	r25, Y+3	; 0x03
     482:	20 91 66 02 	lds	r18, 0x0266	; 0x800266 <xFreeBytesRemaining>
     486:	30 91 67 02 	lds	r19, 0x0267	; 0x800267 <xFreeBytesRemaining+0x1>
     48a:	82 0f       	add	r24, r18
     48c:	93 1f       	adc	r25, r19
     48e:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <xFreeBytesRemaining+0x1>
     492:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     496:	ce 01       	movw	r24, r28
     498:	e2 de       	rcall	.-572    	; 0x25e <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     49a:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <xNumberOfSuccessfulFrees>
     49e:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <xNumberOfSuccessfulFrees+0x1>
     4a2:	01 96       	adiw	r24, 0x01	; 1
     4a4:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <xNumberOfSuccessfulFrees+0x1>
     4a8:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     4ac:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	1f 91       	pop	r17
     4b6:	0f 91       	pop	r16
     4b8:	08 95       	ret

000004ba <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     4ba:	fc 01       	movw	r30, r24
     4bc:	03 96       	adiw	r24, 0x03	; 3
     4be:	92 83       	std	Z+2, r25	; 0x02
     4c0:	81 83       	std	Z+1, r24	; 0x01
     4c2:	4f ef       	ldi	r20, 0xFF	; 255
     4c4:	5f ef       	ldi	r21, 0xFF	; 255
     4c6:	ba 01       	movw	r22, r20
     4c8:	43 83       	std	Z+3, r20	; 0x03
     4ca:	54 83       	std	Z+4, r21	; 0x04
     4cc:	65 83       	std	Z+5, r22	; 0x05
     4ce:	76 83       	std	Z+6, r23	; 0x06
     4d0:	90 87       	std	Z+8, r25	; 0x08
     4d2:	87 83       	std	Z+7, r24	; 0x07
     4d4:	92 87       	std	Z+10, r25	; 0x0a
     4d6:	81 87       	std	Z+9, r24	; 0x09
     4d8:	10 82       	st	Z, r1
     4da:	08 95       	ret

000004dc <vListInitialiseItem>:
     4dc:	fc 01       	movw	r30, r24
     4de:	13 86       	std	Z+11, r1	; 0x0b
     4e0:	12 86       	std	Z+10, r1	; 0x0a
     4e2:	08 95       	ret

000004e4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     4e4:	0f 93       	push	r16
     4e6:	1f 93       	push	r17
     4e8:	cf 93       	push	r28
     4ea:	df 93       	push	r29
     4ec:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     4ee:	08 81       	ld	r16, Y
     4f0:	19 81       	ldd	r17, Y+1	; 0x01
     4f2:	2a 81       	ldd	r18, Y+2	; 0x02
     4f4:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     4f6:	0f 3f       	cpi	r16, 0xFF	; 255
     4f8:	4f ef       	ldi	r20, 0xFF	; 255
     4fa:	14 07       	cpc	r17, r20
     4fc:	24 07       	cpc	r18, r20
     4fe:	34 07       	cpc	r19, r20
     500:	21 f4       	brne	.+8      	; 0x50a <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     502:	fc 01       	movw	r30, r24
     504:	a1 85       	ldd	r26, Z+9	; 0x09
     506:	b2 85       	ldd	r27, Z+10	; 0x0a
     508:	11 c0       	rjmp	.+34     	; 0x52c <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     50a:	dc 01       	movw	r26, r24
     50c:	13 96       	adiw	r26, 0x03	; 3
     50e:	01 c0       	rjmp	.+2      	; 0x512 <vListInsert+0x2e>
     510:	df 01       	movw	r26, r30
     512:	14 96       	adiw	r26, 0x04	; 4
     514:	ed 91       	ld	r30, X+
     516:	fc 91       	ld	r31, X
     518:	15 97       	sbiw	r26, 0x05	; 5
     51a:	40 81       	ld	r20, Z
     51c:	51 81       	ldd	r21, Z+1	; 0x01
     51e:	62 81       	ldd	r22, Z+2	; 0x02
     520:	73 81       	ldd	r23, Z+3	; 0x03
     522:	04 17       	cp	r16, r20
     524:	15 07       	cpc	r17, r21
     526:	26 07       	cpc	r18, r22
     528:	37 07       	cpc	r19, r23
     52a:	90 f7       	brcc	.-28     	; 0x510 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     52c:	14 96       	adiw	r26, 0x04	; 4
     52e:	ed 91       	ld	r30, X+
     530:	fc 91       	ld	r31, X
     532:	15 97       	sbiw	r26, 0x05	; 5
     534:	fd 83       	std	Y+5, r31	; 0x05
     536:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     538:	d7 83       	std	Z+7, r29	; 0x07
     53a:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     53c:	bf 83       	std	Y+7, r27	; 0x07
     53e:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     540:	15 96       	adiw	r26, 0x05	; 5
     542:	dc 93       	st	X, r29
     544:	ce 93       	st	-X, r28
     546:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     548:	9b 87       	std	Y+11, r25	; 0x0b
     54a:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     54c:	fc 01       	movw	r30, r24
     54e:	20 81       	ld	r18, Z
     550:	2f 5f       	subi	r18, 0xFF	; 255
     552:	20 83       	st	Z, r18
}
     554:	df 91       	pop	r29
     556:	cf 91       	pop	r28
     558:	1f 91       	pop	r17
     55a:	0f 91       	pop	r16
     55c:	08 95       	ret

0000055e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     564:	a2 85       	ldd	r26, Z+10	; 0x0a
     566:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     568:	c4 81       	ldd	r28, Z+4	; 0x04
     56a:	d5 81       	ldd	r29, Z+5	; 0x05
     56c:	86 81       	ldd	r24, Z+6	; 0x06
     56e:	97 81       	ldd	r25, Z+7	; 0x07
     570:	9f 83       	std	Y+7, r25	; 0x07
     572:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     574:	c6 81       	ldd	r28, Z+6	; 0x06
     576:	d7 81       	ldd	r29, Z+7	; 0x07
     578:	84 81       	ldd	r24, Z+4	; 0x04
     57a:	95 81       	ldd	r25, Z+5	; 0x05
     57c:	9d 83       	std	Y+5, r25	; 0x05
     57e:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     580:	11 96       	adiw	r26, 0x01	; 1
     582:	8d 91       	ld	r24, X+
     584:	9c 91       	ld	r25, X
     586:	12 97       	sbiw	r26, 0x02	; 2
     588:	e8 17       	cp	r30, r24
     58a:	f9 07       	cpc	r31, r25
     58c:	31 f4       	brne	.+12     	; 0x59a <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     58e:	86 81       	ldd	r24, Z+6	; 0x06
     590:	97 81       	ldd	r25, Z+7	; 0x07
     592:	12 96       	adiw	r26, 0x02	; 2
     594:	9c 93       	st	X, r25
     596:	8e 93       	st	-X, r24
     598:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     59a:	13 86       	std	Z+11, r1	; 0x0b
     59c:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     59e:	8c 91       	ld	r24, X
     5a0:	81 50       	subi	r24, 0x01	; 1
     5a2:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     5a4:	8c 91       	ld	r24, X
}
     5a6:	df 91       	pop	r29
     5a8:	cf 91       	pop	r28
     5aa:	08 95       	ret

000005ac <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     5ac:	a8 95       	wdr
     5ae:	90 ec       	ldi	r25, 0xC0	; 192
     5b0:	88 e1       	ldi	r24, 0x18	; 24
     5b2:	0f b6       	in	r0, 0x3f	; 63
     5b4:	f8 94       	cli
     5b6:	a8 95       	wdr
     5b8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     5bc:	0f be       	out	0x3f, r0	; 63
     5be:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     5c2:	08 95       	ret

000005c4 <pxPortInitialiseStack>:
     5c4:	fc 01       	movw	r30, r24
     5c6:	60 83       	st	Z, r22
     5c8:	31 97       	sbiw	r30, 0x01	; 1
     5ca:	70 83       	st	Z, r23
     5cc:	31 97       	sbiw	r30, 0x01	; 1
     5ce:	10 82       	st	Z, r1
     5d0:	31 97       	sbiw	r30, 0x01	; 1
     5d2:	10 82       	st	Z, r1
     5d4:	31 97       	sbiw	r30, 0x01	; 1
     5d6:	20 e8       	ldi	r18, 0x80	; 128
     5d8:	20 83       	st	Z, r18
     5da:	31 97       	sbiw	r30, 0x01	; 1
     5dc:	10 82       	st	Z, r1
     5de:	31 97       	sbiw	r30, 0x01	; 1
     5e0:	10 82       	st	Z, r1
     5e2:	31 97       	sbiw	r30, 0x01	; 1
     5e4:	10 82       	st	Z, r1
     5e6:	77 97       	sbiw	r30, 0x17	; 23
     5e8:	40 83       	st	Z, r20
     5ea:	31 97       	sbiw	r30, 0x01	; 1
     5ec:	50 83       	st	Z, r21
     5ee:	86 97       	sbiw	r24, 0x26	; 38
     5f0:	08 95       	ret

000005f2 <xPortStartScheduler>:
     5f2:	dc df       	rcall	.-72     	; 0x5ac <prvSetupTimerInterrupt>
     5f4:	a0 91 f1 0c 	lds	r26, 0x0CF1	; 0x800cf1 <pxCurrentTCB>
     5f8:	b0 91 f2 0c 	lds	r27, 0x0CF2	; 0x800cf2 <pxCurrentTCB+0x1>
     5fc:	cd 91       	ld	r28, X+
     5fe:	cd bf       	out	0x3d, r28	; 61
     600:	dd 91       	ld	r29, X+
     602:	de bf       	out	0x3e, r29	; 62
     604:	ff 91       	pop	r31
     606:	ef 91       	pop	r30
     608:	df 91       	pop	r29
     60a:	cf 91       	pop	r28
     60c:	bf 91       	pop	r27
     60e:	af 91       	pop	r26
     610:	9f 91       	pop	r25
     612:	8f 91       	pop	r24
     614:	7f 91       	pop	r23
     616:	6f 91       	pop	r22
     618:	5f 91       	pop	r21
     61a:	4f 91       	pop	r20
     61c:	3f 91       	pop	r19
     61e:	2f 91       	pop	r18
     620:	1f 91       	pop	r17
     622:	0f 91       	pop	r16
     624:	ff 90       	pop	r15
     626:	ef 90       	pop	r14
     628:	df 90       	pop	r13
     62a:	cf 90       	pop	r12
     62c:	bf 90       	pop	r11
     62e:	af 90       	pop	r10
     630:	9f 90       	pop	r9
     632:	8f 90       	pop	r8
     634:	7f 90       	pop	r7
     636:	6f 90       	pop	r6
     638:	5f 90       	pop	r5
     63a:	4f 90       	pop	r4
     63c:	3f 90       	pop	r3
     63e:	2f 90       	pop	r2
     640:	1f 90       	pop	r1
     642:	0f 90       	pop	r0
     644:	0c be       	out	0x3c, r0	; 60
     646:	0f 90       	pop	r0
     648:	0b be       	out	0x3b, r0	; 59
     64a:	0f 90       	pop	r0
     64c:	0f be       	out	0x3f, r0	; 63
     64e:	0f 90       	pop	r0
     650:	08 95       	ret
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	08 95       	ret

00000656 <vPortYield>:
     656:	0f 92       	push	r0
     658:	0f b6       	in	r0, 0x3f	; 63
     65a:	f8 94       	cli
     65c:	0f 92       	push	r0
     65e:	0b b6       	in	r0, 0x3b	; 59
     660:	0f 92       	push	r0
     662:	0c b6       	in	r0, 0x3c	; 60
     664:	0f 92       	push	r0
     666:	1f 92       	push	r1
     668:	11 24       	eor	r1, r1
     66a:	2f 92       	push	r2
     66c:	3f 92       	push	r3
     66e:	4f 92       	push	r4
     670:	5f 92       	push	r5
     672:	6f 92       	push	r6
     674:	7f 92       	push	r7
     676:	8f 92       	push	r8
     678:	9f 92       	push	r9
     67a:	af 92       	push	r10
     67c:	bf 92       	push	r11
     67e:	cf 92       	push	r12
     680:	df 92       	push	r13
     682:	ef 92       	push	r14
     684:	ff 92       	push	r15
     686:	0f 93       	push	r16
     688:	1f 93       	push	r17
     68a:	2f 93       	push	r18
     68c:	3f 93       	push	r19
     68e:	4f 93       	push	r20
     690:	5f 93       	push	r21
     692:	6f 93       	push	r22
     694:	7f 93       	push	r23
     696:	8f 93       	push	r24
     698:	9f 93       	push	r25
     69a:	af 93       	push	r26
     69c:	bf 93       	push	r27
     69e:	cf 93       	push	r28
     6a0:	df 93       	push	r29
     6a2:	ef 93       	push	r30
     6a4:	ff 93       	push	r31
     6a6:	a0 91 f1 0c 	lds	r26, 0x0CF1	; 0x800cf1 <pxCurrentTCB>
     6aa:	b0 91 f2 0c 	lds	r27, 0x0CF2	; 0x800cf2 <pxCurrentTCB+0x1>
     6ae:	0d b6       	in	r0, 0x3d	; 61
     6b0:	0d 92       	st	X+, r0
     6b2:	0e b6       	in	r0, 0x3e	; 62
     6b4:	0d 92       	st	X+, r0
     6b6:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <vTaskSwitchContext>
     6ba:	a0 91 f1 0c 	lds	r26, 0x0CF1	; 0x800cf1 <pxCurrentTCB>
     6be:	b0 91 f2 0c 	lds	r27, 0x0CF2	; 0x800cf2 <pxCurrentTCB+0x1>
     6c2:	cd 91       	ld	r28, X+
     6c4:	cd bf       	out	0x3d, r28	; 61
     6c6:	dd 91       	ld	r29, X+
     6c8:	de bf       	out	0x3e, r29	; 62
     6ca:	ff 91       	pop	r31
     6cc:	ef 91       	pop	r30
     6ce:	df 91       	pop	r29
     6d0:	cf 91       	pop	r28
     6d2:	bf 91       	pop	r27
     6d4:	af 91       	pop	r26
     6d6:	9f 91       	pop	r25
     6d8:	8f 91       	pop	r24
     6da:	7f 91       	pop	r23
     6dc:	6f 91       	pop	r22
     6de:	5f 91       	pop	r21
     6e0:	4f 91       	pop	r20
     6e2:	3f 91       	pop	r19
     6e4:	2f 91       	pop	r18
     6e6:	1f 91       	pop	r17
     6e8:	0f 91       	pop	r16
     6ea:	ff 90       	pop	r15
     6ec:	ef 90       	pop	r14
     6ee:	df 90       	pop	r13
     6f0:	cf 90       	pop	r12
     6f2:	bf 90       	pop	r11
     6f4:	af 90       	pop	r10
     6f6:	9f 90       	pop	r9
     6f8:	8f 90       	pop	r8
     6fa:	7f 90       	pop	r7
     6fc:	6f 90       	pop	r6
     6fe:	5f 90       	pop	r5
     700:	4f 90       	pop	r4
     702:	3f 90       	pop	r3
     704:	2f 90       	pop	r2
     706:	1f 90       	pop	r1
     708:	0f 90       	pop	r0
     70a:	0c be       	out	0x3c, r0	; 60
     70c:	0f 90       	pop	r0
     70e:	0b be       	out	0x3b, r0	; 59
     710:	0f 90       	pop	r0
     712:	0f be       	out	0x3f, r0	; 63
     714:	0f 90       	pop	r0
     716:	08 95       	ret

00000718 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     718:	0f 92       	push	r0
     71a:	0f b6       	in	r0, 0x3f	; 63
     71c:	f8 94       	cli
     71e:	0f 92       	push	r0
     720:	0b b6       	in	r0, 0x3b	; 59
     722:	0f 92       	push	r0
     724:	0c b6       	in	r0, 0x3c	; 60
     726:	0f 92       	push	r0
     728:	1f 92       	push	r1
     72a:	11 24       	eor	r1, r1
     72c:	2f 92       	push	r2
     72e:	3f 92       	push	r3
     730:	4f 92       	push	r4
     732:	5f 92       	push	r5
     734:	6f 92       	push	r6
     736:	7f 92       	push	r7
     738:	8f 92       	push	r8
     73a:	9f 92       	push	r9
     73c:	af 92       	push	r10
     73e:	bf 92       	push	r11
     740:	cf 92       	push	r12
     742:	df 92       	push	r13
     744:	ef 92       	push	r14
     746:	ff 92       	push	r15
     748:	0f 93       	push	r16
     74a:	1f 93       	push	r17
     74c:	2f 93       	push	r18
     74e:	3f 93       	push	r19
     750:	4f 93       	push	r20
     752:	5f 93       	push	r21
     754:	6f 93       	push	r22
     756:	7f 93       	push	r23
     758:	8f 93       	push	r24
     75a:	9f 93       	push	r25
     75c:	af 93       	push	r26
     75e:	bf 93       	push	r27
     760:	cf 93       	push	r28
     762:	df 93       	push	r29
     764:	ef 93       	push	r30
     766:	ff 93       	push	r31
     768:	a0 91 f1 0c 	lds	r26, 0x0CF1	; 0x800cf1 <pxCurrentTCB>
     76c:	b0 91 f2 0c 	lds	r27, 0x0CF2	; 0x800cf2 <pxCurrentTCB+0x1>
     770:	0d b6       	in	r0, 0x3d	; 61
     772:	0d 92       	st	X+, r0
     774:	0e b6       	in	r0, 0x3e	; 62
     776:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     778:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     77a:	7f d5       	rcall	.+2814   	; 0x127a <xTaskIncrementTick>
     77c:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     77e:	a0 d7       	rcall	.+3904   	; 0x16c0 <vTaskSwitchContext>
     780:	a0 91 f1 0c 	lds	r26, 0x0CF1	; 0x800cf1 <pxCurrentTCB>
    }
    portRESTORE_CONTEXT();
     784:	b0 91 f2 0c 	lds	r27, 0x0CF2	; 0x800cf2 <pxCurrentTCB+0x1>
     788:	cd 91       	ld	r28, X+
     78a:	cd bf       	out	0x3d, r28	; 61
     78c:	dd 91       	ld	r29, X+
     78e:	de bf       	out	0x3e, r29	; 62
     790:	ff 91       	pop	r31
     792:	ef 91       	pop	r30
     794:	df 91       	pop	r29
     796:	cf 91       	pop	r28
     798:	bf 91       	pop	r27
     79a:	af 91       	pop	r26
     79c:	9f 91       	pop	r25
     79e:	8f 91       	pop	r24
     7a0:	7f 91       	pop	r23
     7a2:	6f 91       	pop	r22
     7a4:	5f 91       	pop	r21
     7a6:	4f 91       	pop	r20
     7a8:	3f 91       	pop	r19
     7aa:	2f 91       	pop	r18
     7ac:	1f 91       	pop	r17
     7ae:	0f 91       	pop	r16
     7b0:	ff 90       	pop	r15
     7b2:	ef 90       	pop	r14
     7b4:	df 90       	pop	r13
     7b6:	cf 90       	pop	r12
     7b8:	bf 90       	pop	r11
     7ba:	af 90       	pop	r10
     7bc:	9f 90       	pop	r9
     7be:	8f 90       	pop	r8
     7c0:	7f 90       	pop	r7
     7c2:	6f 90       	pop	r6
     7c4:	5f 90       	pop	r5
     7c6:	4f 90       	pop	r4
     7c8:	3f 90       	pop	r3
     7ca:	2f 90       	pop	r2
     7cc:	1f 90       	pop	r1
     7ce:	0f 90       	pop	r0
     7d0:	0c be       	out	0x3c, r0	; 60
     7d2:	0f 90       	pop	r0
     7d4:	0b be       	out	0x3b, r0	; 59
     7d6:	0f 90       	pop	r0
     7d8:	0f be       	out	0x3f, r0	; 63
     7da:	0f 90       	pop	r0
     7dc:	08 95       	ret

000007de <__vector_12>:

    __asm__ __volatile__ ( "ret" );
     7de:	9c df       	rcall	.-200    	; 0x718 <vPortYieldFromTick>
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
        __asm__ __volatile__ ( "reti" );
     7e0:	18 95       	reti

000007e2 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	f8 94       	cli
     7e6:	0f 92       	push	r0
     7e8:	fc 01       	movw	r30, r24
     7ea:	86 8d       	ldd	r24, Z+30	; 0x1e
     7ec:	81 11       	cpse	r24, r1
     7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <prvIsQueueEmpty+0x12>
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	01 c0       	rjmp	.+2      	; 0x7f6 <prvIsQueueEmpty+0x14>
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	0f 90       	pop	r0
     7f8:	0f be       	out	0x3f, r0	; 63
     7fa:	08 95       	ret

000007fc <prvIsQueueFull>:
     7fc:	0f b6       	in	r0, 0x3f	; 63
     7fe:	f8 94       	cli
     800:	0f 92       	push	r0
     802:	fc 01       	movw	r30, r24
     804:	26 8d       	ldd	r18, Z+30	; 0x1e
     806:	87 8d       	ldd	r24, Z+31	; 0x1f
     808:	28 13       	cpse	r18, r24
     80a:	02 c0       	rjmp	.+4      	; 0x810 <prvIsQueueFull+0x14>
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	01 c0       	rjmp	.+2      	; 0x812 <prvIsQueueFull+0x16>
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	0f 90       	pop	r0
     814:	0f be       	out	0x3f, r0	; 63
     816:	08 95       	ret

00000818 <prvCopyDataToQueue>:
     818:	0f 93       	push	r16
     81a:	1f 93       	push	r17
     81c:	cf 93       	push	r28
     81e:	df 93       	push	r29
     820:	ec 01       	movw	r28, r24
     822:	04 2f       	mov	r16, r20
     824:	1e 8d       	ldd	r17, Y+30	; 0x1e
     826:	48 a1       	ldd	r20, Y+32	; 0x20
     828:	41 11       	cpse	r20, r1
     82a:	0c c0       	rjmp	.+24     	; 0x844 <prvCopyDataToQueue+0x2c>
     82c:	88 81       	ld	r24, Y
     82e:	99 81       	ldd	r25, Y+1	; 0x01
     830:	89 2b       	or	r24, r25
     832:	09 f0       	breq	.+2      	; 0x836 <prvCopyDataToQueue+0x1e>
     834:	42 c0       	rjmp	.+132    	; 0x8ba <prvCopyDataToQueue+0xa2>
     836:	8c 81       	ldd	r24, Y+4	; 0x04
     838:	9d 81       	ldd	r25, Y+5	; 0x05
     83a:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <xTaskPriorityDisinherit>
     83e:	1d 82       	std	Y+5, r1	; 0x05
     840:	1c 82       	std	Y+4, r1	; 0x04
     842:	42 c0       	rjmp	.+132    	; 0x8c8 <prvCopyDataToQueue+0xb0>
     844:	01 11       	cpse	r16, r1
     846:	17 c0       	rjmp	.+46     	; 0x876 <prvCopyDataToQueue+0x5e>
     848:	50 e0       	ldi	r21, 0x00	; 0
     84a:	8a 81       	ldd	r24, Y+2	; 0x02
     84c:	9b 81       	ldd	r25, Y+3	; 0x03
     84e:	0e 94 94 17 	call	0x2f28	; 0x2f28 <memcpy>
     852:	28 a1       	ldd	r18, Y+32	; 0x20
     854:	8a 81       	ldd	r24, Y+2	; 0x02
     856:	9b 81       	ldd	r25, Y+3	; 0x03
     858:	82 0f       	add	r24, r18
     85a:	91 1d       	adc	r25, r1
     85c:	9b 83       	std	Y+3, r25	; 0x03
     85e:	8a 83       	std	Y+2, r24	; 0x02
     860:	2c 81       	ldd	r18, Y+4	; 0x04
     862:	3d 81       	ldd	r19, Y+5	; 0x05
     864:	82 17       	cp	r24, r18
     866:	93 07       	cpc	r25, r19
     868:	50 f1       	brcs	.+84     	; 0x8be <prvCopyDataToQueue+0xa6>
     86a:	88 81       	ld	r24, Y
     86c:	99 81       	ldd	r25, Y+1	; 0x01
     86e:	9b 83       	std	Y+3, r25	; 0x03
     870:	8a 83       	std	Y+2, r24	; 0x02
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	29 c0       	rjmp	.+82     	; 0x8c8 <prvCopyDataToQueue+0xb0>
     876:	50 e0       	ldi	r21, 0x00	; 0
     878:	8e 81       	ldd	r24, Y+6	; 0x06
     87a:	9f 81       	ldd	r25, Y+7	; 0x07
     87c:	0e 94 94 17 	call	0x2f28	; 0x2f28 <memcpy>
     880:	88 a1       	ldd	r24, Y+32	; 0x20
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	91 95       	neg	r25
     886:	81 95       	neg	r24
     888:	91 09       	sbc	r25, r1
     88a:	2e 81       	ldd	r18, Y+6	; 0x06
     88c:	3f 81       	ldd	r19, Y+7	; 0x07
     88e:	28 0f       	add	r18, r24
     890:	39 1f       	adc	r19, r25
     892:	3f 83       	std	Y+7, r19	; 0x07
     894:	2e 83       	std	Y+6, r18	; 0x06
     896:	48 81       	ld	r20, Y
     898:	59 81       	ldd	r21, Y+1	; 0x01
     89a:	24 17       	cp	r18, r20
     89c:	35 07       	cpc	r19, r21
     89e:	30 f4       	brcc	.+12     	; 0x8ac <prvCopyDataToQueue+0x94>
     8a0:	2c 81       	ldd	r18, Y+4	; 0x04
     8a2:	3d 81       	ldd	r19, Y+5	; 0x05
     8a4:	82 0f       	add	r24, r18
     8a6:	93 1f       	adc	r25, r19
     8a8:	9f 83       	std	Y+7, r25	; 0x07
     8aa:	8e 83       	std	Y+6, r24	; 0x06
     8ac:	02 30       	cpi	r16, 0x02	; 2
     8ae:	49 f4       	brne	.+18     	; 0x8c2 <prvCopyDataToQueue+0xaa>
     8b0:	11 23       	and	r17, r17
     8b2:	49 f0       	breq	.+18     	; 0x8c6 <prvCopyDataToQueue+0xae>
     8b4:	11 50       	subi	r17, 0x01	; 1
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	07 c0       	rjmp	.+14     	; 0x8c8 <prvCopyDataToQueue+0xb0>
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	05 c0       	rjmp	.+10     	; 0x8c8 <prvCopyDataToQueue+0xb0>
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	03 c0       	rjmp	.+6      	; 0x8c8 <prvCopyDataToQueue+0xb0>
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	01 c0       	rjmp	.+2      	; 0x8c8 <prvCopyDataToQueue+0xb0>
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	1f 5f       	subi	r17, 0xFF	; 255
     8ca:	1e 8f       	std	Y+30, r17	; 0x1e
     8cc:	df 91       	pop	r29
     8ce:	cf 91       	pop	r28
     8d0:	1f 91       	pop	r17
     8d2:	0f 91       	pop	r16
     8d4:	08 95       	ret

000008d6 <prvCopyDataFromQueue>:
     8d6:	fc 01       	movw	r30, r24
     8d8:	40 a1       	ldd	r20, Z+32	; 0x20
     8da:	44 23       	and	r20, r20
     8dc:	a9 f0       	breq	.+42     	; 0x908 <prvCopyDataFromQueue+0x32>
     8de:	50 e0       	ldi	r21, 0x00	; 0
     8e0:	26 81       	ldd	r18, Z+6	; 0x06
     8e2:	37 81       	ldd	r19, Z+7	; 0x07
     8e4:	24 0f       	add	r18, r20
     8e6:	35 1f       	adc	r19, r21
     8e8:	37 83       	std	Z+7, r19	; 0x07
     8ea:	26 83       	std	Z+6, r18	; 0x06
     8ec:	84 81       	ldd	r24, Z+4	; 0x04
     8ee:	95 81       	ldd	r25, Z+5	; 0x05
     8f0:	28 17       	cp	r18, r24
     8f2:	39 07       	cpc	r19, r25
     8f4:	20 f0       	brcs	.+8      	; 0x8fe <prvCopyDataFromQueue+0x28>
     8f6:	80 81       	ld	r24, Z
     8f8:	91 81       	ldd	r25, Z+1	; 0x01
     8fa:	97 83       	std	Z+7, r25	; 0x07
     8fc:	86 83       	std	Z+6, r24	; 0x06
     8fe:	cb 01       	movw	r24, r22
     900:	66 81       	ldd	r22, Z+6	; 0x06
     902:	77 81       	ldd	r23, Z+7	; 0x07
     904:	0c 94 94 17 	jmp	0x2f28	; 0x2f28 <memcpy>
     908:	08 95       	ret

0000090a <prvUnlockQueue>:
     90a:	1f 93       	push	r17
     90c:	cf 93       	push	r28
     90e:	df 93       	push	r29
     910:	ec 01       	movw	r28, r24
     912:	0f b6       	in	r0, 0x3f	; 63
     914:	f8 94       	cli
     916:	0f 92       	push	r0
     918:	1a a1       	ldd	r17, Y+34	; 0x22
     91a:	0a c0       	rjmp	.+20     	; 0x930 <prvUnlockQueue+0x26>
     91c:	8b 89       	ldd	r24, Y+19	; 0x13
     91e:	88 23       	and	r24, r24
     920:	49 f0       	breq	.+18     	; 0x934 <prvUnlockQueue+0x2a>
     922:	ce 01       	movw	r24, r28
     924:	43 96       	adiw	r24, 0x13	; 19
     926:	97 d7       	rcall	.+3886   	; 0x1856 <xTaskRemoveFromEventList>
     928:	81 11       	cpse	r24, r1
     92a:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <vTaskMissedYield>
     92e:	11 50       	subi	r17, 0x01	; 1
     930:	11 16       	cp	r1, r17
     932:	a4 f3       	brlt	.-24     	; 0x91c <prvUnlockQueue+0x12>
     934:	8f ef       	ldi	r24, 0xFF	; 255
     936:	8a a3       	std	Y+34, r24	; 0x22
     938:	0f 90       	pop	r0
     93a:	0f be       	out	0x3f, r0	; 63
     93c:	0f b6       	in	r0, 0x3f	; 63
     93e:	f8 94       	cli
     940:	0f 92       	push	r0
     942:	19 a1       	ldd	r17, Y+33	; 0x21
     944:	0a c0       	rjmp	.+20     	; 0x95a <prvUnlockQueue+0x50>
     946:	88 85       	ldd	r24, Y+8	; 0x08
     948:	88 23       	and	r24, r24
     94a:	49 f0       	breq	.+18     	; 0x95e <prvUnlockQueue+0x54>
     94c:	ce 01       	movw	r24, r28
     94e:	08 96       	adiw	r24, 0x08	; 8
     950:	82 d7       	rcall	.+3844   	; 0x1856 <xTaskRemoveFromEventList>
     952:	81 11       	cpse	r24, r1
     954:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <vTaskMissedYield>
     958:	11 50       	subi	r17, 0x01	; 1
     95a:	11 16       	cp	r1, r17
     95c:	a4 f3       	brlt	.-24     	; 0x946 <prvUnlockQueue+0x3c>
     95e:	8f ef       	ldi	r24, 0xFF	; 255
     960:	89 a3       	std	Y+33, r24	; 0x21
     962:	0f 90       	pop	r0
     964:	0f be       	out	0x3f, r0	; 63
     966:	df 91       	pop	r29
     968:	cf 91       	pop	r28
     96a:	1f 91       	pop	r17
     96c:	08 95       	ret

0000096e <xQueueGenericReset>:
     96e:	cf 93       	push	r28
     970:	df 93       	push	r29
     972:	ec 01       	movw	r28, r24
     974:	0f b6       	in	r0, 0x3f	; 63
     976:	f8 94       	cli
     978:	0f 92       	push	r0
     97a:	e8 81       	ld	r30, Y
     97c:	f9 81       	ldd	r31, Y+1	; 0x01
     97e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     980:	28 a1       	ldd	r18, Y+32	; 0x20
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	82 9f       	mul	r24, r18
     988:	a0 01       	movw	r20, r0
     98a:	83 9f       	mul	r24, r19
     98c:	50 0d       	add	r21, r0
     98e:	92 9f       	mul	r25, r18
     990:	50 0d       	add	r21, r0
     992:	11 24       	eor	r1, r1
     994:	4e 0f       	add	r20, r30
     996:	5f 1f       	adc	r21, r31
     998:	5d 83       	std	Y+5, r21	; 0x05
     99a:	4c 83       	std	Y+4, r20	; 0x04
     99c:	1e 8e       	std	Y+30, r1	; 0x1e
     99e:	fb 83       	std	Y+3, r31	; 0x03
     9a0:	ea 83       	std	Y+2, r30	; 0x02
     9a2:	01 97       	sbiw	r24, 0x01	; 1
     9a4:	28 9f       	mul	r18, r24
     9a6:	a0 01       	movw	r20, r0
     9a8:	29 9f       	mul	r18, r25
     9aa:	50 0d       	add	r21, r0
     9ac:	38 9f       	mul	r19, r24
     9ae:	50 0d       	add	r21, r0
     9b0:	11 24       	eor	r1, r1
     9b2:	cf 01       	movw	r24, r30
     9b4:	84 0f       	add	r24, r20
     9b6:	95 1f       	adc	r25, r21
     9b8:	9f 83       	std	Y+7, r25	; 0x07
     9ba:	8e 83       	std	Y+6, r24	; 0x06
     9bc:	8f ef       	ldi	r24, 0xFF	; 255
     9be:	89 a3       	std	Y+33, r24	; 0x21
     9c0:	8a a3       	std	Y+34, r24	; 0x22
     9c2:	61 11       	cpse	r22, r1
     9c4:	0a c0       	rjmp	.+20     	; 0x9da <xQueueGenericReset+0x6c>
     9c6:	88 85       	ldd	r24, Y+8	; 0x08
     9c8:	88 23       	and	r24, r24
     9ca:	69 f0       	breq	.+26     	; 0x9e6 <xQueueGenericReset+0x78>
     9cc:	ce 01       	movw	r24, r28
     9ce:	08 96       	adiw	r24, 0x08	; 8
     9d0:	42 d7       	rcall	.+3716   	; 0x1856 <xTaskRemoveFromEventList>
     9d2:	88 23       	and	r24, r24
     9d4:	41 f0       	breq	.+16     	; 0x9e6 <xQueueGenericReset+0x78>
     9d6:	3f de       	rcall	.-898    	; 0x656 <vPortYield>
     9d8:	06 c0       	rjmp	.+12     	; 0x9e6 <xQueueGenericReset+0x78>
     9da:	ce 01       	movw	r24, r28
     9dc:	08 96       	adiw	r24, 0x08	; 8
     9de:	6d dd       	rcall	.-1318   	; 0x4ba <vListInitialise>
     9e0:	ce 01       	movw	r24, r28
     9e2:	43 96       	adiw	r24, 0x13	; 19
     9e4:	6a dd       	rcall	.-1324   	; 0x4ba <vListInitialise>
     9e6:	0f 90       	pop	r0
     9e8:	0f be       	out	0x3f, r0	; 63
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	df 91       	pop	r29
     9ee:	cf 91       	pop	r28
     9f0:	08 95       	ret

000009f2 <prvInitialiseNewQueue>:
     9f2:	0f 93       	push	r16
     9f4:	1f 93       	push	r17
     9f6:	f8 01       	movw	r30, r16
     9f8:	61 11       	cpse	r22, r1
     9fa:	03 c0       	rjmp	.+6      	; 0xa02 <prvInitialiseNewQueue+0x10>
     9fc:	11 83       	std	Z+1, r17	; 0x01
     9fe:	00 83       	st	Z, r16
     a00:	02 c0       	rjmp	.+4      	; 0xa06 <prvInitialiseNewQueue+0x14>
     a02:	51 83       	std	Z+1, r21	; 0x01
     a04:	40 83       	st	Z, r20
     a06:	87 8f       	std	Z+31, r24	; 0x1f
     a08:	60 a3       	std	Z+32, r22	; 0x20
     a0a:	61 e0       	ldi	r22, 0x01	; 1
     a0c:	cf 01       	movw	r24, r30
     a0e:	af df       	rcall	.-162    	; 0x96e <xQueueGenericReset>
     a10:	1f 91       	pop	r17
     a12:	0f 91       	pop	r16
     a14:	08 95       	ret

00000a16 <xQueueGenericCreate>:
     a16:	df 92       	push	r13
     a18:	ef 92       	push	r14
     a1a:	ff 92       	push	r15
     a1c:	0f 93       	push	r16
     a1e:	1f 93       	push	r17
     a20:	cf 93       	push	r28
     a22:	df 93       	push	r29
     a24:	f8 2e       	mov	r15, r24
     a26:	e6 2e       	mov	r14, r22
     a28:	d4 2e       	mov	r13, r20
     a2a:	86 9f       	mul	r24, r22
     a2c:	c0 01       	movw	r24, r0
     a2e:	11 24       	eor	r1, r1
     a30:	83 96       	adiw	r24, 0x23	; 35
     a32:	5f dc       	rcall	.-1858   	; 0x2f2 <pvPortMalloc>
     a34:	ec 01       	movw	r28, r24
     a36:	00 97       	sbiw	r24, 0x00	; 0
     a38:	41 f0       	breq	.+16     	; 0xa4a <xQueueGenericCreate+0x34>
     a3a:	8c 01       	movw	r16, r24
     a3c:	2d 2d       	mov	r18, r13
     a3e:	ac 01       	movw	r20, r24
     a40:	4d 5d       	subi	r20, 0xDD	; 221
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	6e 2d       	mov	r22, r14
     a46:	8f 2d       	mov	r24, r15
     a48:	d4 df       	rcall	.-88     	; 0x9f2 <prvInitialiseNewQueue>
     a4a:	ce 01       	movw	r24, r28
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	1f 91       	pop	r17
     a52:	0f 91       	pop	r16
     a54:	ff 90       	pop	r15
     a56:	ef 90       	pop	r14
     a58:	df 90       	pop	r13
     a5a:	08 95       	ret

00000a5c <xQueueGenericSend>:
     a5c:	cf 92       	push	r12
     a5e:	df 92       	push	r13
     a60:	ef 92       	push	r14
     a62:	ff 92       	push	r15
     a64:	0f 93       	push	r16
     a66:	1f 93       	push	r17
     a68:	cf 93       	push	r28
     a6a:	df 93       	push	r29
     a6c:	cd b7       	in	r28, 0x3d	; 61
     a6e:	de b7       	in	r29, 0x3e	; 62
     a70:	29 97       	sbiw	r28, 0x09	; 9
     a72:	0f b6       	in	r0, 0x3f	; 63
     a74:	f8 94       	cli
     a76:	de bf       	out	0x3e, r29	; 62
     a78:	0f be       	out	0x3f, r0	; 63
     a7a:	cd bf       	out	0x3d, r28	; 61
     a7c:	7c 01       	movw	r14, r24
     a7e:	6b 01       	movw	r12, r22
     a80:	2e 83       	std	Y+6, r18	; 0x06
     a82:	3f 83       	std	Y+7, r19	; 0x07
     a84:	48 87       	std	Y+8, r20	; 0x08
     a86:	59 87       	std	Y+9, r21	; 0x09
     a88:	10 e0       	ldi	r17, 0x00	; 0
     a8a:	0f b6       	in	r0, 0x3f	; 63
     a8c:	f8 94       	cli
     a8e:	0f 92       	push	r0
     a90:	f7 01       	movw	r30, r14
     a92:	96 8d       	ldd	r25, Z+30	; 0x1e
     a94:	87 8d       	ldd	r24, Z+31	; 0x1f
     a96:	98 17       	cp	r25, r24
     a98:	10 f0       	brcs	.+4      	; 0xa9e <xQueueGenericSend+0x42>
     a9a:	02 30       	cpi	r16, 0x02	; 2
     a9c:	a9 f4       	brne	.+42     	; 0xac8 <xQueueGenericSend+0x6c>
     a9e:	40 2f       	mov	r20, r16
     aa0:	b6 01       	movw	r22, r12
     aa2:	c7 01       	movw	r24, r14
     aa4:	b9 de       	rcall	.-654    	; 0x818 <prvCopyDataToQueue>
     aa6:	f7 01       	movw	r30, r14
     aa8:	93 89       	ldd	r25, Z+19	; 0x13
     aaa:	99 23       	and	r25, r25
     aac:	39 f0       	breq	.+14     	; 0xabc <xQueueGenericSend+0x60>
     aae:	c7 01       	movw	r24, r14
     ab0:	43 96       	adiw	r24, 0x13	; 19
     ab2:	d1 d6       	rcall	.+3490   	; 0x1856 <xTaskRemoveFromEventList>
     ab4:	88 23       	and	r24, r24
     ab6:	21 f0       	breq	.+8      	; 0xac0 <xQueueGenericSend+0x64>
     ab8:	ce dd       	rcall	.-1124   	; 0x656 <vPortYield>
     aba:	02 c0       	rjmp	.+4      	; 0xac0 <xQueueGenericSend+0x64>
     abc:	81 11       	cpse	r24, r1
     abe:	cb dd       	rcall	.-1130   	; 0x656 <vPortYield>
     ac0:	0f 90       	pop	r0
     ac2:	0f be       	out	0x3f, r0	; 63
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	46 c0       	rjmp	.+140    	; 0xb54 <xQueueGenericSend+0xf8>
     ac8:	8e 81       	ldd	r24, Y+6	; 0x06
     aca:	9f 81       	ldd	r25, Y+7	; 0x07
     acc:	a8 85       	ldd	r26, Y+8	; 0x08
     ace:	b9 85       	ldd	r27, Y+9	; 0x09
     ad0:	89 2b       	or	r24, r25
     ad2:	8a 2b       	or	r24, r26
     ad4:	8b 2b       	or	r24, r27
     ad6:	21 f4       	brne	.+8      	; 0xae0 <xQueueGenericSend+0x84>
     ad8:	0f 90       	pop	r0
     ada:	0f be       	out	0x3f, r0	; 63
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	3a c0       	rjmp	.+116    	; 0xb54 <xQueueGenericSend+0xf8>
     ae0:	11 11       	cpse	r17, r1
     ae2:	04 c0       	rjmp	.+8      	; 0xaec <xQueueGenericSend+0x90>
     ae4:	ce 01       	movw	r24, r28
     ae6:	01 96       	adiw	r24, 0x01	; 1
     ae8:	65 d7       	rcall	.+3786   	; 0x19b4 <vTaskInternalSetTimeOutState>
     aea:	11 e0       	ldi	r17, 0x01	; 1
     aec:	0f 90       	pop	r0
     aee:	0f be       	out	0x3f, r0	; 63
     af0:	b0 d3       	rcall	.+1888   	; 0x1252 <vTaskSuspendAll>
     af2:	0f b6       	in	r0, 0x3f	; 63
     af4:	f8 94       	cli
     af6:	0f 92       	push	r0
     af8:	f7 01       	movw	r30, r14
     afa:	81 a1       	ldd	r24, Z+33	; 0x21
     afc:	8f 3f       	cpi	r24, 0xFF	; 255
     afe:	09 f4       	brne	.+2      	; 0xb02 <xQueueGenericSend+0xa6>
     b00:	11 a2       	std	Z+33, r1	; 0x21
     b02:	f7 01       	movw	r30, r14
     b04:	82 a1       	ldd	r24, Z+34	; 0x22
     b06:	8f 3f       	cpi	r24, 0xFF	; 255
     b08:	09 f4       	brne	.+2      	; 0xb0c <xQueueGenericSend+0xb0>
     b0a:	12 a2       	std	Z+34, r1	; 0x22
     b0c:	0f 90       	pop	r0
     b0e:	0f be       	out	0x3f, r0	; 63
     b10:	be 01       	movw	r22, r28
     b12:	6a 5f       	subi	r22, 0xFA	; 250
     b14:	7f 4f       	sbci	r23, 0xFF	; 255
     b16:	ce 01       	movw	r24, r28
     b18:	01 96       	adiw	r24, 0x01	; 1
     b1a:	5d d7       	rcall	.+3770   	; 0x19d6 <xTaskCheckForTimeOut>
     b1c:	81 11       	cpse	r24, r1
     b1e:	16 c0       	rjmp	.+44     	; 0xb4c <xQueueGenericSend+0xf0>
     b20:	c7 01       	movw	r24, r14
     b22:	6c de       	rcall	.-808    	; 0x7fc <prvIsQueueFull>
     b24:	88 23       	and	r24, r24
     b26:	71 f0       	breq	.+28     	; 0xb44 <xQueueGenericSend+0xe8>
     b28:	4e 81       	ldd	r20, Y+6	; 0x06
     b2a:	5f 81       	ldd	r21, Y+7	; 0x07
     b2c:	68 85       	ldd	r22, Y+8	; 0x08
     b2e:	79 85       	ldd	r23, Y+9	; 0x09
     b30:	c7 01       	movw	r24, r14
     b32:	08 96       	adiw	r24, 0x08	; 8
     b34:	37 d6       	rcall	.+3182   	; 0x17a4 <vTaskPlaceOnEventList>
     b36:	c7 01       	movw	r24, r14
     b38:	e8 de       	rcall	.-560    	; 0x90a <prvUnlockQueue>
     b3a:	cb d4       	rcall	.+2454   	; 0x14d2 <xTaskResumeAll>
     b3c:	81 11       	cpse	r24, r1
     b3e:	a5 cf       	rjmp	.-182    	; 0xa8a <xQueueGenericSend+0x2e>
     b40:	8a dd       	rcall	.-1260   	; 0x656 <vPortYield>
     b42:	a3 cf       	rjmp	.-186    	; 0xa8a <xQueueGenericSend+0x2e>
     b44:	c7 01       	movw	r24, r14
     b46:	e1 de       	rcall	.-574    	; 0x90a <prvUnlockQueue>
     b48:	c4 d4       	rcall	.+2440   	; 0x14d2 <xTaskResumeAll>
     b4a:	9f cf       	rjmp	.-194    	; 0xa8a <xQueueGenericSend+0x2e>
     b4c:	c7 01       	movw	r24, r14
     b4e:	dd de       	rcall	.-582    	; 0x90a <prvUnlockQueue>
     b50:	c0 d4       	rcall	.+2432   	; 0x14d2 <xTaskResumeAll>
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	29 96       	adiw	r28, 0x09	; 9
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	1f 91       	pop	r17
     b66:	0f 91       	pop	r16
     b68:	ff 90       	pop	r15
     b6a:	ef 90       	pop	r14
     b6c:	df 90       	pop	r13
     b6e:	cf 90       	pop	r12
     b70:	08 95       	ret

00000b72 <xQueueGenericSendFromISR>:
     b72:	ef 92       	push	r14
     b74:	ff 92       	push	r15
     b76:	0f 93       	push	r16
     b78:	1f 93       	push	r17
     b7a:	cf 93       	push	r28
     b7c:	df 93       	push	r29
     b7e:	8a 01       	movw	r16, r20
     b80:	fc 01       	movw	r30, r24
     b82:	56 8d       	ldd	r21, Z+30	; 0x1e
     b84:	37 8d       	ldd	r19, Z+31	; 0x1f
     b86:	53 17       	cp	r21, r19
     b88:	10 f0       	brcs	.+4      	; 0xb8e <xQueueGenericSendFromISR+0x1c>
     b8a:	22 30       	cpi	r18, 0x02	; 2
     b8c:	f1 f4       	brne	.+60     	; 0xbca <xQueueGenericSendFromISR+0x58>
     b8e:	42 2f       	mov	r20, r18
     b90:	78 01       	movw	r14, r16
     b92:	ec 01       	movw	r28, r24
     b94:	1a a1       	ldd	r17, Y+34	; 0x22
     b96:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b98:	ce 01       	movw	r24, r28
     b9a:	3e de       	rcall	.-900    	; 0x818 <prvCopyDataToQueue>
     b9c:	1f 3f       	cpi	r17, 0xFF	; 255
     b9e:	79 f4       	brne	.+30     	; 0xbbe <xQueueGenericSendFromISR+0x4c>
     ba0:	8b 89       	ldd	r24, Y+19	; 0x13
     ba2:	88 23       	and	r24, r24
     ba4:	a1 f0       	breq	.+40     	; 0xbce <xQueueGenericSendFromISR+0x5c>
     ba6:	ce 01       	movw	r24, r28
     ba8:	43 96       	adiw	r24, 0x13	; 19
     baa:	55 d6       	rcall	.+3242   	; 0x1856 <xTaskRemoveFromEventList>
     bac:	88 23       	and	r24, r24
     bae:	89 f0       	breq	.+34     	; 0xbd2 <xQueueGenericSendFromISR+0x60>
     bb0:	e1 14       	cp	r14, r1
     bb2:	f1 04       	cpc	r15, r1
     bb4:	81 f0       	breq	.+32     	; 0xbd6 <xQueueGenericSendFromISR+0x64>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	f7 01       	movw	r30, r14
     bba:	80 83       	st	Z, r24
     bbc:	0d c0       	rjmp	.+26     	; 0xbd8 <xQueueGenericSendFromISR+0x66>
     bbe:	ff 24       	eor	r15, r15
     bc0:	f3 94       	inc	r15
     bc2:	f1 0e       	add	r15, r17
     bc4:	fa a2       	std	Y+34, r15	; 0x22
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	07 c0       	rjmp	.+14     	; 0xbd8 <xQueueGenericSendFromISR+0x66>
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	05 c0       	rjmp	.+10     	; 0xbd8 <xQueueGenericSendFromISR+0x66>
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	03 c0       	rjmp	.+6      	; 0xbd8 <xQueueGenericSendFromISR+0x66>
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	01 c0       	rjmp	.+2      	; 0xbd8 <xQueueGenericSendFromISR+0x66>
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	df 91       	pop	r29
     bda:	cf 91       	pop	r28
     bdc:	1f 91       	pop	r17
     bde:	0f 91       	pop	r16
     be0:	ff 90       	pop	r15
     be2:	ef 90       	pop	r14
     be4:	08 95       	ret

00000be6 <xQueueReceive>:
     be6:	cf 92       	push	r12
     be8:	df 92       	push	r13
     bea:	ef 92       	push	r14
     bec:	ff 92       	push	r15
     bee:	0f 93       	push	r16
     bf0:	1f 93       	push	r17
     bf2:	cf 93       	push	r28
     bf4:	df 93       	push	r29
     bf6:	cd b7       	in	r28, 0x3d	; 61
     bf8:	de b7       	in	r29, 0x3e	; 62
     bfa:	29 97       	sbiw	r28, 0x09	; 9
     bfc:	0f b6       	in	r0, 0x3f	; 63
     bfe:	f8 94       	cli
     c00:	de bf       	out	0x3e, r29	; 62
     c02:	0f be       	out	0x3f, r0	; 63
     c04:	cd bf       	out	0x3d, r28	; 61
     c06:	8c 01       	movw	r16, r24
     c08:	6b 01       	movw	r12, r22
     c0a:	2e 83       	std	Y+6, r18	; 0x06
     c0c:	3f 83       	std	Y+7, r19	; 0x07
     c0e:	48 87       	std	Y+8, r20	; 0x08
     c10:	59 87       	std	Y+9, r21	; 0x09
     c12:	e1 2c       	mov	r14, r1
     c14:	0f b6       	in	r0, 0x3f	; 63
     c16:	f8 94       	cli
     c18:	0f 92       	push	r0
     c1a:	f8 01       	movw	r30, r16
     c1c:	f6 8c       	ldd	r15, Z+30	; 0x1e
     c1e:	ff 20       	and	r15, r15
     c20:	91 f0       	breq	.+36     	; 0xc46 <xQueueReceive+0x60>
     c22:	b6 01       	movw	r22, r12
     c24:	c8 01       	movw	r24, r16
     c26:	57 de       	rcall	.-850    	; 0x8d6 <prvCopyDataFromQueue>
     c28:	fa 94       	dec	r15
     c2a:	f8 01       	movw	r30, r16
     c2c:	f6 8e       	std	Z+30, r15	; 0x1e
     c2e:	80 85       	ldd	r24, Z+8	; 0x08
     c30:	88 23       	and	r24, r24
     c32:	29 f0       	breq	.+10     	; 0xc3e <xQueueReceive+0x58>
     c34:	c8 01       	movw	r24, r16
     c36:	08 96       	adiw	r24, 0x08	; 8
     c38:	0e d6       	rcall	.+3100   	; 0x1856 <xTaskRemoveFromEventList>
     c3a:	81 11       	cpse	r24, r1
     c3c:	0c dd       	rcall	.-1512   	; 0x656 <vPortYield>
     c3e:	0f 90       	pop	r0
     c40:	0f be       	out	0x3f, r0	; 63
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	4c c0       	rjmp	.+152    	; 0xcde <xQueueReceive+0xf8>
     c46:	8e 81       	ldd	r24, Y+6	; 0x06
     c48:	9f 81       	ldd	r25, Y+7	; 0x07
     c4a:	a8 85       	ldd	r26, Y+8	; 0x08
     c4c:	b9 85       	ldd	r27, Y+9	; 0x09
     c4e:	89 2b       	or	r24, r25
     c50:	8a 2b       	or	r24, r26
     c52:	8b 2b       	or	r24, r27
     c54:	21 f4       	brne	.+8      	; 0xc5e <xQueueReceive+0x78>
     c56:	0f 90       	pop	r0
     c58:	0f be       	out	0x3f, r0	; 63
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	40 c0       	rjmp	.+128    	; 0xcde <xQueueReceive+0xf8>
     c5e:	e1 10       	cpse	r14, r1
     c60:	05 c0       	rjmp	.+10     	; 0xc6c <xQueueReceive+0x86>
     c62:	ce 01       	movw	r24, r28
     c64:	01 96       	adiw	r24, 0x01	; 1
     c66:	a6 d6       	rcall	.+3404   	; 0x19b4 <vTaskInternalSetTimeOutState>
     c68:	ee 24       	eor	r14, r14
     c6a:	e3 94       	inc	r14
     c6c:	0f 90       	pop	r0
     c6e:	0f be       	out	0x3f, r0	; 63
     c70:	f0 d2       	rcall	.+1504   	; 0x1252 <vTaskSuspendAll>
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	0f 92       	push	r0
     c78:	f8 01       	movw	r30, r16
     c7a:	81 a1       	ldd	r24, Z+33	; 0x21
     c7c:	8f 3f       	cpi	r24, 0xFF	; 255
     c7e:	09 f4       	brne	.+2      	; 0xc82 <xQueueReceive+0x9c>
     c80:	11 a2       	std	Z+33, r1	; 0x21
     c82:	f8 01       	movw	r30, r16
     c84:	82 a1       	ldd	r24, Z+34	; 0x22
     c86:	8f 3f       	cpi	r24, 0xFF	; 255
     c88:	09 f4       	brne	.+2      	; 0xc8c <xQueueReceive+0xa6>
     c8a:	12 a2       	std	Z+34, r1	; 0x22
     c8c:	0f 90       	pop	r0
     c8e:	0f be       	out	0x3f, r0	; 63
     c90:	be 01       	movw	r22, r28
     c92:	6a 5f       	subi	r22, 0xFA	; 250
     c94:	7f 4f       	sbci	r23, 0xFF	; 255
     c96:	ce 01       	movw	r24, r28
     c98:	01 96       	adiw	r24, 0x01	; 1
     c9a:	9d d6       	rcall	.+3386   	; 0x19d6 <xTaskCheckForTimeOut>
     c9c:	81 11       	cpse	r24, r1
     c9e:	16 c0       	rjmp	.+44     	; 0xccc <xQueueReceive+0xe6>
     ca0:	c8 01       	movw	r24, r16
     ca2:	9f dd       	rcall	.-1218   	; 0x7e2 <prvIsQueueEmpty>
     ca4:	88 23       	and	r24, r24
     ca6:	71 f0       	breq	.+28     	; 0xcc4 <xQueueReceive+0xde>
     ca8:	4e 81       	ldd	r20, Y+6	; 0x06
     caa:	5f 81       	ldd	r21, Y+7	; 0x07
     cac:	68 85       	ldd	r22, Y+8	; 0x08
     cae:	79 85       	ldd	r23, Y+9	; 0x09
     cb0:	c8 01       	movw	r24, r16
     cb2:	43 96       	adiw	r24, 0x13	; 19
     cb4:	77 d5       	rcall	.+2798   	; 0x17a4 <vTaskPlaceOnEventList>
     cb6:	c8 01       	movw	r24, r16
     cb8:	28 de       	rcall	.-944    	; 0x90a <prvUnlockQueue>
     cba:	0b d4       	rcall	.+2070   	; 0x14d2 <xTaskResumeAll>
     cbc:	81 11       	cpse	r24, r1
     cbe:	aa cf       	rjmp	.-172    	; 0xc14 <xQueueReceive+0x2e>
     cc0:	ca dc       	rcall	.-1644   	; 0x656 <vPortYield>
     cc2:	a8 cf       	rjmp	.-176    	; 0xc14 <xQueueReceive+0x2e>
     cc4:	c8 01       	movw	r24, r16
     cc6:	21 de       	rcall	.-958    	; 0x90a <prvUnlockQueue>
     cc8:	04 d4       	rcall	.+2056   	; 0x14d2 <xTaskResumeAll>
     cca:	a4 cf       	rjmp	.-184    	; 0xc14 <xQueueReceive+0x2e>
     ccc:	c8 01       	movw	r24, r16
     cce:	1d de       	rcall	.-966    	; 0x90a <prvUnlockQueue>
     cd0:	00 d4       	rcall	.+2048   	; 0x14d2 <xTaskResumeAll>
     cd2:	c8 01       	movw	r24, r16
     cd4:	86 dd       	rcall	.-1268   	; 0x7e2 <prvIsQueueEmpty>
     cd6:	88 23       	and	r24, r24
     cd8:	09 f4       	brne	.+2      	; 0xcdc <xQueueReceive+0xf6>
     cda:	9c cf       	rjmp	.-200    	; 0xc14 <xQueueReceive+0x2e>
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	29 96       	adiw	r28, 0x09	; 9
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	cd bf       	out	0x3d, r28	; 61
     cea:	df 91       	pop	r29
     cec:	cf 91       	pop	r28
     cee:	1f 91       	pop	r17
     cf0:	0f 91       	pop	r16
     cf2:	ff 90       	pop	r15
     cf4:	ef 90       	pop	r14
     cf6:	df 90       	pop	r13
     cf8:	cf 90       	pop	r12
     cfa:	08 95       	ret

00000cfc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     cfc:	cf 93       	push	r28
     cfe:	df 93       	push	r29
     d00:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	f8 94       	cli
     d06:	0f 92       	push	r0
     d08:	89 a1       	ldd	r24, Y+33	; 0x21
     d0a:	8f 3f       	cpi	r24, 0xFF	; 255
     d0c:	09 f4       	brne	.+2      	; 0xd10 <vQueueWaitForMessageRestricted+0x14>
     d0e:	19 a2       	std	Y+33, r1	; 0x21
     d10:	8a a1       	ldd	r24, Y+34	; 0x22
     d12:	8f 3f       	cpi	r24, 0xFF	; 255
     d14:	09 f4       	brne	.+2      	; 0xd18 <vQueueWaitForMessageRestricted+0x1c>
     d16:	1a a2       	std	Y+34, r1	; 0x22
     d18:	0f 90       	pop	r0
     d1a:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     d1c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d1e:	81 11       	cpse	r24, r1
     d20:	03 c0       	rjmp	.+6      	; 0xd28 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     d22:	ce 01       	movw	r24, r28
     d24:	43 96       	adiw	r24, 0x13	; 19
     d26:	55 d5       	rcall	.+2730   	; 0x17d2 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     d28:	ce 01       	movw	r24, r28
     d2a:	ef dd       	rcall	.-1058   	; 0x90a <prvUnlockQueue>
    }
     d2c:	df 91       	pop	r29
     d2e:	cf 91       	pop	r28
     d30:	08 95       	ret

00000d32 <prvResetNextTaskUnblockTime>:
     d32:	e0 91 6b 0c 	lds	r30, 0x0C6B	; 0x800c6b <pxDelayedTaskList>
     d36:	f0 91 6c 0c 	lds	r31, 0x0C6C	; 0x800c6c <pxDelayedTaskList+0x1>
     d3a:	80 81       	ld	r24, Z
     d3c:	81 11       	cpse	r24, r1
     d3e:	0c c0       	rjmp	.+24     	; 0xd58 <prvResetNextTaskUnblockTime+0x26>
     d40:	8f ef       	ldi	r24, 0xFF	; 255
     d42:	9f ef       	ldi	r25, 0xFF	; 255
     d44:	dc 01       	movw	r26, r24
     d46:	80 93 35 0c 	sts	0x0C35, r24	; 0x800c35 <xNextTaskUnblockTime>
     d4a:	90 93 36 0c 	sts	0x0C36, r25	; 0x800c36 <xNextTaskUnblockTime+0x1>
     d4e:	a0 93 37 0c 	sts	0x0C37, r26	; 0x800c37 <xNextTaskUnblockTime+0x2>
     d52:	b0 93 38 0c 	sts	0x0C38, r27	; 0x800c38 <xNextTaskUnblockTime+0x3>
     d56:	08 95       	ret
     d58:	e0 91 6b 0c 	lds	r30, 0x0C6B	; 0x800c6b <pxDelayedTaskList>
     d5c:	f0 91 6c 0c 	lds	r31, 0x0C6C	; 0x800c6c <pxDelayedTaskList+0x1>
     d60:	07 80       	ldd	r0, Z+7	; 0x07
     d62:	f0 85       	ldd	r31, Z+8	; 0x08
     d64:	e0 2d       	mov	r30, r0
     d66:	80 81       	ld	r24, Z
     d68:	91 81       	ldd	r25, Z+1	; 0x01
     d6a:	a2 81       	ldd	r26, Z+2	; 0x02
     d6c:	b3 81       	ldd	r27, Z+3	; 0x03
     d6e:	80 93 35 0c 	sts	0x0C35, r24	; 0x800c35 <xNextTaskUnblockTime>
     d72:	90 93 36 0c 	sts	0x0C36, r25	; 0x800c36 <xNextTaskUnblockTime+0x1>
     d76:	a0 93 37 0c 	sts	0x0C37, r26	; 0x800c37 <xNextTaskUnblockTime+0x2>
     d7a:	b0 93 38 0c 	sts	0x0C38, r27	; 0x800c38 <xNextTaskUnblockTime+0x3>
     d7e:	08 95       	ret

00000d80 <prvDeleteTCB>:
     d80:	cf 93       	push	r28
     d82:	df 93       	push	r29
     d84:	ec 01       	movw	r28, r24
     d86:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d88:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d8a:	5b db       	rcall	.-2378   	; 0x442 <vPortFree>
     d8c:	ce 01       	movw	r24, r28
     d8e:	59 db       	rcall	.-2382   	; 0x442 <vPortFree>
     d90:	df 91       	pop	r29
     d92:	cf 91       	pop	r28
     d94:	08 95       	ret

00000d96 <prvInitialiseNewTask>:
     d96:	4f 92       	push	r4
     d98:	5f 92       	push	r5
     d9a:	6f 92       	push	r6
     d9c:	7f 92       	push	r7
     d9e:	8f 92       	push	r8
     da0:	9f 92       	push	r9
     da2:	af 92       	push	r10
     da4:	bf 92       	push	r11
     da6:	cf 92       	push	r12
     da8:	df 92       	push	r13
     daa:	ef 92       	push	r14
     dac:	ff 92       	push	r15
     dae:	0f 93       	push	r16
     db0:	cf 93       	push	r28
     db2:	df 93       	push	r29
     db4:	2c 01       	movw	r4, r24
     db6:	5b 01       	movw	r10, r22
     db8:	4a 01       	movw	r8, r20
     dba:	39 01       	movw	r6, r18
     dbc:	e6 01       	movw	r28, r12
     dbe:	65 ea       	ldi	r22, 0xA5	; 165
     dc0:	70 e0       	ldi	r23, 0x00	; 0
     dc2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dc4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dc6:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <memset>
     dca:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dcc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dce:	21 e0       	ldi	r18, 0x01	; 1
     dd0:	82 1a       	sub	r8, r18
     dd2:	91 08       	sbc	r9, r1
     dd4:	88 0e       	add	r8, r24
     dd6:	99 1e       	adc	r9, r25
     dd8:	a1 14       	cp	r10, r1
     dda:	b1 04       	cpc	r11, r1
     ddc:	89 f4       	brne	.+34     	; 0xe00 <prvInitialiseNewTask+0x6a>
     dde:	15 c0       	rjmp	.+42     	; 0xe0a <prvInitialiseNewTask+0x74>
     de0:	82 2f       	mov	r24, r18
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	f5 01       	movw	r30, r10
     de6:	e8 0f       	add	r30, r24
     de8:	f9 1f       	adc	r31, r25
     dea:	30 81       	ld	r19, Z
     dec:	de 01       	movw	r26, r28
     dee:	a8 0f       	add	r26, r24
     df0:	b9 1f       	adc	r27, r25
     df2:	5d 96       	adiw	r26, 0x1d	; 29
     df4:	3c 93       	st	X, r19
     df6:	80 81       	ld	r24, Z
     df8:	88 23       	and	r24, r24
     dfa:	29 f0       	breq	.+10     	; 0xe06 <prvInitialiseNewTask+0x70>
     dfc:	2f 5f       	subi	r18, 0xFF	; 255
     dfe:	01 c0       	rjmp	.+2      	; 0xe02 <prvInitialiseNewTask+0x6c>
     e00:	20 e0       	ldi	r18, 0x00	; 0
     e02:	20 31       	cpi	r18, 0x10	; 16
     e04:	68 f3       	brcs	.-38     	; 0xde0 <prvInitialiseNewTask+0x4a>
     e06:	1c a6       	std	Y+44, r1	; 0x2c
     e08:	01 c0       	rjmp	.+2      	; 0xe0c <prvInitialiseNewTask+0x76>
     e0a:	1d 8e       	std	Y+29, r1	; 0x1d
     e0c:	0a 30       	cpi	r16, 0x0A	; 10
     e0e:	08 f0       	brcs	.+2      	; 0xe12 <prvInitialiseNewTask+0x7c>
     e10:	09 e0       	ldi	r16, 0x09	; 9
     e12:	0a 8f       	std	Y+26, r16	; 0x1a
     e14:	0d a7       	std	Y+45, r16	; 0x2d
     e16:	1e a6       	std	Y+46, r1	; 0x2e
     e18:	ce 01       	movw	r24, r28
     e1a:	02 96       	adiw	r24, 0x02	; 2
     e1c:	5f db       	rcall	.-2370   	; 0x4dc <vListInitialiseItem>
     e1e:	ce 01       	movw	r24, r28
     e20:	0e 96       	adiw	r24, 0x0e	; 14
     e22:	5c db       	rcall	.-2376   	; 0x4dc <vListInitialiseItem>
     e24:	db 87       	std	Y+11, r29	; 0x0b
     e26:	ca 87       	std	Y+10, r28	; 0x0a
     e28:	8a e0       	ldi	r24, 0x0A	; 10
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	a0 e0       	ldi	r26, 0x00	; 0
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	80 1b       	sub	r24, r16
     e32:	91 09       	sbc	r25, r1
     e34:	a1 09       	sbc	r26, r1
     e36:	b1 09       	sbc	r27, r1
     e38:	8e 87       	std	Y+14, r24	; 0x0e
     e3a:	9f 87       	std	Y+15, r25	; 0x0f
     e3c:	a8 8b       	std	Y+16, r26	; 0x10
     e3e:	b9 8b       	std	Y+17, r27	; 0x11
     e40:	df 8b       	std	Y+23, r29	; 0x17
     e42:	ce 8b       	std	Y+22, r28	; 0x16
     e44:	18 aa       	std	Y+48, r1	; 0x30
     e46:	1f a6       	std	Y+47, r1	; 0x2f
     e48:	84 e0       	ldi	r24, 0x04	; 4
     e4a:	fe 01       	movw	r30, r28
     e4c:	f1 96       	adiw	r30, 0x31	; 49
     e4e:	df 01       	movw	r26, r30
     e50:	1d 92       	st	X+, r1
     e52:	8a 95       	dec	r24
     e54:	e9 f7       	brne	.-6      	; 0xe50 <prvInitialiseNewTask+0xba>
     e56:	1d aa       	std	Y+53, r1	; 0x35
     e58:	a3 01       	movw	r20, r6
     e5a:	b2 01       	movw	r22, r4
     e5c:	c4 01       	movw	r24, r8
     e5e:	b2 db       	rcall	.-2204   	; 0x5c4 <pxPortInitialiseStack>
     e60:	99 83       	std	Y+1, r25	; 0x01
     e62:	88 83       	st	Y, r24
     e64:	e1 14       	cp	r14, r1
     e66:	f1 04       	cpc	r15, r1
     e68:	19 f0       	breq	.+6      	; 0xe70 <prvInitialiseNewTask+0xda>
     e6a:	f7 01       	movw	r30, r14
     e6c:	d1 83       	std	Z+1, r29	; 0x01
     e6e:	c0 83       	st	Z, r28
     e70:	df 91       	pop	r29
     e72:	cf 91       	pop	r28
     e74:	0f 91       	pop	r16
     e76:	ff 90       	pop	r15
     e78:	ef 90       	pop	r14
     e7a:	df 90       	pop	r13
     e7c:	cf 90       	pop	r12
     e7e:	bf 90       	pop	r11
     e80:	af 90       	pop	r10
     e82:	9f 90       	pop	r9
     e84:	8f 90       	pop	r8
     e86:	7f 90       	pop	r7
     e88:	6f 90       	pop	r6
     e8a:	5f 90       	pop	r5
     e8c:	4f 90       	pop	r4
     e8e:	08 95       	ret

00000e90 <prvInitialiseTaskLists>:
     e90:	cf 93       	push	r28
     e92:	c0 e0       	ldi	r28, 0x00	; 0
     e94:	08 c0       	rjmp	.+16     	; 0xea6 <prvInitialiseTaskLists+0x16>
     e96:	2b e0       	ldi	r18, 0x0B	; 11
     e98:	c2 9f       	mul	r28, r18
     e9a:	c0 01       	movw	r24, r0
     e9c:	11 24       	eor	r1, r1
     e9e:	8d 57       	subi	r24, 0x7D	; 125
     ea0:	93 4f       	sbci	r25, 0xF3	; 243
     ea2:	0b db       	rcall	.-2538   	; 0x4ba <vListInitialise>
     ea4:	cf 5f       	subi	r28, 0xFF	; 255
     ea6:	ca 30       	cpi	r28, 0x0A	; 10
     ea8:	b0 f3       	brcs	.-20     	; 0xe96 <prvInitialiseTaskLists+0x6>
     eaa:	88 e7       	ldi	r24, 0x78	; 120
     eac:	9c e0       	ldi	r25, 0x0C	; 12
     eae:	05 db       	rcall	.-2550   	; 0x4ba <vListInitialise>
     eb0:	8d e6       	ldi	r24, 0x6D	; 109
     eb2:	9c e0       	ldi	r25, 0x0C	; 12
     eb4:	02 db       	rcall	.-2556   	; 0x4ba <vListInitialise>
     eb6:	8e e5       	ldi	r24, 0x5E	; 94
     eb8:	9c e0       	ldi	r25, 0x0C	; 12
     eba:	ff da       	rcall	.-2562   	; 0x4ba <vListInitialise>
     ebc:	83 e5       	ldi	r24, 0x53	; 83
     ebe:	9c e0       	ldi	r25, 0x0C	; 12
     ec0:	fc da       	rcall	.-2568   	; 0x4ba <vListInitialise>
     ec2:	87 e4       	ldi	r24, 0x47	; 71
     ec4:	9c e0       	ldi	r25, 0x0C	; 12
     ec6:	f9 da       	rcall	.-2574   	; 0x4ba <vListInitialise>
     ec8:	88 e7       	ldi	r24, 0x78	; 120
     eca:	9c e0       	ldi	r25, 0x0C	; 12
     ecc:	90 93 6c 0c 	sts	0x0C6C, r25	; 0x800c6c <pxDelayedTaskList+0x1>
     ed0:	80 93 6b 0c 	sts	0x0C6B, r24	; 0x800c6b <pxDelayedTaskList>
     ed4:	8d e6       	ldi	r24, 0x6D	; 109
     ed6:	9c e0       	ldi	r25, 0x0C	; 12
     ed8:	90 93 6a 0c 	sts	0x0C6A, r25	; 0x800c6a <pxOverflowDelayedTaskList+0x1>
     edc:	80 93 69 0c 	sts	0x0C69, r24	; 0x800c69 <pxOverflowDelayedTaskList>
     ee0:	cf 91       	pop	r28
     ee2:	08 95       	ret

00000ee4 <prvAddNewTaskToReadyList>:
     ee4:	cf 93       	push	r28
     ee6:	df 93       	push	r29
     ee8:	ec 01       	movw	r28, r24
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	f8 94       	cli
     eee:	0f 92       	push	r0
     ef0:	80 91 46 0c 	lds	r24, 0x0C46	; 0x800c46 <uxCurrentNumberOfTasks>
     ef4:	8f 5f       	subi	r24, 0xFF	; 255
     ef6:	80 93 46 0c 	sts	0x0C46, r24	; 0x800c46 <uxCurrentNumberOfTasks>
     efa:	80 91 f1 0c 	lds	r24, 0x0CF1	; 0x800cf1 <pxCurrentTCB>
     efe:	90 91 f2 0c 	lds	r25, 0x0CF2	; 0x800cf2 <pxCurrentTCB+0x1>
     f02:	89 2b       	or	r24, r25
     f04:	51 f4       	brne	.+20     	; 0xf1a <prvAddNewTaskToReadyList+0x36>
     f06:	d0 93 f2 0c 	sts	0x0CF2, r29	; 0x800cf2 <pxCurrentTCB+0x1>
     f0a:	c0 93 f1 0c 	sts	0x0CF1, r28	; 0x800cf1 <pxCurrentTCB>
     f0e:	80 91 46 0c 	lds	r24, 0x0C46	; 0x800c46 <uxCurrentNumberOfTasks>
     f12:	81 30       	cpi	r24, 0x01	; 1
     f14:	91 f4       	brne	.+36     	; 0xf3a <prvAddNewTaskToReadyList+0x56>
     f16:	bc df       	rcall	.-136    	; 0xe90 <prvInitialiseTaskLists>
     f18:	10 c0       	rjmp	.+32     	; 0xf3a <prvAddNewTaskToReadyList+0x56>
     f1a:	80 91 40 0c 	lds	r24, 0x0C40	; 0x800c40 <xSchedulerRunning>
     f1e:	81 11       	cpse	r24, r1
     f20:	0c c0       	rjmp	.+24     	; 0xf3a <prvAddNewTaskToReadyList+0x56>
     f22:	e0 91 f1 0c 	lds	r30, 0x0CF1	; 0x800cf1 <pxCurrentTCB>
     f26:	f0 91 f2 0c 	lds	r31, 0x0CF2	; 0x800cf2 <pxCurrentTCB+0x1>
     f2a:	92 8d       	ldd	r25, Z+26	; 0x1a
     f2c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f2e:	89 17       	cp	r24, r25
     f30:	20 f0       	brcs	.+8      	; 0xf3a <prvAddNewTaskToReadyList+0x56>
     f32:	d0 93 f2 0c 	sts	0x0CF2, r29	; 0x800cf2 <pxCurrentTCB+0x1>
     f36:	c0 93 f1 0c 	sts	0x0CF1, r28	; 0x800cf1 <pxCurrentTCB>
     f3a:	80 91 39 0c 	lds	r24, 0x0C39	; 0x800c39 <uxTaskNumber>
     f3e:	8f 5f       	subi	r24, 0xFF	; 255
     f40:	80 93 39 0c 	sts	0x0C39, r24	; 0x800c39 <uxTaskNumber>
     f44:	ea 8d       	ldd	r30, Y+26	; 0x1a
     f46:	80 91 41 0c 	lds	r24, 0x0C41	; 0x800c41 <uxTopReadyPriority>
     f4a:	8e 17       	cp	r24, r30
     f4c:	10 f4       	brcc	.+4      	; 0xf52 <prvAddNewTaskToReadyList+0x6e>
     f4e:	e0 93 41 0c 	sts	0x0C41, r30	; 0x800c41 <uxTopReadyPriority>
     f52:	8b e0       	ldi	r24, 0x0B	; 11
     f54:	8e 9f       	mul	r24, r30
     f56:	f0 01       	movw	r30, r0
     f58:	11 24       	eor	r1, r1
     f5a:	ed 57       	subi	r30, 0x7D	; 125
     f5c:	f3 4f       	sbci	r31, 0xF3	; 243
     f5e:	01 80       	ldd	r0, Z+1	; 0x01
     f60:	f2 81       	ldd	r31, Z+2	; 0x02
     f62:	e0 2d       	mov	r30, r0
     f64:	ff 83       	std	Y+7, r31	; 0x07
     f66:	ee 83       	std	Y+6, r30	; 0x06
     f68:	26 81       	ldd	r18, Z+6	; 0x06
     f6a:	37 81       	ldd	r19, Z+7	; 0x07
     f6c:	39 87       	std	Y+9, r19	; 0x09
     f6e:	28 87       	std	Y+8, r18	; 0x08
     f70:	a6 81       	ldd	r26, Z+6	; 0x06
     f72:	b7 81       	ldd	r27, Z+7	; 0x07
     f74:	9e 01       	movw	r18, r28
     f76:	2e 5f       	subi	r18, 0xFE	; 254
     f78:	3f 4f       	sbci	r19, 0xFF	; 255
     f7a:	15 96       	adiw	r26, 0x05	; 5
     f7c:	3c 93       	st	X, r19
     f7e:	2e 93       	st	-X, r18
     f80:	14 97       	sbiw	r26, 0x04	; 4
     f82:	37 83       	std	Z+7, r19	; 0x07
     f84:	26 83       	std	Z+6, r18	; 0x06
     f86:	ea 8d       	ldd	r30, Y+26	; 0x1a
     f88:	8e 9f       	mul	r24, r30
     f8a:	f0 01       	movw	r30, r0
     f8c:	11 24       	eor	r1, r1
     f8e:	ed 57       	subi	r30, 0x7D	; 125
     f90:	f3 4f       	sbci	r31, 0xF3	; 243
     f92:	fd 87       	std	Y+13, r31	; 0x0d
     f94:	ec 87       	std	Y+12, r30	; 0x0c
     f96:	80 81       	ld	r24, Z
     f98:	8f 5f       	subi	r24, 0xFF	; 255
     f9a:	80 83       	st	Z, r24
     f9c:	0f 90       	pop	r0
     f9e:	0f be       	out	0x3f, r0	; 63
     fa0:	80 91 40 0c 	lds	r24, 0x0C40	; 0x800c40 <xSchedulerRunning>
     fa4:	88 23       	and	r24, r24
     fa6:	49 f0       	breq	.+18     	; 0xfba <prvAddNewTaskToReadyList+0xd6>
     fa8:	e0 91 f1 0c 	lds	r30, 0x0CF1	; 0x800cf1 <pxCurrentTCB>
     fac:	f0 91 f2 0c 	lds	r31, 0x0CF2	; 0x800cf2 <pxCurrentTCB+0x1>
     fb0:	92 8d       	ldd	r25, Z+26	; 0x1a
     fb2:	8a 8d       	ldd	r24, Y+26	; 0x1a
     fb4:	98 17       	cp	r25, r24
     fb6:	08 f4       	brcc	.+2      	; 0xfba <prvAddNewTaskToReadyList+0xd6>
     fb8:	4e db       	rcall	.-2404   	; 0x656 <vPortYield>
     fba:	df 91       	pop	r29
     fbc:	cf 91       	pop	r28
     fbe:	08 95       	ret

00000fc0 <prvCheckTasksWaitingTermination>:
     fc0:	cf 93       	push	r28
     fc2:	df 93       	push	r29
     fc4:	1a c0       	rjmp	.+52     	; 0xffa <prvCheckTasksWaitingTermination+0x3a>
     fc6:	0f b6       	in	r0, 0x3f	; 63
     fc8:	f8 94       	cli
     fca:	0f 92       	push	r0
     fcc:	e0 91 5a 0c 	lds	r30, 0x0C5A	; 0x800c5a <xTasksWaitingTermination+0x7>
     fd0:	f0 91 5b 0c 	lds	r31, 0x0C5B	; 0x800c5b <xTasksWaitingTermination+0x8>
     fd4:	c0 85       	ldd	r28, Z+8	; 0x08
     fd6:	d1 85       	ldd	r29, Z+9	; 0x09
     fd8:	ce 01       	movw	r24, r28
     fda:	02 96       	adiw	r24, 0x02	; 2
     fdc:	c0 da       	rcall	.-2688   	; 0x55e <uxListRemove>
     fde:	80 91 46 0c 	lds	r24, 0x0C46	; 0x800c46 <uxCurrentNumberOfTasks>
     fe2:	81 50       	subi	r24, 0x01	; 1
     fe4:	80 93 46 0c 	sts	0x0C46, r24	; 0x800c46 <uxCurrentNumberOfTasks>
     fe8:	80 91 52 0c 	lds	r24, 0x0C52	; 0x800c52 <uxDeletedTasksWaitingCleanUp>
     fec:	81 50       	subi	r24, 0x01	; 1
     fee:	80 93 52 0c 	sts	0x0C52, r24	; 0x800c52 <uxDeletedTasksWaitingCleanUp>
     ff2:	0f 90       	pop	r0
     ff4:	0f be       	out	0x3f, r0	; 63
     ff6:	ce 01       	movw	r24, r28
     ff8:	c3 de       	rcall	.-634    	; 0xd80 <prvDeleteTCB>
     ffa:	80 91 52 0c 	lds	r24, 0x0C52	; 0x800c52 <uxDeletedTasksWaitingCleanUp>
     ffe:	81 11       	cpse	r24, r1
    1000:	e2 cf       	rjmp	.-60     	; 0xfc6 <prvCheckTasksWaitingTermination+0x6>
    1002:	df 91       	pop	r29
    1004:	cf 91       	pop	r28
    1006:	08 95       	ret

00001008 <prvAddCurrentTaskToDelayedList>:
    1008:	8f 92       	push	r8
    100a:	9f 92       	push	r9
    100c:	af 92       	push	r10
    100e:	bf 92       	push	r11
    1010:	cf 92       	push	r12
    1012:	df 92       	push	r13
    1014:	ef 92       	push	r14
    1016:	ff 92       	push	r15
    1018:	cf 93       	push	r28
    101a:	df 93       	push	r29
    101c:	6b 01       	movw	r12, r22
    101e:	7c 01       	movw	r14, r24
    1020:	c4 2f       	mov	r28, r20
    1022:	80 90 42 0c 	lds	r8, 0x0C42	; 0x800c42 <xTickCount>
    1026:	90 90 43 0c 	lds	r9, 0x0C43	; 0x800c43 <xTickCount+0x1>
    102a:	a0 90 44 0c 	lds	r10, 0x0C44	; 0x800c44 <xTickCount+0x2>
    102e:	b0 90 45 0c 	lds	r11, 0x0C45	; 0x800c45 <xTickCount+0x3>
    1032:	80 91 f1 0c 	lds	r24, 0x0CF1	; 0x800cf1 <pxCurrentTCB>
    1036:	90 91 f2 0c 	lds	r25, 0x0CF2	; 0x800cf2 <pxCurrentTCB+0x1>
    103a:	02 96       	adiw	r24, 0x02	; 2
    103c:	90 da       	rcall	.-2784   	; 0x55e <uxListRemove>
    103e:	8f ef       	ldi	r24, 0xFF	; 255
    1040:	c8 16       	cp	r12, r24
    1042:	d8 06       	cpc	r13, r24
    1044:	e8 06       	cpc	r14, r24
    1046:	f8 06       	cpc	r15, r24
    1048:	b1 f5       	brne	.+108    	; 0x10b6 <prvAddCurrentTaskToDelayedList+0xae>
    104a:	cc 23       	and	r28, r28
    104c:	a1 f1       	breq	.+104    	; 0x10b6 <prvAddCurrentTaskToDelayedList+0xae>
    104e:	e7 e4       	ldi	r30, 0x47	; 71
    1050:	fc e0       	ldi	r31, 0x0C	; 12
    1052:	a1 81       	ldd	r26, Z+1	; 0x01
    1054:	b2 81       	ldd	r27, Z+2	; 0x02
    1056:	c0 91 f1 0c 	lds	r28, 0x0CF1	; 0x800cf1 <pxCurrentTCB>
    105a:	d0 91 f2 0c 	lds	r29, 0x0CF2	; 0x800cf2 <pxCurrentTCB+0x1>
    105e:	bf 83       	std	Y+7, r27	; 0x07
    1060:	ae 83       	std	Y+6, r26	; 0x06
    1062:	c0 91 f1 0c 	lds	r28, 0x0CF1	; 0x800cf1 <pxCurrentTCB>
    1066:	d0 91 f2 0c 	lds	r29, 0x0CF2	; 0x800cf2 <pxCurrentTCB+0x1>
    106a:	16 96       	adiw	r26, 0x06	; 6
    106c:	8d 91       	ld	r24, X+
    106e:	9c 91       	ld	r25, X
    1070:	17 97       	sbiw	r26, 0x07	; 7
    1072:	99 87       	std	Y+9, r25	; 0x09
    1074:	88 87       	std	Y+8, r24	; 0x08
    1076:	16 96       	adiw	r26, 0x06	; 6
    1078:	cd 91       	ld	r28, X+
    107a:	dc 91       	ld	r29, X
    107c:	17 97       	sbiw	r26, 0x07	; 7
    107e:	80 91 f1 0c 	lds	r24, 0x0CF1	; 0x800cf1 <pxCurrentTCB>
    1082:	90 91 f2 0c 	lds	r25, 0x0CF2	; 0x800cf2 <pxCurrentTCB+0x1>
    1086:	02 96       	adiw	r24, 0x02	; 2
    1088:	9d 83       	std	Y+5, r25	; 0x05
    108a:	8c 83       	std	Y+4, r24	; 0x04
    108c:	80 91 f1 0c 	lds	r24, 0x0CF1	; 0x800cf1 <pxCurrentTCB>
    1090:	90 91 f2 0c 	lds	r25, 0x0CF2	; 0x800cf2 <pxCurrentTCB+0x1>
    1094:	02 96       	adiw	r24, 0x02	; 2
    1096:	17 96       	adiw	r26, 0x07	; 7
    1098:	9c 93       	st	X, r25
    109a:	8e 93       	st	-X, r24
    109c:	16 97       	sbiw	r26, 0x06	; 6
    109e:	a0 91 f1 0c 	lds	r26, 0x0CF1	; 0x800cf1 <pxCurrentTCB>
    10a2:	b0 91 f2 0c 	lds	r27, 0x0CF2	; 0x800cf2 <pxCurrentTCB+0x1>
    10a6:	1d 96       	adiw	r26, 0x0d	; 13
    10a8:	fc 93       	st	X, r31
    10aa:	ee 93       	st	-X, r30
    10ac:	1c 97       	sbiw	r26, 0x0c	; 12
    10ae:	80 81       	ld	r24, Z
    10b0:	8f 5f       	subi	r24, 0xFF	; 255
    10b2:	80 83       	st	Z, r24
    10b4:	3d c0       	rjmp	.+122    	; 0x1130 <prvAddCurrentTaskToDelayedList+0x128>
    10b6:	c8 0c       	add	r12, r8
    10b8:	d9 1c       	adc	r13, r9
    10ba:	ea 1c       	adc	r14, r10
    10bc:	fb 1c       	adc	r15, r11
    10be:	e0 91 f1 0c 	lds	r30, 0x0CF1	; 0x800cf1 <pxCurrentTCB>
    10c2:	f0 91 f2 0c 	lds	r31, 0x0CF2	; 0x800cf2 <pxCurrentTCB+0x1>
    10c6:	c2 82       	std	Z+2, r12	; 0x02
    10c8:	d3 82       	std	Z+3, r13	; 0x03
    10ca:	e4 82       	std	Z+4, r14	; 0x04
    10cc:	f5 82       	std	Z+5, r15	; 0x05
    10ce:	c8 14       	cp	r12, r8
    10d0:	d9 04       	cpc	r13, r9
    10d2:	ea 04       	cpc	r14, r10
    10d4:	fb 04       	cpc	r15, r11
    10d6:	60 f4       	brcc	.+24     	; 0x10f0 <prvAddCurrentTaskToDelayedList+0xe8>
    10d8:	60 91 f1 0c 	lds	r22, 0x0CF1	; 0x800cf1 <pxCurrentTCB>
    10dc:	70 91 f2 0c 	lds	r23, 0x0CF2	; 0x800cf2 <pxCurrentTCB+0x1>
    10e0:	80 91 69 0c 	lds	r24, 0x0C69	; 0x800c69 <pxOverflowDelayedTaskList>
    10e4:	90 91 6a 0c 	lds	r25, 0x0C6A	; 0x800c6a <pxOverflowDelayedTaskList+0x1>
    10e8:	6e 5f       	subi	r22, 0xFE	; 254
    10ea:	7f 4f       	sbci	r23, 0xFF	; 255
    10ec:	fb d9       	rcall	.-3082   	; 0x4e4 <vListInsert>
    10ee:	20 c0       	rjmp	.+64     	; 0x1130 <prvAddCurrentTaskToDelayedList+0x128>
    10f0:	60 91 f1 0c 	lds	r22, 0x0CF1	; 0x800cf1 <pxCurrentTCB>
    10f4:	70 91 f2 0c 	lds	r23, 0x0CF2	; 0x800cf2 <pxCurrentTCB+0x1>
    10f8:	80 91 6b 0c 	lds	r24, 0x0C6B	; 0x800c6b <pxDelayedTaskList>
    10fc:	90 91 6c 0c 	lds	r25, 0x0C6C	; 0x800c6c <pxDelayedTaskList+0x1>
    1100:	6e 5f       	subi	r22, 0xFE	; 254
    1102:	7f 4f       	sbci	r23, 0xFF	; 255
    1104:	ef d9       	rcall	.-3106   	; 0x4e4 <vListInsert>
    1106:	80 91 35 0c 	lds	r24, 0x0C35	; 0x800c35 <xNextTaskUnblockTime>
    110a:	90 91 36 0c 	lds	r25, 0x0C36	; 0x800c36 <xNextTaskUnblockTime+0x1>
    110e:	a0 91 37 0c 	lds	r26, 0x0C37	; 0x800c37 <xNextTaskUnblockTime+0x2>
    1112:	b0 91 38 0c 	lds	r27, 0x0C38	; 0x800c38 <xNextTaskUnblockTime+0x3>
    1116:	c8 16       	cp	r12, r24
    1118:	d9 06       	cpc	r13, r25
    111a:	ea 06       	cpc	r14, r26
    111c:	fb 06       	cpc	r15, r27
    111e:	40 f4       	brcc	.+16     	; 0x1130 <prvAddCurrentTaskToDelayedList+0x128>
    1120:	c0 92 35 0c 	sts	0x0C35, r12	; 0x800c35 <xNextTaskUnblockTime>
    1124:	d0 92 36 0c 	sts	0x0C36, r13	; 0x800c36 <xNextTaskUnblockTime+0x1>
    1128:	e0 92 37 0c 	sts	0x0C37, r14	; 0x800c37 <xNextTaskUnblockTime+0x2>
    112c:	f0 92 38 0c 	sts	0x0C38, r15	; 0x800c38 <xNextTaskUnblockTime+0x3>
    1130:	df 91       	pop	r29
    1132:	cf 91       	pop	r28
    1134:	ff 90       	pop	r15
    1136:	ef 90       	pop	r14
    1138:	df 90       	pop	r13
    113a:	cf 90       	pop	r12
    113c:	bf 90       	pop	r11
    113e:	af 90       	pop	r10
    1140:	9f 90       	pop	r9
    1142:	8f 90       	pop	r8
    1144:	08 95       	ret

00001146 <xTaskCreate>:
    1146:	2f 92       	push	r2
    1148:	3f 92       	push	r3
    114a:	4f 92       	push	r4
    114c:	5f 92       	push	r5
    114e:	6f 92       	push	r6
    1150:	7f 92       	push	r7
    1152:	8f 92       	push	r8
    1154:	9f 92       	push	r9
    1156:	af 92       	push	r10
    1158:	bf 92       	push	r11
    115a:	cf 92       	push	r12
    115c:	df 92       	push	r13
    115e:	ef 92       	push	r14
    1160:	ff 92       	push	r15
    1162:	0f 93       	push	r16
    1164:	cf 93       	push	r28
    1166:	df 93       	push	r29
    1168:	3c 01       	movw	r6, r24
    116a:	1b 01       	movw	r2, r22
    116c:	4a 01       	movw	r8, r20
    116e:	29 01       	movw	r4, r18
    1170:	ca 01       	movw	r24, r20
    1172:	bf d8       	rcall	.-3714   	; 0x2f2 <pvPortMalloc>
    1174:	6c 01       	movw	r12, r24
    1176:	89 2b       	or	r24, r25
    1178:	61 f0       	breq	.+24     	; 0x1192 <xTaskCreate+0x4c>
    117a:	86 e3       	ldi	r24, 0x36	; 54
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	b9 d8       	rcall	.-3726   	; 0x2f2 <pvPortMalloc>
    1180:	ec 01       	movw	r28, r24
    1182:	89 2b       	or	r24, r25
    1184:	19 f0       	breq	.+6      	; 0x118c <xTaskCreate+0x46>
    1186:	dc 8e       	std	Y+28, r13	; 0x1c
    1188:	cb 8e       	std	Y+27, r12	; 0x1b
    118a:	05 c0       	rjmp	.+10     	; 0x1196 <xTaskCreate+0x50>
    118c:	c6 01       	movw	r24, r12
    118e:	59 d9       	rcall	.-3406   	; 0x442 <vPortFree>
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <xTaskCreate+0x50>
    1192:	c0 e0       	ldi	r28, 0x00	; 0
    1194:	d0 e0       	ldi	r29, 0x00	; 0
    1196:	20 97       	sbiw	r28, 0x00	; 0
    1198:	61 f0       	breq	.+24     	; 0x11b2 <xTaskCreate+0x6c>
    119a:	a1 2c       	mov	r10, r1
    119c:	b1 2c       	mov	r11, r1
    119e:	6e 01       	movw	r12, r28
    11a0:	92 01       	movw	r18, r4
    11a2:	a4 01       	movw	r20, r8
    11a4:	b1 01       	movw	r22, r2
    11a6:	c3 01       	movw	r24, r6
    11a8:	f6 dd       	rcall	.-1044   	; 0xd96 <prvInitialiseNewTask>
    11aa:	ce 01       	movw	r24, r28
    11ac:	9b de       	rcall	.-714    	; 0xee4 <prvAddNewTaskToReadyList>
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	01 c0       	rjmp	.+2      	; 0x11b4 <xTaskCreate+0x6e>
    11b2:	8f ef       	ldi	r24, 0xFF	; 255
    11b4:	df 91       	pop	r29
    11b6:	cf 91       	pop	r28
    11b8:	0f 91       	pop	r16
    11ba:	ff 90       	pop	r15
    11bc:	ef 90       	pop	r14
    11be:	df 90       	pop	r13
    11c0:	cf 90       	pop	r12
    11c2:	bf 90       	pop	r11
    11c4:	af 90       	pop	r10
    11c6:	9f 90       	pop	r9
    11c8:	8f 90       	pop	r8
    11ca:	7f 90       	pop	r7
    11cc:	6f 90       	pop	r6
    11ce:	5f 90       	pop	r5
    11d0:	4f 90       	pop	r4
    11d2:	3f 90       	pop	r3
    11d4:	2f 90       	pop	r2
    11d6:	08 95       	ret

000011d8 <vTaskStartScheduler>:
    11d8:	ef 92       	push	r14
    11da:	ff 92       	push	r15
    11dc:	0f 93       	push	r16
    11de:	0f 2e       	mov	r0, r31
    11e0:	f3 e3       	ldi	r31, 0x33	; 51
    11e2:	ef 2e       	mov	r14, r31
    11e4:	fc e0       	ldi	r31, 0x0C	; 12
    11e6:	ff 2e       	mov	r15, r31
    11e8:	f0 2d       	mov	r31, r0
    11ea:	00 e0       	ldi	r16, 0x00	; 0
    11ec:	20 e0       	ldi	r18, 0x00	; 0
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	40 ec       	ldi	r20, 0xC0	; 192
    11f2:	50 e0       	ldi	r21, 0x00	; 0
    11f4:	61 e5       	ldi	r22, 0x51	; 81
    11f6:	72 e0       	ldi	r23, 0x02	; 2
    11f8:	8c e7       	ldi	r24, 0x7C	; 124
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	a4 df       	rcall	.-184    	; 0x1146 <xTaskCreate>
    11fe:	81 30       	cpi	r24, 0x01	; 1
    1200:	09 f4       	brne	.+2      	; 0x1204 <vTaskStartScheduler+0x2c>
    1202:	46 d5       	rcall	.+2700   	; 0x1c90 <xTimerCreateTimerTask>
    1204:	81 30       	cpi	r24, 0x01	; 1
    1206:	f9 f4       	brne	.+62     	; 0x1246 <vTaskStartScheduler+0x6e>
    1208:	f8 94       	cli
    120a:	8f ef       	ldi	r24, 0xFF	; 255
    120c:	9f ef       	ldi	r25, 0xFF	; 255
    120e:	dc 01       	movw	r26, r24
    1210:	80 93 35 0c 	sts	0x0C35, r24	; 0x800c35 <xNextTaskUnblockTime>
    1214:	90 93 36 0c 	sts	0x0C36, r25	; 0x800c36 <xNextTaskUnblockTime+0x1>
    1218:	a0 93 37 0c 	sts	0x0C37, r26	; 0x800c37 <xNextTaskUnblockTime+0x2>
    121c:	b0 93 38 0c 	sts	0x0C38, r27	; 0x800c38 <xNextTaskUnblockTime+0x3>
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	80 93 40 0c 	sts	0x0C40, r24	; 0x800c40 <xSchedulerRunning>
    1226:	10 92 42 0c 	sts	0x0C42, r1	; 0x800c42 <xTickCount>
    122a:	10 92 43 0c 	sts	0x0C43, r1	; 0x800c43 <xTickCount+0x1>
    122e:	10 92 44 0c 	sts	0x0C44, r1	; 0x800c44 <xTickCount+0x2>
    1232:	10 92 45 0c 	sts	0x0C45, r1	; 0x800c45 <xTickCount+0x3>
    1236:	e0 91 f1 0c 	lds	r30, 0x0CF1	; 0x800cf1 <pxCurrentTCB>
    123a:	f0 91 f2 0c 	lds	r31, 0x0CF2	; 0x800cf2 <pxCurrentTCB+0x1>
    123e:	87 a5       	ldd	r24, Z+47	; 0x2f
    1240:	0e 94 f6 00 	call	0x1ec	; 0x1ec <task_switch_in>
    1244:	d6 d9       	rcall	.-3156   	; 0x5f2 <xPortStartScheduler>
    1246:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    124a:	0f 91       	pop	r16
    124c:	ff 90       	pop	r15
    124e:	ef 90       	pop	r14
    1250:	08 95       	ret

00001252 <vTaskSuspendAll>:
    1252:	80 91 32 0c 	lds	r24, 0x0C32	; 0x800c32 <uxSchedulerSuspended>
    1256:	8f 5f       	subi	r24, 0xFF	; 255
    1258:	80 93 32 0c 	sts	0x0C32, r24	; 0x800c32 <uxSchedulerSuspended>
    125c:	08 95       	ret

0000125e <xTaskGetTickCount>:
    125e:	0f b6       	in	r0, 0x3f	; 63
    1260:	f8 94       	cli
    1262:	0f 92       	push	r0
    1264:	60 91 42 0c 	lds	r22, 0x0C42	; 0x800c42 <xTickCount>
    1268:	70 91 43 0c 	lds	r23, 0x0C43	; 0x800c43 <xTickCount+0x1>
    126c:	80 91 44 0c 	lds	r24, 0x0C44	; 0x800c44 <xTickCount+0x2>
    1270:	90 91 45 0c 	lds	r25, 0x0C45	; 0x800c45 <xTickCount+0x3>
    1274:	0f 90       	pop	r0
    1276:	0f be       	out	0x3f, r0	; 63
    1278:	08 95       	ret

0000127a <xTaskIncrementTick>:
    127a:	cf 92       	push	r12
    127c:	df 92       	push	r13
    127e:	ef 92       	push	r14
    1280:	ff 92       	push	r15
    1282:	cf 93       	push	r28
    1284:	df 93       	push	r29
    1286:	80 91 32 0c 	lds	r24, 0x0C32	; 0x800c32 <uxSchedulerSuspended>
    128a:	81 11       	cpse	r24, r1
    128c:	05 c1       	rjmp	.+522    	; 0x1498 <xTaskIncrementTick+0x21e>
    128e:	c0 90 42 0c 	lds	r12, 0x0C42	; 0x800c42 <xTickCount>
    1292:	d0 90 43 0c 	lds	r13, 0x0C43	; 0x800c43 <xTickCount+0x1>
    1296:	e0 90 44 0c 	lds	r14, 0x0C44	; 0x800c44 <xTickCount+0x2>
    129a:	f0 90 45 0c 	lds	r15, 0x0C45	; 0x800c45 <xTickCount+0x3>
    129e:	8f ef       	ldi	r24, 0xFF	; 255
    12a0:	c8 1a       	sub	r12, r24
    12a2:	d8 0a       	sbc	r13, r24
    12a4:	e8 0a       	sbc	r14, r24
    12a6:	f8 0a       	sbc	r15, r24
    12a8:	c0 92 42 0c 	sts	0x0C42, r12	; 0x800c42 <xTickCount>
    12ac:	d0 92 43 0c 	sts	0x0C43, r13	; 0x800c43 <xTickCount+0x1>
    12b0:	e0 92 44 0c 	sts	0x0C44, r14	; 0x800c44 <xTickCount+0x2>
    12b4:	f0 92 45 0c 	sts	0x0C45, r15	; 0x800c45 <xTickCount+0x3>
    12b8:	c1 14       	cp	r12, r1
    12ba:	d1 04       	cpc	r13, r1
    12bc:	e1 04       	cpc	r14, r1
    12be:	f1 04       	cpc	r15, r1
    12c0:	b1 f4       	brne	.+44     	; 0x12ee <xTaskIncrementTick+0x74>
    12c2:	80 91 6b 0c 	lds	r24, 0x0C6B	; 0x800c6b <pxDelayedTaskList>
    12c6:	90 91 6c 0c 	lds	r25, 0x0C6C	; 0x800c6c <pxDelayedTaskList+0x1>
    12ca:	20 91 69 0c 	lds	r18, 0x0C69	; 0x800c69 <pxOverflowDelayedTaskList>
    12ce:	30 91 6a 0c 	lds	r19, 0x0C6A	; 0x800c6a <pxOverflowDelayedTaskList+0x1>
    12d2:	30 93 6c 0c 	sts	0x0C6C, r19	; 0x800c6c <pxDelayedTaskList+0x1>
    12d6:	20 93 6b 0c 	sts	0x0C6B, r18	; 0x800c6b <pxDelayedTaskList>
    12da:	90 93 6a 0c 	sts	0x0C6A, r25	; 0x800c6a <pxOverflowDelayedTaskList+0x1>
    12de:	80 93 69 0c 	sts	0x0C69, r24	; 0x800c69 <pxOverflowDelayedTaskList>
    12e2:	80 91 3a 0c 	lds	r24, 0x0C3A	; 0x800c3a <xNumOfOverflows>
    12e6:	8f 5f       	subi	r24, 0xFF	; 255
    12e8:	80 93 3a 0c 	sts	0x0C3A, r24	; 0x800c3a <xNumOfOverflows>
    12ec:	22 dd       	rcall	.-1468   	; 0xd32 <prvResetNextTaskUnblockTime>
    12ee:	80 91 35 0c 	lds	r24, 0x0C35	; 0x800c35 <xNextTaskUnblockTime>
    12f2:	90 91 36 0c 	lds	r25, 0x0C36	; 0x800c36 <xNextTaskUnblockTime+0x1>
    12f6:	a0 91 37 0c 	lds	r26, 0x0C37	; 0x800c37 <xNextTaskUnblockTime+0x2>
    12fa:	b0 91 38 0c 	lds	r27, 0x0C38	; 0x800c38 <xNextTaskUnblockTime+0x3>
    12fe:	c8 16       	cp	r12, r24
    1300:	d9 06       	cpc	r13, r25
    1302:	ea 06       	cpc	r14, r26
    1304:	fb 06       	cpc	r15, r27
    1306:	20 f4       	brcc	.+8      	; 0x1310 <xTaskIncrementTick+0x96>
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	b2 c0       	rjmp	.+356    	; 0x1470 <xTaskIncrementTick+0x1f6>
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	01 c0       	rjmp	.+2      	; 0x1312 <xTaskIncrementTick+0x98>
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	e0 91 6b 0c 	lds	r30, 0x0C6B	; 0x800c6b <pxDelayedTaskList>
    1316:	f0 91 6c 0c 	lds	r31, 0x0C6C	; 0x800c6c <pxDelayedTaskList+0x1>
    131a:	90 81       	ld	r25, Z
    131c:	91 11       	cpse	r25, r1
    131e:	0c c0       	rjmp	.+24     	; 0x1338 <xTaskIncrementTick+0xbe>
    1320:	4f ef       	ldi	r20, 0xFF	; 255
    1322:	5f ef       	ldi	r21, 0xFF	; 255
    1324:	ba 01       	movw	r22, r20
    1326:	40 93 35 0c 	sts	0x0C35, r20	; 0x800c35 <xNextTaskUnblockTime>
    132a:	50 93 36 0c 	sts	0x0C36, r21	; 0x800c36 <xNextTaskUnblockTime+0x1>
    132e:	60 93 37 0c 	sts	0x0C37, r22	; 0x800c37 <xNextTaskUnblockTime+0x2>
    1332:	70 93 38 0c 	sts	0x0C38, r23	; 0x800c38 <xNextTaskUnblockTime+0x3>
    1336:	9c c0       	rjmp	.+312    	; 0x1470 <xTaskIncrementTick+0x1f6>
    1338:	e0 91 6b 0c 	lds	r30, 0x0C6B	; 0x800c6b <pxDelayedTaskList>
    133c:	f0 91 6c 0c 	lds	r31, 0x0C6C	; 0x800c6c <pxDelayedTaskList+0x1>
    1340:	07 80       	ldd	r0, Z+7	; 0x07
    1342:	f0 85       	ldd	r31, Z+8	; 0x08
    1344:	e0 2d       	mov	r30, r0
    1346:	00 84       	ldd	r0, Z+8	; 0x08
    1348:	f1 85       	ldd	r31, Z+9	; 0x09
    134a:	e0 2d       	mov	r30, r0
    134c:	42 81       	ldd	r20, Z+2	; 0x02
    134e:	53 81       	ldd	r21, Z+3	; 0x03
    1350:	64 81       	ldd	r22, Z+4	; 0x04
    1352:	75 81       	ldd	r23, Z+5	; 0x05
    1354:	c4 16       	cp	r12, r20
    1356:	d5 06       	cpc	r13, r21
    1358:	e6 06       	cpc	r14, r22
    135a:	f7 06       	cpc	r15, r23
    135c:	48 f4       	brcc	.+18     	; 0x1370 <xTaskIncrementTick+0xf6>
    135e:	40 93 35 0c 	sts	0x0C35, r20	; 0x800c35 <xNextTaskUnblockTime>
    1362:	50 93 36 0c 	sts	0x0C36, r21	; 0x800c36 <xNextTaskUnblockTime+0x1>
    1366:	60 93 37 0c 	sts	0x0C37, r22	; 0x800c37 <xNextTaskUnblockTime+0x2>
    136a:	70 93 38 0c 	sts	0x0C38, r23	; 0x800c38 <xNextTaskUnblockTime+0x3>
    136e:	80 c0       	rjmp	.+256    	; 0x1470 <xTaskIncrementTick+0x1f6>
    1370:	a4 85       	ldd	r26, Z+12	; 0x0c
    1372:	b5 85       	ldd	r27, Z+13	; 0x0d
    1374:	c6 81       	ldd	r28, Z+6	; 0x06
    1376:	d7 81       	ldd	r29, Z+7	; 0x07
    1378:	20 85       	ldd	r18, Z+8	; 0x08
    137a:	31 85       	ldd	r19, Z+9	; 0x09
    137c:	3f 83       	std	Y+7, r19	; 0x07
    137e:	2e 83       	std	Y+6, r18	; 0x06
    1380:	c0 85       	ldd	r28, Z+8	; 0x08
    1382:	d1 85       	ldd	r29, Z+9	; 0x09
    1384:	26 81       	ldd	r18, Z+6	; 0x06
    1386:	37 81       	ldd	r19, Z+7	; 0x07
    1388:	3d 83       	std	Y+5, r19	; 0x05
    138a:	2c 83       	std	Y+4, r18	; 0x04
    138c:	11 96       	adiw	r26, 0x01	; 1
    138e:	4d 91       	ld	r20, X+
    1390:	5c 91       	ld	r21, X
    1392:	12 97       	sbiw	r26, 0x02	; 2
    1394:	9f 01       	movw	r18, r30
    1396:	2e 5f       	subi	r18, 0xFE	; 254
    1398:	3f 4f       	sbci	r19, 0xFF	; 255
    139a:	42 17       	cp	r20, r18
    139c:	53 07       	cpc	r21, r19
    139e:	31 f4       	brne	.+12     	; 0x13ac <xTaskIncrementTick+0x132>
    13a0:	40 85       	ldd	r20, Z+8	; 0x08
    13a2:	51 85       	ldd	r21, Z+9	; 0x09
    13a4:	12 96       	adiw	r26, 0x02	; 2
    13a6:	5c 93       	st	X, r21
    13a8:	4e 93       	st	-X, r20
    13aa:	11 97       	sbiw	r26, 0x01	; 1
    13ac:	15 86       	std	Z+13, r1	; 0x0d
    13ae:	14 86       	std	Z+12, r1	; 0x0c
    13b0:	9c 91       	ld	r25, X
    13b2:	91 50       	subi	r25, 0x01	; 1
    13b4:	9c 93       	st	X, r25
    13b6:	a0 8d       	ldd	r26, Z+24	; 0x18
    13b8:	b1 8d       	ldd	r27, Z+25	; 0x19
    13ba:	10 97       	sbiw	r26, 0x00	; 0
    13bc:	09 f1       	breq	.+66     	; 0x1400 <xTaskIncrementTick+0x186>
    13be:	c2 89       	ldd	r28, Z+18	; 0x12
    13c0:	d3 89       	ldd	r29, Z+19	; 0x13
    13c2:	44 89       	ldd	r20, Z+20	; 0x14
    13c4:	55 89       	ldd	r21, Z+21	; 0x15
    13c6:	5f 83       	std	Y+7, r21	; 0x07
    13c8:	4e 83       	std	Y+6, r20	; 0x06
    13ca:	c4 89       	ldd	r28, Z+20	; 0x14
    13cc:	d5 89       	ldd	r29, Z+21	; 0x15
    13ce:	42 89       	ldd	r20, Z+18	; 0x12
    13d0:	53 89       	ldd	r21, Z+19	; 0x13
    13d2:	5d 83       	std	Y+5, r21	; 0x05
    13d4:	4c 83       	std	Y+4, r20	; 0x04
    13d6:	11 96       	adiw	r26, 0x01	; 1
    13d8:	6d 91       	ld	r22, X+
    13da:	7c 91       	ld	r23, X
    13dc:	12 97       	sbiw	r26, 0x02	; 2
    13de:	af 01       	movw	r20, r30
    13e0:	42 5f       	subi	r20, 0xF2	; 242
    13e2:	5f 4f       	sbci	r21, 0xFF	; 255
    13e4:	64 17       	cp	r22, r20
    13e6:	75 07       	cpc	r23, r21
    13e8:	31 f4       	brne	.+12     	; 0x13f6 <xTaskIncrementTick+0x17c>
    13ea:	44 89       	ldd	r20, Z+20	; 0x14
    13ec:	55 89       	ldd	r21, Z+21	; 0x15
    13ee:	12 96       	adiw	r26, 0x02	; 2
    13f0:	5c 93       	st	X, r21
    13f2:	4e 93       	st	-X, r20
    13f4:	11 97       	sbiw	r26, 0x01	; 1
    13f6:	11 8e       	std	Z+25, r1	; 0x19
    13f8:	10 8e       	std	Z+24, r1	; 0x18
    13fa:	9c 91       	ld	r25, X
    13fc:	91 50       	subi	r25, 0x01	; 1
    13fe:	9c 93       	st	X, r25
    1400:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1402:	90 91 41 0c 	lds	r25, 0x0C41	; 0x800c41 <uxTopReadyPriority>
    1406:	9a 17       	cp	r25, r26
    1408:	10 f4       	brcc	.+4      	; 0x140e <xTaskIncrementTick+0x194>
    140a:	a0 93 41 0c 	sts	0x0C41, r26	; 0x800c41 <uxTopReadyPriority>
    140e:	9b e0       	ldi	r25, 0x0B	; 11
    1410:	9a 9f       	mul	r25, r26
    1412:	d0 01       	movw	r26, r0
    1414:	11 24       	eor	r1, r1
    1416:	ad 57       	subi	r26, 0x7D	; 125
    1418:	b3 4f       	sbci	r27, 0xF3	; 243
    141a:	11 96       	adiw	r26, 0x01	; 1
    141c:	0d 90       	ld	r0, X+
    141e:	bc 91       	ld	r27, X
    1420:	a0 2d       	mov	r26, r0
    1422:	b7 83       	std	Z+7, r27	; 0x07
    1424:	a6 83       	std	Z+6, r26	; 0x06
    1426:	16 96       	adiw	r26, 0x06	; 6
    1428:	4d 91       	ld	r20, X+
    142a:	5c 91       	ld	r21, X
    142c:	17 97       	sbiw	r26, 0x07	; 7
    142e:	51 87       	std	Z+9, r21	; 0x09
    1430:	40 87       	std	Z+8, r20	; 0x08
    1432:	16 96       	adiw	r26, 0x06	; 6
    1434:	cd 91       	ld	r28, X+
    1436:	dc 91       	ld	r29, X
    1438:	17 97       	sbiw	r26, 0x07	; 7
    143a:	3d 83       	std	Y+5, r19	; 0x05
    143c:	2c 83       	std	Y+4, r18	; 0x04
    143e:	17 96       	adiw	r26, 0x07	; 7
    1440:	3c 93       	st	X, r19
    1442:	2e 93       	st	-X, r18
    1444:	16 97       	sbiw	r26, 0x06	; 6
    1446:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1448:	9a 9f       	mul	r25, r26
    144a:	d0 01       	movw	r26, r0
    144c:	11 24       	eor	r1, r1
    144e:	ad 57       	subi	r26, 0x7D	; 125
    1450:	b3 4f       	sbci	r27, 0xF3	; 243
    1452:	b5 87       	std	Z+13, r27	; 0x0d
    1454:	a4 87       	std	Z+12, r26	; 0x0c
    1456:	9c 91       	ld	r25, X
    1458:	9f 5f       	subi	r25, 0xFF	; 255
    145a:	9c 93       	st	X, r25
    145c:	22 8d       	ldd	r18, Z+26	; 0x1a
    145e:	e0 91 f1 0c 	lds	r30, 0x0CF1	; 0x800cf1 <pxCurrentTCB>
    1462:	f0 91 f2 0c 	lds	r31, 0x0CF2	; 0x800cf2 <pxCurrentTCB+0x1>
    1466:	92 8d       	ldd	r25, Z+26	; 0x1a
    1468:	29 17       	cp	r18, r25
    146a:	08 f0       	brcs	.+2      	; 0x146e <xTaskIncrementTick+0x1f4>
    146c:	4f cf       	rjmp	.-354    	; 0x130c <xTaskIncrementTick+0x92>
    146e:	51 cf       	rjmp	.-350    	; 0x1312 <xTaskIncrementTick+0x98>
    1470:	e0 91 f1 0c 	lds	r30, 0x0CF1	; 0x800cf1 <pxCurrentTCB>
    1474:	f0 91 f2 0c 	lds	r31, 0x0CF2	; 0x800cf2 <pxCurrentTCB+0x1>
    1478:	e2 8d       	ldd	r30, Z+26	; 0x1a
    147a:	9b e0       	ldi	r25, 0x0B	; 11
    147c:	e9 9f       	mul	r30, r25
    147e:	f0 01       	movw	r30, r0
    1480:	11 24       	eor	r1, r1
    1482:	ed 57       	subi	r30, 0x7D	; 125
    1484:	f3 4f       	sbci	r31, 0xF3	; 243
    1486:	90 81       	ld	r25, Z
    1488:	92 30       	cpi	r25, 0x02	; 2
    148a:	08 f0       	brcs	.+2      	; 0x148e <xTaskIncrementTick+0x214>
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	90 91 3b 0c 	lds	r25, 0x0C3B	; 0x800c3b <xYieldPending>
    1492:	91 11       	cpse	r25, r1
    1494:	16 c0       	rjmp	.+44     	; 0x14c2 <xTaskIncrementTick+0x248>
    1496:	16 c0       	rjmp	.+44     	; 0x14c4 <xTaskIncrementTick+0x24a>
    1498:	80 91 3c 0c 	lds	r24, 0x0C3C	; 0x800c3c <xPendedTicks>
    149c:	90 91 3d 0c 	lds	r25, 0x0C3D	; 0x800c3d <xPendedTicks+0x1>
    14a0:	a0 91 3e 0c 	lds	r26, 0x0C3E	; 0x800c3e <xPendedTicks+0x2>
    14a4:	b0 91 3f 0c 	lds	r27, 0x0C3F	; 0x800c3f <xPendedTicks+0x3>
    14a8:	01 96       	adiw	r24, 0x01	; 1
    14aa:	a1 1d       	adc	r26, r1
    14ac:	b1 1d       	adc	r27, r1
    14ae:	80 93 3c 0c 	sts	0x0C3C, r24	; 0x800c3c <xPendedTicks>
    14b2:	90 93 3d 0c 	sts	0x0C3D, r25	; 0x800c3d <xPendedTicks+0x1>
    14b6:	a0 93 3e 0c 	sts	0x0C3E, r26	; 0x800c3e <xPendedTicks+0x2>
    14ba:	b0 93 3f 0c 	sts	0x0C3F, r27	; 0x800c3f <xPendedTicks+0x3>
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	01 c0       	rjmp	.+2      	; 0x14c4 <xTaskIncrementTick+0x24a>
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	df 91       	pop	r29
    14c6:	cf 91       	pop	r28
    14c8:	ff 90       	pop	r15
    14ca:	ef 90       	pop	r14
    14cc:	df 90       	pop	r13
    14ce:	cf 90       	pop	r12
    14d0:	08 95       	ret

000014d2 <xTaskResumeAll>:
    14d2:	cf 92       	push	r12
    14d4:	df 92       	push	r13
    14d6:	ef 92       	push	r14
    14d8:	ff 92       	push	r15
    14da:	cf 93       	push	r28
    14dc:	df 93       	push	r29
    14de:	0f b6       	in	r0, 0x3f	; 63
    14e0:	f8 94       	cli
    14e2:	0f 92       	push	r0
    14e4:	80 91 32 0c 	lds	r24, 0x0C32	; 0x800c32 <uxSchedulerSuspended>
    14e8:	81 50       	subi	r24, 0x01	; 1
    14ea:	80 93 32 0c 	sts	0x0C32, r24	; 0x800c32 <uxSchedulerSuspended>
    14ee:	80 91 32 0c 	lds	r24, 0x0C32	; 0x800c32 <uxSchedulerSuspended>
    14f2:	81 11       	cpse	r24, r1
    14f4:	be c0       	rjmp	.+380    	; 0x1672 <xTaskResumeAll+0x1a0>
    14f6:	80 91 46 0c 	lds	r24, 0x0C46	; 0x800c46 <uxCurrentNumberOfTasks>
    14fa:	81 11       	cpse	r24, r1
    14fc:	88 c0       	rjmp	.+272    	; 0x160e <xTaskResumeAll+0x13c>
    14fe:	bc c0       	rjmp	.+376    	; 0x1678 <xTaskResumeAll+0x1a6>
    1500:	e0 91 65 0c 	lds	r30, 0x0C65	; 0x800c65 <xPendingReadyList+0x7>
    1504:	f0 91 66 0c 	lds	r31, 0x0C66	; 0x800c66 <xPendingReadyList+0x8>
    1508:	00 84       	ldd	r0, Z+8	; 0x08
    150a:	f1 85       	ldd	r31, Z+9	; 0x09
    150c:	e0 2d       	mov	r30, r0
    150e:	a0 8d       	ldd	r26, Z+24	; 0x18
    1510:	b1 8d       	ldd	r27, Z+25	; 0x19
    1512:	c2 89       	ldd	r28, Z+18	; 0x12
    1514:	d3 89       	ldd	r29, Z+19	; 0x13
    1516:	84 89       	ldd	r24, Z+20	; 0x14
    1518:	95 89       	ldd	r25, Z+21	; 0x15
    151a:	9f 83       	std	Y+7, r25	; 0x07
    151c:	8e 83       	std	Y+6, r24	; 0x06
    151e:	c4 89       	ldd	r28, Z+20	; 0x14
    1520:	d5 89       	ldd	r29, Z+21	; 0x15
    1522:	82 89       	ldd	r24, Z+18	; 0x12
    1524:	93 89       	ldd	r25, Z+19	; 0x13
    1526:	9d 83       	std	Y+5, r25	; 0x05
    1528:	8c 83       	std	Y+4, r24	; 0x04
    152a:	11 96       	adiw	r26, 0x01	; 1
    152c:	2d 91       	ld	r18, X+
    152e:	3c 91       	ld	r19, X
    1530:	12 97       	sbiw	r26, 0x02	; 2
    1532:	cf 01       	movw	r24, r30
    1534:	0e 96       	adiw	r24, 0x0e	; 14
    1536:	28 17       	cp	r18, r24
    1538:	39 07       	cpc	r19, r25
    153a:	31 f4       	brne	.+12     	; 0x1548 <xTaskResumeAll+0x76>
    153c:	84 89       	ldd	r24, Z+20	; 0x14
    153e:	95 89       	ldd	r25, Z+21	; 0x15
    1540:	12 96       	adiw	r26, 0x02	; 2
    1542:	9c 93       	st	X, r25
    1544:	8e 93       	st	-X, r24
    1546:	11 97       	sbiw	r26, 0x01	; 1
    1548:	11 8e       	std	Z+25, r1	; 0x19
    154a:	10 8e       	std	Z+24, r1	; 0x18
    154c:	8c 91       	ld	r24, X
    154e:	81 50       	subi	r24, 0x01	; 1
    1550:	8c 93       	st	X, r24
    1552:	a4 85       	ldd	r26, Z+12	; 0x0c
    1554:	b5 85       	ldd	r27, Z+13	; 0x0d
    1556:	c6 81       	ldd	r28, Z+6	; 0x06
    1558:	d7 81       	ldd	r29, Z+7	; 0x07
    155a:	80 85       	ldd	r24, Z+8	; 0x08
    155c:	91 85       	ldd	r25, Z+9	; 0x09
    155e:	9f 83       	std	Y+7, r25	; 0x07
    1560:	8e 83       	std	Y+6, r24	; 0x06
    1562:	c0 85       	ldd	r28, Z+8	; 0x08
    1564:	d1 85       	ldd	r29, Z+9	; 0x09
    1566:	86 81       	ldd	r24, Z+6	; 0x06
    1568:	97 81       	ldd	r25, Z+7	; 0x07
    156a:	9d 83       	std	Y+5, r25	; 0x05
    156c:	8c 83       	std	Y+4, r24	; 0x04
    156e:	11 96       	adiw	r26, 0x01	; 1
    1570:	8d 91       	ld	r24, X+
    1572:	9c 91       	ld	r25, X
    1574:	12 97       	sbiw	r26, 0x02	; 2
    1576:	9f 01       	movw	r18, r30
    1578:	2e 5f       	subi	r18, 0xFE	; 254
    157a:	3f 4f       	sbci	r19, 0xFF	; 255
    157c:	82 17       	cp	r24, r18
    157e:	93 07       	cpc	r25, r19
    1580:	31 f4       	brne	.+12     	; 0x158e <xTaskResumeAll+0xbc>
    1582:	80 85       	ldd	r24, Z+8	; 0x08
    1584:	91 85       	ldd	r25, Z+9	; 0x09
    1586:	12 96       	adiw	r26, 0x02	; 2
    1588:	9c 93       	st	X, r25
    158a:	8e 93       	st	-X, r24
    158c:	11 97       	sbiw	r26, 0x01	; 1
    158e:	15 86       	std	Z+13, r1	; 0x0d
    1590:	14 86       	std	Z+12, r1	; 0x0c
    1592:	8c 91       	ld	r24, X
    1594:	81 50       	subi	r24, 0x01	; 1
    1596:	8c 93       	st	X, r24
    1598:	a2 8d       	ldd	r26, Z+26	; 0x1a
    159a:	80 91 41 0c 	lds	r24, 0x0C41	; 0x800c41 <uxTopReadyPriority>
    159e:	8a 17       	cp	r24, r26
    15a0:	10 f4       	brcc	.+4      	; 0x15a6 <xTaskResumeAll+0xd4>
    15a2:	a0 93 41 0c 	sts	0x0C41, r26	; 0x800c41 <uxTopReadyPriority>
    15a6:	8b e0       	ldi	r24, 0x0B	; 11
    15a8:	8a 9f       	mul	r24, r26
    15aa:	d0 01       	movw	r26, r0
    15ac:	11 24       	eor	r1, r1
    15ae:	ad 57       	subi	r26, 0x7D	; 125
    15b0:	b3 4f       	sbci	r27, 0xF3	; 243
    15b2:	11 96       	adiw	r26, 0x01	; 1
    15b4:	0d 90       	ld	r0, X+
    15b6:	bc 91       	ld	r27, X
    15b8:	a0 2d       	mov	r26, r0
    15ba:	b7 83       	std	Z+7, r27	; 0x07
    15bc:	a6 83       	std	Z+6, r26	; 0x06
    15be:	16 96       	adiw	r26, 0x06	; 6
    15c0:	4d 91       	ld	r20, X+
    15c2:	5c 91       	ld	r21, X
    15c4:	17 97       	sbiw	r26, 0x07	; 7
    15c6:	51 87       	std	Z+9, r21	; 0x09
    15c8:	40 87       	std	Z+8, r20	; 0x08
    15ca:	16 96       	adiw	r26, 0x06	; 6
    15cc:	cd 91       	ld	r28, X+
    15ce:	dc 91       	ld	r29, X
    15d0:	17 97       	sbiw	r26, 0x07	; 7
    15d2:	3d 83       	std	Y+5, r19	; 0x05
    15d4:	2c 83       	std	Y+4, r18	; 0x04
    15d6:	17 96       	adiw	r26, 0x07	; 7
    15d8:	3c 93       	st	X, r19
    15da:	2e 93       	st	-X, r18
    15dc:	16 97       	sbiw	r26, 0x06	; 6
    15de:	a2 8d       	ldd	r26, Z+26	; 0x1a
    15e0:	8a 9f       	mul	r24, r26
    15e2:	d0 01       	movw	r26, r0
    15e4:	11 24       	eor	r1, r1
    15e6:	ad 57       	subi	r26, 0x7D	; 125
    15e8:	b3 4f       	sbci	r27, 0xF3	; 243
    15ea:	b5 87       	std	Z+13, r27	; 0x0d
    15ec:	a4 87       	std	Z+12, r26	; 0x0c
    15ee:	8c 91       	ld	r24, X
    15f0:	8f 5f       	subi	r24, 0xFF	; 255
    15f2:	8c 93       	st	X, r24
    15f4:	92 8d       	ldd	r25, Z+26	; 0x1a
    15f6:	a0 91 f1 0c 	lds	r26, 0x0CF1	; 0x800cf1 <pxCurrentTCB>
    15fa:	b0 91 f2 0c 	lds	r27, 0x0CF2	; 0x800cf2 <pxCurrentTCB+0x1>
    15fe:	5a 96       	adiw	r26, 0x1a	; 26
    1600:	8c 91       	ld	r24, X
    1602:	98 17       	cp	r25, r24
    1604:	30 f0       	brcs	.+12     	; 0x1612 <xTaskResumeAll+0x140>
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	80 93 3b 0c 	sts	0x0C3B, r24	; 0x800c3b <xYieldPending>
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <xTaskResumeAll+0x140>
    160e:	e0 e0       	ldi	r30, 0x00	; 0
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 91 5e 0c 	lds	r24, 0x0C5E	; 0x800c5e <xPendingReadyList>
    1616:	81 11       	cpse	r24, r1
    1618:	73 cf       	rjmp	.-282    	; 0x1500 <xTaskResumeAll+0x2e>
    161a:	ef 2b       	or	r30, r31
    161c:	09 f0       	breq	.+2      	; 0x1620 <xTaskResumeAll+0x14e>
    161e:	89 db       	rcall	.-2286   	; 0xd32 <prvResetNextTaskUnblockTime>
    1620:	c0 90 3c 0c 	lds	r12, 0x0C3C	; 0x800c3c <xPendedTicks>
    1624:	d0 90 3d 0c 	lds	r13, 0x0C3D	; 0x800c3d <xPendedTicks+0x1>
    1628:	e0 90 3e 0c 	lds	r14, 0x0C3E	; 0x800c3e <xPendedTicks+0x2>
    162c:	f0 90 3f 0c 	lds	r15, 0x0C3F	; 0x800c3f <xPendedTicks+0x3>
    1630:	c1 14       	cp	r12, r1
    1632:	d1 04       	cpc	r13, r1
    1634:	e1 04       	cpc	r14, r1
    1636:	f1 04       	cpc	r15, r1
    1638:	a1 f0       	breq	.+40     	; 0x1662 <xTaskResumeAll+0x190>
    163a:	1f de       	rcall	.-962    	; 0x127a <xTaskIncrementTick>
    163c:	88 23       	and	r24, r24
    163e:	19 f0       	breq	.+6      	; 0x1646 <xTaskResumeAll+0x174>
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	80 93 3b 0c 	sts	0x0C3B, r24	; 0x800c3b <xYieldPending>
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	c8 1a       	sub	r12, r24
    164a:	d1 08       	sbc	r13, r1
    164c:	e1 08       	sbc	r14, r1
    164e:	f1 08       	sbc	r15, r1
    1650:	a1 f7       	brne	.-24     	; 0x163a <xTaskResumeAll+0x168>
    1652:	10 92 3c 0c 	sts	0x0C3C, r1	; 0x800c3c <xPendedTicks>
    1656:	10 92 3d 0c 	sts	0x0C3D, r1	; 0x800c3d <xPendedTicks+0x1>
    165a:	10 92 3e 0c 	sts	0x0C3E, r1	; 0x800c3e <xPendedTicks+0x2>
    165e:	10 92 3f 0c 	sts	0x0C3F, r1	; 0x800c3f <xPendedTicks+0x3>
    1662:	80 91 3b 0c 	lds	r24, 0x0C3B	; 0x800c3b <xYieldPending>
    1666:	88 23       	and	r24, r24
    1668:	31 f0       	breq	.+12     	; 0x1676 <xTaskResumeAll+0x1a4>
    166a:	0e 94 2b 03 	call	0x656	; 0x656 <vPortYield>
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	03 c0       	rjmp	.+6      	; 0x1678 <xTaskResumeAll+0x1a6>
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	01 c0       	rjmp	.+2      	; 0x1678 <xTaskResumeAll+0x1a6>
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	0f 90       	pop	r0
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	df 91       	pop	r29
    167e:	cf 91       	pop	r28
    1680:	ff 90       	pop	r15
    1682:	ef 90       	pop	r14
    1684:	df 90       	pop	r13
    1686:	cf 90       	pop	r12
    1688:	08 95       	ret

0000168a <vTaskDelay>:
    168a:	cf 92       	push	r12
    168c:	df 92       	push	r13
    168e:	ef 92       	push	r14
    1690:	ff 92       	push	r15
    1692:	6b 01       	movw	r12, r22
    1694:	7c 01       	movw	r14, r24
    1696:	67 2b       	or	r22, r23
    1698:	68 2b       	or	r22, r24
    169a:	69 2b       	or	r22, r25
    169c:	39 f0       	breq	.+14     	; 0x16ac <vTaskDelay+0x22>
    169e:	d9 dd       	rcall	.-1102   	; 0x1252 <vTaskSuspendAll>
    16a0:	40 e0       	ldi	r20, 0x00	; 0
    16a2:	c7 01       	movw	r24, r14
    16a4:	b6 01       	movw	r22, r12
    16a6:	b0 dc       	rcall	.-1696   	; 0x1008 <prvAddCurrentTaskToDelayedList>
    16a8:	14 df       	rcall	.-472    	; 0x14d2 <xTaskResumeAll>
    16aa:	01 c0       	rjmp	.+2      	; 0x16ae <vTaskDelay+0x24>
    16ac:	80 e0       	ldi	r24, 0x00	; 0
    16ae:	81 11       	cpse	r24, r1
    16b0:	02 c0       	rjmp	.+4      	; 0x16b6 <vTaskDelay+0x2c>
    16b2:	0e 94 2b 03 	call	0x656	; 0x656 <vPortYield>
    16b6:	ff 90       	pop	r15
    16b8:	ef 90       	pop	r14
    16ba:	df 90       	pop	r13
    16bc:	cf 90       	pop	r12
    16be:	08 95       	ret

000016c0 <vTaskSwitchContext>:
    16c0:	80 91 32 0c 	lds	r24, 0x0C32	; 0x800c32 <uxSchedulerSuspended>
    16c4:	88 23       	and	r24, r24
    16c6:	21 f0       	breq	.+8      	; 0x16d0 <vTaskSwitchContext+0x10>
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	80 93 3b 0c 	sts	0x0C3B, r24	; 0x800c3b <xYieldPending>
    16ce:	08 95       	ret
    16d0:	10 92 3b 0c 	sts	0x0C3B, r1	; 0x800c3b <xYieldPending>
    16d4:	e0 91 f1 0c 	lds	r30, 0x0CF1	; 0x800cf1 <pxCurrentTCB>
    16d8:	f0 91 f2 0c 	lds	r31, 0x0CF2	; 0x800cf2 <pxCurrentTCB+0x1>
    16dc:	87 a5       	ldd	r24, Z+47	; 0x2f
    16de:	0e 94 00 01 	call	0x200	; 0x200 <task_switch_out>
    16e2:	e0 91 f1 0c 	lds	r30, 0x0CF1	; 0x800cf1 <pxCurrentTCB>
    16e6:	f0 91 f2 0c 	lds	r31, 0x0CF2	; 0x800cf2 <pxCurrentTCB+0x1>
    16ea:	20 81       	ld	r18, Z
    16ec:	31 81       	ldd	r19, Z+1	; 0x01
    16ee:	e0 91 f1 0c 	lds	r30, 0x0CF1	; 0x800cf1 <pxCurrentTCB>
    16f2:	f0 91 f2 0c 	lds	r31, 0x0CF2	; 0x800cf2 <pxCurrentTCB+0x1>
    16f6:	83 8d       	ldd	r24, Z+27	; 0x1b
    16f8:	94 8d       	ldd	r25, Z+28	; 0x1c
    16fa:	82 17       	cp	r24, r18
    16fc:	93 07       	cpc	r25, r19
    16fe:	58 f0       	brcs	.+22     	; 0x1716 <vTaskSwitchContext+0x56>
    1700:	60 91 f1 0c 	lds	r22, 0x0CF1	; 0x800cf1 <pxCurrentTCB>
    1704:	70 91 f2 0c 	lds	r23, 0x0CF2	; 0x800cf2 <pxCurrentTCB+0x1>
    1708:	63 5e       	subi	r22, 0xE3	; 227
    170a:	7f 4f       	sbci	r23, 0xFF	; 255
    170c:	80 91 f1 0c 	lds	r24, 0x0CF1	; 0x800cf1 <pxCurrentTCB>
    1710:	90 91 f2 0c 	lds	r25, 0x0CF2	; 0x800cf2 <pxCurrentTCB+0x1>
    1714:	44 d5       	rcall	.+2696   	; 0x219e <vApplicationStackOverflowHook>
    1716:	80 91 41 0c 	lds	r24, 0x0C41	; 0x800c41 <uxTopReadyPriority>
    171a:	01 c0       	rjmp	.+2      	; 0x171e <vTaskSwitchContext+0x5e>
    171c:	81 50       	subi	r24, 0x01	; 1
    171e:	28 2f       	mov	r18, r24
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	9b e0       	ldi	r25, 0x0B	; 11
    1724:	92 9f       	mul	r25, r18
    1726:	f0 01       	movw	r30, r0
    1728:	93 9f       	mul	r25, r19
    172a:	f0 0d       	add	r31, r0
    172c:	11 24       	eor	r1, r1
    172e:	ed 57       	subi	r30, 0x7D	; 125
    1730:	f3 4f       	sbci	r31, 0xF3	; 243
    1732:	90 81       	ld	r25, Z
    1734:	99 23       	and	r25, r25
    1736:	91 f3       	breq	.-28     	; 0x171c <vTaskSwitchContext+0x5c>
    1738:	9b e0       	ldi	r25, 0x0B	; 11
    173a:	92 9f       	mul	r25, r18
    173c:	a0 01       	movw	r20, r0
    173e:	93 9f       	mul	r25, r19
    1740:	50 0d       	add	r21, r0
    1742:	11 24       	eor	r1, r1
    1744:	df 01       	movw	r26, r30
    1746:	01 80       	ldd	r0, Z+1	; 0x01
    1748:	f2 81       	ldd	r31, Z+2	; 0x02
    174a:	e0 2d       	mov	r30, r0
    174c:	04 80       	ldd	r0, Z+4	; 0x04
    174e:	f5 81       	ldd	r31, Z+5	; 0x05
    1750:	e0 2d       	mov	r30, r0
    1752:	12 96       	adiw	r26, 0x02	; 2
    1754:	fc 93       	st	X, r31
    1756:	ee 93       	st	-X, r30
    1758:	11 97       	sbiw	r26, 0x01	; 1
    175a:	4a 57       	subi	r20, 0x7A	; 122
    175c:	53 4f       	sbci	r21, 0xF3	; 243
    175e:	e4 17       	cp	r30, r20
    1760:	f5 07       	cpc	r31, r21
    1762:	29 f4       	brne	.+10     	; 0x176e <vTaskSwitchContext+0xae>
    1764:	44 81       	ldd	r20, Z+4	; 0x04
    1766:	55 81       	ldd	r21, Z+5	; 0x05
    1768:	fd 01       	movw	r30, r26
    176a:	52 83       	std	Z+2, r21	; 0x02
    176c:	41 83       	std	Z+1, r20	; 0x01
    176e:	9b e0       	ldi	r25, 0x0B	; 11
    1770:	92 9f       	mul	r25, r18
    1772:	f0 01       	movw	r30, r0
    1774:	93 9f       	mul	r25, r19
    1776:	f0 0d       	add	r31, r0
    1778:	11 24       	eor	r1, r1
    177a:	ed 57       	subi	r30, 0x7D	; 125
    177c:	f3 4f       	sbci	r31, 0xF3	; 243
    177e:	01 80       	ldd	r0, Z+1	; 0x01
    1780:	f2 81       	ldd	r31, Z+2	; 0x02
    1782:	e0 2d       	mov	r30, r0
    1784:	20 85       	ldd	r18, Z+8	; 0x08
    1786:	31 85       	ldd	r19, Z+9	; 0x09
    1788:	30 93 f2 0c 	sts	0x0CF2, r19	; 0x800cf2 <pxCurrentTCB+0x1>
    178c:	20 93 f1 0c 	sts	0x0CF1, r18	; 0x800cf1 <pxCurrentTCB>
    1790:	80 93 41 0c 	sts	0x0C41, r24	; 0x800c41 <uxTopReadyPriority>
    1794:	e0 91 f1 0c 	lds	r30, 0x0CF1	; 0x800cf1 <pxCurrentTCB>
    1798:	f0 91 f2 0c 	lds	r31, 0x0CF2	; 0x800cf2 <pxCurrentTCB+0x1>
    179c:	87 a5       	ldd	r24, Z+47	; 0x2f
    179e:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <task_switch_in>
    17a2:	08 95       	ret

000017a4 <vTaskPlaceOnEventList>:
    17a4:	cf 92       	push	r12
    17a6:	df 92       	push	r13
    17a8:	ef 92       	push	r14
    17aa:	ff 92       	push	r15
    17ac:	6a 01       	movw	r12, r20
    17ae:	7b 01       	movw	r14, r22
    17b0:	60 91 f1 0c 	lds	r22, 0x0CF1	; 0x800cf1 <pxCurrentTCB>
    17b4:	70 91 f2 0c 	lds	r23, 0x0CF2	; 0x800cf2 <pxCurrentTCB+0x1>
    17b8:	62 5f       	subi	r22, 0xF2	; 242
    17ba:	7f 4f       	sbci	r23, 0xFF	; 255
    17bc:	0e 94 72 02 	call	0x4e4	; 0x4e4 <vListInsert>
    17c0:	41 e0       	ldi	r20, 0x01	; 1
    17c2:	c7 01       	movw	r24, r14
    17c4:	b6 01       	movw	r22, r12
    17c6:	20 dc       	rcall	.-1984   	; 0x1008 <prvAddCurrentTaskToDelayedList>
    17c8:	ff 90       	pop	r15
    17ca:	ef 90       	pop	r14
    17cc:	df 90       	pop	r13
    17ce:	cf 90       	pop	r12
    17d0:	08 95       	ret

000017d2 <vTaskPlaceOnEventListRestricted>:
    17d2:	cf 93       	push	r28
    17d4:	df 93       	push	r29
    17d6:	fc 01       	movw	r30, r24
    17d8:	cb 01       	movw	r24, r22
    17da:	ba 01       	movw	r22, r20
    17dc:	a1 81       	ldd	r26, Z+1	; 0x01
    17de:	b2 81       	ldd	r27, Z+2	; 0x02
    17e0:	c0 91 f1 0c 	lds	r28, 0x0CF1	; 0x800cf1 <pxCurrentTCB>
    17e4:	d0 91 f2 0c 	lds	r29, 0x0CF2	; 0x800cf2 <pxCurrentTCB+0x1>
    17e8:	bb 8b       	std	Y+19, r27	; 0x13
    17ea:	aa 8b       	std	Y+18, r26	; 0x12
    17ec:	c0 91 f1 0c 	lds	r28, 0x0CF1	; 0x800cf1 <pxCurrentTCB>
    17f0:	d0 91 f2 0c 	lds	r29, 0x0CF2	; 0x800cf2 <pxCurrentTCB+0x1>
    17f4:	16 96       	adiw	r26, 0x06	; 6
    17f6:	4d 91       	ld	r20, X+
    17f8:	5c 91       	ld	r21, X
    17fa:	17 97       	sbiw	r26, 0x07	; 7
    17fc:	5d 8b       	std	Y+21, r21	; 0x15
    17fe:	4c 8b       	std	Y+20, r20	; 0x14
    1800:	16 96       	adiw	r26, 0x06	; 6
    1802:	cd 91       	ld	r28, X+
    1804:	dc 91       	ld	r29, X
    1806:	17 97       	sbiw	r26, 0x07	; 7
    1808:	40 91 f1 0c 	lds	r20, 0x0CF1	; 0x800cf1 <pxCurrentTCB>
    180c:	50 91 f2 0c 	lds	r21, 0x0CF2	; 0x800cf2 <pxCurrentTCB+0x1>
    1810:	42 5f       	subi	r20, 0xF2	; 242
    1812:	5f 4f       	sbci	r21, 0xFF	; 255
    1814:	5d 83       	std	Y+5, r21	; 0x05
    1816:	4c 83       	std	Y+4, r20	; 0x04
    1818:	40 91 f1 0c 	lds	r20, 0x0CF1	; 0x800cf1 <pxCurrentTCB>
    181c:	50 91 f2 0c 	lds	r21, 0x0CF2	; 0x800cf2 <pxCurrentTCB+0x1>
    1820:	42 5f       	subi	r20, 0xF2	; 242
    1822:	5f 4f       	sbci	r21, 0xFF	; 255
    1824:	17 96       	adiw	r26, 0x07	; 7
    1826:	5c 93       	st	X, r21
    1828:	4e 93       	st	-X, r20
    182a:	16 97       	sbiw	r26, 0x06	; 6
    182c:	a0 91 f1 0c 	lds	r26, 0x0CF1	; 0x800cf1 <pxCurrentTCB>
    1830:	b0 91 f2 0c 	lds	r27, 0x0CF2	; 0x800cf2 <pxCurrentTCB+0x1>
    1834:	59 96       	adiw	r26, 0x19	; 25
    1836:	fc 93       	st	X, r31
    1838:	ee 93       	st	-X, r30
    183a:	58 97       	sbiw	r26, 0x18	; 24
    183c:	30 81       	ld	r19, Z
    183e:	3f 5f       	subi	r19, 0xFF	; 255
    1840:	30 83       	st	Z, r19
    1842:	22 23       	and	r18, r18
    1844:	19 f0       	breq	.+6      	; 0x184c <vTaskPlaceOnEventListRestricted+0x7a>
    1846:	6f ef       	ldi	r22, 0xFF	; 255
    1848:	7f ef       	ldi	r23, 0xFF	; 255
    184a:	cb 01       	movw	r24, r22
    184c:	42 2f       	mov	r20, r18
    184e:	dc db       	rcall	.-2120   	; 0x1008 <prvAddCurrentTaskToDelayedList>
    1850:	df 91       	pop	r29
    1852:	cf 91       	pop	r28
    1854:	08 95       	ret

00001856 <xTaskRemoveFromEventList>:
    1856:	cf 93       	push	r28
    1858:	df 93       	push	r29
    185a:	dc 01       	movw	r26, r24
    185c:	17 96       	adiw	r26, 0x07	; 7
    185e:	ed 91       	ld	r30, X+
    1860:	fc 91       	ld	r31, X
    1862:	18 97       	sbiw	r26, 0x08	; 8
    1864:	00 84       	ldd	r0, Z+8	; 0x08
    1866:	f1 85       	ldd	r31, Z+9	; 0x09
    1868:	e0 2d       	mov	r30, r0
    186a:	a0 8d       	ldd	r26, Z+24	; 0x18
    186c:	b1 8d       	ldd	r27, Z+25	; 0x19
    186e:	c2 89       	ldd	r28, Z+18	; 0x12
    1870:	d3 89       	ldd	r29, Z+19	; 0x13
    1872:	84 89       	ldd	r24, Z+20	; 0x14
    1874:	95 89       	ldd	r25, Z+21	; 0x15
    1876:	9f 83       	std	Y+7, r25	; 0x07
    1878:	8e 83       	std	Y+6, r24	; 0x06
    187a:	c4 89       	ldd	r28, Z+20	; 0x14
    187c:	d5 89       	ldd	r29, Z+21	; 0x15
    187e:	82 89       	ldd	r24, Z+18	; 0x12
    1880:	93 89       	ldd	r25, Z+19	; 0x13
    1882:	9d 83       	std	Y+5, r25	; 0x05
    1884:	8c 83       	std	Y+4, r24	; 0x04
    1886:	11 96       	adiw	r26, 0x01	; 1
    1888:	8d 91       	ld	r24, X+
    188a:	9c 91       	ld	r25, X
    188c:	12 97       	sbiw	r26, 0x02	; 2
    188e:	9f 01       	movw	r18, r30
    1890:	22 5f       	subi	r18, 0xF2	; 242
    1892:	3f 4f       	sbci	r19, 0xFF	; 255
    1894:	82 17       	cp	r24, r18
    1896:	93 07       	cpc	r25, r19
    1898:	31 f4       	brne	.+12     	; 0x18a6 <xTaskRemoveFromEventList+0x50>
    189a:	84 89       	ldd	r24, Z+20	; 0x14
    189c:	95 89       	ldd	r25, Z+21	; 0x15
    189e:	12 96       	adiw	r26, 0x02	; 2
    18a0:	9c 93       	st	X, r25
    18a2:	8e 93       	st	-X, r24
    18a4:	11 97       	sbiw	r26, 0x01	; 1
    18a6:	11 8e       	std	Z+25, r1	; 0x19
    18a8:	10 8e       	std	Z+24, r1	; 0x18
    18aa:	8c 91       	ld	r24, X
    18ac:	81 50       	subi	r24, 0x01	; 1
    18ae:	8c 93       	st	X, r24
    18b0:	80 91 32 0c 	lds	r24, 0x0C32	; 0x800c32 <uxSchedulerSuspended>
    18b4:	81 11       	cpse	r24, r1
    18b6:	52 c0       	rjmp	.+164    	; 0x195c <xTaskRemoveFromEventList+0x106>
    18b8:	a4 85       	ldd	r26, Z+12	; 0x0c
    18ba:	b5 85       	ldd	r27, Z+13	; 0x0d
    18bc:	c6 81       	ldd	r28, Z+6	; 0x06
    18be:	d7 81       	ldd	r29, Z+7	; 0x07
    18c0:	80 85       	ldd	r24, Z+8	; 0x08
    18c2:	91 85       	ldd	r25, Z+9	; 0x09
    18c4:	9f 83       	std	Y+7, r25	; 0x07
    18c6:	8e 83       	std	Y+6, r24	; 0x06
    18c8:	c0 85       	ldd	r28, Z+8	; 0x08
    18ca:	d1 85       	ldd	r29, Z+9	; 0x09
    18cc:	86 81       	ldd	r24, Z+6	; 0x06
    18ce:	97 81       	ldd	r25, Z+7	; 0x07
    18d0:	9d 83       	std	Y+5, r25	; 0x05
    18d2:	8c 83       	std	Y+4, r24	; 0x04
    18d4:	11 96       	adiw	r26, 0x01	; 1
    18d6:	8d 91       	ld	r24, X+
    18d8:	9c 91       	ld	r25, X
    18da:	12 97       	sbiw	r26, 0x02	; 2
    18dc:	9f 01       	movw	r18, r30
    18de:	2e 5f       	subi	r18, 0xFE	; 254
    18e0:	3f 4f       	sbci	r19, 0xFF	; 255
    18e2:	82 17       	cp	r24, r18
    18e4:	93 07       	cpc	r25, r19
    18e6:	31 f4       	brne	.+12     	; 0x18f4 <xTaskRemoveFromEventList+0x9e>
    18e8:	80 85       	ldd	r24, Z+8	; 0x08
    18ea:	91 85       	ldd	r25, Z+9	; 0x09
    18ec:	12 96       	adiw	r26, 0x02	; 2
    18ee:	9c 93       	st	X, r25
    18f0:	8e 93       	st	-X, r24
    18f2:	11 97       	sbiw	r26, 0x01	; 1
    18f4:	15 86       	std	Z+13, r1	; 0x0d
    18f6:	14 86       	std	Z+12, r1	; 0x0c
    18f8:	8c 91       	ld	r24, X
    18fa:	81 50       	subi	r24, 0x01	; 1
    18fc:	8c 93       	st	X, r24
    18fe:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1900:	80 91 41 0c 	lds	r24, 0x0C41	; 0x800c41 <uxTopReadyPriority>
    1904:	8a 17       	cp	r24, r26
    1906:	10 f4       	brcc	.+4      	; 0x190c <xTaskRemoveFromEventList+0xb6>
    1908:	a0 93 41 0c 	sts	0x0C41, r26	; 0x800c41 <uxTopReadyPriority>
    190c:	8b e0       	ldi	r24, 0x0B	; 11
    190e:	8a 9f       	mul	r24, r26
    1910:	d0 01       	movw	r26, r0
    1912:	11 24       	eor	r1, r1
    1914:	ad 57       	subi	r26, 0x7D	; 125
    1916:	b3 4f       	sbci	r27, 0xF3	; 243
    1918:	11 96       	adiw	r26, 0x01	; 1
    191a:	0d 90       	ld	r0, X+
    191c:	bc 91       	ld	r27, X
    191e:	a0 2d       	mov	r26, r0
    1920:	b7 83       	std	Z+7, r27	; 0x07
    1922:	a6 83       	std	Z+6, r26	; 0x06
    1924:	16 96       	adiw	r26, 0x06	; 6
    1926:	4d 91       	ld	r20, X+
    1928:	5c 91       	ld	r21, X
    192a:	17 97       	sbiw	r26, 0x07	; 7
    192c:	51 87       	std	Z+9, r21	; 0x09
    192e:	40 87       	std	Z+8, r20	; 0x08
    1930:	16 96       	adiw	r26, 0x06	; 6
    1932:	cd 91       	ld	r28, X+
    1934:	dc 91       	ld	r29, X
    1936:	17 97       	sbiw	r26, 0x07	; 7
    1938:	3d 83       	std	Y+5, r19	; 0x05
    193a:	2c 83       	std	Y+4, r18	; 0x04
    193c:	17 96       	adiw	r26, 0x07	; 7
    193e:	3c 93       	st	X, r19
    1940:	2e 93       	st	-X, r18
    1942:	16 97       	sbiw	r26, 0x06	; 6
    1944:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1946:	8a 9f       	mul	r24, r26
    1948:	d0 01       	movw	r26, r0
    194a:	11 24       	eor	r1, r1
    194c:	ad 57       	subi	r26, 0x7D	; 125
    194e:	b3 4f       	sbci	r27, 0xF3	; 243
    1950:	b5 87       	std	Z+13, r27	; 0x0d
    1952:	a4 87       	std	Z+12, r26	; 0x0c
    1954:	8c 91       	ld	r24, X
    1956:	8f 5f       	subi	r24, 0xFF	; 255
    1958:	8c 93       	st	X, r24
    195a:	1c c0       	rjmp	.+56     	; 0x1994 <xTaskRemoveFromEventList+0x13e>
    195c:	4e e5       	ldi	r20, 0x5E	; 94
    195e:	5c e0       	ldi	r21, 0x0C	; 12
    1960:	da 01       	movw	r26, r20
    1962:	11 96       	adiw	r26, 0x01	; 1
    1964:	cd 91       	ld	r28, X+
    1966:	dc 91       	ld	r29, X
    1968:	12 97       	sbiw	r26, 0x02	; 2
    196a:	d3 8b       	std	Z+19, r29	; 0x13
    196c:	c2 8b       	std	Z+18, r28	; 0x12
    196e:	8e 81       	ldd	r24, Y+6	; 0x06
    1970:	9f 81       	ldd	r25, Y+7	; 0x07
    1972:	95 8b       	std	Z+21, r25	; 0x15
    1974:	84 8b       	std	Z+20, r24	; 0x14
    1976:	8e 81       	ldd	r24, Y+6	; 0x06
    1978:	9f 81       	ldd	r25, Y+7	; 0x07
    197a:	dc 01       	movw	r26, r24
    197c:	15 96       	adiw	r26, 0x05	; 5
    197e:	3c 93       	st	X, r19
    1980:	2e 93       	st	-X, r18
    1982:	14 97       	sbiw	r26, 0x04	; 4
    1984:	3f 83       	std	Y+7, r19	; 0x07
    1986:	2e 83       	std	Y+6, r18	; 0x06
    1988:	51 8f       	std	Z+25, r21	; 0x19
    198a:	40 8f       	std	Z+24, r20	; 0x18
    198c:	da 01       	movw	r26, r20
    198e:	8c 91       	ld	r24, X
    1990:	8f 5f       	subi	r24, 0xFF	; 255
    1992:	8c 93       	st	X, r24
    1994:	92 8d       	ldd	r25, Z+26	; 0x1a
    1996:	e0 91 f1 0c 	lds	r30, 0x0CF1	; 0x800cf1 <pxCurrentTCB>
    199a:	f0 91 f2 0c 	lds	r31, 0x0CF2	; 0x800cf2 <pxCurrentTCB+0x1>
    199e:	82 8d       	ldd	r24, Z+26	; 0x1a
    19a0:	89 17       	cp	r24, r25
    19a2:	20 f4       	brcc	.+8      	; 0x19ac <xTaskRemoveFromEventList+0x156>
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	80 93 3b 0c 	sts	0x0C3B, r24	; 0x800c3b <xYieldPending>
    19aa:	01 c0       	rjmp	.+2      	; 0x19ae <xTaskRemoveFromEventList+0x158>
    19ac:	80 e0       	ldi	r24, 0x00	; 0
    19ae:	df 91       	pop	r29
    19b0:	cf 91       	pop	r28
    19b2:	08 95       	ret

000019b4 <vTaskInternalSetTimeOutState>:
    19b4:	20 91 3a 0c 	lds	r18, 0x0C3A	; 0x800c3a <xNumOfOverflows>
    19b8:	fc 01       	movw	r30, r24
    19ba:	20 83       	st	Z, r18
    19bc:	40 91 42 0c 	lds	r20, 0x0C42	; 0x800c42 <xTickCount>
    19c0:	50 91 43 0c 	lds	r21, 0x0C43	; 0x800c43 <xTickCount+0x1>
    19c4:	60 91 44 0c 	lds	r22, 0x0C44	; 0x800c44 <xTickCount+0x2>
    19c8:	70 91 45 0c 	lds	r23, 0x0C45	; 0x800c45 <xTickCount+0x3>
    19cc:	41 83       	std	Z+1, r20	; 0x01
    19ce:	52 83       	std	Z+2, r21	; 0x02
    19d0:	63 83       	std	Z+3, r22	; 0x03
    19d2:	74 83       	std	Z+4, r23	; 0x04
    19d4:	08 95       	ret

000019d6 <xTaskCheckForTimeOut>:
    19d6:	8f 92       	push	r8
    19d8:	9f 92       	push	r9
    19da:	af 92       	push	r10
    19dc:	bf 92       	push	r11
    19de:	cf 92       	push	r12
    19e0:	df 92       	push	r13
    19e2:	ef 92       	push	r14
    19e4:	ff 92       	push	r15
    19e6:	0f 93       	push	r16
    19e8:	1f 93       	push	r17
    19ea:	cf 93       	push	r28
    19ec:	df 93       	push	r29
    19ee:	fb 01       	movw	r30, r22
    19f0:	0f b6       	in	r0, 0x3f	; 63
    19f2:	f8 94       	cli
    19f4:	0f 92       	push	r0
    19f6:	c0 90 42 0c 	lds	r12, 0x0C42	; 0x800c42 <xTickCount>
    19fa:	d0 90 43 0c 	lds	r13, 0x0C43	; 0x800c43 <xTickCount+0x1>
    19fe:	e0 90 44 0c 	lds	r14, 0x0C44	; 0x800c44 <xTickCount+0x2>
    1a02:	f0 90 45 0c 	lds	r15, 0x0C45	; 0x800c45 <xTickCount+0x3>
    1a06:	dc 01       	movw	r26, r24
    1a08:	11 96       	adiw	r26, 0x01	; 1
    1a0a:	0d 91       	ld	r16, X+
    1a0c:	1d 91       	ld	r17, X+
    1a0e:	2d 91       	ld	r18, X+
    1a10:	3c 91       	ld	r19, X
    1a12:	14 97       	sbiw	r26, 0x04	; 4
    1a14:	46 01       	movw	r8, r12
    1a16:	57 01       	movw	r10, r14
    1a18:	80 1a       	sub	r8, r16
    1a1a:	91 0a       	sbc	r9, r17
    1a1c:	a2 0a       	sbc	r10, r18
    1a1e:	b3 0a       	sbc	r11, r19
    1a20:	40 81       	ld	r20, Z
    1a22:	51 81       	ldd	r21, Z+1	; 0x01
    1a24:	62 81       	ldd	r22, Z+2	; 0x02
    1a26:	73 81       	ldd	r23, Z+3	; 0x03
    1a28:	4f 3f       	cpi	r20, 0xFF	; 255
    1a2a:	bf ef       	ldi	r27, 0xFF	; 255
    1a2c:	5b 07       	cpc	r21, r27
    1a2e:	6b 07       	cpc	r22, r27
    1a30:	7b 07       	cpc	r23, r27
    1a32:	39 f1       	breq	.+78     	; 0x1a82 <xTaskCheckForTimeOut+0xac>
    1a34:	ec 01       	movw	r28, r24
    1a36:	b8 81       	ld	r27, Y
    1a38:	a0 91 3a 0c 	lds	r26, 0x0C3A	; 0x800c3a <xNumOfOverflows>
    1a3c:	ba 17       	cp	r27, r26
    1a3e:	59 f0       	breq	.+22     	; 0x1a56 <xTaskCheckForTimeOut+0x80>
    1a40:	c0 16       	cp	r12, r16
    1a42:	d1 06       	cpc	r13, r17
    1a44:	e2 06       	cpc	r14, r18
    1a46:	f3 06       	cpc	r15, r19
    1a48:	30 f0       	brcs	.+12     	; 0x1a56 <xTaskCheckForTimeOut+0x80>
    1a4a:	10 82       	st	Z, r1
    1a4c:	11 82       	std	Z+1, r1	; 0x01
    1a4e:	12 82       	std	Z+2, r1	; 0x02
    1a50:	13 82       	std	Z+3, r1	; 0x03
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	17 c0       	rjmp	.+46     	; 0x1a84 <xTaskCheckForTimeOut+0xae>
    1a56:	84 16       	cp	r8, r20
    1a58:	95 06       	cpc	r9, r21
    1a5a:	a6 06       	cpc	r10, r22
    1a5c:	b7 06       	cpc	r11, r23
    1a5e:	58 f4       	brcc	.+22     	; 0x1a76 <xTaskCheckForTimeOut+0xa0>
    1a60:	48 19       	sub	r20, r8
    1a62:	59 09       	sbc	r21, r9
    1a64:	6a 09       	sbc	r22, r10
    1a66:	7b 09       	sbc	r23, r11
    1a68:	40 83       	st	Z, r20
    1a6a:	51 83       	std	Z+1, r21	; 0x01
    1a6c:	62 83       	std	Z+2, r22	; 0x02
    1a6e:	73 83       	std	Z+3, r23	; 0x03
    1a70:	a1 df       	rcall	.-190    	; 0x19b4 <vTaskInternalSetTimeOutState>
    1a72:	80 e0       	ldi	r24, 0x00	; 0
    1a74:	07 c0       	rjmp	.+14     	; 0x1a84 <xTaskCheckForTimeOut+0xae>
    1a76:	10 82       	st	Z, r1
    1a78:	11 82       	std	Z+1, r1	; 0x01
    1a7a:	12 82       	std	Z+2, r1	; 0x02
    1a7c:	13 82       	std	Z+3, r1	; 0x03
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	01 c0       	rjmp	.+2      	; 0x1a84 <xTaskCheckForTimeOut+0xae>
    1a82:	80 e0       	ldi	r24, 0x00	; 0
    1a84:	0f 90       	pop	r0
    1a86:	0f be       	out	0x3f, r0	; 63
    1a88:	df 91       	pop	r29
    1a8a:	cf 91       	pop	r28
    1a8c:	1f 91       	pop	r17
    1a8e:	0f 91       	pop	r16
    1a90:	ff 90       	pop	r15
    1a92:	ef 90       	pop	r14
    1a94:	df 90       	pop	r13
    1a96:	cf 90       	pop	r12
    1a98:	bf 90       	pop	r11
    1a9a:	af 90       	pop	r10
    1a9c:	9f 90       	pop	r9
    1a9e:	8f 90       	pop	r8
    1aa0:	08 95       	ret

00001aa2 <vTaskMissedYield>:
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	80 93 3b 0c 	sts	0x0C3B, r24	; 0x800c3b <xYieldPending>
    1aa8:	08 95       	ret

00001aaa <xTaskGetSchedulerState>:
    1aaa:	80 91 40 0c 	lds	r24, 0x0C40	; 0x800c40 <xSchedulerRunning>
    1aae:	88 23       	and	r24, r24
    1ab0:	31 f0       	breq	.+12     	; 0x1abe <xTaskGetSchedulerState+0x14>
    1ab2:	80 91 32 0c 	lds	r24, 0x0C32	; 0x800c32 <uxSchedulerSuspended>
    1ab6:	81 11       	cpse	r24, r1
    1ab8:	04 c0       	rjmp	.+8      	; 0x1ac2 <xTaskGetSchedulerState+0x18>
    1aba:	82 e0       	ldi	r24, 0x02	; 2
    1abc:	08 95       	ret
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	08 95       	ret
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	08 95       	ret

00001ac6 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    1ac6:	0f 93       	push	r16
    1ac8:	1f 93       	push	r17
    1aca:	cf 93       	push	r28
    1acc:	df 93       	push	r29
    1ace:	fc 01       	movw	r30, r24
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;

        if( pxMutexHolder != NULL )
    1ad0:	89 2b       	or	r24, r25
    1ad2:	09 f4       	brne	.+2      	; 0x1ad6 <xTaskPriorityDisinherit+0x10>
    1ad4:	49 c0       	rjmp	.+146    	; 0x1b68 <xTaskPriorityDisinherit+0xa2>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
    1ad6:	86 a5       	ldd	r24, Z+46	; 0x2e
    1ad8:	81 50       	subi	r24, 0x01	; 1
    1ada:	86 a7       	std	Z+46, r24	; 0x2e

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    1adc:	22 8d       	ldd	r18, Z+26	; 0x1a
    1ade:	95 a5       	ldd	r25, Z+45	; 0x2d
    1ae0:	29 17       	cp	r18, r25
    1ae2:	09 f4       	brne	.+2      	; 0x1ae6 <xTaskPriorityDisinherit+0x20>
    1ae4:	43 c0       	rjmp	.+134    	; 0x1b6c <xTaskPriorityDisinherit+0xa6>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    1ae6:	81 11       	cpse	r24, r1
    1ae8:	43 c0       	rjmp	.+134    	; 0x1b70 <xTaskPriorityDisinherit+0xaa>
    1aea:	ef 01       	movw	r28, r30
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1aec:	8f 01       	movw	r16, r30
    1aee:	0e 5f       	subi	r16, 0xFE	; 254
    1af0:	1f 4f       	sbci	r17, 0xFF	; 255
    1af2:	c8 01       	movw	r24, r16
    1af4:	0e 94 af 02 	call	0x55e	; 0x55e <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
    1af8:	ed a5       	ldd	r30, Y+45	; 0x2d
    1afa:	ea 8f       	std	Y+26, r30	; 0x1a

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1afc:	8a e0       	ldi	r24, 0x0A	; 10
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	a0 e0       	ldi	r26, 0x00	; 0
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	8e 1b       	sub	r24, r30
    1b06:	91 09       	sbc	r25, r1
    1b08:	a1 09       	sbc	r26, r1
    1b0a:	b1 09       	sbc	r27, r1
    1b0c:	8e 87       	std	Y+14, r24	; 0x0e
    1b0e:	9f 87       	std	Y+15, r25	; 0x0f
    1b10:	a8 8b       	std	Y+16, r26	; 0x10
    1b12:	b9 8b       	std	Y+17, r27	; 0x11
                    prvAddTaskToReadyList( pxTCB );
    1b14:	80 91 41 0c 	lds	r24, 0x0C41	; 0x800c41 <uxTopReadyPriority>
    1b18:	8e 17       	cp	r24, r30
    1b1a:	10 f4       	brcc	.+4      	; 0x1b20 <xTaskPriorityDisinherit+0x5a>
    1b1c:	e0 93 41 0c 	sts	0x0C41, r30	; 0x800c41 <uxTopReadyPriority>
    1b20:	8b e0       	ldi	r24, 0x0B	; 11
    1b22:	8e 9f       	mul	r24, r30
    1b24:	f0 01       	movw	r30, r0
    1b26:	11 24       	eor	r1, r1
    1b28:	ed 57       	subi	r30, 0x7D	; 125
    1b2a:	f3 4f       	sbci	r31, 0xF3	; 243
    1b2c:	01 80       	ldd	r0, Z+1	; 0x01
    1b2e:	f2 81       	ldd	r31, Z+2	; 0x02
    1b30:	e0 2d       	mov	r30, r0
    1b32:	ff 83       	std	Y+7, r31	; 0x07
    1b34:	ee 83       	std	Y+6, r30	; 0x06
    1b36:	26 81       	ldd	r18, Z+6	; 0x06
    1b38:	37 81       	ldd	r19, Z+7	; 0x07
    1b3a:	39 87       	std	Y+9, r19	; 0x09
    1b3c:	28 87       	std	Y+8, r18	; 0x08
    1b3e:	a6 81       	ldd	r26, Z+6	; 0x06
    1b40:	b7 81       	ldd	r27, Z+7	; 0x07
    1b42:	15 96       	adiw	r26, 0x05	; 5
    1b44:	1c 93       	st	X, r17
    1b46:	0e 93       	st	-X, r16
    1b48:	14 97       	sbiw	r26, 0x04	; 4
    1b4a:	17 83       	std	Z+7, r17	; 0x07
    1b4c:	06 83       	std	Z+6, r16	; 0x06
    1b4e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1b50:	8e 9f       	mul	r24, r30
    1b52:	f0 01       	movw	r30, r0
    1b54:	11 24       	eor	r1, r1
    1b56:	ed 57       	subi	r30, 0x7D	; 125
    1b58:	f3 4f       	sbci	r31, 0xF3	; 243
    1b5a:	fd 87       	std	Y+13, r31	; 0x0d
    1b5c:	ec 87       	std	Y+12, r30	; 0x0c
    1b5e:	80 81       	ld	r24, Z
    1b60:	8f 5f       	subi	r24, 0xFF	; 255
    1b62:	80 83       	st	Z, r24
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	05 c0       	rjmp	.+10     	; 0x1b72 <xTaskPriorityDisinherit+0xac>
#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	03 c0       	rjmp	.+6      	; 0x1b72 <xTaskPriorityDisinherit+0xac>
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	01 c0       	rjmp	.+2      	; 0x1b72 <xTaskPriorityDisinherit+0xac>
    1b70:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    1b72:	df 91       	pop	r29
    1b74:	cf 91       	pop	r28
    1b76:	1f 91       	pop	r17
    1b78:	0f 91       	pop	r16
    1b7a:	08 95       	ret

00001b7c <prvGetNextExpireTime>:
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	e0 91 fd 0c 	lds	r30, 0x0CFD	; 0x800cfd <pxCurrentTimerList>
    1b82:	f0 91 fe 0c 	lds	r31, 0x0CFE	; 0x800cfe <pxCurrentTimerList+0x1>
    1b86:	80 81       	ld	r24, Z
    1b88:	91 e0       	ldi	r25, 0x01	; 1
    1b8a:	81 11       	cpse	r24, r1
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	9c 93       	st	X, r25
    1b90:	91 11       	cpse	r25, r1
    1b92:	08 c0       	rjmp	.+16     	; 0x1ba4 <prvGetNextExpireTime+0x28>
    1b94:	07 80       	ldd	r0, Z+7	; 0x07
    1b96:	f0 85       	ldd	r31, Z+8	; 0x08
    1b98:	e0 2d       	mov	r30, r0
    1b9a:	60 81       	ld	r22, Z
    1b9c:	71 81       	ldd	r23, Z+1	; 0x01
    1b9e:	82 81       	ldd	r24, Z+2	; 0x02
    1ba0:	93 81       	ldd	r25, Z+3	; 0x03
    1ba2:	08 95       	ret
    1ba4:	60 e0       	ldi	r22, 0x00	; 0
    1ba6:	70 e0       	ldi	r23, 0x00	; 0
    1ba8:	cb 01       	movw	r24, r22
    1baa:	08 95       	ret

00001bac <prvInsertTimerInActiveList>:
    1bac:	cf 92       	push	r12
    1bae:	df 92       	push	r13
    1bb0:	ef 92       	push	r14
    1bb2:	ff 92       	push	r15
    1bb4:	0f 93       	push	r16
    1bb6:	1f 93       	push	r17
    1bb8:	fc 01       	movw	r30, r24
    1bba:	42 83       	std	Z+2, r20	; 0x02
    1bbc:	53 83       	std	Z+3, r21	; 0x03
    1bbe:	64 83       	std	Z+4, r22	; 0x04
    1bc0:	75 83       	std	Z+5, r23	; 0x05
    1bc2:	93 87       	std	Z+11, r25	; 0x0b
    1bc4:	82 87       	std	Z+10, r24	; 0x0a
    1bc6:	04 17       	cp	r16, r20
    1bc8:	15 07       	cpc	r17, r21
    1bca:	26 07       	cpc	r18, r22
    1bcc:	37 07       	cpc	r19, r23
    1bce:	c0 f0       	brcs	.+48     	; 0x1c00 <prvInsertTimerInActiveList+0x54>
    1bd0:	0c 19       	sub	r16, r12
    1bd2:	1d 09       	sbc	r17, r13
    1bd4:	2e 09       	sbc	r18, r14
    1bd6:	3f 09       	sbc	r19, r15
    1bd8:	86 85       	ldd	r24, Z+14	; 0x0e
    1bda:	97 85       	ldd	r25, Z+15	; 0x0f
    1bdc:	a0 89       	ldd	r26, Z+16	; 0x10
    1bde:	b1 89       	ldd	r27, Z+17	; 0x11
    1be0:	08 17       	cp	r16, r24
    1be2:	19 07       	cpc	r17, r25
    1be4:	2a 07       	cpc	r18, r26
    1be6:	3b 07       	cpc	r19, r27
    1be8:	00 f5       	brcc	.+64     	; 0x1c2a <prvInsertTimerInActiveList+0x7e>
    1bea:	bf 01       	movw	r22, r30
    1bec:	6e 5f       	subi	r22, 0xFE	; 254
    1bee:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf0:	80 91 fb 0c 	lds	r24, 0x0CFB	; 0x800cfb <pxOverflowTimerList>
    1bf4:	90 91 fc 0c 	lds	r25, 0x0CFC	; 0x800cfc <pxOverflowTimerList+0x1>
    1bf8:	0e 94 72 02 	call	0x4e4	; 0x4e4 <vListInsert>
    1bfc:	80 e0       	ldi	r24, 0x00	; 0
    1bfe:	18 c0       	rjmp	.+48     	; 0x1c30 <prvInsertTimerInActiveList+0x84>
    1c00:	0c 15       	cp	r16, r12
    1c02:	1d 05       	cpc	r17, r13
    1c04:	2e 05       	cpc	r18, r14
    1c06:	3f 05       	cpc	r19, r15
    1c08:	28 f4       	brcc	.+10     	; 0x1c14 <prvInsertTimerInActiveList+0x68>
    1c0a:	4c 15       	cp	r20, r12
    1c0c:	5d 05       	cpc	r21, r13
    1c0e:	6e 05       	cpc	r22, r14
    1c10:	7f 05       	cpc	r23, r15
    1c12:	68 f4       	brcc	.+26     	; 0x1c2e <prvInsertTimerInActiveList+0x82>
    1c14:	bf 01       	movw	r22, r30
    1c16:	6e 5f       	subi	r22, 0xFE	; 254
    1c18:	7f 4f       	sbci	r23, 0xFF	; 255
    1c1a:	80 91 fd 0c 	lds	r24, 0x0CFD	; 0x800cfd <pxCurrentTimerList>
    1c1e:	90 91 fe 0c 	lds	r25, 0x0CFE	; 0x800cfe <pxCurrentTimerList+0x1>
    1c22:	0e 94 72 02 	call	0x4e4	; 0x4e4 <vListInsert>
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	03 c0       	rjmp	.+6      	; 0x1c30 <prvInsertTimerInActiveList+0x84>
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	01 c0       	rjmp	.+2      	; 0x1c30 <prvInsertTimerInActiveList+0x84>
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	1f 91       	pop	r17
    1c32:	0f 91       	pop	r16
    1c34:	ff 90       	pop	r15
    1c36:	ef 90       	pop	r14
    1c38:	df 90       	pop	r13
    1c3a:	cf 90       	pop	r12
    1c3c:	08 95       	ret

00001c3e <prvCheckForValidListAndQueue>:
    1c3e:	0f b6       	in	r0, 0x3f	; 63
    1c40:	f8 94       	cli
    1c42:	0f 92       	push	r0
    1c44:	80 91 f9 0c 	lds	r24, 0x0CF9	; 0x800cf9 <xTimerQueue>
    1c48:	90 91 fa 0c 	lds	r25, 0x0CFA	; 0x800cfa <xTimerQueue+0x1>
    1c4c:	89 2b       	or	r24, r25
    1c4e:	e9 f4       	brne	.+58     	; 0x1c8a <prvCheckForValidListAndQueue+0x4c>
    1c50:	8a e0       	ldi	r24, 0x0A	; 10
    1c52:	9d e0       	ldi	r25, 0x0D	; 13
    1c54:	0e 94 5d 02 	call	0x4ba	; 0x4ba <vListInitialise>
    1c58:	8f ef       	ldi	r24, 0xFF	; 255
    1c5a:	9c e0       	ldi	r25, 0x0C	; 12
    1c5c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <vListInitialise>
    1c60:	8a e0       	ldi	r24, 0x0A	; 10
    1c62:	9d e0       	ldi	r25, 0x0D	; 13
    1c64:	90 93 fe 0c 	sts	0x0CFE, r25	; 0x800cfe <pxCurrentTimerList+0x1>
    1c68:	80 93 fd 0c 	sts	0x0CFD, r24	; 0x800cfd <pxCurrentTimerList>
    1c6c:	8f ef       	ldi	r24, 0xFF	; 255
    1c6e:	9c e0       	ldi	r25, 0x0C	; 12
    1c70:	90 93 fc 0c 	sts	0x0CFC, r25	; 0x800cfc <pxOverflowTimerList+0x1>
    1c74:	80 93 fb 0c 	sts	0x0CFB, r24	; 0x800cfb <pxOverflowTimerList>
    1c78:	40 e0       	ldi	r20, 0x00	; 0
    1c7a:	67 e0       	ldi	r22, 0x07	; 7
    1c7c:	8a e0       	ldi	r24, 0x0A	; 10
    1c7e:	0e 94 0b 05 	call	0xa16	; 0xa16 <xQueueGenericCreate>
    1c82:	90 93 fa 0c 	sts	0x0CFA, r25	; 0x800cfa <xTimerQueue+0x1>
    1c86:	80 93 f9 0c 	sts	0x0CF9, r24	; 0x800cf9 <xTimerQueue>
    1c8a:	0f 90       	pop	r0
    1c8c:	0f be       	out	0x3f, r0	; 63
    1c8e:	08 95       	ret

00001c90 <xTimerCreateTimerTask>:
    1c90:	ef 92       	push	r14
    1c92:	ff 92       	push	r15
    1c94:	0f 93       	push	r16
    1c96:	d3 df       	rcall	.-90     	; 0x1c3e <prvCheckForValidListAndQueue>
    1c98:	80 91 f9 0c 	lds	r24, 0x0CF9	; 0x800cf9 <xTimerQueue>
    1c9c:	90 91 fa 0c 	lds	r25, 0x0CFA	; 0x800cfa <xTimerQueue+0x1>
    1ca0:	89 2b       	or	r24, r25
    1ca2:	89 f0       	breq	.+34     	; 0x1cc6 <xTimerCreateTimerTask+0x36>
    1ca4:	0f 2e       	mov	r0, r31
    1ca6:	f7 ef       	ldi	r31, 0xF7	; 247
    1ca8:	ef 2e       	mov	r14, r31
    1caa:	fc e0       	ldi	r31, 0x0C	; 12
    1cac:	ff 2e       	mov	r15, r31
    1cae:	f0 2d       	mov	r31, r0
    1cb0:	03 e0       	ldi	r16, 0x03	; 3
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	40 ec       	ldi	r20, 0xC0	; 192
    1cb8:	50 e0       	ldi	r21, 0x00	; 0
    1cba:	66 e5       	ldi	r22, 0x56	; 86
    1cbc:	72 e0       	ldi	r23, 0x02	; 2
    1cbe:	85 e8       	ldi	r24, 0x85	; 133
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	41 da       	rcall	.-2942   	; 0x1146 <xTaskCreate>
    1cc4:	01 c0       	rjmp	.+2      	; 0x1cc8 <xTimerCreateTimerTask+0x38>
    1cc6:	80 e0       	ldi	r24, 0x00	; 0
    1cc8:	0f 91       	pop	r16
    1cca:	ff 90       	pop	r15
    1ccc:	ef 90       	pop	r14
    1cce:	08 95       	ret

00001cd0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    1cd0:	8f 92       	push	r8
    1cd2:	9f 92       	push	r9
    1cd4:	af 92       	push	r10
    1cd6:	bf 92       	push	r11
    1cd8:	cf 92       	push	r12
    1cda:	df 92       	push	r13
    1cdc:	ef 92       	push	r14
    1cde:	ff 92       	push	r15
    1ce0:	0f 93       	push	r16
    1ce2:	1f 93       	push	r17
    1ce4:	cf 93       	push	r28
    1ce6:	df 93       	push	r29
    1ce8:	cd b7       	in	r28, 0x3d	; 61
    1cea:	de b7       	in	r29, 0x3e	; 62
    1cec:	27 97       	sbiw	r28, 0x07	; 7
    1cee:	0f b6       	in	r0, 0x3f	; 63
    1cf0:	f8 94       	cli
    1cf2:	de bf       	out	0x3e, r29	; 62
    1cf4:	0f be       	out	0x3f, r0	; 63
    1cf6:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    1cf8:	e0 91 f9 0c 	lds	r30, 0x0CF9	; 0x800cf9 <xTimerQueue>
    1cfc:	f0 91 fa 0c 	lds	r31, 0x0CFA	; 0x800cfa <xTimerQueue+0x1>
    1d00:	30 97       	sbiw	r30, 0x00	; 0
    1d02:	81 f1       	breq	.+96     	; 0x1d64 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    1d04:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    1d06:	2a 83       	std	Y+2, r18	; 0x02
    1d08:	3b 83       	std	Y+3, r19	; 0x03
    1d0a:	4c 83       	std	Y+4, r20	; 0x04
    1d0c:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    1d0e:	9f 83       	std	Y+7, r25	; 0x07
    1d10:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    1d12:	66 30       	cpi	r22, 0x06	; 6
    1d14:	f4 f4       	brge	.+60     	; 0x1d52 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    1d16:	c9 de       	rcall	.-622    	; 0x1aaa <xTaskGetSchedulerState>
    1d18:	82 30       	cpi	r24, 0x02	; 2
    1d1a:	69 f4       	brne	.+26     	; 0x1d36 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    1d1c:	00 e0       	ldi	r16, 0x00	; 0
    1d1e:	a7 01       	movw	r20, r14
    1d20:	96 01       	movw	r18, r12
    1d22:	be 01       	movw	r22, r28
    1d24:	6f 5f       	subi	r22, 0xFF	; 255
    1d26:	7f 4f       	sbci	r23, 0xFF	; 255
    1d28:	80 91 f9 0c 	lds	r24, 0x0CF9	; 0x800cf9 <xTimerQueue>
    1d2c:	90 91 fa 0c 	lds	r25, 0x0CFA	; 0x800cfa <xTimerQueue+0x1>
    1d30:	0e 94 2e 05 	call	0xa5c	; 0xa5c <xQueueGenericSend>
    1d34:	18 c0       	rjmp	.+48     	; 0x1d66 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    1d36:	00 e0       	ldi	r16, 0x00	; 0
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	a9 01       	movw	r20, r18
    1d3e:	be 01       	movw	r22, r28
    1d40:	6f 5f       	subi	r22, 0xFF	; 255
    1d42:	7f 4f       	sbci	r23, 0xFF	; 255
    1d44:	80 91 f9 0c 	lds	r24, 0x0CF9	; 0x800cf9 <xTimerQueue>
    1d48:	90 91 fa 0c 	lds	r25, 0x0CFA	; 0x800cfa <xTimerQueue+0x1>
    1d4c:	0e 94 2e 05 	call	0xa5c	; 0xa5c <xQueueGenericSend>
    1d50:	0a c0       	rjmp	.+20     	; 0x1d66 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	a8 01       	movw	r20, r16
    1d56:	be 01       	movw	r22, r28
    1d58:	6f 5f       	subi	r22, 0xFF	; 255
    1d5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d5c:	cf 01       	movw	r24, r30
    1d5e:	0e 94 b9 05 	call	0xb72	; 0xb72 <xQueueGenericSendFromISR>
    1d62:	01 c0       	rjmp	.+2      	; 0x1d66 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    1d64:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    1d66:	27 96       	adiw	r28, 0x07	; 7
    1d68:	0f b6       	in	r0, 0x3f	; 63
    1d6a:	f8 94       	cli
    1d6c:	de bf       	out	0x3e, r29	; 62
    1d6e:	0f be       	out	0x3f, r0	; 63
    1d70:	cd bf       	out	0x3d, r28	; 61
    1d72:	df 91       	pop	r29
    1d74:	cf 91       	pop	r28
    1d76:	1f 91       	pop	r17
    1d78:	0f 91       	pop	r16
    1d7a:	ff 90       	pop	r15
    1d7c:	ef 90       	pop	r14
    1d7e:	df 90       	pop	r13
    1d80:	cf 90       	pop	r12
    1d82:	bf 90       	pop	r11
    1d84:	af 90       	pop	r10
    1d86:	9f 90       	pop	r9
    1d88:	8f 90       	pop	r8
    1d8a:	08 95       	ret

00001d8c <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    1d8c:	8f 92       	push	r8
    1d8e:	9f 92       	push	r9
    1d90:	af 92       	push	r10
    1d92:	bf 92       	push	r11
    1d94:	cf 92       	push	r12
    1d96:	df 92       	push	r13
    1d98:	ef 92       	push	r14
    1d9a:	ff 92       	push	r15
    1d9c:	0f 93       	push	r16
    1d9e:	1f 93       	push	r17
    1da0:	cf 93       	push	r28
    1da2:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    1da4:	3b c0       	rjmp	.+118    	; 0x1e1c <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    1da6:	07 80       	ldd	r0, Z+7	; 0x07
    1da8:	f0 85       	ldd	r31, Z+8	; 0x08
    1daa:	e0 2d       	mov	r30, r0
    1dac:	80 80       	ld	r8, Z
    1dae:	91 80       	ldd	r9, Z+1	; 0x01
    1db0:	a2 80       	ldd	r10, Z+2	; 0x02
    1db2:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    1db4:	c0 85       	ldd	r28, Z+8	; 0x08
    1db6:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1db8:	8e 01       	movw	r16, r28
    1dba:	0e 5f       	subi	r16, 0xFE	; 254
    1dbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dbe:	c8 01       	movw	r24, r16
    1dc0:	0e 94 af 02 	call	0x55e	; 0x55e <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    1dc4:	ec 89       	ldd	r30, Y+20	; 0x14
    1dc6:	fd 89       	ldd	r31, Y+21	; 0x15
    1dc8:	ce 01       	movw	r24, r28
    1dca:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    1dcc:	8e 89       	ldd	r24, Y+22	; 0x16
    1dce:	82 ff       	sbrs	r24, 2
    1dd0:	25 c0       	rjmp	.+74     	; 0x1e1c <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    1dd2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dd4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1dd6:	a8 89       	ldd	r26, Y+16	; 0x10
    1dd8:	b9 89       	ldd	r27, Y+17	; 0x11
    1dda:	88 0d       	add	r24, r8
    1ddc:	99 1d       	adc	r25, r9
    1dde:	aa 1d       	adc	r26, r10
    1de0:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    1de2:	88 16       	cp	r8, r24
    1de4:	99 06       	cpc	r9, r25
    1de6:	aa 06       	cpc	r10, r26
    1de8:	bb 06       	cpc	r11, r27
    1dea:	70 f4       	brcc	.+28     	; 0x1e08 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    1dec:	8a 83       	std	Y+2, r24	; 0x02
    1dee:	9b 83       	std	Y+3, r25	; 0x03
    1df0:	ac 83       	std	Y+4, r26	; 0x04
    1df2:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    1df4:	db 87       	std	Y+11, r29	; 0x0b
    1df6:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    1df8:	b8 01       	movw	r22, r16
    1dfa:	80 91 fd 0c 	lds	r24, 0x0CFD	; 0x800cfd <pxCurrentTimerList>
    1dfe:	90 91 fe 0c 	lds	r25, 0x0CFE	; 0x800cfe <pxCurrentTimerList+0x1>
    1e02:	0e 94 72 02 	call	0x4e4	; 0x4e4 <vListInsert>
    1e06:	0a c0       	rjmp	.+20     	; 0x1e1c <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    1e08:	c1 2c       	mov	r12, r1
    1e0a:	d1 2c       	mov	r13, r1
    1e0c:	76 01       	movw	r14, r12
    1e0e:	00 e0       	ldi	r16, 0x00	; 0
    1e10:	10 e0       	ldi	r17, 0x00	; 0
    1e12:	a5 01       	movw	r20, r10
    1e14:	94 01       	movw	r18, r8
    1e16:	60 e0       	ldi	r22, 0x00	; 0
    1e18:	ce 01       	movw	r24, r28
    1e1a:	5a df       	rcall	.-332    	; 0x1cd0 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    1e1c:	e0 91 fd 0c 	lds	r30, 0x0CFD	; 0x800cfd <pxCurrentTimerList>
    1e20:	f0 91 fe 0c 	lds	r31, 0x0CFE	; 0x800cfe <pxCurrentTimerList+0x1>
    1e24:	80 81       	ld	r24, Z
    1e26:	81 11       	cpse	r24, r1
    1e28:	be cf       	rjmp	.-132    	; 0x1da6 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    1e2a:	80 91 fb 0c 	lds	r24, 0x0CFB	; 0x800cfb <pxOverflowTimerList>
    1e2e:	90 91 fc 0c 	lds	r25, 0x0CFC	; 0x800cfc <pxOverflowTimerList+0x1>
    1e32:	90 93 fe 0c 	sts	0x0CFE, r25	; 0x800cfe <pxCurrentTimerList+0x1>
    1e36:	80 93 fd 0c 	sts	0x0CFD, r24	; 0x800cfd <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    1e3a:	f0 93 fc 0c 	sts	0x0CFC, r31	; 0x800cfc <pxOverflowTimerList+0x1>
    1e3e:	e0 93 fb 0c 	sts	0x0CFB, r30	; 0x800cfb <pxOverflowTimerList>
    }
    1e42:	df 91       	pop	r29
    1e44:	cf 91       	pop	r28
    1e46:	1f 91       	pop	r17
    1e48:	0f 91       	pop	r16
    1e4a:	ff 90       	pop	r15
    1e4c:	ef 90       	pop	r14
    1e4e:	df 90       	pop	r13
    1e50:	cf 90       	pop	r12
    1e52:	bf 90       	pop	r11
    1e54:	af 90       	pop	r10
    1e56:	9f 90       	pop	r9
    1e58:	8f 90       	pop	r8
    1e5a:	08 95       	ret

00001e5c <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    1e5c:	cf 92       	push	r12
    1e5e:	df 92       	push	r13
    1e60:	ef 92       	push	r14
    1e62:	ff 92       	push	r15
    1e64:	cf 93       	push	r28
    1e66:	df 93       	push	r29
    1e68:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    1e6a:	f9 d9       	rcall	.-3086   	; 0x125e <xTaskGetTickCount>
    1e6c:	6b 01       	movw	r12, r22
    1e6e:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    1e70:	80 91 f3 0c 	lds	r24, 0x0CF3	; 0x800cf3 <xLastTime.2448>
    1e74:	90 91 f4 0c 	lds	r25, 0x0CF4	; 0x800cf4 <xLastTime.2448+0x1>
    1e78:	a0 91 f5 0c 	lds	r26, 0x0CF5	; 0x800cf5 <xLastTime.2448+0x2>
    1e7c:	b0 91 f6 0c 	lds	r27, 0x0CF6	; 0x800cf6 <xLastTime.2448+0x3>
    1e80:	c8 16       	cp	r12, r24
    1e82:	d9 06       	cpc	r13, r25
    1e84:	ea 06       	cpc	r14, r26
    1e86:	fb 06       	cpc	r15, r27
        {
            prvSwitchTimerLists();
    1e88:	20 f4       	brcc	.+8      	; 0x1e92 <prvSampleTimeNow+0x36>
    1e8a:	80 df       	rcall	.-256    	; 0x1d8c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	88 83       	st	Y, r24
    1e90:	01 c0       	rjmp	.+2      	; 0x1e94 <prvSampleTimeNow+0x38>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    1e92:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    1e94:	c0 92 f3 0c 	sts	0x0CF3, r12	; 0x800cf3 <xLastTime.2448>
    1e98:	d0 92 f4 0c 	sts	0x0CF4, r13	; 0x800cf4 <xLastTime.2448+0x1>
    1e9c:	e0 92 f5 0c 	sts	0x0CF5, r14	; 0x800cf5 <xLastTime.2448+0x2>
    1ea0:	f0 92 f6 0c 	sts	0x0CF6, r15	; 0x800cf6 <xLastTime.2448+0x3>

        return xTimeNow;
    }
    1ea4:	c7 01       	movw	r24, r14
    1ea6:	b6 01       	movw	r22, r12
    1ea8:	df 91       	pop	r29
    1eaa:	cf 91       	pop	r28
    1eac:	ff 90       	pop	r15
    1eae:	ef 90       	pop	r14
    1eb0:	df 90       	pop	r13
    1eb2:	cf 90       	pop	r12
    1eb4:	08 95       	ret

00001eb6 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    1eb6:	4f 92       	push	r4
    1eb8:	5f 92       	push	r5
    1eba:	6f 92       	push	r6
    1ebc:	7f 92       	push	r7
    1ebe:	8f 92       	push	r8
    1ec0:	9f 92       	push	r9
    1ec2:	af 92       	push	r10
    1ec4:	bf 92       	push	r11
    1ec6:	cf 92       	push	r12
    1ec8:	df 92       	push	r13
    1eca:	ef 92       	push	r14
    1ecc:	ff 92       	push	r15
    1ece:	0f 93       	push	r16
    1ed0:	1f 93       	push	r17
    1ed2:	cf 93       	push	r28
    1ed4:	df 93       	push	r29
    1ed6:	4b 01       	movw	r8, r22
    1ed8:	5c 01       	movw	r10, r24
    1eda:	29 01       	movw	r4, r18
    1edc:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    1ede:	e0 91 fd 0c 	lds	r30, 0x0CFD	; 0x800cfd <pxCurrentTimerList>
    1ee2:	f0 91 fe 0c 	lds	r31, 0x0CFE	; 0x800cfe <pxCurrentTimerList+0x1>
    1ee6:	07 80       	ldd	r0, Z+7	; 0x07
    1ee8:	f0 85       	ldd	r31, Z+8	; 0x08
    1eea:	e0 2d       	mov	r30, r0
    1eec:	c0 85       	ldd	r28, Z+8	; 0x08
    1eee:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1ef0:	ce 01       	movw	r24, r28
    1ef2:	02 96       	adiw	r24, 0x02	; 2
    1ef4:	0e 94 af 02 	call	0x55e	; 0x55e <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    1ef8:	8e 89       	ldd	r24, Y+22	; 0x16
    1efa:	82 ff       	sbrs	r24, 2
    1efc:	1b c0       	rjmp	.+54     	; 0x1f34 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    1efe:	4e 85       	ldd	r20, Y+14	; 0x0e
    1f00:	5f 85       	ldd	r21, Y+15	; 0x0f
    1f02:	68 89       	ldd	r22, Y+16	; 0x10
    1f04:	79 89       	ldd	r23, Y+17	; 0x11
    1f06:	48 0d       	add	r20, r8
    1f08:	59 1d       	adc	r21, r9
    1f0a:	6a 1d       	adc	r22, r10
    1f0c:	7b 1d       	adc	r23, r11
    1f0e:	75 01       	movw	r14, r10
    1f10:	64 01       	movw	r12, r8
    1f12:	93 01       	movw	r18, r6
    1f14:	82 01       	movw	r16, r4
    1f16:	ce 01       	movw	r24, r28
    1f18:	49 de       	rcall	.-878    	; 0x1bac <prvInsertTimerInActiveList>
    1f1a:	88 23       	and	r24, r24
    1f1c:	69 f0       	breq	.+26     	; 0x1f38 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    1f1e:	c1 2c       	mov	r12, r1
    1f20:	d1 2c       	mov	r13, r1
    1f22:	76 01       	movw	r14, r12
    1f24:	00 e0       	ldi	r16, 0x00	; 0
    1f26:	10 e0       	ldi	r17, 0x00	; 0
    1f28:	a5 01       	movw	r20, r10
    1f2a:	94 01       	movw	r18, r8
    1f2c:	60 e0       	ldi	r22, 0x00	; 0
    1f2e:	ce 01       	movw	r24, r28
    1f30:	cf de       	rcall	.-610    	; 0x1cd0 <xTimerGenericCommand>
    1f32:	02 c0       	rjmp	.+4      	; 0x1f38 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    1f34:	8e 7f       	andi	r24, 0xFE	; 254
    1f36:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    1f38:	ec 89       	ldd	r30, Y+20	; 0x14
    1f3a:	fd 89       	ldd	r31, Y+21	; 0x15
    1f3c:	ce 01       	movw	r24, r28
    1f3e:	19 95       	eicall
    }
    1f40:	df 91       	pop	r29
    1f42:	cf 91       	pop	r28
    1f44:	1f 91       	pop	r17
    1f46:	0f 91       	pop	r16
    1f48:	ff 90       	pop	r15
    1f4a:	ef 90       	pop	r14
    1f4c:	df 90       	pop	r13
    1f4e:	cf 90       	pop	r12
    1f50:	bf 90       	pop	r11
    1f52:	af 90       	pop	r10
    1f54:	9f 90       	pop	r9
    1f56:	8f 90       	pop	r8
    1f58:	7f 90       	pop	r7
    1f5a:	6f 90       	pop	r6
    1f5c:	5f 90       	pop	r5
    1f5e:	4f 90       	pop	r4
    1f60:	08 95       	ret

00001f62 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    1f62:	8f 92       	push	r8
    1f64:	9f 92       	push	r9
    1f66:	af 92       	push	r10
    1f68:	bf 92       	push	r11
    1f6a:	cf 92       	push	r12
    1f6c:	df 92       	push	r13
    1f6e:	ef 92       	push	r14
    1f70:	ff 92       	push	r15
    1f72:	1f 93       	push	r17
    1f74:	cf 93       	push	r28
    1f76:	df 93       	push	r29
    1f78:	1f 92       	push	r1
    1f7a:	cd b7       	in	r28, 0x3d	; 61
    1f7c:	de b7       	in	r29, 0x3e	; 62
    1f7e:	6b 01       	movw	r12, r22
    1f80:	7c 01       	movw	r14, r24
    1f82:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    1f84:	66 d9       	rcall	.-3380   	; 0x1252 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    1f86:	ce 01       	movw	r24, r28
    1f88:	01 96       	adiw	r24, 0x01	; 1
    1f8a:	68 df       	rcall	.-304    	; 0x1e5c <prvSampleTimeNow>
    1f8c:	4b 01       	movw	r8, r22
    1f8e:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    1f90:	89 81       	ldd	r24, Y+1	; 0x01
    1f92:	81 11       	cpse	r24, r1
    1f94:	2b c0       	rjmp	.+86     	; 0x1fec <prvProcessTimerOrBlockTask+0x8a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    1f96:	11 11       	cpse	r17, r1
    1f98:	0c c0       	rjmp	.+24     	; 0x1fb2 <prvProcessTimerOrBlockTask+0x50>
    1f9a:	8c 14       	cp	r8, r12
    1f9c:	9d 04       	cpc	r9, r13
    1f9e:	ae 04       	cpc	r10, r14
    1fa0:	bf 04       	cpc	r11, r15
                {
                    ( void ) xTaskResumeAll();
    1fa2:	38 f0       	brcs	.+14     	; 0x1fb2 <prvProcessTimerOrBlockTask+0x50>
    1fa4:	96 da       	rcall	.-2772   	; 0x14d2 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    1fa6:	a5 01       	movw	r20, r10
    1fa8:	94 01       	movw	r18, r8
    1faa:	c7 01       	movw	r24, r14
    1fac:	b6 01       	movw	r22, r12
    1fae:	83 df       	rcall	.-250    	; 0x1eb6 <prvProcessExpiredTimer>
    1fb0:	1e c0       	rjmp	.+60     	; 0x1fee <prvProcessTimerOrBlockTask+0x8c>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    1fb2:	11 23       	and	r17, r17
    1fb4:	41 f0       	breq	.+16     	; 0x1fc6 <prvProcessTimerOrBlockTask+0x64>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    1fb6:	e0 91 fb 0c 	lds	r30, 0x0CFB	; 0x800cfb <pxOverflowTimerList>
    1fba:	f0 91 fc 0c 	lds	r31, 0x0CFC	; 0x800cfc <pxOverflowTimerList+0x1>
    1fbe:	80 81       	ld	r24, Z
    1fc0:	11 e0       	ldi	r17, 0x01	; 1
    1fc2:	81 11       	cpse	r24, r1
    1fc4:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    1fc6:	b7 01       	movw	r22, r14
    1fc8:	a6 01       	movw	r20, r12
    1fca:	48 19       	sub	r20, r8
    1fcc:	59 09       	sbc	r21, r9
    1fce:	6a 09       	sbc	r22, r10
    1fd0:	7b 09       	sbc	r23, r11
    1fd2:	21 2f       	mov	r18, r17
    1fd4:	80 91 f9 0c 	lds	r24, 0x0CF9	; 0x800cf9 <xTimerQueue>
    1fd8:	90 91 fa 0c 	lds	r25, 0x0CFA	; 0x800cfa <xTimerQueue+0x1>
    1fdc:	0e 94 7e 06 	call	0xcfc	; 0xcfc <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    1fe0:	78 da       	rcall	.-2832   	; 0x14d2 <xTaskResumeAll>
    1fe2:	81 11       	cpse	r24, r1
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    1fe4:	04 c0       	rjmp	.+8      	; 0x1fee <prvProcessTimerOrBlockTask+0x8c>
    1fe6:	0e 94 2b 03 	call	0x656	; 0x656 <vPortYield>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    1fea:	01 c0       	rjmp	.+2      	; 0x1fee <prvProcessTimerOrBlockTask+0x8c>
    1fec:	72 da       	rcall	.-2844   	; 0x14d2 <xTaskResumeAll>
            }
        }
    }
    1fee:	0f 90       	pop	r0
    1ff0:	df 91       	pop	r29
    1ff2:	cf 91       	pop	r28
    1ff4:	1f 91       	pop	r17
    1ff6:	ff 90       	pop	r15
    1ff8:	ef 90       	pop	r14
    1ffa:	df 90       	pop	r13
    1ffc:	cf 90       	pop	r12
    1ffe:	bf 90       	pop	r11
    2000:	af 90       	pop	r10
    2002:	9f 90       	pop	r9
    2004:	8f 90       	pop	r8
    2006:	08 95       	ret

00002008 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    2008:	af 92       	push	r10
    200a:	bf 92       	push	r11
    200c:	cf 92       	push	r12
    200e:	df 92       	push	r13
    2010:	ef 92       	push	r14
    2012:	ff 92       	push	r15
    2014:	0f 93       	push	r16
    2016:	1f 93       	push	r17
    2018:	cf 93       	push	r28
    201a:	df 93       	push	r29
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
    2020:	28 97       	sbiw	r28, 0x08	; 8
    2022:	0f b6       	in	r0, 0x3f	; 63
    2024:	f8 94       	cli
    2026:	de bf       	out	0x3e, r29	; 62
    2028:	0f be       	out	0x3f, r0	; 63
    202a:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    202c:	81 c0       	rjmp	.+258    	; 0x2130 <prvProcessReceivedCommands+0x128>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    202e:	89 81       	ldd	r24, Y+1	; 0x01
    2030:	88 23       	and	r24, r24
    2032:	0c f4       	brge	.+2      	; 0x2036 <prvProcessReceivedCommands+0x2e>
    2034:	7d c0       	rjmp	.+250    	; 0x2130 <prvProcessReceivedCommands+0x128>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2036:	ae 80       	ldd	r10, Y+6	; 0x06
    2038:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    203a:	d5 01       	movw	r26, r10
    203c:	1c 96       	adiw	r26, 0x0c	; 12
    203e:	8d 91       	ld	r24, X+
    2040:	9c 91       	ld	r25, X
    2042:	1d 97       	sbiw	r26, 0x0d	; 13
    2044:	89 2b       	or	r24, r25
    2046:	21 f0       	breq	.+8      	; 0x2050 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2048:	c5 01       	movw	r24, r10
    204a:	02 96       	adiw	r24, 0x02	; 2
    204c:	0e 94 af 02 	call	0x55e	; 0x55e <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2050:	ce 01       	movw	r24, r28
    2052:	08 96       	adiw	r24, 0x08	; 8
    2054:	03 df       	rcall	.-506    	; 0x1e5c <prvSampleTimeNow>
    2056:	8b 01       	movw	r16, r22
    2058:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    205a:	e9 81       	ldd	r30, Y+1	; 0x01
    205c:	0e 2e       	mov	r0, r30
    205e:	00 0c       	add	r0, r0
    2060:	ff 0b       	sbc	r31, r31
    2062:	ea 30       	cpi	r30, 0x0A	; 10
    2064:	f1 05       	cpc	r31, r1
    2066:	08 f0       	brcs	.+2      	; 0x206a <prvProcessReceivedCommands+0x62>
    2068:	63 c0       	rjmp	.+198    	; 0x2130 <prvProcessReceivedCommands+0x128>
    206a:	88 27       	eor	r24, r24
    206c:	ee 58       	subi	r30, 0x8E	; 142
    206e:	ff 4f       	sbci	r31, 0xFF	; 255
    2070:	8f 4f       	sbci	r24, 0xFF	; 255
    2072:	2d c6       	rjmp	.+3162   	; 0x2cce <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2074:	f5 01       	movw	r30, r10
    2076:	86 89       	ldd	r24, Z+22	; 0x16
    2078:	81 60       	ori	r24, 0x01	; 1
    207a:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    207c:	ca 80       	ldd	r12, Y+2	; 0x02
    207e:	db 80       	ldd	r13, Y+3	; 0x03
    2080:	ec 80       	ldd	r14, Y+4	; 0x04
    2082:	fd 80       	ldd	r15, Y+5	; 0x05
    2084:	46 85       	ldd	r20, Z+14	; 0x0e
    2086:	57 85       	ldd	r21, Z+15	; 0x0f
    2088:	60 89       	ldd	r22, Z+16	; 0x10
    208a:	71 89       	ldd	r23, Z+17	; 0x11
    208c:	4c 0d       	add	r20, r12
    208e:	5d 1d       	adc	r21, r13
    2090:	6e 1d       	adc	r22, r14
    2092:	7f 1d       	adc	r23, r15
    2094:	c5 01       	movw	r24, r10
    2096:	8a dd       	rcall	.-1260   	; 0x1bac <prvInsertTimerInActiveList>
    2098:	88 23       	and	r24, r24
    209a:	09 f4       	brne	.+2      	; 0x209e <prvProcessReceivedCommands+0x96>
    209c:	49 c0       	rjmp	.+146    	; 0x2130 <prvProcessReceivedCommands+0x128>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    209e:	d5 01       	movw	r26, r10
    20a0:	54 96       	adiw	r26, 0x14	; 20
    20a2:	ed 91       	ld	r30, X+
    20a4:	fc 91       	ld	r31, X
    20a6:	55 97       	sbiw	r26, 0x15	; 21
    20a8:	c5 01       	movw	r24, r10
    20aa:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    20ac:	f5 01       	movw	r30, r10
    20ae:	86 89       	ldd	r24, Z+22	; 0x16
    20b0:	82 ff       	sbrs	r24, 2
    20b2:	3e c0       	rjmp	.+124    	; 0x2130 <prvProcessReceivedCommands+0x128>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    20b4:	4a 81       	ldd	r20, Y+2	; 0x02
    20b6:	5b 81       	ldd	r21, Y+3	; 0x03
    20b8:	6c 81       	ldd	r22, Y+4	; 0x04
    20ba:	7d 81       	ldd	r23, Y+5	; 0x05
    20bc:	86 85       	ldd	r24, Z+14	; 0x0e
    20be:	97 85       	ldd	r25, Z+15	; 0x0f
    20c0:	a0 89       	ldd	r26, Z+16	; 0x10
    20c2:	b1 89       	ldd	r27, Z+17	; 0x11
    20c4:	9a 01       	movw	r18, r20
    20c6:	ab 01       	movw	r20, r22
    20c8:	28 0f       	add	r18, r24
    20ca:	39 1f       	adc	r19, r25
    20cc:	4a 1f       	adc	r20, r26
    20ce:	5b 1f       	adc	r21, r27
    20d0:	c1 2c       	mov	r12, r1
    20d2:	d1 2c       	mov	r13, r1
    20d4:	76 01       	movw	r14, r12
    20d6:	00 e0       	ldi	r16, 0x00	; 0
    20d8:	10 e0       	ldi	r17, 0x00	; 0
    20da:	60 e0       	ldi	r22, 0x00	; 0
    20dc:	c5 01       	movw	r24, r10
    20de:	f8 dd       	rcall	.-1040   	; 0x1cd0 <xTimerGenericCommand>
    20e0:	27 c0       	rjmp	.+78     	; 0x2130 <prvProcessReceivedCommands+0x128>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    20e2:	d5 01       	movw	r26, r10
    20e4:	56 96       	adiw	r26, 0x16	; 22
    20e6:	8c 91       	ld	r24, X
    20e8:	56 97       	sbiw	r26, 0x16	; 22
    20ea:	8e 7f       	andi	r24, 0xFE	; 254
    20ec:	56 96       	adiw	r26, 0x16	; 22
    20ee:	8c 93       	st	X, r24
                        break;
    20f0:	1f c0       	rjmp	.+62     	; 0x2130 <prvProcessReceivedCommands+0x128>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    20f2:	f5 01       	movw	r30, r10
    20f4:	86 89       	ldd	r24, Z+22	; 0x16
    20f6:	81 60       	ori	r24, 0x01	; 1
    20f8:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    20fa:	4a 81       	ldd	r20, Y+2	; 0x02
    20fc:	5b 81       	ldd	r21, Y+3	; 0x03
    20fe:	6c 81       	ldd	r22, Y+4	; 0x04
    2100:	7d 81       	ldd	r23, Y+5	; 0x05
    2102:	46 87       	std	Z+14, r20	; 0x0e
    2104:	57 87       	std	Z+15, r21	; 0x0f
    2106:	60 8b       	std	Z+16, r22	; 0x10
    2108:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    210a:	40 0f       	add	r20, r16
    210c:	51 1f       	adc	r21, r17
    210e:	62 1f       	adc	r22, r18
    2110:	73 1f       	adc	r23, r19
    2112:	68 01       	movw	r12, r16
    2114:	79 01       	movw	r14, r18
    2116:	c5 01       	movw	r24, r10
    2118:	49 dd       	rcall	.-1390   	; 0x1bac <prvInsertTimerInActiveList>
                        break;
    211a:	0a c0       	rjmp	.+20     	; 0x2130 <prvProcessReceivedCommands+0x128>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    211c:	f5 01       	movw	r30, r10
    211e:	86 89       	ldd	r24, Z+22	; 0x16
    2120:	81 fd       	sbrc	r24, 1
    2122:	04 c0       	rjmp	.+8      	; 0x212c <prvProcessReceivedCommands+0x124>
                                {
                                    vPortFree( pxTimer );
    2124:	c5 01       	movw	r24, r10
    2126:	0e 94 21 02 	call	0x442	; 0x442 <vPortFree>
    212a:	02 c0       	rjmp	.+4      	; 0x2130 <prvProcessReceivedCommands+0x128>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    212c:	8e 7f       	andi	r24, 0xFE	; 254
    212e:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	a9 01       	movw	r20, r18
    2136:	be 01       	movw	r22, r28
    2138:	6f 5f       	subi	r22, 0xFF	; 255
    213a:	7f 4f       	sbci	r23, 0xFF	; 255
    213c:	80 91 f9 0c 	lds	r24, 0x0CF9	; 0x800cf9 <xTimerQueue>
    2140:	90 91 fa 0c 	lds	r25, 0x0CFA	; 0x800cfa <xTimerQueue+0x1>
    2144:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <xQueueReceive>
    2148:	81 11       	cpse	r24, r1
    214a:	71 cf       	rjmp	.-286    	; 0x202e <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    214c:	28 96       	adiw	r28, 0x08	; 8
    214e:	0f b6       	in	r0, 0x3f	; 63
    2150:	f8 94       	cli
    2152:	de bf       	out	0x3e, r29	; 62
    2154:	0f be       	out	0x3f, r0	; 63
    2156:	cd bf       	out	0x3d, r28	; 61
    2158:	df 91       	pop	r29
    215a:	cf 91       	pop	r28
    215c:	1f 91       	pop	r17
    215e:	0f 91       	pop	r16
    2160:	ff 90       	pop	r15
    2162:	ef 90       	pop	r14
    2164:	df 90       	pop	r13
    2166:	cf 90       	pop	r12
    2168:	bf 90       	pop	r11
    216a:	af 90       	pop	r10
    216c:	08 95       	ret

0000216e <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    216e:	08 95       	ret

00002170 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2170:	84 b1       	in	r24, 0x04	; 4
    2172:	80 68       	ori	r24, 0x80	; 128
    2174:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2176:	85 b1       	in	r24, 0x05	; 5
    2178:	80 68       	ori	r24, 0x80	; 128
    217a:	85 b9       	out	0x05, r24	; 5
    217c:	08 95       	ret

0000217e <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    217e:	83 b1       	in	r24, 0x03	; 3
    2180:	80 68       	ori	r24, 0x80	; 128
    2182:	83 b9       	out	0x03, r24	; 3
    2184:	08 95       	ret

00002186 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    2186:	f4 df       	rcall	.-24     	; 0x2170 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2188:	2f ef       	ldi	r18, 0xFF	; 255
    218a:	80 e7       	ldi	r24, 0x70	; 112
    218c:	92 e0       	ldi	r25, 0x02	; 2
    218e:	21 50       	subi	r18, 0x01	; 1
    2190:	80 40       	sbci	r24, 0x00	; 0
    2192:	90 40       	sbci	r25, 0x00	; 0
    2194:	e1 f7       	brne	.-8      	; 0x218e <vApplicationMallocFailedHook+0x8>
    2196:	00 c0       	rjmp	.+0      	; 0x2198 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    2198:	00 00       	nop
    219a:	f1 df       	rcall	.-30     	; 0x217e <prvBlinkMainLed>
    219c:	f5 cf       	rjmp	.-22     	; 0x2188 <vApplicationMallocFailedHook+0x2>

0000219e <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    219e:	e8 df       	rcall	.-48     	; 0x2170 <prvSetMainLedOn>
    21a0:	2f ef       	ldi	r18, 0xFF	; 255
    21a2:	87 ea       	ldi	r24, 0xA7	; 167
    21a4:	91 e6       	ldi	r25, 0x61	; 97
    21a6:	21 50       	subi	r18, 0x01	; 1
    21a8:	80 40       	sbci	r24, 0x00	; 0
    21aa:	90 40       	sbci	r25, 0x00	; 0
    21ac:	e1 f7       	brne	.-8      	; 0x21a6 <vApplicationStackOverflowHook+0x8>
    21ae:	00 c0       	rjmp	.+0      	; 0x21b0 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    21b0:	00 00       	nop
    21b2:	e5 df       	rcall	.-54     	; 0x217e <prvBlinkMainLed>
    21b4:	f5 cf       	rjmp	.-22     	; 0x21a0 <vApplicationStackOverflowHook+0x2>

000021b6 <usart_getchar>:
    21b6:	cf 93       	push	r28
    21b8:	df 93       	push	r29
    21ba:	1f 92       	push	r1
    21bc:	cd b7       	in	r28, 0x3d	; 61
    21be:	de b7       	in	r29, 0x3e	; 62
    21c0:	be 01       	movw	r22, r28
    21c2:	6f 5f       	subi	r22, 0xFF	; 255
    21c4:	7f 4f       	sbci	r23, 0xFF	; 255
    21c6:	80 91 15 0d 	lds	r24, 0x0D15	; 0x800d15 <_com_serial_instance>
    21ca:	90 91 16 0d 	lds	r25, 0x0D16	; 0x800d16 <_com_serial_instance+0x1>
    21ce:	01 d1       	rcall	.+514    	; 0x23d2 <serial_getByte>
    21d0:	81 11       	cpse	r24, r1
    21d2:	f6 cf       	rjmp	.-20     	; 0x21c0 <usart_getchar+0xa>
    21d4:	89 81       	ldd	r24, Y+1	; 0x01
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	0f 90       	pop	r0
    21da:	df 91       	pop	r29
    21dc:	cf 91       	pop	r28
    21de:	08 95       	ret

000021e0 <usart_putchar>:
    21e0:	68 2f       	mov	r22, r24
    21e2:	80 91 15 0d 	lds	r24, 0x0D15	; 0x800d15 <_com_serial_instance>
    21e6:	90 91 16 0d 	lds	r25, 0x0D16	; 0x800d16 <_com_serial_instance+0x1>
    21ea:	c8 d0       	rcall	.+400    	; 0x237c <serial_sendByte>
    21ec:	80 e0       	ldi	r24, 0x00	; 0
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	08 95       	ret

000021f2 <stdio_initialise>:
    21f2:	8f 92       	push	r8
    21f4:	9f 92       	push	r9
    21f6:	af 92       	push	r10
    21f8:	cf 92       	push	r12
    21fa:	ef 92       	push	r14
    21fc:	0f 93       	push	r16
    21fe:	81 2c       	mov	r8, r1
    2200:	91 2c       	mov	r9, r1
    2202:	68 94       	set
    2204:	aa 24       	eor	r10, r10
    2206:	a7 f8       	bld	r10, 7
    2208:	68 94       	set
    220a:	cc 24       	eor	r12, r12
    220c:	c7 f8       	bld	r12, 7
    220e:	e1 2c       	mov	r14, r1
    2210:	00 e0       	ldi	r16, 0x00	; 0
    2212:	23 e0       	ldi	r18, 0x03	; 3
    2214:	40 e0       	ldi	r20, 0x00	; 0
    2216:	51 ee       	ldi	r21, 0xE1	; 225
    2218:	60 e0       	ldi	r22, 0x00	; 0
    221a:	70 e0       	ldi	r23, 0x00	; 0
    221c:	13 d0       	rcall	.+38     	; 0x2244 <serial_create>
    221e:	90 93 16 0d 	sts	0x0D16, r25	; 0x800d16 <_com_serial_instance+0x1>
    2222:	80 93 15 0d 	sts	0x0D15, r24	; 0x800d15 <_com_serial_instance>
    2226:	e3 e2       	ldi	r30, 0x23	; 35
    2228:	fd e0       	ldi	r31, 0x0D	; 13
    222a:	87 e0       	ldi	r24, 0x07	; 7
    222c:	92 e0       	ldi	r25, 0x02	; 2
    222e:	91 83       	std	Z+1, r25	; 0x01
    2230:	80 83       	st	Z, r24
    2232:	93 83       	std	Z+3, r25	; 0x03
    2234:	82 83       	std	Z+2, r24	; 0x02
    2236:	0f 91       	pop	r16
    2238:	ef 90       	pop	r14
    223a:	cf 90       	pop	r12
    223c:	af 90       	pop	r10
    223e:	9f 90       	pop	r9
    2240:	8f 90       	pop	r8
    2242:	08 95       	ret

00002244 <serial_create>:
    2244:	2f 92       	push	r2
    2246:	3f 92       	push	r3
    2248:	4f 92       	push	r4
    224a:	5f 92       	push	r5
    224c:	6f 92       	push	r6
    224e:	7f 92       	push	r7
    2250:	8f 92       	push	r8
    2252:	9f 92       	push	r9
    2254:	af 92       	push	r10
    2256:	cf 92       	push	r12
    2258:	ef 92       	push	r14
    225a:	ff 92       	push	r15
    225c:	0f 93       	push	r16
    225e:	1f 93       	push	r17
    2260:	cf 93       	push	r28
    2262:	df 93       	push	r29
    2264:	cd b7       	in	r28, 0x3d	; 61
    2266:	de b7       	in	r29, 0x3e	; 62
    2268:	f8 2e       	mov	r15, r24
    226a:	2a 01       	movw	r4, r20
    226c:	3b 01       	movw	r6, r22
    226e:	88 e0       	ldi	r24, 0x08	; 8
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	35 d5       	rcall	.+2666   	; 0x2cde <malloc>
    2274:	8c 01       	movw	r16, r24
    2276:	8f 2d       	mov	r24, r15
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	fc 01       	movw	r30, r24
    227c:	ee 0f       	add	r30, r30
    227e:	ff 1f       	adc	r31, r31
    2280:	e9 5e       	subi	r30, 0xE9	; 233
    2282:	f2 4f       	sbci	r31, 0xF2	; 242
    2284:	11 83       	std	Z+1, r17	; 0x01
    2286:	00 83       	st	Z, r16
    2288:	01 15       	cp	r16, r1
    228a:	11 05       	cpc	r17, r1
    228c:	09 f4       	brne	.+2      	; 0x2290 <serial_create+0x4c>
    228e:	64 c0       	rjmp	.+200    	; 0x2358 <serial_create+0x114>
    2290:	88 0f       	add	r24, r24
    2292:	99 1f       	adc	r25, r25
    2294:	fc 01       	movw	r30, r24
    2296:	eb 5e       	subi	r30, 0xEB	; 235
    2298:	fd 4f       	sbci	r31, 0xFD	; 253
    229a:	80 81       	ld	r24, Z
    229c:	91 81       	ldd	r25, Z+1	; 0x01
    229e:	d8 01       	movw	r26, r16
    22a0:	8d 93       	st	X+, r24
    22a2:	9c 93       	st	X, r25
    22a4:	8c 2d       	mov	r24, r12
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	88 0f       	add	r24, r24
    22aa:	99 1f       	adc	r25, r25
    22ac:	88 0f       	add	r24, r24
    22ae:	99 1f       	adc	r25, r25
    22b0:	16 d5       	rcall	.+2604   	; 0x2cde <malloc>
    22b2:	1c 01       	movw	r2, r24
    22b4:	86 e0       	ldi	r24, 0x06	; 6
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	12 d5       	rcall	.+2596   	; 0x2cde <malloc>
    22ba:	7c 01       	movw	r14, r24
    22bc:	4c 2d       	mov	r20, r12
    22be:	b1 01       	movw	r22, r2
    22c0:	00 d3       	rcall	.+1536   	; 0x28c2 <fifo_init>
    22c2:	f8 01       	movw	r30, r16
    22c4:	f5 82       	std	Z+5, r15	; 0x05
    22c6:	e4 82       	std	Z+4, r14	; 0x04
    22c8:	8a 2d       	mov	r24, r10
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	88 0f       	add	r24, r24
    22ce:	99 1f       	adc	r25, r25
    22d0:	88 0f       	add	r24, r24
    22d2:	99 1f       	adc	r25, r25
    22d4:	04 d5       	rcall	.+2568   	; 0x2cde <malloc>
    22d6:	1c 01       	movw	r2, r24
    22d8:	86 e0       	ldi	r24, 0x06	; 6
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	00 d5       	rcall	.+2560   	; 0x2cde <malloc>
    22de:	7c 01       	movw	r14, r24
    22e0:	4a 2d       	mov	r20, r10
    22e2:	b1 01       	movw	r22, r2
    22e4:	ee d2       	rcall	.+1500   	; 0x28c2 <fifo_init>
    22e6:	d8 01       	movw	r26, r16
    22e8:	13 96       	adiw	r26, 0x03	; 3
    22ea:	fc 92       	st	X, r15
    22ec:	ee 92       	st	-X, r14
    22ee:	12 97       	sbiw	r26, 0x02	; 2
    22f0:	17 96       	adiw	r26, 0x07	; 7
    22f2:	9c 92       	st	X, r9
    22f4:	8e 92       	st	-X, r8
    22f6:	16 97       	sbiw	r26, 0x06	; 6
    22f8:	ff b6       	in	r15, 0x3f	; 63
    22fa:	f8 94       	cli
    22fc:	ed 91       	ld	r30, X+
    22fe:	fc 91       	ld	r31, X
    2300:	11 97       	sbiw	r26, 0x01	; 1
    2302:	36 97       	sbiw	r30, 0x06	; 6
    2304:	80 81       	ld	r24, Z
    2306:	82 60       	ori	r24, 0x02	; 2
    2308:	80 83       	st	Z, r24
    230a:	8d 90       	ld	r8, X+
    230c:	9c 90       	ld	r9, X
    230e:	c3 01       	movw	r24, r6
    2310:	b2 01       	movw	r22, r4
    2312:	ec d3       	rcall	.+2008   	; 0x2aec <__floatunsisf>
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	40 e0       	ldi	r20, 0x00	; 0
    231a:	51 e4       	ldi	r21, 0x41	; 65
    231c:	75 d4       	rcall	.+2282   	; 0x2c08 <__mulsf3>
    231e:	9b 01       	movw	r18, r22
    2320:	ac 01       	movw	r20, r24
    2322:	60 e0       	ldi	r22, 0x00	; 0
    2324:	74 e2       	ldi	r23, 0x24	; 36
    2326:	84 e7       	ldi	r24, 0x74	; 116
    2328:	9b e4       	ldi	r25, 0x4B	; 75
    232a:	4c d3       	rcall	.+1688   	; 0x29c4 <__divsf3>
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	40 e8       	ldi	r20, 0x80	; 128
    2332:	5f e3       	ldi	r21, 0x3F	; 63
    2334:	e2 d2       	rcall	.+1476   	; 0x28fa <__subsf3>
    2336:	ae d3       	rcall	.+1884   	; 0x2a94 <__fixunssfsi>
    2338:	f4 01       	movw	r30, r8
    233a:	32 97       	sbiw	r30, 0x02	; 2
    233c:	60 83       	st	Z, r22
    233e:	d8 01       	movw	r26, r16
    2340:	ed 91       	ld	r30, X+
    2342:	fc 91       	ld	r31, X
    2344:	11 97       	sbiw	r26, 0x01	; 1
    2346:	35 97       	sbiw	r30, 0x05	; 5
    2348:	88 e9       	ldi	r24, 0x98	; 152
    234a:	80 83       	st	Z, r24
    234c:	ed 91       	ld	r30, X+
    234e:	fc 91       	ld	r31, X
    2350:	34 97       	sbiw	r30, 0x04	; 4
    2352:	86 e0       	ldi	r24, 0x06	; 6
    2354:	80 83       	st	Z, r24
    2356:	ff be       	out	0x3f, r15	; 63
    2358:	c8 01       	movw	r24, r16
    235a:	df 91       	pop	r29
    235c:	cf 91       	pop	r28
    235e:	1f 91       	pop	r17
    2360:	0f 91       	pop	r16
    2362:	ff 90       	pop	r15
    2364:	ef 90       	pop	r14
    2366:	cf 90       	pop	r12
    2368:	af 90       	pop	r10
    236a:	9f 90       	pop	r9
    236c:	8f 90       	pop	r8
    236e:	7f 90       	pop	r7
    2370:	6f 90       	pop	r6
    2372:	5f 90       	pop	r5
    2374:	4f 90       	pop	r4
    2376:	3f 90       	pop	r3
    2378:	2f 90       	pop	r2
    237a:	08 95       	ret

0000237c <serial_sendByte>:
    237c:	cf 93       	push	r28
    237e:	df 93       	push	r29
    2380:	dc 01       	movw	r26, r24
    2382:	89 2b       	or	r24, r25
    2384:	01 f1       	breq	.+64     	; 0x23c6 <serial_sendByte+0x4a>
    2386:	12 96       	adiw	r26, 0x02	; 2
    2388:	ed 91       	ld	r30, X+
    238a:	fc 91       	ld	r31, X
    238c:	13 97       	sbiw	r26, 0x03	; 3
    238e:	93 81       	ldd	r25, Z+3	; 0x03
    2390:	82 81       	ldd	r24, Z+2	; 0x02
    2392:	25 81       	ldd	r18, Z+5	; 0x05
    2394:	98 1b       	sub	r25, r24
    2396:	92 23       	and	r25, r18
    2398:	84 81       	ldd	r24, Z+4	; 0x04
    239a:	98 17       	cp	r25, r24
    239c:	b1 f0       	breq	.+44     	; 0x23ca <serial_sendByte+0x4e>
    239e:	83 81       	ldd	r24, Z+3	; 0x03
    23a0:	26 95       	lsr	r18
    23a2:	28 23       	and	r18, r24
    23a4:	c0 81       	ld	r28, Z
    23a6:	d1 81       	ldd	r29, Z+1	; 0x01
    23a8:	c2 0f       	add	r28, r18
    23aa:	d1 1d       	adc	r29, r1
    23ac:	68 83       	st	Y, r22
    23ae:	8f 5f       	subi	r24, 0xFF	; 255
    23b0:	95 81       	ldd	r25, Z+5	; 0x05
    23b2:	89 23       	and	r24, r25
    23b4:	83 83       	std	Z+3, r24	; 0x03
    23b6:	ed 91       	ld	r30, X+
    23b8:	fc 91       	ld	r31, X
    23ba:	35 97       	sbiw	r30, 0x05	; 5
    23bc:	80 81       	ld	r24, Z
    23be:	80 62       	ori	r24, 0x20	; 32
    23c0:	80 83       	st	Z, r24
    23c2:	80 e0       	ldi	r24, 0x00	; 0
    23c4:	03 c0       	rjmp	.+6      	; 0x23cc <serial_sendByte+0x50>
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	01 c0       	rjmp	.+2      	; 0x23cc <serial_sendByte+0x50>
    23ca:	82 e0       	ldi	r24, 0x02	; 2
    23cc:	df 91       	pop	r29
    23ce:	cf 91       	pop	r28
    23d0:	08 95       	ret

000023d2 <serial_getByte>:
    23d2:	00 97       	sbiw	r24, 0x00	; 0
    23d4:	d1 f0       	breq	.+52     	; 0x240a <serial_getByte+0x38>
    23d6:	dc 01       	movw	r26, r24
    23d8:	14 96       	adiw	r26, 0x04	; 4
    23da:	ed 91       	ld	r30, X+
    23dc:	fc 91       	ld	r31, X
    23de:	15 97       	sbiw	r26, 0x05	; 5
    23e0:	93 81       	ldd	r25, Z+3	; 0x03
    23e2:	82 81       	ldd	r24, Z+2	; 0x02
    23e4:	98 17       	cp	r25, r24
    23e6:	99 f0       	breq	.+38     	; 0x240e <serial_getByte+0x3c>
    23e8:	92 81       	ldd	r25, Z+2	; 0x02
    23ea:	85 81       	ldd	r24, Z+5	; 0x05
    23ec:	86 95       	lsr	r24
    23ee:	89 23       	and	r24, r25
    23f0:	a0 81       	ld	r26, Z
    23f2:	b1 81       	ldd	r27, Z+1	; 0x01
    23f4:	a8 0f       	add	r26, r24
    23f6:	b1 1d       	adc	r27, r1
    23f8:	8c 91       	ld	r24, X
    23fa:	db 01       	movw	r26, r22
    23fc:	8c 93       	st	X, r24
    23fe:	9f 5f       	subi	r25, 0xFF	; 255
    2400:	85 81       	ldd	r24, Z+5	; 0x05
    2402:	98 23       	and	r25, r24
    2404:	92 83       	std	Z+2, r25	; 0x02
    2406:	80 e0       	ldi	r24, 0x00	; 0
    2408:	08 95       	ret
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	08 95       	ret
    240e:	83 e0       	ldi	r24, 0x03	; 3
    2410:	08 95       	ret

00002412 <__vector_25>:
    2412:	1f 92       	push	r1
    2414:	0f 92       	push	r0
    2416:	0f b6       	in	r0, 0x3f	; 63
    2418:	0f 92       	push	r0
    241a:	11 24       	eor	r1, r1
    241c:	0b b6       	in	r0, 0x3b	; 59
    241e:	0f 92       	push	r0
    2420:	2f 93       	push	r18
    2422:	3f 93       	push	r19
    2424:	4f 93       	push	r20
    2426:	5f 93       	push	r21
    2428:	6f 93       	push	r22
    242a:	7f 93       	push	r23
    242c:	8f 93       	push	r24
    242e:	9f 93       	push	r25
    2430:	af 93       	push	r26
    2432:	bf 93       	push	r27
    2434:	cf 93       	push	r28
    2436:	df 93       	push	r29
    2438:	ef 93       	push	r30
    243a:	ff 93       	push	r31
    243c:	a0 91 17 0d 	lds	r26, 0x0D17	; 0x800d17 <_ser_handle>
    2440:	b0 91 18 0d 	lds	r27, 0x0D18	; 0x800d18 <_ser_handle+0x1>
    2444:	10 97       	sbiw	r26, 0x00	; 0
    2446:	11 f1       	breq	.+68     	; 0x248c <__vector_25+0x7a>
    2448:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    244c:	14 96       	adiw	r26, 0x04	; 4
    244e:	ed 91       	ld	r30, X+
    2450:	fc 91       	ld	r31, X
    2452:	15 97       	sbiw	r26, 0x05	; 5
    2454:	93 81       	ldd	r25, Z+3	; 0x03
    2456:	82 81       	ldd	r24, Z+2	; 0x02
    2458:	25 81       	ldd	r18, Z+5	; 0x05
    245a:	98 1b       	sub	r25, r24
    245c:	92 23       	and	r25, r18
    245e:	84 81       	ldd	r24, Z+4	; 0x04
    2460:	98 17       	cp	r25, r24
    2462:	61 f0       	breq	.+24     	; 0x247c <__vector_25+0x6a>
    2464:	83 81       	ldd	r24, Z+3	; 0x03
    2466:	26 95       	lsr	r18
    2468:	28 23       	and	r18, r24
    246a:	c0 81       	ld	r28, Z
    246c:	d1 81       	ldd	r29, Z+1	; 0x01
    246e:	c2 0f       	add	r28, r18
    2470:	d1 1d       	adc	r29, r1
    2472:	68 83       	st	Y, r22
    2474:	8f 5f       	subi	r24, 0xFF	; 255
    2476:	95 81       	ldd	r25, Z+5	; 0x05
    2478:	89 23       	and	r24, r25
    247a:	83 83       	std	Z+3, r24	; 0x03
    247c:	16 96       	adiw	r26, 0x06	; 6
    247e:	ed 91       	ld	r30, X+
    2480:	fc 91       	ld	r31, X
    2482:	17 97       	sbiw	r26, 0x07	; 7
    2484:	30 97       	sbiw	r30, 0x00	; 0
    2486:	11 f0       	breq	.+4      	; 0x248c <__vector_25+0x7a>
    2488:	cd 01       	movw	r24, r26
    248a:	19 95       	eicall
    248c:	ff 91       	pop	r31
    248e:	ef 91       	pop	r30
    2490:	df 91       	pop	r29
    2492:	cf 91       	pop	r28
    2494:	bf 91       	pop	r27
    2496:	af 91       	pop	r26
    2498:	9f 91       	pop	r25
    249a:	8f 91       	pop	r24
    249c:	7f 91       	pop	r23
    249e:	6f 91       	pop	r22
    24a0:	5f 91       	pop	r21
    24a2:	4f 91       	pop	r20
    24a4:	3f 91       	pop	r19
    24a6:	2f 91       	pop	r18
    24a8:	0f 90       	pop	r0
    24aa:	0b be       	out	0x3b, r0	; 59
    24ac:	0f 90       	pop	r0
    24ae:	0f be       	out	0x3f, r0	; 63
    24b0:	0f 90       	pop	r0
    24b2:	1f 90       	pop	r1
    24b4:	18 95       	reti

000024b6 <__vector_26>:
    24b6:	1f 92       	push	r1
    24b8:	0f 92       	push	r0
    24ba:	0f b6       	in	r0, 0x3f	; 63
    24bc:	0f 92       	push	r0
    24be:	11 24       	eor	r1, r1
    24c0:	0b b6       	in	r0, 0x3b	; 59
    24c2:	0f 92       	push	r0
    24c4:	2f 93       	push	r18
    24c6:	8f 93       	push	r24
    24c8:	9f 93       	push	r25
    24ca:	af 93       	push	r26
    24cc:	bf 93       	push	r27
    24ce:	ef 93       	push	r30
    24d0:	ff 93       	push	r31
    24d2:	e0 91 17 0d 	lds	r30, 0x0D17	; 0x800d17 <_ser_handle>
    24d6:	f0 91 18 0d 	lds	r31, 0x0D18	; 0x800d18 <_ser_handle+0x1>
    24da:	30 97       	sbiw	r30, 0x00	; 0
    24dc:	b9 f0       	breq	.+46     	; 0x250c <__vector_26+0x56>
    24de:	02 80       	ldd	r0, Z+2	; 0x02
    24e0:	f3 81       	ldd	r31, Z+3	; 0x03
    24e2:	e0 2d       	mov	r30, r0
    24e4:	93 81       	ldd	r25, Z+3	; 0x03
    24e6:	82 81       	ldd	r24, Z+2	; 0x02
    24e8:	98 17       	cp	r25, r24
    24ea:	b1 f0       	breq	.+44     	; 0x2518 <__vector_26+0x62>
    24ec:	92 81       	ldd	r25, Z+2	; 0x02
    24ee:	85 81       	ldd	r24, Z+5	; 0x05
    24f0:	28 2f       	mov	r18, r24
    24f2:	26 95       	lsr	r18
    24f4:	29 23       	and	r18, r25
    24f6:	a0 81       	ld	r26, Z
    24f8:	b1 81       	ldd	r27, Z+1	; 0x01
    24fa:	a2 0f       	add	r26, r18
    24fc:	b1 1d       	adc	r27, r1
    24fe:	2c 91       	ld	r18, X
    2500:	9f 5f       	subi	r25, 0xFF	; 255
    2502:	89 23       	and	r24, r25
    2504:	82 83       	std	Z+2, r24	; 0x02
    2506:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    250a:	0b c0       	rjmp	.+22     	; 0x2522 <__vector_26+0x6c>
    250c:	e1 ec       	ldi	r30, 0xC1	; 193
    250e:	f0 e0       	ldi	r31, 0x00	; 0
    2510:	80 81       	ld	r24, Z
    2512:	8f 7d       	andi	r24, 0xDF	; 223
    2514:	80 83       	st	Z, r24
    2516:	05 c0       	rjmp	.+10     	; 0x2522 <__vector_26+0x6c>
    2518:	e1 ec       	ldi	r30, 0xC1	; 193
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	80 81       	ld	r24, Z
    251e:	8f 7d       	andi	r24, 0xDF	; 223
    2520:	80 83       	st	Z, r24
    2522:	ff 91       	pop	r31
    2524:	ef 91       	pop	r30
    2526:	bf 91       	pop	r27
    2528:	af 91       	pop	r26
    252a:	9f 91       	pop	r25
    252c:	8f 91       	pop	r24
    252e:	2f 91       	pop	r18
    2530:	0f 90       	pop	r0
    2532:	0b be       	out	0x3b, r0	; 59
    2534:	0f 90       	pop	r0
    2536:	0f be       	out	0x3f, r0	; 63
    2538:	0f 90       	pop	r0
    253a:	1f 90       	pop	r1
    253c:	18 95       	reti

0000253e <__vector_36>:
    253e:	1f 92       	push	r1
    2540:	0f 92       	push	r0
    2542:	0f b6       	in	r0, 0x3f	; 63
    2544:	0f 92       	push	r0
    2546:	11 24       	eor	r1, r1
    2548:	0b b6       	in	r0, 0x3b	; 59
    254a:	0f 92       	push	r0
    254c:	2f 93       	push	r18
    254e:	3f 93       	push	r19
    2550:	4f 93       	push	r20
    2552:	5f 93       	push	r21
    2554:	6f 93       	push	r22
    2556:	7f 93       	push	r23
    2558:	8f 93       	push	r24
    255a:	9f 93       	push	r25
    255c:	af 93       	push	r26
    255e:	bf 93       	push	r27
    2560:	cf 93       	push	r28
    2562:	df 93       	push	r29
    2564:	ef 93       	push	r30
    2566:	ff 93       	push	r31
    2568:	a0 91 19 0d 	lds	r26, 0x0D19	; 0x800d19 <_ser_handle+0x2>
    256c:	b0 91 1a 0d 	lds	r27, 0x0D1A	; 0x800d1a <_ser_handle+0x3>
    2570:	10 97       	sbiw	r26, 0x00	; 0
    2572:	11 f1       	breq	.+68     	; 0x25b8 <__vector_36+0x7a>
    2574:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    2578:	14 96       	adiw	r26, 0x04	; 4
    257a:	ed 91       	ld	r30, X+
    257c:	fc 91       	ld	r31, X
    257e:	15 97       	sbiw	r26, 0x05	; 5
    2580:	93 81       	ldd	r25, Z+3	; 0x03
    2582:	82 81       	ldd	r24, Z+2	; 0x02
    2584:	25 81       	ldd	r18, Z+5	; 0x05
    2586:	98 1b       	sub	r25, r24
    2588:	92 23       	and	r25, r18
    258a:	84 81       	ldd	r24, Z+4	; 0x04
    258c:	98 17       	cp	r25, r24
    258e:	61 f0       	breq	.+24     	; 0x25a8 <__vector_36+0x6a>
    2590:	83 81       	ldd	r24, Z+3	; 0x03
    2592:	26 95       	lsr	r18
    2594:	28 23       	and	r18, r24
    2596:	c0 81       	ld	r28, Z
    2598:	d1 81       	ldd	r29, Z+1	; 0x01
    259a:	c2 0f       	add	r28, r18
    259c:	d1 1d       	adc	r29, r1
    259e:	68 83       	st	Y, r22
    25a0:	8f 5f       	subi	r24, 0xFF	; 255
    25a2:	95 81       	ldd	r25, Z+5	; 0x05
    25a4:	89 23       	and	r24, r25
    25a6:	83 83       	std	Z+3, r24	; 0x03
    25a8:	16 96       	adiw	r26, 0x06	; 6
    25aa:	ed 91       	ld	r30, X+
    25ac:	fc 91       	ld	r31, X
    25ae:	17 97       	sbiw	r26, 0x07	; 7
    25b0:	30 97       	sbiw	r30, 0x00	; 0
    25b2:	11 f0       	breq	.+4      	; 0x25b8 <__vector_36+0x7a>
    25b4:	cd 01       	movw	r24, r26
    25b6:	19 95       	eicall
    25b8:	ff 91       	pop	r31
    25ba:	ef 91       	pop	r30
    25bc:	df 91       	pop	r29
    25be:	cf 91       	pop	r28
    25c0:	bf 91       	pop	r27
    25c2:	af 91       	pop	r26
    25c4:	9f 91       	pop	r25
    25c6:	8f 91       	pop	r24
    25c8:	7f 91       	pop	r23
    25ca:	6f 91       	pop	r22
    25cc:	5f 91       	pop	r21
    25ce:	4f 91       	pop	r20
    25d0:	3f 91       	pop	r19
    25d2:	2f 91       	pop	r18
    25d4:	0f 90       	pop	r0
    25d6:	0b be       	out	0x3b, r0	; 59
    25d8:	0f 90       	pop	r0
    25da:	0f be       	out	0x3f, r0	; 63
    25dc:	0f 90       	pop	r0
    25de:	1f 90       	pop	r1
    25e0:	18 95       	reti

000025e2 <__vector_37>:
    25e2:	1f 92       	push	r1
    25e4:	0f 92       	push	r0
    25e6:	0f b6       	in	r0, 0x3f	; 63
    25e8:	0f 92       	push	r0
    25ea:	11 24       	eor	r1, r1
    25ec:	0b b6       	in	r0, 0x3b	; 59
    25ee:	0f 92       	push	r0
    25f0:	2f 93       	push	r18
    25f2:	8f 93       	push	r24
    25f4:	9f 93       	push	r25
    25f6:	af 93       	push	r26
    25f8:	bf 93       	push	r27
    25fa:	ef 93       	push	r30
    25fc:	ff 93       	push	r31
    25fe:	e0 91 19 0d 	lds	r30, 0x0D19	; 0x800d19 <_ser_handle+0x2>
    2602:	f0 91 1a 0d 	lds	r31, 0x0D1A	; 0x800d1a <_ser_handle+0x3>
    2606:	30 97       	sbiw	r30, 0x00	; 0
    2608:	b9 f0       	breq	.+46     	; 0x2638 <__vector_37+0x56>
    260a:	02 80       	ldd	r0, Z+2	; 0x02
    260c:	f3 81       	ldd	r31, Z+3	; 0x03
    260e:	e0 2d       	mov	r30, r0
    2610:	93 81       	ldd	r25, Z+3	; 0x03
    2612:	82 81       	ldd	r24, Z+2	; 0x02
    2614:	98 17       	cp	r25, r24
    2616:	b1 f0       	breq	.+44     	; 0x2644 <__vector_37+0x62>
    2618:	92 81       	ldd	r25, Z+2	; 0x02
    261a:	85 81       	ldd	r24, Z+5	; 0x05
    261c:	28 2f       	mov	r18, r24
    261e:	26 95       	lsr	r18
    2620:	29 23       	and	r18, r25
    2622:	a0 81       	ld	r26, Z
    2624:	b1 81       	ldd	r27, Z+1	; 0x01
    2626:	a2 0f       	add	r26, r18
    2628:	b1 1d       	adc	r27, r1
    262a:	2c 91       	ld	r18, X
    262c:	9f 5f       	subi	r25, 0xFF	; 255
    262e:	89 23       	and	r24, r25
    2630:	82 83       	std	Z+2, r24	; 0x02
    2632:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    2636:	0b c0       	rjmp	.+22     	; 0x264e <__vector_37+0x6c>
    2638:	e9 ec       	ldi	r30, 0xC9	; 201
    263a:	f0 e0       	ldi	r31, 0x00	; 0
    263c:	80 81       	ld	r24, Z
    263e:	8f 7d       	andi	r24, 0xDF	; 223
    2640:	80 83       	st	Z, r24
    2642:	05 c0       	rjmp	.+10     	; 0x264e <__vector_37+0x6c>
    2644:	e9 ec       	ldi	r30, 0xC9	; 201
    2646:	f0 e0       	ldi	r31, 0x00	; 0
    2648:	80 81       	ld	r24, Z
    264a:	8f 7d       	andi	r24, 0xDF	; 223
    264c:	80 83       	st	Z, r24
    264e:	ff 91       	pop	r31
    2650:	ef 91       	pop	r30
    2652:	bf 91       	pop	r27
    2654:	af 91       	pop	r26
    2656:	9f 91       	pop	r25
    2658:	8f 91       	pop	r24
    265a:	2f 91       	pop	r18
    265c:	0f 90       	pop	r0
    265e:	0b be       	out	0x3b, r0	; 59
    2660:	0f 90       	pop	r0
    2662:	0f be       	out	0x3f, r0	; 63
    2664:	0f 90       	pop	r0
    2666:	1f 90       	pop	r1
    2668:	18 95       	reti

0000266a <__vector_51>:
    266a:	1f 92       	push	r1
    266c:	0f 92       	push	r0
    266e:	0f b6       	in	r0, 0x3f	; 63
    2670:	0f 92       	push	r0
    2672:	11 24       	eor	r1, r1
    2674:	0b b6       	in	r0, 0x3b	; 59
    2676:	0f 92       	push	r0
    2678:	2f 93       	push	r18
    267a:	3f 93       	push	r19
    267c:	4f 93       	push	r20
    267e:	5f 93       	push	r21
    2680:	6f 93       	push	r22
    2682:	7f 93       	push	r23
    2684:	8f 93       	push	r24
    2686:	9f 93       	push	r25
    2688:	af 93       	push	r26
    268a:	bf 93       	push	r27
    268c:	cf 93       	push	r28
    268e:	df 93       	push	r29
    2690:	ef 93       	push	r30
    2692:	ff 93       	push	r31
    2694:	a0 91 1b 0d 	lds	r26, 0x0D1B	; 0x800d1b <_ser_handle+0x4>
    2698:	b0 91 1c 0d 	lds	r27, 0x0D1C	; 0x800d1c <_ser_handle+0x5>
    269c:	10 97       	sbiw	r26, 0x00	; 0
    269e:	11 f1       	breq	.+68     	; 0x26e4 <__vector_51+0x7a>
    26a0:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    26a4:	14 96       	adiw	r26, 0x04	; 4
    26a6:	ed 91       	ld	r30, X+
    26a8:	fc 91       	ld	r31, X
    26aa:	15 97       	sbiw	r26, 0x05	; 5
    26ac:	93 81       	ldd	r25, Z+3	; 0x03
    26ae:	82 81       	ldd	r24, Z+2	; 0x02
    26b0:	25 81       	ldd	r18, Z+5	; 0x05
    26b2:	98 1b       	sub	r25, r24
    26b4:	92 23       	and	r25, r18
    26b6:	84 81       	ldd	r24, Z+4	; 0x04
    26b8:	98 17       	cp	r25, r24
    26ba:	61 f0       	breq	.+24     	; 0x26d4 <__vector_51+0x6a>
    26bc:	83 81       	ldd	r24, Z+3	; 0x03
    26be:	26 95       	lsr	r18
    26c0:	28 23       	and	r18, r24
    26c2:	c0 81       	ld	r28, Z
    26c4:	d1 81       	ldd	r29, Z+1	; 0x01
    26c6:	c2 0f       	add	r28, r18
    26c8:	d1 1d       	adc	r29, r1
    26ca:	68 83       	st	Y, r22
    26cc:	8f 5f       	subi	r24, 0xFF	; 255
    26ce:	95 81       	ldd	r25, Z+5	; 0x05
    26d0:	89 23       	and	r24, r25
    26d2:	83 83       	std	Z+3, r24	; 0x03
    26d4:	16 96       	adiw	r26, 0x06	; 6
    26d6:	ed 91       	ld	r30, X+
    26d8:	fc 91       	ld	r31, X
    26da:	17 97       	sbiw	r26, 0x07	; 7
    26dc:	30 97       	sbiw	r30, 0x00	; 0
    26de:	11 f0       	breq	.+4      	; 0x26e4 <__vector_51+0x7a>
    26e0:	cd 01       	movw	r24, r26
    26e2:	19 95       	eicall
    26e4:	ff 91       	pop	r31
    26e6:	ef 91       	pop	r30
    26e8:	df 91       	pop	r29
    26ea:	cf 91       	pop	r28
    26ec:	bf 91       	pop	r27
    26ee:	af 91       	pop	r26
    26f0:	9f 91       	pop	r25
    26f2:	8f 91       	pop	r24
    26f4:	7f 91       	pop	r23
    26f6:	6f 91       	pop	r22
    26f8:	5f 91       	pop	r21
    26fa:	4f 91       	pop	r20
    26fc:	3f 91       	pop	r19
    26fe:	2f 91       	pop	r18
    2700:	0f 90       	pop	r0
    2702:	0b be       	out	0x3b, r0	; 59
    2704:	0f 90       	pop	r0
    2706:	0f be       	out	0x3f, r0	; 63
    2708:	0f 90       	pop	r0
    270a:	1f 90       	pop	r1
    270c:	18 95       	reti

0000270e <__vector_52>:
    270e:	1f 92       	push	r1
    2710:	0f 92       	push	r0
    2712:	0f b6       	in	r0, 0x3f	; 63
    2714:	0f 92       	push	r0
    2716:	11 24       	eor	r1, r1
    2718:	0b b6       	in	r0, 0x3b	; 59
    271a:	0f 92       	push	r0
    271c:	2f 93       	push	r18
    271e:	8f 93       	push	r24
    2720:	9f 93       	push	r25
    2722:	af 93       	push	r26
    2724:	bf 93       	push	r27
    2726:	ef 93       	push	r30
    2728:	ff 93       	push	r31
    272a:	e0 91 1b 0d 	lds	r30, 0x0D1B	; 0x800d1b <_ser_handle+0x4>
    272e:	f0 91 1c 0d 	lds	r31, 0x0D1C	; 0x800d1c <_ser_handle+0x5>
    2732:	30 97       	sbiw	r30, 0x00	; 0
    2734:	b9 f0       	breq	.+46     	; 0x2764 <__vector_52+0x56>
    2736:	02 80       	ldd	r0, Z+2	; 0x02
    2738:	f3 81       	ldd	r31, Z+3	; 0x03
    273a:	e0 2d       	mov	r30, r0
    273c:	93 81       	ldd	r25, Z+3	; 0x03
    273e:	82 81       	ldd	r24, Z+2	; 0x02
    2740:	98 17       	cp	r25, r24
    2742:	b1 f0       	breq	.+44     	; 0x2770 <__vector_52+0x62>
    2744:	92 81       	ldd	r25, Z+2	; 0x02
    2746:	85 81       	ldd	r24, Z+5	; 0x05
    2748:	28 2f       	mov	r18, r24
    274a:	26 95       	lsr	r18
    274c:	29 23       	and	r18, r25
    274e:	a0 81       	ld	r26, Z
    2750:	b1 81       	ldd	r27, Z+1	; 0x01
    2752:	a2 0f       	add	r26, r18
    2754:	b1 1d       	adc	r27, r1
    2756:	2c 91       	ld	r18, X
    2758:	9f 5f       	subi	r25, 0xFF	; 255
    275a:	89 23       	and	r24, r25
    275c:	82 83       	std	Z+2, r24	; 0x02
    275e:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    2762:	0b c0       	rjmp	.+22     	; 0x277a <__vector_52+0x6c>
    2764:	e1 ed       	ldi	r30, 0xD1	; 209
    2766:	f0 e0       	ldi	r31, 0x00	; 0
    2768:	80 81       	ld	r24, Z
    276a:	8f 7d       	andi	r24, 0xDF	; 223
    276c:	80 83       	st	Z, r24
    276e:	05 c0       	rjmp	.+10     	; 0x277a <__vector_52+0x6c>
    2770:	e1 ed       	ldi	r30, 0xD1	; 209
    2772:	f0 e0       	ldi	r31, 0x00	; 0
    2774:	80 81       	ld	r24, Z
    2776:	8f 7d       	andi	r24, 0xDF	; 223
    2778:	80 83       	st	Z, r24
    277a:	ff 91       	pop	r31
    277c:	ef 91       	pop	r30
    277e:	bf 91       	pop	r27
    2780:	af 91       	pop	r26
    2782:	9f 91       	pop	r25
    2784:	8f 91       	pop	r24
    2786:	2f 91       	pop	r18
    2788:	0f 90       	pop	r0
    278a:	0b be       	out	0x3b, r0	; 59
    278c:	0f 90       	pop	r0
    278e:	0f be       	out	0x3f, r0	; 63
    2790:	0f 90       	pop	r0
    2792:	1f 90       	pop	r1
    2794:	18 95       	reti

00002796 <__vector_54>:
    2796:	1f 92       	push	r1
    2798:	0f 92       	push	r0
    279a:	0f b6       	in	r0, 0x3f	; 63
    279c:	0f 92       	push	r0
    279e:	11 24       	eor	r1, r1
    27a0:	0b b6       	in	r0, 0x3b	; 59
    27a2:	0f 92       	push	r0
    27a4:	2f 93       	push	r18
    27a6:	3f 93       	push	r19
    27a8:	4f 93       	push	r20
    27aa:	5f 93       	push	r21
    27ac:	6f 93       	push	r22
    27ae:	7f 93       	push	r23
    27b0:	8f 93       	push	r24
    27b2:	9f 93       	push	r25
    27b4:	af 93       	push	r26
    27b6:	bf 93       	push	r27
    27b8:	cf 93       	push	r28
    27ba:	df 93       	push	r29
    27bc:	ef 93       	push	r30
    27be:	ff 93       	push	r31
    27c0:	a0 91 1d 0d 	lds	r26, 0x0D1D	; 0x800d1d <_ser_handle+0x6>
    27c4:	b0 91 1e 0d 	lds	r27, 0x0D1E	; 0x800d1e <_ser_handle+0x7>
    27c8:	10 97       	sbiw	r26, 0x00	; 0
    27ca:	11 f1       	breq	.+68     	; 0x2810 <__vector_54+0x7a>
    27cc:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    27d0:	14 96       	adiw	r26, 0x04	; 4
    27d2:	ed 91       	ld	r30, X+
    27d4:	fc 91       	ld	r31, X
    27d6:	15 97       	sbiw	r26, 0x05	; 5
    27d8:	93 81       	ldd	r25, Z+3	; 0x03
    27da:	82 81       	ldd	r24, Z+2	; 0x02
    27dc:	25 81       	ldd	r18, Z+5	; 0x05
    27de:	98 1b       	sub	r25, r24
    27e0:	92 23       	and	r25, r18
    27e2:	84 81       	ldd	r24, Z+4	; 0x04
    27e4:	98 17       	cp	r25, r24
    27e6:	61 f0       	breq	.+24     	; 0x2800 <__vector_54+0x6a>
    27e8:	83 81       	ldd	r24, Z+3	; 0x03
    27ea:	26 95       	lsr	r18
    27ec:	28 23       	and	r18, r24
    27ee:	c0 81       	ld	r28, Z
    27f0:	d1 81       	ldd	r29, Z+1	; 0x01
    27f2:	c2 0f       	add	r28, r18
    27f4:	d1 1d       	adc	r29, r1
    27f6:	68 83       	st	Y, r22
    27f8:	8f 5f       	subi	r24, 0xFF	; 255
    27fa:	95 81       	ldd	r25, Z+5	; 0x05
    27fc:	89 23       	and	r24, r25
    27fe:	83 83       	std	Z+3, r24	; 0x03
    2800:	16 96       	adiw	r26, 0x06	; 6
    2802:	ed 91       	ld	r30, X+
    2804:	fc 91       	ld	r31, X
    2806:	17 97       	sbiw	r26, 0x07	; 7
    2808:	30 97       	sbiw	r30, 0x00	; 0
    280a:	11 f0       	breq	.+4      	; 0x2810 <__vector_54+0x7a>
    280c:	cd 01       	movw	r24, r26
    280e:	19 95       	eicall
    2810:	ff 91       	pop	r31
    2812:	ef 91       	pop	r30
    2814:	df 91       	pop	r29
    2816:	cf 91       	pop	r28
    2818:	bf 91       	pop	r27
    281a:	af 91       	pop	r26
    281c:	9f 91       	pop	r25
    281e:	8f 91       	pop	r24
    2820:	7f 91       	pop	r23
    2822:	6f 91       	pop	r22
    2824:	5f 91       	pop	r21
    2826:	4f 91       	pop	r20
    2828:	3f 91       	pop	r19
    282a:	2f 91       	pop	r18
    282c:	0f 90       	pop	r0
    282e:	0b be       	out	0x3b, r0	; 59
    2830:	0f 90       	pop	r0
    2832:	0f be       	out	0x3f, r0	; 63
    2834:	0f 90       	pop	r0
    2836:	1f 90       	pop	r1
    2838:	18 95       	reti

0000283a <__vector_55>:
    283a:	1f 92       	push	r1
    283c:	0f 92       	push	r0
    283e:	0f b6       	in	r0, 0x3f	; 63
    2840:	0f 92       	push	r0
    2842:	11 24       	eor	r1, r1
    2844:	0b b6       	in	r0, 0x3b	; 59
    2846:	0f 92       	push	r0
    2848:	2f 93       	push	r18
    284a:	8f 93       	push	r24
    284c:	9f 93       	push	r25
    284e:	af 93       	push	r26
    2850:	bf 93       	push	r27
    2852:	ef 93       	push	r30
    2854:	ff 93       	push	r31
    2856:	e0 91 1d 0d 	lds	r30, 0x0D1D	; 0x800d1d <_ser_handle+0x6>
    285a:	f0 91 1e 0d 	lds	r31, 0x0D1E	; 0x800d1e <_ser_handle+0x7>
    285e:	30 97       	sbiw	r30, 0x00	; 0
    2860:	b9 f0       	breq	.+46     	; 0x2890 <__vector_55+0x56>
    2862:	02 80       	ldd	r0, Z+2	; 0x02
    2864:	f3 81       	ldd	r31, Z+3	; 0x03
    2866:	e0 2d       	mov	r30, r0
    2868:	93 81       	ldd	r25, Z+3	; 0x03
    286a:	82 81       	ldd	r24, Z+2	; 0x02
    286c:	98 17       	cp	r25, r24
    286e:	b1 f0       	breq	.+44     	; 0x289c <__vector_55+0x62>
    2870:	92 81       	ldd	r25, Z+2	; 0x02
    2872:	85 81       	ldd	r24, Z+5	; 0x05
    2874:	28 2f       	mov	r18, r24
    2876:	26 95       	lsr	r18
    2878:	29 23       	and	r18, r25
    287a:	a0 81       	ld	r26, Z
    287c:	b1 81       	ldd	r27, Z+1	; 0x01
    287e:	a2 0f       	add	r26, r18
    2880:	b1 1d       	adc	r27, r1
    2882:	2c 91       	ld	r18, X
    2884:	9f 5f       	subi	r25, 0xFF	; 255
    2886:	89 23       	and	r24, r25
    2888:	82 83       	std	Z+2, r24	; 0x02
    288a:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    288e:	0b c0       	rjmp	.+22     	; 0x28a6 <__vector_55+0x6c>
    2890:	e1 e3       	ldi	r30, 0x31	; 49
    2892:	f1 e0       	ldi	r31, 0x01	; 1
    2894:	80 81       	ld	r24, Z
    2896:	8f 7d       	andi	r24, 0xDF	; 223
    2898:	80 83       	st	Z, r24
    289a:	05 c0       	rjmp	.+10     	; 0x28a6 <__vector_55+0x6c>
    289c:	e1 e3       	ldi	r30, 0x31	; 49
    289e:	f1 e0       	ldi	r31, 0x01	; 1
    28a0:	80 81       	ld	r24, Z
    28a2:	8f 7d       	andi	r24, 0xDF	; 223
    28a4:	80 83       	st	Z, r24
    28a6:	ff 91       	pop	r31
    28a8:	ef 91       	pop	r30
    28aa:	bf 91       	pop	r27
    28ac:	af 91       	pop	r26
    28ae:	9f 91       	pop	r25
    28b0:	8f 91       	pop	r24
    28b2:	2f 91       	pop	r18
    28b4:	0f 90       	pop	r0
    28b6:	0b be       	out	0x3b, r0	; 59
    28b8:	0f 90       	pop	r0
    28ba:	0f be       	out	0x3f, r0	; 63
    28bc:	0f 90       	pop	r0
    28be:	1f 90       	pop	r1
    28c0:	18 95       	reti

000028c2 <fifo_init>:
    28c2:	fc 01       	movw	r30, r24
    28c4:	41 11       	cpse	r20, r1
    28c6:	01 c0       	rjmp	.+2      	; 0x28ca <fifo_init+0x8>
    28c8:	2b d3       	rcall	.+1622   	; 0x2f20 <abort>
    28ca:	84 2f       	mov	r24, r20
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	9c 01       	movw	r18, r24
    28d0:	21 50       	subi	r18, 0x01	; 1
    28d2:	31 09       	sbc	r19, r1
    28d4:	82 23       	and	r24, r18
    28d6:	93 23       	and	r25, r19
    28d8:	89 2b       	or	r24, r25
    28da:	09 f0       	breq	.+2      	; 0x28de <fifo_init+0x1c>
    28dc:	21 d3       	rcall	.+1602   	; 0x2f20 <abort>
    28de:	41 38       	cpi	r20, 0x81	; 129
    28e0:	08 f0       	brcs	.+2      	; 0x28e4 <fifo_init+0x22>
    28e2:	1e d3       	rcall	.+1596   	; 0x2f20 <abort>
    28e4:	12 82       	std	Z+2, r1	; 0x02
    28e6:	13 82       	std	Z+3, r1	; 0x03
    28e8:	44 83       	std	Z+4, r20	; 0x04
    28ea:	44 0f       	add	r20, r20
    28ec:	41 50       	subi	r20, 0x01	; 1
    28ee:	45 83       	std	Z+5, r20	; 0x05
    28f0:	71 83       	std	Z+1, r23	; 0x01
    28f2:	60 83       	st	Z, r22
    28f4:	80 e0       	ldi	r24, 0x00	; 0
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	08 95       	ret

000028fa <__subsf3>:
    28fa:	50 58       	subi	r21, 0x80	; 128

000028fc <__addsf3>:
    28fc:	bb 27       	eor	r27, r27
    28fe:	aa 27       	eor	r26, r26
    2900:	0e d0       	rcall	.+28     	; 0x291e <__addsf3x>
    2902:	48 c1       	rjmp	.+656    	; 0x2b94 <__fp_round>
    2904:	39 d1       	rcall	.+626    	; 0x2b78 <__fp_pscA>
    2906:	30 f0       	brcs	.+12     	; 0x2914 <__addsf3+0x18>
    2908:	3e d1       	rcall	.+636    	; 0x2b86 <__fp_pscB>
    290a:	20 f0       	brcs	.+8      	; 0x2914 <__addsf3+0x18>
    290c:	31 f4       	brne	.+12     	; 0x291a <__addsf3+0x1e>
    290e:	9f 3f       	cpi	r25, 0xFF	; 255
    2910:	11 f4       	brne	.+4      	; 0x2916 <__addsf3+0x1a>
    2912:	1e f4       	brtc	.+6      	; 0x291a <__addsf3+0x1e>
    2914:	2e c1       	rjmp	.+604    	; 0x2b72 <__fp_nan>
    2916:	0e f4       	brtc	.+2      	; 0x291a <__addsf3+0x1e>
    2918:	e0 95       	com	r30
    291a:	e7 fb       	bst	r30, 7
    291c:	24 c1       	rjmp	.+584    	; 0x2b66 <__fp_inf>

0000291e <__addsf3x>:
    291e:	e9 2f       	mov	r30, r25
    2920:	4a d1       	rcall	.+660    	; 0x2bb6 <__fp_split3>
    2922:	80 f3       	brcs	.-32     	; 0x2904 <__addsf3+0x8>
    2924:	ba 17       	cp	r27, r26
    2926:	62 07       	cpc	r22, r18
    2928:	73 07       	cpc	r23, r19
    292a:	84 07       	cpc	r24, r20
    292c:	95 07       	cpc	r25, r21
    292e:	18 f0       	brcs	.+6      	; 0x2936 <__addsf3x+0x18>
    2930:	71 f4       	brne	.+28     	; 0x294e <__addsf3x+0x30>
    2932:	9e f5       	brtc	.+102    	; 0x299a <__addsf3x+0x7c>
    2934:	62 c1       	rjmp	.+708    	; 0x2bfa <__fp_zero>
    2936:	0e f4       	brtc	.+2      	; 0x293a <__addsf3x+0x1c>
    2938:	e0 95       	com	r30
    293a:	0b 2e       	mov	r0, r27
    293c:	ba 2f       	mov	r27, r26
    293e:	a0 2d       	mov	r26, r0
    2940:	0b 01       	movw	r0, r22
    2942:	b9 01       	movw	r22, r18
    2944:	90 01       	movw	r18, r0
    2946:	0c 01       	movw	r0, r24
    2948:	ca 01       	movw	r24, r20
    294a:	a0 01       	movw	r20, r0
    294c:	11 24       	eor	r1, r1
    294e:	ff 27       	eor	r31, r31
    2950:	59 1b       	sub	r21, r25
    2952:	99 f0       	breq	.+38     	; 0x297a <__addsf3x+0x5c>
    2954:	59 3f       	cpi	r21, 0xF9	; 249
    2956:	50 f4       	brcc	.+20     	; 0x296c <__addsf3x+0x4e>
    2958:	50 3e       	cpi	r21, 0xE0	; 224
    295a:	68 f1       	brcs	.+90     	; 0x29b6 <__addsf3x+0x98>
    295c:	1a 16       	cp	r1, r26
    295e:	f0 40       	sbci	r31, 0x00	; 0
    2960:	a2 2f       	mov	r26, r18
    2962:	23 2f       	mov	r18, r19
    2964:	34 2f       	mov	r19, r20
    2966:	44 27       	eor	r20, r20
    2968:	58 5f       	subi	r21, 0xF8	; 248
    296a:	f3 cf       	rjmp	.-26     	; 0x2952 <__addsf3x+0x34>
    296c:	46 95       	lsr	r20
    296e:	37 95       	ror	r19
    2970:	27 95       	ror	r18
    2972:	a7 95       	ror	r26
    2974:	f0 40       	sbci	r31, 0x00	; 0
    2976:	53 95       	inc	r21
    2978:	c9 f7       	brne	.-14     	; 0x296c <__addsf3x+0x4e>
    297a:	7e f4       	brtc	.+30     	; 0x299a <__addsf3x+0x7c>
    297c:	1f 16       	cp	r1, r31
    297e:	ba 0b       	sbc	r27, r26
    2980:	62 0b       	sbc	r22, r18
    2982:	73 0b       	sbc	r23, r19
    2984:	84 0b       	sbc	r24, r20
    2986:	ba f0       	brmi	.+46     	; 0x29b6 <__addsf3x+0x98>
    2988:	91 50       	subi	r25, 0x01	; 1
    298a:	a1 f0       	breq	.+40     	; 0x29b4 <__addsf3x+0x96>
    298c:	ff 0f       	add	r31, r31
    298e:	bb 1f       	adc	r27, r27
    2990:	66 1f       	adc	r22, r22
    2992:	77 1f       	adc	r23, r23
    2994:	88 1f       	adc	r24, r24
    2996:	c2 f7       	brpl	.-16     	; 0x2988 <__addsf3x+0x6a>
    2998:	0e c0       	rjmp	.+28     	; 0x29b6 <__addsf3x+0x98>
    299a:	ba 0f       	add	r27, r26
    299c:	62 1f       	adc	r22, r18
    299e:	73 1f       	adc	r23, r19
    29a0:	84 1f       	adc	r24, r20
    29a2:	48 f4       	brcc	.+18     	; 0x29b6 <__addsf3x+0x98>
    29a4:	87 95       	ror	r24
    29a6:	77 95       	ror	r23
    29a8:	67 95       	ror	r22
    29aa:	b7 95       	ror	r27
    29ac:	f7 95       	ror	r31
    29ae:	9e 3f       	cpi	r25, 0xFE	; 254
    29b0:	08 f0       	brcs	.+2      	; 0x29b4 <__addsf3x+0x96>
    29b2:	b3 cf       	rjmp	.-154    	; 0x291a <__addsf3+0x1e>
    29b4:	93 95       	inc	r25
    29b6:	88 0f       	add	r24, r24
    29b8:	08 f0       	brcs	.+2      	; 0x29bc <__addsf3x+0x9e>
    29ba:	99 27       	eor	r25, r25
    29bc:	ee 0f       	add	r30, r30
    29be:	97 95       	ror	r25
    29c0:	87 95       	ror	r24
    29c2:	08 95       	ret

000029c4 <__divsf3>:
    29c4:	0c d0       	rcall	.+24     	; 0x29de <__divsf3x>
    29c6:	e6 c0       	rjmp	.+460    	; 0x2b94 <__fp_round>
    29c8:	de d0       	rcall	.+444    	; 0x2b86 <__fp_pscB>
    29ca:	40 f0       	brcs	.+16     	; 0x29dc <__divsf3+0x18>
    29cc:	d5 d0       	rcall	.+426    	; 0x2b78 <__fp_pscA>
    29ce:	30 f0       	brcs	.+12     	; 0x29dc <__divsf3+0x18>
    29d0:	21 f4       	brne	.+8      	; 0x29da <__divsf3+0x16>
    29d2:	5f 3f       	cpi	r21, 0xFF	; 255
    29d4:	19 f0       	breq	.+6      	; 0x29dc <__divsf3+0x18>
    29d6:	c7 c0       	rjmp	.+398    	; 0x2b66 <__fp_inf>
    29d8:	51 11       	cpse	r21, r1
    29da:	10 c1       	rjmp	.+544    	; 0x2bfc <__fp_szero>
    29dc:	ca c0       	rjmp	.+404    	; 0x2b72 <__fp_nan>

000029de <__divsf3x>:
    29de:	eb d0       	rcall	.+470    	; 0x2bb6 <__fp_split3>
    29e0:	98 f3       	brcs	.-26     	; 0x29c8 <__divsf3+0x4>

000029e2 <__divsf3_pse>:
    29e2:	99 23       	and	r25, r25
    29e4:	c9 f3       	breq	.-14     	; 0x29d8 <__divsf3+0x14>
    29e6:	55 23       	and	r21, r21
    29e8:	b1 f3       	breq	.-20     	; 0x29d6 <__divsf3+0x12>
    29ea:	95 1b       	sub	r25, r21
    29ec:	55 0b       	sbc	r21, r21
    29ee:	bb 27       	eor	r27, r27
    29f0:	aa 27       	eor	r26, r26
    29f2:	62 17       	cp	r22, r18
    29f4:	73 07       	cpc	r23, r19
    29f6:	84 07       	cpc	r24, r20
    29f8:	38 f0       	brcs	.+14     	; 0x2a08 <__divsf3_pse+0x26>
    29fa:	9f 5f       	subi	r25, 0xFF	; 255
    29fc:	5f 4f       	sbci	r21, 0xFF	; 255
    29fe:	22 0f       	add	r18, r18
    2a00:	33 1f       	adc	r19, r19
    2a02:	44 1f       	adc	r20, r20
    2a04:	aa 1f       	adc	r26, r26
    2a06:	a9 f3       	breq	.-22     	; 0x29f2 <__divsf3_pse+0x10>
    2a08:	33 d0       	rcall	.+102    	; 0x2a70 <__divsf3_pse+0x8e>
    2a0a:	0e 2e       	mov	r0, r30
    2a0c:	3a f0       	brmi	.+14     	; 0x2a1c <__divsf3_pse+0x3a>
    2a0e:	e0 e8       	ldi	r30, 0x80	; 128
    2a10:	30 d0       	rcall	.+96     	; 0x2a72 <__divsf3_pse+0x90>
    2a12:	91 50       	subi	r25, 0x01	; 1
    2a14:	50 40       	sbci	r21, 0x00	; 0
    2a16:	e6 95       	lsr	r30
    2a18:	00 1c       	adc	r0, r0
    2a1a:	ca f7       	brpl	.-14     	; 0x2a0e <__divsf3_pse+0x2c>
    2a1c:	29 d0       	rcall	.+82     	; 0x2a70 <__divsf3_pse+0x8e>
    2a1e:	fe 2f       	mov	r31, r30
    2a20:	27 d0       	rcall	.+78     	; 0x2a70 <__divsf3_pse+0x8e>
    2a22:	66 0f       	add	r22, r22
    2a24:	77 1f       	adc	r23, r23
    2a26:	88 1f       	adc	r24, r24
    2a28:	bb 1f       	adc	r27, r27
    2a2a:	26 17       	cp	r18, r22
    2a2c:	37 07       	cpc	r19, r23
    2a2e:	48 07       	cpc	r20, r24
    2a30:	ab 07       	cpc	r26, r27
    2a32:	b0 e8       	ldi	r27, 0x80	; 128
    2a34:	09 f0       	breq	.+2      	; 0x2a38 <__divsf3_pse+0x56>
    2a36:	bb 0b       	sbc	r27, r27
    2a38:	80 2d       	mov	r24, r0
    2a3a:	bf 01       	movw	r22, r30
    2a3c:	ff 27       	eor	r31, r31
    2a3e:	93 58       	subi	r25, 0x83	; 131
    2a40:	5f 4f       	sbci	r21, 0xFF	; 255
    2a42:	2a f0       	brmi	.+10     	; 0x2a4e <__divsf3_pse+0x6c>
    2a44:	9e 3f       	cpi	r25, 0xFE	; 254
    2a46:	51 05       	cpc	r21, r1
    2a48:	68 f0       	brcs	.+26     	; 0x2a64 <__divsf3_pse+0x82>
    2a4a:	8d c0       	rjmp	.+282    	; 0x2b66 <__fp_inf>
    2a4c:	d7 c0       	rjmp	.+430    	; 0x2bfc <__fp_szero>
    2a4e:	5f 3f       	cpi	r21, 0xFF	; 255
    2a50:	ec f3       	brlt	.-6      	; 0x2a4c <__divsf3_pse+0x6a>
    2a52:	98 3e       	cpi	r25, 0xE8	; 232
    2a54:	dc f3       	brlt	.-10     	; 0x2a4c <__divsf3_pse+0x6a>
    2a56:	86 95       	lsr	r24
    2a58:	77 95       	ror	r23
    2a5a:	67 95       	ror	r22
    2a5c:	b7 95       	ror	r27
    2a5e:	f7 95       	ror	r31
    2a60:	9f 5f       	subi	r25, 0xFF	; 255
    2a62:	c9 f7       	brne	.-14     	; 0x2a56 <__divsf3_pse+0x74>
    2a64:	88 0f       	add	r24, r24
    2a66:	91 1d       	adc	r25, r1
    2a68:	96 95       	lsr	r25
    2a6a:	87 95       	ror	r24
    2a6c:	97 f9       	bld	r25, 7
    2a6e:	08 95       	ret
    2a70:	e1 e0       	ldi	r30, 0x01	; 1
    2a72:	66 0f       	add	r22, r22
    2a74:	77 1f       	adc	r23, r23
    2a76:	88 1f       	adc	r24, r24
    2a78:	bb 1f       	adc	r27, r27
    2a7a:	62 17       	cp	r22, r18
    2a7c:	73 07       	cpc	r23, r19
    2a7e:	84 07       	cpc	r24, r20
    2a80:	ba 07       	cpc	r27, r26
    2a82:	20 f0       	brcs	.+8      	; 0x2a8c <__divsf3_pse+0xaa>
    2a84:	62 1b       	sub	r22, r18
    2a86:	73 0b       	sbc	r23, r19
    2a88:	84 0b       	sbc	r24, r20
    2a8a:	ba 0b       	sbc	r27, r26
    2a8c:	ee 1f       	adc	r30, r30
    2a8e:	88 f7       	brcc	.-30     	; 0x2a72 <__divsf3_pse+0x90>
    2a90:	e0 95       	com	r30
    2a92:	08 95       	ret

00002a94 <__fixunssfsi>:
    2a94:	98 d0       	rcall	.+304    	; 0x2bc6 <__fp_splitA>
    2a96:	88 f0       	brcs	.+34     	; 0x2aba <__fixunssfsi+0x26>
    2a98:	9f 57       	subi	r25, 0x7F	; 127
    2a9a:	90 f0       	brcs	.+36     	; 0x2ac0 <__fixunssfsi+0x2c>
    2a9c:	b9 2f       	mov	r27, r25
    2a9e:	99 27       	eor	r25, r25
    2aa0:	b7 51       	subi	r27, 0x17	; 23
    2aa2:	a0 f0       	brcs	.+40     	; 0x2acc <__fixunssfsi+0x38>
    2aa4:	d1 f0       	breq	.+52     	; 0x2ada <__fixunssfsi+0x46>
    2aa6:	66 0f       	add	r22, r22
    2aa8:	77 1f       	adc	r23, r23
    2aaa:	88 1f       	adc	r24, r24
    2aac:	99 1f       	adc	r25, r25
    2aae:	1a f0       	brmi	.+6      	; 0x2ab6 <__fixunssfsi+0x22>
    2ab0:	ba 95       	dec	r27
    2ab2:	c9 f7       	brne	.-14     	; 0x2aa6 <__fixunssfsi+0x12>
    2ab4:	12 c0       	rjmp	.+36     	; 0x2ada <__fixunssfsi+0x46>
    2ab6:	b1 30       	cpi	r27, 0x01	; 1
    2ab8:	81 f0       	breq	.+32     	; 0x2ada <__fixunssfsi+0x46>
    2aba:	9f d0       	rcall	.+318    	; 0x2bfa <__fp_zero>
    2abc:	b1 e0       	ldi	r27, 0x01	; 1
    2abe:	08 95       	ret
    2ac0:	9c c0       	rjmp	.+312    	; 0x2bfa <__fp_zero>
    2ac2:	67 2f       	mov	r22, r23
    2ac4:	78 2f       	mov	r23, r24
    2ac6:	88 27       	eor	r24, r24
    2ac8:	b8 5f       	subi	r27, 0xF8	; 248
    2aca:	39 f0       	breq	.+14     	; 0x2ada <__fixunssfsi+0x46>
    2acc:	b9 3f       	cpi	r27, 0xF9	; 249
    2ace:	cc f3       	brlt	.-14     	; 0x2ac2 <__fixunssfsi+0x2e>
    2ad0:	86 95       	lsr	r24
    2ad2:	77 95       	ror	r23
    2ad4:	67 95       	ror	r22
    2ad6:	b3 95       	inc	r27
    2ad8:	d9 f7       	brne	.-10     	; 0x2ad0 <__fixunssfsi+0x3c>
    2ada:	3e f4       	brtc	.+14     	; 0x2aea <__fixunssfsi+0x56>
    2adc:	90 95       	com	r25
    2ade:	80 95       	com	r24
    2ae0:	70 95       	com	r23
    2ae2:	61 95       	neg	r22
    2ae4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ae6:	8f 4f       	sbci	r24, 0xFF	; 255
    2ae8:	9f 4f       	sbci	r25, 0xFF	; 255
    2aea:	08 95       	ret

00002aec <__floatunsisf>:
    2aec:	e8 94       	clt
    2aee:	09 c0       	rjmp	.+18     	; 0x2b02 <__floatsisf+0x12>

00002af0 <__floatsisf>:
    2af0:	97 fb       	bst	r25, 7
    2af2:	3e f4       	brtc	.+14     	; 0x2b02 <__floatsisf+0x12>
    2af4:	90 95       	com	r25
    2af6:	80 95       	com	r24
    2af8:	70 95       	com	r23
    2afa:	61 95       	neg	r22
    2afc:	7f 4f       	sbci	r23, 0xFF	; 255
    2afe:	8f 4f       	sbci	r24, 0xFF	; 255
    2b00:	9f 4f       	sbci	r25, 0xFF	; 255
    2b02:	99 23       	and	r25, r25
    2b04:	a9 f0       	breq	.+42     	; 0x2b30 <__floatsisf+0x40>
    2b06:	f9 2f       	mov	r31, r25
    2b08:	96 e9       	ldi	r25, 0x96	; 150
    2b0a:	bb 27       	eor	r27, r27
    2b0c:	93 95       	inc	r25
    2b0e:	f6 95       	lsr	r31
    2b10:	87 95       	ror	r24
    2b12:	77 95       	ror	r23
    2b14:	67 95       	ror	r22
    2b16:	b7 95       	ror	r27
    2b18:	f1 11       	cpse	r31, r1
    2b1a:	f8 cf       	rjmp	.-16     	; 0x2b0c <__floatsisf+0x1c>
    2b1c:	fa f4       	brpl	.+62     	; 0x2b5c <__floatsisf+0x6c>
    2b1e:	bb 0f       	add	r27, r27
    2b20:	11 f4       	brne	.+4      	; 0x2b26 <__floatsisf+0x36>
    2b22:	60 ff       	sbrs	r22, 0
    2b24:	1b c0       	rjmp	.+54     	; 0x2b5c <__floatsisf+0x6c>
    2b26:	6f 5f       	subi	r22, 0xFF	; 255
    2b28:	7f 4f       	sbci	r23, 0xFF	; 255
    2b2a:	8f 4f       	sbci	r24, 0xFF	; 255
    2b2c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b2e:	16 c0       	rjmp	.+44     	; 0x2b5c <__floatsisf+0x6c>
    2b30:	88 23       	and	r24, r24
    2b32:	11 f0       	breq	.+4      	; 0x2b38 <__floatsisf+0x48>
    2b34:	96 e9       	ldi	r25, 0x96	; 150
    2b36:	11 c0       	rjmp	.+34     	; 0x2b5a <__floatsisf+0x6a>
    2b38:	77 23       	and	r23, r23
    2b3a:	21 f0       	breq	.+8      	; 0x2b44 <__floatsisf+0x54>
    2b3c:	9e e8       	ldi	r25, 0x8E	; 142
    2b3e:	87 2f       	mov	r24, r23
    2b40:	76 2f       	mov	r23, r22
    2b42:	05 c0       	rjmp	.+10     	; 0x2b4e <__floatsisf+0x5e>
    2b44:	66 23       	and	r22, r22
    2b46:	71 f0       	breq	.+28     	; 0x2b64 <__floatsisf+0x74>
    2b48:	96 e8       	ldi	r25, 0x86	; 134
    2b4a:	86 2f       	mov	r24, r22
    2b4c:	70 e0       	ldi	r23, 0x00	; 0
    2b4e:	60 e0       	ldi	r22, 0x00	; 0
    2b50:	2a f0       	brmi	.+10     	; 0x2b5c <__floatsisf+0x6c>
    2b52:	9a 95       	dec	r25
    2b54:	66 0f       	add	r22, r22
    2b56:	77 1f       	adc	r23, r23
    2b58:	88 1f       	adc	r24, r24
    2b5a:	da f7       	brpl	.-10     	; 0x2b52 <__floatsisf+0x62>
    2b5c:	88 0f       	add	r24, r24
    2b5e:	96 95       	lsr	r25
    2b60:	87 95       	ror	r24
    2b62:	97 f9       	bld	r25, 7
    2b64:	08 95       	ret

00002b66 <__fp_inf>:
    2b66:	97 f9       	bld	r25, 7
    2b68:	9f 67       	ori	r25, 0x7F	; 127
    2b6a:	80 e8       	ldi	r24, 0x80	; 128
    2b6c:	70 e0       	ldi	r23, 0x00	; 0
    2b6e:	60 e0       	ldi	r22, 0x00	; 0
    2b70:	08 95       	ret

00002b72 <__fp_nan>:
    2b72:	9f ef       	ldi	r25, 0xFF	; 255
    2b74:	80 ec       	ldi	r24, 0xC0	; 192
    2b76:	08 95       	ret

00002b78 <__fp_pscA>:
    2b78:	00 24       	eor	r0, r0
    2b7a:	0a 94       	dec	r0
    2b7c:	16 16       	cp	r1, r22
    2b7e:	17 06       	cpc	r1, r23
    2b80:	18 06       	cpc	r1, r24
    2b82:	09 06       	cpc	r0, r25
    2b84:	08 95       	ret

00002b86 <__fp_pscB>:
    2b86:	00 24       	eor	r0, r0
    2b88:	0a 94       	dec	r0
    2b8a:	12 16       	cp	r1, r18
    2b8c:	13 06       	cpc	r1, r19
    2b8e:	14 06       	cpc	r1, r20
    2b90:	05 06       	cpc	r0, r21
    2b92:	08 95       	ret

00002b94 <__fp_round>:
    2b94:	09 2e       	mov	r0, r25
    2b96:	03 94       	inc	r0
    2b98:	00 0c       	add	r0, r0
    2b9a:	11 f4       	brne	.+4      	; 0x2ba0 <__fp_round+0xc>
    2b9c:	88 23       	and	r24, r24
    2b9e:	52 f0       	brmi	.+20     	; 0x2bb4 <__fp_round+0x20>
    2ba0:	bb 0f       	add	r27, r27
    2ba2:	40 f4       	brcc	.+16     	; 0x2bb4 <__fp_round+0x20>
    2ba4:	bf 2b       	or	r27, r31
    2ba6:	11 f4       	brne	.+4      	; 0x2bac <__fp_round+0x18>
    2ba8:	60 ff       	sbrs	r22, 0
    2baa:	04 c0       	rjmp	.+8      	; 0x2bb4 <__fp_round+0x20>
    2bac:	6f 5f       	subi	r22, 0xFF	; 255
    2bae:	7f 4f       	sbci	r23, 0xFF	; 255
    2bb0:	8f 4f       	sbci	r24, 0xFF	; 255
    2bb2:	9f 4f       	sbci	r25, 0xFF	; 255
    2bb4:	08 95       	ret

00002bb6 <__fp_split3>:
    2bb6:	57 fd       	sbrc	r21, 7
    2bb8:	90 58       	subi	r25, 0x80	; 128
    2bba:	44 0f       	add	r20, r20
    2bbc:	55 1f       	adc	r21, r21
    2bbe:	59 f0       	breq	.+22     	; 0x2bd6 <__fp_splitA+0x10>
    2bc0:	5f 3f       	cpi	r21, 0xFF	; 255
    2bc2:	71 f0       	breq	.+28     	; 0x2be0 <__fp_splitA+0x1a>
    2bc4:	47 95       	ror	r20

00002bc6 <__fp_splitA>:
    2bc6:	88 0f       	add	r24, r24
    2bc8:	97 fb       	bst	r25, 7
    2bca:	99 1f       	adc	r25, r25
    2bcc:	61 f0       	breq	.+24     	; 0x2be6 <__fp_splitA+0x20>
    2bce:	9f 3f       	cpi	r25, 0xFF	; 255
    2bd0:	79 f0       	breq	.+30     	; 0x2bf0 <__fp_splitA+0x2a>
    2bd2:	87 95       	ror	r24
    2bd4:	08 95       	ret
    2bd6:	12 16       	cp	r1, r18
    2bd8:	13 06       	cpc	r1, r19
    2bda:	14 06       	cpc	r1, r20
    2bdc:	55 1f       	adc	r21, r21
    2bde:	f2 cf       	rjmp	.-28     	; 0x2bc4 <__fp_split3+0xe>
    2be0:	46 95       	lsr	r20
    2be2:	f1 df       	rcall	.-30     	; 0x2bc6 <__fp_splitA>
    2be4:	08 c0       	rjmp	.+16     	; 0x2bf6 <__fp_splitA+0x30>
    2be6:	16 16       	cp	r1, r22
    2be8:	17 06       	cpc	r1, r23
    2bea:	18 06       	cpc	r1, r24
    2bec:	99 1f       	adc	r25, r25
    2bee:	f1 cf       	rjmp	.-30     	; 0x2bd2 <__fp_splitA+0xc>
    2bf0:	86 95       	lsr	r24
    2bf2:	71 05       	cpc	r23, r1
    2bf4:	61 05       	cpc	r22, r1
    2bf6:	08 94       	sec
    2bf8:	08 95       	ret

00002bfa <__fp_zero>:
    2bfa:	e8 94       	clt

00002bfc <__fp_szero>:
    2bfc:	bb 27       	eor	r27, r27
    2bfe:	66 27       	eor	r22, r22
    2c00:	77 27       	eor	r23, r23
    2c02:	cb 01       	movw	r24, r22
    2c04:	97 f9       	bld	r25, 7
    2c06:	08 95       	ret

00002c08 <__mulsf3>:
    2c08:	0b d0       	rcall	.+22     	; 0x2c20 <__mulsf3x>
    2c0a:	c4 cf       	rjmp	.-120    	; 0x2b94 <__fp_round>
    2c0c:	b5 df       	rcall	.-150    	; 0x2b78 <__fp_pscA>
    2c0e:	28 f0       	brcs	.+10     	; 0x2c1a <__mulsf3+0x12>
    2c10:	ba df       	rcall	.-140    	; 0x2b86 <__fp_pscB>
    2c12:	18 f0       	brcs	.+6      	; 0x2c1a <__mulsf3+0x12>
    2c14:	95 23       	and	r25, r21
    2c16:	09 f0       	breq	.+2      	; 0x2c1a <__mulsf3+0x12>
    2c18:	a6 cf       	rjmp	.-180    	; 0x2b66 <__fp_inf>
    2c1a:	ab cf       	rjmp	.-170    	; 0x2b72 <__fp_nan>
    2c1c:	11 24       	eor	r1, r1
    2c1e:	ee cf       	rjmp	.-36     	; 0x2bfc <__fp_szero>

00002c20 <__mulsf3x>:
    2c20:	ca df       	rcall	.-108    	; 0x2bb6 <__fp_split3>
    2c22:	a0 f3       	brcs	.-24     	; 0x2c0c <__mulsf3+0x4>

00002c24 <__mulsf3_pse>:
    2c24:	95 9f       	mul	r25, r21
    2c26:	d1 f3       	breq	.-12     	; 0x2c1c <__mulsf3+0x14>
    2c28:	95 0f       	add	r25, r21
    2c2a:	50 e0       	ldi	r21, 0x00	; 0
    2c2c:	55 1f       	adc	r21, r21
    2c2e:	62 9f       	mul	r22, r18
    2c30:	f0 01       	movw	r30, r0
    2c32:	72 9f       	mul	r23, r18
    2c34:	bb 27       	eor	r27, r27
    2c36:	f0 0d       	add	r31, r0
    2c38:	b1 1d       	adc	r27, r1
    2c3a:	63 9f       	mul	r22, r19
    2c3c:	aa 27       	eor	r26, r26
    2c3e:	f0 0d       	add	r31, r0
    2c40:	b1 1d       	adc	r27, r1
    2c42:	aa 1f       	adc	r26, r26
    2c44:	64 9f       	mul	r22, r20
    2c46:	66 27       	eor	r22, r22
    2c48:	b0 0d       	add	r27, r0
    2c4a:	a1 1d       	adc	r26, r1
    2c4c:	66 1f       	adc	r22, r22
    2c4e:	82 9f       	mul	r24, r18
    2c50:	22 27       	eor	r18, r18
    2c52:	b0 0d       	add	r27, r0
    2c54:	a1 1d       	adc	r26, r1
    2c56:	62 1f       	adc	r22, r18
    2c58:	73 9f       	mul	r23, r19
    2c5a:	b0 0d       	add	r27, r0
    2c5c:	a1 1d       	adc	r26, r1
    2c5e:	62 1f       	adc	r22, r18
    2c60:	83 9f       	mul	r24, r19
    2c62:	a0 0d       	add	r26, r0
    2c64:	61 1d       	adc	r22, r1
    2c66:	22 1f       	adc	r18, r18
    2c68:	74 9f       	mul	r23, r20
    2c6a:	33 27       	eor	r19, r19
    2c6c:	a0 0d       	add	r26, r0
    2c6e:	61 1d       	adc	r22, r1
    2c70:	23 1f       	adc	r18, r19
    2c72:	84 9f       	mul	r24, r20
    2c74:	60 0d       	add	r22, r0
    2c76:	21 1d       	adc	r18, r1
    2c78:	82 2f       	mov	r24, r18
    2c7a:	76 2f       	mov	r23, r22
    2c7c:	6a 2f       	mov	r22, r26
    2c7e:	11 24       	eor	r1, r1
    2c80:	9f 57       	subi	r25, 0x7F	; 127
    2c82:	50 40       	sbci	r21, 0x00	; 0
    2c84:	8a f0       	brmi	.+34     	; 0x2ca8 <__mulsf3_pse+0x84>
    2c86:	e1 f0       	breq	.+56     	; 0x2cc0 <__mulsf3_pse+0x9c>
    2c88:	88 23       	and	r24, r24
    2c8a:	4a f0       	brmi	.+18     	; 0x2c9e <__mulsf3_pse+0x7a>
    2c8c:	ee 0f       	add	r30, r30
    2c8e:	ff 1f       	adc	r31, r31
    2c90:	bb 1f       	adc	r27, r27
    2c92:	66 1f       	adc	r22, r22
    2c94:	77 1f       	adc	r23, r23
    2c96:	88 1f       	adc	r24, r24
    2c98:	91 50       	subi	r25, 0x01	; 1
    2c9a:	50 40       	sbci	r21, 0x00	; 0
    2c9c:	a9 f7       	brne	.-22     	; 0x2c88 <__mulsf3_pse+0x64>
    2c9e:	9e 3f       	cpi	r25, 0xFE	; 254
    2ca0:	51 05       	cpc	r21, r1
    2ca2:	70 f0       	brcs	.+28     	; 0x2cc0 <__mulsf3_pse+0x9c>
    2ca4:	60 cf       	rjmp	.-320    	; 0x2b66 <__fp_inf>
    2ca6:	aa cf       	rjmp	.-172    	; 0x2bfc <__fp_szero>
    2ca8:	5f 3f       	cpi	r21, 0xFF	; 255
    2caa:	ec f3       	brlt	.-6      	; 0x2ca6 <__mulsf3_pse+0x82>
    2cac:	98 3e       	cpi	r25, 0xE8	; 232
    2cae:	dc f3       	brlt	.-10     	; 0x2ca6 <__mulsf3_pse+0x82>
    2cb0:	86 95       	lsr	r24
    2cb2:	77 95       	ror	r23
    2cb4:	67 95       	ror	r22
    2cb6:	b7 95       	ror	r27
    2cb8:	f7 95       	ror	r31
    2cba:	e7 95       	ror	r30
    2cbc:	9f 5f       	subi	r25, 0xFF	; 255
    2cbe:	c1 f7       	brne	.-16     	; 0x2cb0 <__mulsf3_pse+0x8c>
    2cc0:	fe 2b       	or	r31, r30
    2cc2:	88 0f       	add	r24, r24
    2cc4:	91 1d       	adc	r25, r1
    2cc6:	96 95       	lsr	r25
    2cc8:	87 95       	ror	r24
    2cca:	97 f9       	bld	r25, 7
    2ccc:	08 95       	ret

00002cce <__tablejump2__>:
    2cce:	ee 0f       	add	r30, r30
    2cd0:	ff 1f       	adc	r31, r31
    2cd2:	88 1f       	adc	r24, r24
    2cd4:	8b bf       	out	0x3b, r24	; 59
    2cd6:	07 90       	elpm	r0, Z+
    2cd8:	f6 91       	elpm	r31, Z
    2cda:	e0 2d       	mov	r30, r0
    2cdc:	19 94       	eijmp

00002cde <malloc>:
    2cde:	0f 93       	push	r16
    2ce0:	1f 93       	push	r17
    2ce2:	cf 93       	push	r28
    2ce4:	df 93       	push	r29
    2ce6:	82 30       	cpi	r24, 0x02	; 2
    2ce8:	91 05       	cpc	r25, r1
    2cea:	10 f4       	brcc	.+4      	; 0x2cf0 <malloc+0x12>
    2cec:	82 e0       	ldi	r24, 0x02	; 2
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	e0 91 21 0d 	lds	r30, 0x0D21	; 0x800d21 <__flp>
    2cf4:	f0 91 22 0d 	lds	r31, 0x0D22	; 0x800d22 <__flp+0x1>
    2cf8:	20 e0       	ldi	r18, 0x00	; 0
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	a0 e0       	ldi	r26, 0x00	; 0
    2cfe:	b0 e0       	ldi	r27, 0x00	; 0
    2d00:	30 97       	sbiw	r30, 0x00	; 0
    2d02:	19 f1       	breq	.+70     	; 0x2d4a <malloc+0x6c>
    2d04:	40 81       	ld	r20, Z
    2d06:	51 81       	ldd	r21, Z+1	; 0x01
    2d08:	02 81       	ldd	r16, Z+2	; 0x02
    2d0a:	13 81       	ldd	r17, Z+3	; 0x03
    2d0c:	48 17       	cp	r20, r24
    2d0e:	59 07       	cpc	r21, r25
    2d10:	c8 f0       	brcs	.+50     	; 0x2d44 <malloc+0x66>
    2d12:	84 17       	cp	r24, r20
    2d14:	95 07       	cpc	r25, r21
    2d16:	69 f4       	brne	.+26     	; 0x2d32 <malloc+0x54>
    2d18:	10 97       	sbiw	r26, 0x00	; 0
    2d1a:	31 f0       	breq	.+12     	; 0x2d28 <malloc+0x4a>
    2d1c:	12 96       	adiw	r26, 0x02	; 2
    2d1e:	0c 93       	st	X, r16
    2d20:	12 97       	sbiw	r26, 0x02	; 2
    2d22:	13 96       	adiw	r26, 0x03	; 3
    2d24:	1c 93       	st	X, r17
    2d26:	27 c0       	rjmp	.+78     	; 0x2d76 <malloc+0x98>
    2d28:	00 93 21 0d 	sts	0x0D21, r16	; 0x800d21 <__flp>
    2d2c:	10 93 22 0d 	sts	0x0D22, r17	; 0x800d22 <__flp+0x1>
    2d30:	22 c0       	rjmp	.+68     	; 0x2d76 <malloc+0x98>
    2d32:	21 15       	cp	r18, r1
    2d34:	31 05       	cpc	r19, r1
    2d36:	19 f0       	breq	.+6      	; 0x2d3e <malloc+0x60>
    2d38:	42 17       	cp	r20, r18
    2d3a:	53 07       	cpc	r21, r19
    2d3c:	18 f4       	brcc	.+6      	; 0x2d44 <malloc+0x66>
    2d3e:	9a 01       	movw	r18, r20
    2d40:	bd 01       	movw	r22, r26
    2d42:	ef 01       	movw	r28, r30
    2d44:	df 01       	movw	r26, r30
    2d46:	f8 01       	movw	r30, r16
    2d48:	db cf       	rjmp	.-74     	; 0x2d00 <malloc+0x22>
    2d4a:	21 15       	cp	r18, r1
    2d4c:	31 05       	cpc	r19, r1
    2d4e:	f9 f0       	breq	.+62     	; 0x2d8e <malloc+0xb0>
    2d50:	28 1b       	sub	r18, r24
    2d52:	39 0b       	sbc	r19, r25
    2d54:	24 30       	cpi	r18, 0x04	; 4
    2d56:	31 05       	cpc	r19, r1
    2d58:	80 f4       	brcc	.+32     	; 0x2d7a <malloc+0x9c>
    2d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d5c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d5e:	61 15       	cp	r22, r1
    2d60:	71 05       	cpc	r23, r1
    2d62:	21 f0       	breq	.+8      	; 0x2d6c <malloc+0x8e>
    2d64:	fb 01       	movw	r30, r22
    2d66:	93 83       	std	Z+3, r25	; 0x03
    2d68:	82 83       	std	Z+2, r24	; 0x02
    2d6a:	04 c0       	rjmp	.+8      	; 0x2d74 <malloc+0x96>
    2d6c:	90 93 22 0d 	sts	0x0D22, r25	; 0x800d22 <__flp+0x1>
    2d70:	80 93 21 0d 	sts	0x0D21, r24	; 0x800d21 <__flp>
    2d74:	fe 01       	movw	r30, r28
    2d76:	32 96       	adiw	r30, 0x02	; 2
    2d78:	44 c0       	rjmp	.+136    	; 0x2e02 <malloc+0x124>
    2d7a:	fe 01       	movw	r30, r28
    2d7c:	e2 0f       	add	r30, r18
    2d7e:	f3 1f       	adc	r31, r19
    2d80:	81 93       	st	Z+, r24
    2d82:	91 93       	st	Z+, r25
    2d84:	22 50       	subi	r18, 0x02	; 2
    2d86:	31 09       	sbc	r19, r1
    2d88:	39 83       	std	Y+1, r19	; 0x01
    2d8a:	28 83       	st	Y, r18
    2d8c:	3a c0       	rjmp	.+116    	; 0x2e02 <malloc+0x124>
    2d8e:	20 91 1f 0d 	lds	r18, 0x0D1F	; 0x800d1f <__brkval>
    2d92:	30 91 20 0d 	lds	r19, 0x0D20	; 0x800d20 <__brkval+0x1>
    2d96:	23 2b       	or	r18, r19
    2d98:	41 f4       	brne	.+16     	; 0x2daa <malloc+0xcc>
    2d9a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    2d9e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    2da2:	30 93 20 0d 	sts	0x0D20, r19	; 0x800d20 <__brkval+0x1>
    2da6:	20 93 1f 0d 	sts	0x0D1F, r18	; 0x800d1f <__brkval>
    2daa:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    2dae:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    2db2:	21 15       	cp	r18, r1
    2db4:	31 05       	cpc	r19, r1
    2db6:	41 f4       	brne	.+16     	; 0x2dc8 <malloc+0xea>
    2db8:	2d b7       	in	r18, 0x3d	; 61
    2dba:	3e b7       	in	r19, 0x3e	; 62
    2dbc:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    2dc0:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    2dc4:	24 1b       	sub	r18, r20
    2dc6:	35 0b       	sbc	r19, r21
    2dc8:	e0 91 1f 0d 	lds	r30, 0x0D1F	; 0x800d1f <__brkval>
    2dcc:	f0 91 20 0d 	lds	r31, 0x0D20	; 0x800d20 <__brkval+0x1>
    2dd0:	e2 17       	cp	r30, r18
    2dd2:	f3 07       	cpc	r31, r19
    2dd4:	a0 f4       	brcc	.+40     	; 0x2dfe <malloc+0x120>
    2dd6:	2e 1b       	sub	r18, r30
    2dd8:	3f 0b       	sbc	r19, r31
    2dda:	28 17       	cp	r18, r24
    2ddc:	39 07       	cpc	r19, r25
    2dde:	78 f0       	brcs	.+30     	; 0x2dfe <malloc+0x120>
    2de0:	ac 01       	movw	r20, r24
    2de2:	4e 5f       	subi	r20, 0xFE	; 254
    2de4:	5f 4f       	sbci	r21, 0xFF	; 255
    2de6:	24 17       	cp	r18, r20
    2de8:	35 07       	cpc	r19, r21
    2dea:	48 f0       	brcs	.+18     	; 0x2dfe <malloc+0x120>
    2dec:	4e 0f       	add	r20, r30
    2dee:	5f 1f       	adc	r21, r31
    2df0:	50 93 20 0d 	sts	0x0D20, r21	; 0x800d20 <__brkval+0x1>
    2df4:	40 93 1f 0d 	sts	0x0D1F, r20	; 0x800d1f <__brkval>
    2df8:	81 93       	st	Z+, r24
    2dfa:	91 93       	st	Z+, r25
    2dfc:	02 c0       	rjmp	.+4      	; 0x2e02 <malloc+0x124>
    2dfe:	e0 e0       	ldi	r30, 0x00	; 0
    2e00:	f0 e0       	ldi	r31, 0x00	; 0
    2e02:	cf 01       	movw	r24, r30
    2e04:	df 91       	pop	r29
    2e06:	cf 91       	pop	r28
    2e08:	1f 91       	pop	r17
    2e0a:	0f 91       	pop	r16
    2e0c:	08 95       	ret

00002e0e <free>:
    2e0e:	cf 93       	push	r28
    2e10:	df 93       	push	r29
    2e12:	00 97       	sbiw	r24, 0x00	; 0
    2e14:	09 f4       	brne	.+2      	; 0x2e18 <free+0xa>
    2e16:	81 c0       	rjmp	.+258    	; 0x2f1a <free+0x10c>
    2e18:	fc 01       	movw	r30, r24
    2e1a:	32 97       	sbiw	r30, 0x02	; 2
    2e1c:	13 82       	std	Z+3, r1	; 0x03
    2e1e:	12 82       	std	Z+2, r1	; 0x02
    2e20:	a0 91 21 0d 	lds	r26, 0x0D21	; 0x800d21 <__flp>
    2e24:	b0 91 22 0d 	lds	r27, 0x0D22	; 0x800d22 <__flp+0x1>
    2e28:	10 97       	sbiw	r26, 0x00	; 0
    2e2a:	81 f4       	brne	.+32     	; 0x2e4c <free+0x3e>
    2e2c:	20 81       	ld	r18, Z
    2e2e:	31 81       	ldd	r19, Z+1	; 0x01
    2e30:	82 0f       	add	r24, r18
    2e32:	93 1f       	adc	r25, r19
    2e34:	20 91 1f 0d 	lds	r18, 0x0D1F	; 0x800d1f <__brkval>
    2e38:	30 91 20 0d 	lds	r19, 0x0D20	; 0x800d20 <__brkval+0x1>
    2e3c:	28 17       	cp	r18, r24
    2e3e:	39 07       	cpc	r19, r25
    2e40:	51 f5       	brne	.+84     	; 0x2e96 <free+0x88>
    2e42:	f0 93 20 0d 	sts	0x0D20, r31	; 0x800d20 <__brkval+0x1>
    2e46:	e0 93 1f 0d 	sts	0x0D1F, r30	; 0x800d1f <__brkval>
    2e4a:	67 c0       	rjmp	.+206    	; 0x2f1a <free+0x10c>
    2e4c:	ed 01       	movw	r28, r26
    2e4e:	20 e0       	ldi	r18, 0x00	; 0
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	ce 17       	cp	r28, r30
    2e54:	df 07       	cpc	r29, r31
    2e56:	40 f4       	brcc	.+16     	; 0x2e68 <free+0x5a>
    2e58:	4a 81       	ldd	r20, Y+2	; 0x02
    2e5a:	5b 81       	ldd	r21, Y+3	; 0x03
    2e5c:	9e 01       	movw	r18, r28
    2e5e:	41 15       	cp	r20, r1
    2e60:	51 05       	cpc	r21, r1
    2e62:	f1 f0       	breq	.+60     	; 0x2ea0 <free+0x92>
    2e64:	ea 01       	movw	r28, r20
    2e66:	f5 cf       	rjmp	.-22     	; 0x2e52 <free+0x44>
    2e68:	d3 83       	std	Z+3, r29	; 0x03
    2e6a:	c2 83       	std	Z+2, r28	; 0x02
    2e6c:	40 81       	ld	r20, Z
    2e6e:	51 81       	ldd	r21, Z+1	; 0x01
    2e70:	84 0f       	add	r24, r20
    2e72:	95 1f       	adc	r25, r21
    2e74:	c8 17       	cp	r28, r24
    2e76:	d9 07       	cpc	r29, r25
    2e78:	59 f4       	brne	.+22     	; 0x2e90 <free+0x82>
    2e7a:	88 81       	ld	r24, Y
    2e7c:	99 81       	ldd	r25, Y+1	; 0x01
    2e7e:	84 0f       	add	r24, r20
    2e80:	95 1f       	adc	r25, r21
    2e82:	02 96       	adiw	r24, 0x02	; 2
    2e84:	91 83       	std	Z+1, r25	; 0x01
    2e86:	80 83       	st	Z, r24
    2e88:	8a 81       	ldd	r24, Y+2	; 0x02
    2e8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e8c:	93 83       	std	Z+3, r25	; 0x03
    2e8e:	82 83       	std	Z+2, r24	; 0x02
    2e90:	21 15       	cp	r18, r1
    2e92:	31 05       	cpc	r19, r1
    2e94:	29 f4       	brne	.+10     	; 0x2ea0 <free+0x92>
    2e96:	f0 93 22 0d 	sts	0x0D22, r31	; 0x800d22 <__flp+0x1>
    2e9a:	e0 93 21 0d 	sts	0x0D21, r30	; 0x800d21 <__flp>
    2e9e:	3d c0       	rjmp	.+122    	; 0x2f1a <free+0x10c>
    2ea0:	e9 01       	movw	r28, r18
    2ea2:	fb 83       	std	Y+3, r31	; 0x03
    2ea4:	ea 83       	std	Y+2, r30	; 0x02
    2ea6:	49 91       	ld	r20, Y+
    2ea8:	59 91       	ld	r21, Y+
    2eaa:	c4 0f       	add	r28, r20
    2eac:	d5 1f       	adc	r29, r21
    2eae:	ec 17       	cp	r30, r28
    2eb0:	fd 07       	cpc	r31, r29
    2eb2:	61 f4       	brne	.+24     	; 0x2ecc <free+0xbe>
    2eb4:	80 81       	ld	r24, Z
    2eb6:	91 81       	ldd	r25, Z+1	; 0x01
    2eb8:	84 0f       	add	r24, r20
    2eba:	95 1f       	adc	r25, r21
    2ebc:	02 96       	adiw	r24, 0x02	; 2
    2ebe:	e9 01       	movw	r28, r18
    2ec0:	99 83       	std	Y+1, r25	; 0x01
    2ec2:	88 83       	st	Y, r24
    2ec4:	82 81       	ldd	r24, Z+2	; 0x02
    2ec6:	93 81       	ldd	r25, Z+3	; 0x03
    2ec8:	9b 83       	std	Y+3, r25	; 0x03
    2eca:	8a 83       	std	Y+2, r24	; 0x02
    2ecc:	e0 e0       	ldi	r30, 0x00	; 0
    2ece:	f0 e0       	ldi	r31, 0x00	; 0
    2ed0:	12 96       	adiw	r26, 0x02	; 2
    2ed2:	8d 91       	ld	r24, X+
    2ed4:	9c 91       	ld	r25, X
    2ed6:	13 97       	sbiw	r26, 0x03	; 3
    2ed8:	00 97       	sbiw	r24, 0x00	; 0
    2eda:	19 f0       	breq	.+6      	; 0x2ee2 <free+0xd4>
    2edc:	fd 01       	movw	r30, r26
    2ede:	dc 01       	movw	r26, r24
    2ee0:	f7 cf       	rjmp	.-18     	; 0x2ed0 <free+0xc2>
    2ee2:	8d 91       	ld	r24, X+
    2ee4:	9c 91       	ld	r25, X
    2ee6:	11 97       	sbiw	r26, 0x01	; 1
    2ee8:	9d 01       	movw	r18, r26
    2eea:	2e 5f       	subi	r18, 0xFE	; 254
    2eec:	3f 4f       	sbci	r19, 0xFF	; 255
    2eee:	82 0f       	add	r24, r18
    2ef0:	93 1f       	adc	r25, r19
    2ef2:	20 91 1f 0d 	lds	r18, 0x0D1F	; 0x800d1f <__brkval>
    2ef6:	30 91 20 0d 	lds	r19, 0x0D20	; 0x800d20 <__brkval+0x1>
    2efa:	28 17       	cp	r18, r24
    2efc:	39 07       	cpc	r19, r25
    2efe:	69 f4       	brne	.+26     	; 0x2f1a <free+0x10c>
    2f00:	30 97       	sbiw	r30, 0x00	; 0
    2f02:	29 f4       	brne	.+10     	; 0x2f0e <free+0x100>
    2f04:	10 92 22 0d 	sts	0x0D22, r1	; 0x800d22 <__flp+0x1>
    2f08:	10 92 21 0d 	sts	0x0D21, r1	; 0x800d21 <__flp>
    2f0c:	02 c0       	rjmp	.+4      	; 0x2f12 <free+0x104>
    2f0e:	13 82       	std	Z+3, r1	; 0x03
    2f10:	12 82       	std	Z+2, r1	; 0x02
    2f12:	b0 93 20 0d 	sts	0x0D20, r27	; 0x800d20 <__brkval+0x1>
    2f16:	a0 93 1f 0d 	sts	0x0D1F, r26	; 0x800d1f <__brkval>
    2f1a:	df 91       	pop	r29
    2f1c:	cf 91       	pop	r28
    2f1e:	08 95       	ret

00002f20 <abort>:
    2f20:	81 e0       	ldi	r24, 0x01	; 1
    2f22:	90 e0       	ldi	r25, 0x00	; 0
    2f24:	f8 94       	cli
    2f26:	40 c0       	rjmp	.+128    	; 0x2fa8 <_exit>

00002f28 <memcpy>:
    2f28:	fb 01       	movw	r30, r22
    2f2a:	dc 01       	movw	r26, r24
    2f2c:	02 c0       	rjmp	.+4      	; 0x2f32 <memcpy+0xa>
    2f2e:	01 90       	ld	r0, Z+
    2f30:	0d 92       	st	X+, r0
    2f32:	41 50       	subi	r20, 0x01	; 1
    2f34:	50 40       	sbci	r21, 0x00	; 0
    2f36:	d8 f7       	brcc	.-10     	; 0x2f2e <memcpy+0x6>
    2f38:	08 95       	ret

00002f3a <memset>:
    2f3a:	dc 01       	movw	r26, r24
    2f3c:	01 c0       	rjmp	.+2      	; 0x2f40 <memset+0x6>
    2f3e:	6d 93       	st	X+, r22
    2f40:	41 50       	subi	r20, 0x01	; 1
    2f42:	50 40       	sbci	r21, 0x00	; 0
    2f44:	e0 f7       	brcc	.-8      	; 0x2f3e <memset+0x4>
    2f46:	08 95       	ret

00002f48 <puts>:
    2f48:	0f 93       	push	r16
    2f4a:	1f 93       	push	r17
    2f4c:	cf 93       	push	r28
    2f4e:	df 93       	push	r29
    2f50:	e0 91 25 0d 	lds	r30, 0x0D25	; 0x800d25 <__iob+0x2>
    2f54:	f0 91 26 0d 	lds	r31, 0x0D26	; 0x800d26 <__iob+0x3>
    2f58:	23 81       	ldd	r18, Z+3	; 0x03
    2f5a:	21 ff       	sbrs	r18, 1
    2f5c:	1b c0       	rjmp	.+54     	; 0x2f94 <puts+0x4c>
    2f5e:	8c 01       	movw	r16, r24
    2f60:	d0 e0       	ldi	r29, 0x00	; 0
    2f62:	c0 e0       	ldi	r28, 0x00	; 0
    2f64:	f8 01       	movw	r30, r16
    2f66:	81 91       	ld	r24, Z+
    2f68:	8f 01       	movw	r16, r30
    2f6a:	60 91 25 0d 	lds	r22, 0x0D25	; 0x800d25 <__iob+0x2>
    2f6e:	70 91 26 0d 	lds	r23, 0x0D26	; 0x800d26 <__iob+0x3>
    2f72:	db 01       	movw	r26, r22
    2f74:	18 96       	adiw	r26, 0x08	; 8
    2f76:	ed 91       	ld	r30, X+
    2f78:	fc 91       	ld	r31, X
    2f7a:	19 97       	sbiw	r26, 0x09	; 9
    2f7c:	88 23       	and	r24, r24
    2f7e:	31 f0       	breq	.+12     	; 0x2f8c <puts+0x44>
    2f80:	19 95       	eicall
    2f82:	89 2b       	or	r24, r25
    2f84:	79 f3       	breq	.-34     	; 0x2f64 <puts+0x1c>
    2f86:	df ef       	ldi	r29, 0xFF	; 255
    2f88:	cf ef       	ldi	r28, 0xFF	; 255
    2f8a:	ec cf       	rjmp	.-40     	; 0x2f64 <puts+0x1c>
    2f8c:	8a e0       	ldi	r24, 0x0A	; 10
    2f8e:	19 95       	eicall
    2f90:	89 2b       	or	r24, r25
    2f92:	19 f0       	breq	.+6      	; 0x2f9a <puts+0x52>
    2f94:	8f ef       	ldi	r24, 0xFF	; 255
    2f96:	9f ef       	ldi	r25, 0xFF	; 255
    2f98:	02 c0       	rjmp	.+4      	; 0x2f9e <puts+0x56>
    2f9a:	8d 2f       	mov	r24, r29
    2f9c:	9c 2f       	mov	r25, r28
    2f9e:	df 91       	pop	r29
    2fa0:	cf 91       	pop	r28
    2fa2:	1f 91       	pop	r17
    2fa4:	0f 91       	pop	r16
    2fa6:	08 95       	ret

00002fa8 <_exit>:
    2fa8:	f8 94       	cli

00002faa <__stop_program>:
    2faa:	ff cf       	rjmp	.-2      	; 0x2faa <__stop_program>

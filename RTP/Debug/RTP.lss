
RTP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007a  00800200  00003a20  00003ab4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003a20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000b99  0080027a  0080027a  00003b2e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003b2e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003b8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000640  00000000  00000000  00003bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007eaa  00000000  00000000  0000420c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000208a  00000000  00000000  0000c0b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004205  00000000  00000000  0000e140  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000016d8  00000000  00000000  00012348  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000028ac  00000000  00000000  00013a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000759d  00000000  00000000  000162cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000620  00000000  00000000  0001d869  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	94 c0       	rjmp	.+296    	; 0x12a <__ctors_end>
       2:	00 00       	nop
       4:	b2 c0       	rjmp	.+356    	; 0x16a <__bad_interrupt>
       6:	00 00       	nop
       8:	b0 c0       	rjmp	.+352    	; 0x16a <__bad_interrupt>
       a:	00 00       	nop
       c:	ae c0       	rjmp	.+348    	; 0x16a <__bad_interrupt>
       e:	00 00       	nop
      10:	ac c0       	rjmp	.+344    	; 0x16a <__bad_interrupt>
      12:	00 00       	nop
      14:	aa c0       	rjmp	.+340    	; 0x16a <__bad_interrupt>
      16:	00 00       	nop
      18:	a8 c0       	rjmp	.+336    	; 0x16a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a6 c0       	rjmp	.+332    	; 0x16a <__bad_interrupt>
      1e:	00 00       	nop
      20:	a4 c0       	rjmp	.+328    	; 0x16a <__bad_interrupt>
      22:	00 00       	nop
      24:	a2 c0       	rjmp	.+324    	; 0x16a <__bad_interrupt>
      26:	00 00       	nop
      28:	a0 c0       	rjmp	.+320    	; 0x16a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	9e c0       	rjmp	.+316    	; 0x16a <__bad_interrupt>
      2e:	00 00       	nop
      30:	7f c4       	rjmp	.+2302   	; 0x930 <__vector_12>
      32:	00 00       	nop
      34:	9a c0       	rjmp	.+308    	; 0x16a <__bad_interrupt>
      36:	00 00       	nop
      38:	98 c0       	rjmp	.+304    	; 0x16a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	96 c0       	rjmp	.+300    	; 0x16a <__bad_interrupt>
      3e:	00 00       	nop
      40:	94 c0       	rjmp	.+296    	; 0x16a <__bad_interrupt>
      42:	00 00       	nop
      44:	92 c0       	rjmp	.+292    	; 0x16a <__bad_interrupt>
      46:	00 00       	nop
      48:	90 c0       	rjmp	.+288    	; 0x16a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8e c0       	rjmp	.+284    	; 0x16a <__bad_interrupt>
      4e:	00 00       	nop
      50:	8c c0       	rjmp	.+280    	; 0x16a <__bad_interrupt>
      52:	00 00       	nop
      54:	8a c0       	rjmp	.+276    	; 0x16a <__bad_interrupt>
      56:	00 00       	nop
      58:	88 c0       	rjmp	.+272    	; 0x16a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	86 c0       	rjmp	.+268    	; 0x16a <__bad_interrupt>
      5e:	00 00       	nop
      60:	84 c0       	rjmp	.+264    	; 0x16a <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 7e 14 	jmp	0x28fc	; 0x28fc <__vector_25>
      68:	0c 94 d0 14 	jmp	0x29a0	; 0x29a0 <__vector_26>
      6c:	7e c0       	rjmp	.+252    	; 0x16a <__bad_interrupt>
      6e:	00 00       	nop
      70:	7c c0       	rjmp	.+248    	; 0x16a <__bad_interrupt>
      72:	00 00       	nop
      74:	7a c0       	rjmp	.+244    	; 0x16a <__bad_interrupt>
      76:	00 00       	nop
      78:	78 c0       	rjmp	.+240    	; 0x16a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	76 c0       	rjmp	.+236    	; 0x16a <__bad_interrupt>
      7e:	00 00       	nop
      80:	74 c0       	rjmp	.+232    	; 0x16a <__bad_interrupt>
      82:	00 00       	nop
      84:	72 c0       	rjmp	.+228    	; 0x16a <__bad_interrupt>
      86:	00 00       	nop
      88:	70 c0       	rjmp	.+224    	; 0x16a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6e c0       	rjmp	.+220    	; 0x16a <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 14 15 	jmp	0x2a28	; 0x2a28 <__vector_36>
      94:	0c 94 66 15 	jmp	0x2acc	; 0x2acc <__vector_37>
      98:	68 c0       	rjmp	.+208    	; 0x16a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	66 c0       	rjmp	.+204    	; 0x16a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	64 c0       	rjmp	.+200    	; 0x16a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	62 c0       	rjmp	.+196    	; 0x16a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	60 c0       	rjmp	.+192    	; 0x16a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	5e c0       	rjmp	.+188    	; 0x16a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	5c c0       	rjmp	.+184    	; 0x16a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5a c0       	rjmp	.+180    	; 0x16a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	58 c0       	rjmp	.+176    	; 0x16a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	56 c0       	rjmp	.+172    	; 0x16a <__bad_interrupt>
      be:	00 00       	nop
      c0:	54 c0       	rjmp	.+168    	; 0x16a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	52 c0       	rjmp	.+164    	; 0x16a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	50 c0       	rjmp	.+160    	; 0x16a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 aa 15 	jmp	0x2b54	; 0x2b54 <__vector_51>
      d0:	0c 94 fc 15 	jmp	0x2bf8	; 0x2bf8 <__vector_52>
      d4:	4a c0       	rjmp	.+148    	; 0x16a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 40 16 	jmp	0x2c80	; 0x2c80 <__vector_54>
      dc:	0c 94 92 16 	jmp	0x2d24	; 0x2d24 <__vector_55>
      e0:	44 c0       	rjmp	.+136    	; 0x16a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	af 12       	cpse	r10, r31
      e6:	af 12       	cpse	r10, r31
      e8:	af 12       	cpse	r10, r31
      ea:	e6 12       	cpse	r14, r22
      ec:	ee 12       	cpse	r14, r30
      ee:	03 13       	cpse	r16, r19
      f0:	af 12       	cpse	r10, r31
      f2:	af 12       	cpse	r10, r31
      f4:	e6 12       	cpse	r14, r22
      f6:	ee 12       	cpse	r14, r30

000000f8 <prvIdleTask>:
    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

    return uxReturn;
}
      f8:	0e 94 53 09 	call	0x12a6	; 0x12a6 <prvCheckTasksWaitingTermination>
      fc:	80 91 a3 0c 	lds	r24, 0x0CA3	; 0x800ca3 <pxReadyTasksLists>
     100:	82 30       	cpi	r24, 0x02	; 2
     102:	08 f0       	brcs	.+2      	; 0x106 <prvIdleTask+0xe>
     104:	50 d3       	rcall	.+1696   	; 0x7a6 <vPortYield>
     106:	0e 94 2c 13 	call	0x2658	; 0x2658 <vApplicationIdleHook>
     10a:	f6 cf       	rjmp	.-20     	; 0xf8 <prvIdleTask>

0000010c <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
     110:	1f 92       	push	r1
     112:	cd b7       	in	r28, 0x3d	; 61
     114:	de b7       	in	r29, 0x3e	; 62
     116:	ce 01       	movw	r24, r28
     118:	01 96       	adiw	r24, 0x01	; 1
     11a:	0e 94 33 10 	call	0x2066	; 0x2066 <prvGetNextExpireTime>
     11e:	49 81       	ldd	r20, Y+1	; 0x01
     120:	0e 94 26 12 	call	0x244c	; 0x244c <prvProcessTimerOrBlockTask>
     124:	0e 94 79 12 	call	0x24f2	; 0x24f2 <prvProcessReceivedCommands>
     128:	f6 cf       	rjmp	.-20     	; 0x116 <prvTimerTask+0xa>

0000012a <__ctors_end>:
     12a:	11 24       	eor	r1, r1
     12c:	1f be       	out	0x3f, r1	; 63
     12e:	cf ef       	ldi	r28, 0xFF	; 255
     130:	d1 e2       	ldi	r29, 0x21	; 33
     132:	de bf       	out	0x3e, r29	; 62
     134:	cd bf       	out	0x3d, r28	; 61
     136:	00 e0       	ldi	r16, 0x00	; 0
     138:	0c bf       	out	0x3c, r16	; 60

0000013a <__do_copy_data>:
     13a:	12 e0       	ldi	r17, 0x02	; 2
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	b2 e0       	ldi	r27, 0x02	; 2
     140:	e0 e2       	ldi	r30, 0x20	; 32
     142:	fa e3       	ldi	r31, 0x3A	; 58
     144:	00 e0       	ldi	r16, 0x00	; 0
     146:	0b bf       	out	0x3b, r16	; 59
     148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x14>
     14a:	07 90       	elpm	r0, Z+
     14c:	0d 92       	st	X+, r0
     14e:	aa 37       	cpi	r26, 0x7A	; 122
     150:	b1 07       	cpc	r27, r17
     152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0x10>

00000154 <__do_clear_bss>:
     154:	2e e0       	ldi	r18, 0x0E	; 14
     156:	aa e7       	ldi	r26, 0x7A	; 122
     158:	b2 e0       	ldi	r27, 0x02	; 2
     15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
     15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
     15e:	a3 31       	cpi	r26, 0x13	; 19
     160:	b2 07       	cpc	r27, r18
     162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
     164:	e2 d0       	rcall	.+452    	; 0x32a <main>
     166:	0c 94 0e 1d 	jmp	0x3a1c	; 0x3a1c <_exit>

0000016a <__bad_interrupt>:
     16a:	4a cf       	rjmp	.-364    	; 0x0 <__vectors>

0000016c <fakeInterruptFunction>:

void fakeInterruptFunction(void *pvParameters)
{	
	for(;;)
	{
		if(currentState == 0)
     16c:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <currentState>
     170:	90 91 7d 02 	lds	r25, 0x027D	; 0x80027d <currentState+0x1>
     174:	89 2b       	or	r24, r25
     176:	b9 f4       	brne	.+46     	; 0x1a6 <fakeInterruptFunction+0x3a>
		{
			int interruptPin = 0;
			interruptPin = PINA & 0b00010000;
					
			if(interruptPin == 0)
     178:	04 99       	sbic	0x00, 4	; 0
     17a:	15 c0       	rjmp	.+42     	; 0x1a6 <fakeInterruptFunction+0x3a>
			{
				currentState = 1;
     17c:	81 e0       	ldi	r24, 0x01	; 1
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	90 93 7d 02 	sts	0x027D, r25	; 0x80027d <currentState+0x1>
     184:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <currentState>
				printf("Starting communication\n");
     188:	8d e1       	ldi	r24, 0x1D	; 29
     18a:	92 e0       	ldi	r25, 0x02	; 2
     18c:	0e 94 31 1a 	call	0x3462	; 0x3462 <puts>
				xSemaphoreGive(xInterruptSemaphore);
     190:	00 e0       	ldi	r16, 0x00	; 0
     192:	20 e0       	ldi	r18, 0x00	; 0
     194:	30 e0       	ldi	r19, 0x00	; 0
     196:	a9 01       	movw	r20, r18
     198:	60 e0       	ldi	r22, 0x00	; 0
     19a:	70 e0       	ldi	r23, 0x00	; 0
     19c:	80 91 07 0e 	lds	r24, 0x0E07	; 0x800e07 <xInterruptSemaphore>
     1a0:	90 91 08 0e 	lds	r25, 0x0E08	; 0x800e08 <xInterruptSemaphore+0x1>
     1a4:	21 d5       	rcall	.+2626   	; 0xbe8 <xQueueGenericSend>
			}
		}
		
		vTaskDelay(1);
     1a6:	61 e0       	ldi	r22, 0x01	; 1
     1a8:	70 e0       	ldi	r23, 0x00	; 0
     1aa:	80 e0       	ldi	r24, 0x00	; 0
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	0e 94 ba 0c 	call	0x1974	; 0x1974 <vTaskDelay>
	}
     1b2:	dc cf       	rjmp	.-72     	; 0x16c <fakeInterruptFunction>

000001b4 <receiveMessage>:

void receiveMessage(void *pvParameters)
{
	for(;;)
	{	
		if(currentState == 0)
     1b4:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <currentState>
     1b8:	90 91 7d 02 	lds	r25, 0x027D	; 0x80027d <currentState+0x1>
     1bc:	89 2b       	or	r24, r25
     1be:	71 f4       	brne	.+28     	; 0x1dc <receiveMessage+0x28>
		{
			xSemaphoreTake(xInterruptSemaphore, portMAX_DELAY);
     1c0:	4f ef       	ldi	r20, 0xFF	; 255
     1c2:	5f ef       	ldi	r21, 0xFF	; 255
     1c4:	ba 01       	movw	r22, r20
     1c6:	80 91 07 0e 	lds	r24, 0x0E07	; 0x800e07 <xInterruptSemaphore>
     1ca:	90 91 08 0e 	lds	r25, 0x0E08	; 0x800e08 <xInterruptSemaphore+0x1>
     1ce:	5e d6       	rcall	.+3260   	; 0xe8c <xQueueSemaphoreTake>
			vTaskDelay(6);
     1d0:	66 e0       	ldi	r22, 0x06	; 6
     1d2:	70 e0       	ldi	r23, 0x00	; 0
     1d4:	80 e0       	ldi	r24, 0x00	; 0
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	0e 94 ba 0c 	call	0x1974	; 0x1974 <vTaskDelay>
		}
		
		int stopPin, dataPin = 0;
		stopPin = PINA & 0b10000000;
     1dc:	20 b1       	in	r18, 0x00	; 0
		dataPin = PINA & 0b01000000;
     1de:	80 b1       	in	r24, 0x00	; 0
     1e0:	80 74       	andi	r24, 0x40	; 64
     1e2:	90 e0       	ldi	r25, 0x00	; 0
		
		if(stopPin == 0)
     1e4:	22 23       	and	r18, r18
     1e6:	0c f4       	brge	.+2      	; 0x1ea <receiveMessage+0x36>
     1e8:	48 c0       	rjmp	.+144    	; 0x27a <receiveMessage+0xc6>
		{
			currentState = 0;
     1ea:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <currentState+0x1>
     1ee:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <currentState>
			
			printf("Message: ");
     1f2:	84 e3       	ldi	r24, 0x34	; 52
     1f4:	92 e0       	ldi	r25, 0x02	; 2
     1f6:	9f 93       	push	r25
     1f8:	8f 93       	push	r24
     1fa:	0e 94 19 1a 	call	0x3432	; 0x3432 <printf>
			for(int i = 0; i <= index - 2; i++)
     1fe:	0f 90       	pop	r0
     200:	0f 90       	pop	r0
     202:	c0 e0       	ldi	r28, 0x00	; 0
     204:	d0 e0       	ldi	r29, 0x00	; 0
     206:	14 c0       	rjmp	.+40     	; 0x230 <receiveMessage+0x7c>
			{
				printf("%d", buffer[i]);
     208:	fe 01       	movw	r30, r28
     20a:	ee 0f       	add	r30, r30
     20c:	ff 1f       	adc	r31, r31
     20e:	e1 5c       	subi	r30, 0xC1	; 193
     210:	f2 4f       	sbci	r31, 0xF2	; 242
     212:	81 81       	ldd	r24, Z+1	; 0x01
     214:	8f 93       	push	r24
     216:	80 81       	ld	r24, Z
     218:	8f 93       	push	r24
     21a:	8e e3       	ldi	r24, 0x3E	; 62
     21c:	92 e0       	ldi	r25, 0x02	; 2
     21e:	9f 93       	push	r25
     220:	8f 93       	push	r24
     222:	0e 94 19 1a 	call	0x3432	; 0x3432 <printf>
		if(stopPin == 0)
		{
			currentState = 0;
			
			printf("Message: ");
			for(int i = 0; i <= index - 2; i++)
     226:	21 96       	adiw	r28, 0x01	; 1
     228:	0f 90       	pop	r0
     22a:	0f 90       	pop	r0
     22c:	0f 90       	pop	r0
     22e:	0f 90       	pop	r0
     230:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <__data_end>
     234:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <__data_end+0x1>
     238:	02 97       	sbiw	r24, 0x02	; 2
     23a:	8c 17       	cp	r24, r28
     23c:	9d 07       	cpc	r25, r29
     23e:	24 f7       	brge	.-56     	; 0x208 <receiveMessage+0x54>
			{
				printf("%d", buffer[i]);
			}
			printf("\n");
     240:	8a e0       	ldi	r24, 0x0A	; 10
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	0e 94 2c 1a 	call	0x3458	; 0x3458 <putchar>
			
			for(int i = 0; i <= index; i++)
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	0a c0       	rjmp	.+20     	; 0x262 <receiveMessage+0xae>
			{
				buffer[i] = -1;
     24e:	fc 01       	movw	r30, r24
     250:	ee 0f       	add	r30, r30
     252:	ff 1f       	adc	r31, r31
     254:	e1 5c       	subi	r30, 0xC1	; 193
     256:	f2 4f       	sbci	r31, 0xF2	; 242
     258:	2f ef       	ldi	r18, 0xFF	; 255
     25a:	3f ef       	ldi	r19, 0xFF	; 255
     25c:	31 83       	std	Z+1, r19	; 0x01
     25e:	20 83       	st	Z, r18
			{
				printf("%d", buffer[i]);
			}
			printf("\n");
			
			for(int i = 0; i <= index; i++)
     260:	01 96       	adiw	r24, 0x01	; 1
     262:	20 91 7a 02 	lds	r18, 0x027A	; 0x80027a <__data_end>
     266:	30 91 7b 02 	lds	r19, 0x027B	; 0x80027b <__data_end+0x1>
     26a:	28 17       	cp	r18, r24
     26c:	39 07       	cpc	r19, r25
     26e:	7c f7       	brge	.-34     	; 0x24e <receiveMessage+0x9a>
			{
				buffer[i] = -1;
			}
			
			
			index = 0;
     270:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <__data_end+0x1>
     274:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <__data_end>
			continue;
     278:	9d cf       	rjmp	.-198    	; 0x1b4 <receiveMessage>
		}
		
		if(dataPin == 0)
     27a:	89 2b       	or	r24, r25
     27c:	69 f4       	brne	.+26     	; 0x298 <receiveMessage+0xe4>
		{
			buffer[index] = 1;
     27e:	e0 91 7a 02 	lds	r30, 0x027A	; 0x80027a <__data_end>
     282:	f0 91 7b 02 	lds	r31, 0x027B	; 0x80027b <__data_end+0x1>
     286:	ee 0f       	add	r30, r30
     288:	ff 1f       	adc	r31, r31
     28a:	e1 5c       	subi	r30, 0xC1	; 193
     28c:	f2 4f       	sbci	r31, 0xF2	; 242
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	91 83       	std	Z+1, r25	; 0x01
     294:	80 83       	st	Z, r24
     296:	0a c0       	rjmp	.+20     	; 0x2ac <receiveMessage+0xf8>
		}
		else
		{
			buffer[index] = 0;
     298:	e0 91 7a 02 	lds	r30, 0x027A	; 0x80027a <__data_end>
     29c:	f0 91 7b 02 	lds	r31, 0x027B	; 0x80027b <__data_end+0x1>
     2a0:	ee 0f       	add	r30, r30
     2a2:	ff 1f       	adc	r31, r31
     2a4:	e1 5c       	subi	r30, 0xC1	; 193
     2a6:	f2 4f       	sbci	r31, 0xF2	; 242
     2a8:	11 82       	std	Z+1, r1	; 0x01
     2aa:	10 82       	st	Z, r1
		}
		
		index++;
     2ac:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <__data_end>
     2b0:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <__data_end+0x1>
     2b4:	01 96       	adiw	r24, 0x01	; 1
     2b6:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <__data_end+0x1>
     2ba:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <__data_end>
		
		vTaskDelay(6);
     2be:	66 e0       	ldi	r22, 0x06	; 6
     2c0:	70 e0       	ldi	r23, 0x00	; 0
     2c2:	80 e0       	ldi	r24, 0x00	; 0
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	0e 94 ba 0c 	call	0x1974	; 0x1974 <vTaskDelay>
     2ca:	74 cf       	rjmp	.-280    	; 0x1b4 <receiveMessage>

000002cc <create_tasks_and_semaphores>:

void fakeInterruptFunction(void *pvParameters);
void receiveMessage(void *pvParameters);

void create_tasks_and_semaphores(void)
{
     2cc:	ef 92       	push	r14
     2ce:	ff 92       	push	r15
     2d0:	0f 93       	push	r16
	xInterruptSemaphore = xSemaphoreCreateCounting(1, 0);
     2d2:	60 e0       	ldi	r22, 0x00	; 0
     2d4:	81 e0       	ldi	r24, 0x01	; 1
     2d6:	7d d4       	rcall	.+2298   	; 0xbd2 <xQueueCreateCountingSemaphore>
     2d8:	90 93 08 0e 	sts	0x0E08, r25	; 0x800e08 <xInterruptSemaphore+0x1>
     2dc:	80 93 07 0e 	sts	0x0E07, r24	; 0x800e07 <xInterruptSemaphore>
	xTaskCreate(fakeInterruptFunction, "Fake Interrupt", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 99, NULL);
     2e0:	e1 2c       	mov	r14, r1
     2e2:	f1 2c       	mov	r15, r1
     2e4:	03 e6       	ldi	r16, 0x63	; 99
     2e6:	20 e0       	ldi	r18, 0x00	; 0
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	40 ec       	ldi	r20, 0xC0	; 192
     2ec:	50 e0       	ldi	r21, 0x00	; 0
     2ee:	61 e4       	ldi	r22, 0x41	; 65
     2f0:	72 e0       	ldi	r23, 0x02	; 2
     2f2:	86 eb       	ldi	r24, 0xB6	; 182
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	0e 94 16 0a 	call	0x142c	; 0x142c <xTaskCreate>
	xTaskCreate(receiveMessage, "Sample Task", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
     2fa:	01 e0       	ldi	r16, 0x01	; 1
     2fc:	20 e0       	ldi	r18, 0x00	; 0
     2fe:	30 e0       	ldi	r19, 0x00	; 0
     300:	40 ec       	ldi	r20, 0xC0	; 192
     302:	50 e0       	ldi	r21, 0x00	; 0
     304:	60 e5       	ldi	r22, 0x50	; 80
     306:	72 e0       	ldi	r23, 0x02	; 2
     308:	8a ed       	ldi	r24, 0xDA	; 218
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	0e 94 16 0a 	call	0x142c	; 0x142c <xTaskCreate>
}
     310:	0f 91       	pop	r16
     312:	ff 90       	pop	r15
     314:	ef 90       	pop	r14
     316:	08 95       	ret

00000318 <initialiseSystem>:
	}
}

void initialiseSystem()
{
	DDRA =  0b00001111;
     318:	8f e0       	ldi	r24, 0x0F	; 15
     31a:	81 b9       	out	0x01, r24	; 1
	PORTA = 0b11110000;
     31c:	80 ef       	ldi	r24, 0xF0	; 240
     31e:	82 b9       	out	0x02, r24	; 2
	stdio_initialise(ser_USART0);
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	0e 94 6e 13 	call	0x26dc	; 0x26dc <stdio_initialise>
	create_tasks_and_semaphores();
     326:	d2 cf       	rjmp	.-92     	; 0x2cc <create_tasks_and_semaphores>
     328:	08 95       	ret

0000032a <main>:
}

 int main(void)
{	
	initialiseSystem();
     32a:	f6 df       	rcall	.-20     	; 0x318 <initialiseSystem>
	printf("Program Started.\n");
     32c:	8c e5       	ldi	r24, 0x5C	; 92
     32e:	92 e0       	ldi	r25, 0x02	; 2
     330:	0e 94 31 1a 	call	0x3462	; 0x3462 <puts>
	vTaskStartScheduler();
     334:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <vTaskStartScheduler>
     338:	ff cf       	rjmp	.-2      	; 0x338 <main+0xe>

0000033a <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     33a:	e8 e0       	ldi	r30, 0x08	; 8
     33c:	f1 e0       	ldi	r31, 0x01	; 1
     33e:	90 81       	ld	r25, Z
     340:	90 7f       	andi	r25, 0xF0	; 240
     342:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     344:	90 81       	ld	r25, Z
     346:	8f 70       	andi	r24, 0x0F	; 15
     348:	98 2b       	or	r25, r24
     34a:	90 83       	st	Z, r25
     34c:	08 95       	ret

0000034e <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     34e:	e8 e0       	ldi	r30, 0x08	; 8
     350:	f1 e0       	ldi	r31, 0x01	; 1
     352:	80 81       	ld	r24, Z
     354:	80 7f       	andi	r24, 0xF0	; 240
     356:	80 83       	st	Z, r24
     358:	08 95       	ret

0000035a <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     35a:	ea e8       	ldi	r30, 0x8A	; 138
     35c:	f2 e0       	ldi	r31, 0x02	; 2
     35e:	ae e8       	ldi	r26, 0x8E	; 142
     360:	b2 e0       	ldi	r27, 0x02	; 2
     362:	b1 83       	std	Z+1, r27	; 0x01
     364:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     366:	13 82       	std	Z+3, r1	; 0x03
     368:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     36a:	ee e4       	ldi	r30, 0x4E	; 78
     36c:	fc e0       	ldi	r31, 0x0C	; 12
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     36e:	f0 93 89 02 	sts	0x0289, r31	; 0x800289 <pxEnd+0x1>
     372:	e0 93 88 02 	sts	0x0288, r30	; 0x800288 <pxEnd>
    pxEnd->xBlockSize = 0;
     376:	13 82       	std	Z+3, r1	; 0x03
     378:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     37a:	11 82       	std	Z+1, r1	; 0x01
     37c:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     37e:	80 ec       	ldi	r24, 0xC0	; 192
     380:	99 e0       	ldi	r25, 0x09	; 9
     382:	13 96       	adiw	r26, 0x03	; 3
     384:	9c 93       	st	X, r25
     386:	8e 93       	st	-X, r24
     388:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     38a:	ed 93       	st	X+, r30
     38c:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     38e:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <xMinimumEverFreeBytesRemaining+0x1>
     392:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     396:	90 93 87 02 	sts	0x0287, r25	; 0x800287 <xFreeBytesRemaining+0x1>
     39a:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     39e:	80 e0       	ldi	r24, 0x00	; 0
     3a0:	90 e8       	ldi	r25, 0x80	; 128
     3a2:	90 93 7f 02 	sts	0x027F, r25	; 0x80027f <xBlockAllocatedBit+0x1>
     3a6:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <xBlockAllocatedBit>
     3aa:	08 95       	ret

000003ac <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     3ac:	cf 93       	push	r28
     3ae:	df 93       	push	r29
     3b0:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     3b2:	aa e8       	ldi	r26, 0x8A	; 138
     3b4:	b2 e0       	ldi	r27, 0x02	; 2
     3b6:	01 c0       	rjmp	.+2      	; 0x3ba <prvInsertBlockIntoFreeList+0xe>
     3b8:	df 01       	movw	r26, r30
     3ba:	ed 91       	ld	r30, X+
     3bc:	fc 91       	ld	r31, X
     3be:	11 97       	sbiw	r26, 0x01	; 1
     3c0:	ec 17       	cp	r30, r28
     3c2:	fd 07       	cpc	r31, r29
     3c4:	c8 f3       	brcs	.-14     	; 0x3b8 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     3c6:	12 96       	adiw	r26, 0x02	; 2
     3c8:	8d 91       	ld	r24, X+
     3ca:	9c 91       	ld	r25, X
     3cc:	13 97       	sbiw	r26, 0x03	; 3
     3ce:	9d 01       	movw	r18, r26
     3d0:	28 0f       	add	r18, r24
     3d2:	39 1f       	adc	r19, r25
     3d4:	c2 17       	cp	r28, r18
     3d6:	d3 07       	cpc	r29, r19
     3d8:	49 f4       	brne	.+18     	; 0x3ec <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     3da:	2a 81       	ldd	r18, Y+2	; 0x02
     3dc:	3b 81       	ldd	r19, Y+3	; 0x03
     3de:	82 0f       	add	r24, r18
     3e0:	93 1f       	adc	r25, r19
     3e2:	13 96       	adiw	r26, 0x03	; 3
     3e4:	9c 93       	st	X, r25
     3e6:	8e 93       	st	-X, r24
     3e8:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     3ea:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     3ec:	8a 81       	ldd	r24, Y+2	; 0x02
     3ee:	9b 81       	ldd	r25, Y+3	; 0x03
     3f0:	9e 01       	movw	r18, r28
     3f2:	28 0f       	add	r18, r24
     3f4:	39 1f       	adc	r19, r25
     3f6:	e2 17       	cp	r30, r18
     3f8:	f3 07       	cpc	r31, r19
     3fa:	c1 f4       	brne	.+48     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     3fc:	20 91 88 02 	lds	r18, 0x0288	; 0x800288 <pxEnd>
     400:	30 91 89 02 	lds	r19, 0x0289	; 0x800289 <pxEnd+0x1>
     404:	e2 17       	cp	r30, r18
     406:	f3 07       	cpc	r31, r19
     408:	71 f0       	breq	.+28     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     40a:	22 81       	ldd	r18, Z+2	; 0x02
     40c:	33 81       	ldd	r19, Z+3	; 0x03
     40e:	82 0f       	add	r24, r18
     410:	93 1f       	adc	r25, r19
     412:	9b 83       	std	Y+3, r25	; 0x03
     414:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     416:	ed 91       	ld	r30, X+
     418:	fc 91       	ld	r31, X
     41a:	11 97       	sbiw	r26, 0x01	; 1
     41c:	80 81       	ld	r24, Z
     41e:	91 81       	ldd	r25, Z+1	; 0x01
     420:	99 83       	std	Y+1, r25	; 0x01
     422:	88 83       	st	Y, r24
     424:	05 c0       	rjmp	.+10     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     426:	39 83       	std	Y+1, r19	; 0x01
     428:	28 83       	st	Y, r18
     42a:	02 c0       	rjmp	.+4      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     42c:	f9 83       	std	Y+1, r31	; 0x01
     42e:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     430:	ca 17       	cp	r28, r26
     432:	db 07       	cpc	r29, r27
     434:	11 f0       	breq	.+4      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     436:	cd 93       	st	X+, r28
     438:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	08 95       	ret

00000440 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     440:	ef 92       	push	r14
     442:	ff 92       	push	r15
     444:	0f 93       	push	r16
     446:	1f 93       	push	r17
     448:	cf 93       	push	r28
     44a:	df 93       	push	r29
     44c:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     44e:	0e 94 9e 0a 	call	0x153c	; 0x153c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     452:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <pxEnd>
     456:	90 91 89 02 	lds	r25, 0x0289	; 0x800289 <pxEnd+0x1>
     45a:	89 2b       	or	r24, r25
     45c:	09 f4       	brne	.+2      	; 0x460 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     45e:	7d df       	rcall	.-262    	; 0x35a <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     460:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <xBlockAllocatedBit>
     464:	90 91 7f 02 	lds	r25, 0x027F	; 0x80027f <xBlockAllocatedBit+0x1>
     468:	80 23       	and	r24, r16
     46a:	91 23       	and	r25, r17
     46c:	89 2b       	or	r24, r25
     46e:	09 f0       	breq	.+2      	; 0x472 <pvPortMalloc+0x32>
     470:	76 c0       	rjmp	.+236    	; 0x55e <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     472:	01 15       	cp	r16, r1
     474:	11 05       	cpc	r17, r1
     476:	49 f0       	breq	.+18     	; 0x48a <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     478:	c8 01       	movw	r24, r16
     47a:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     47c:	08 17       	cp	r16, r24
     47e:	19 07       	cpc	r17, r25
     480:	18 f0       	brcs	.+6      	; 0x488 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     482:	00 e0       	ldi	r16, 0x00	; 0
     484:	10 e0       	ldi	r17, 0x00	; 0
     486:	01 c0       	rjmp	.+2      	; 0x48a <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     488:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     48a:	01 15       	cp	r16, r1
     48c:	11 05       	cpc	r17, r1
     48e:	09 f4       	brne	.+2      	; 0x492 <pvPortMalloc+0x52>
     490:	69 c0       	rjmp	.+210    	; 0x564 <pvPortMalloc+0x124>
     492:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <xFreeBytesRemaining>
     496:	90 91 87 02 	lds	r25, 0x0287	; 0x800287 <xFreeBytesRemaining+0x1>
     49a:	80 17       	cp	r24, r16
     49c:	91 07       	cpc	r25, r17
     49e:	08 f4       	brcc	.+2      	; 0x4a2 <pvPortMalloc+0x62>
     4a0:	64 c0       	rjmp	.+200    	; 0x56a <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     4a2:	c0 91 8a 02 	lds	r28, 0x028A	; 0x80028a <xStart>
     4a6:	d0 91 8b 02 	lds	r29, 0x028B	; 0x80028b <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     4aa:	ea e8       	ldi	r30, 0x8A	; 138
     4ac:	f2 e0       	ldi	r31, 0x02	; 2
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     4b0:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     4b2:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     4b4:	8a 81       	ldd	r24, Y+2	; 0x02
     4b6:	9b 81       	ldd	r25, Y+3	; 0x03
     4b8:	80 17       	cp	r24, r16
     4ba:	91 07       	cpc	r25, r17
     4bc:	20 f4       	brcc	.+8      	; 0x4c6 <pvPortMalloc+0x86>
     4be:	88 81       	ld	r24, Y
     4c0:	99 81       	ldd	r25, Y+1	; 0x01
     4c2:	00 97       	sbiw	r24, 0x00	; 0
     4c4:	a9 f7       	brne	.-22     	; 0x4b0 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     4c6:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <pxEnd>
     4ca:	90 91 89 02 	lds	r25, 0x0289	; 0x800289 <pxEnd+0x1>
     4ce:	c8 17       	cp	r28, r24
     4d0:	d9 07       	cpc	r29, r25
     4d2:	09 f4       	brne	.+2      	; 0x4d6 <pvPortMalloc+0x96>
     4d4:	4d c0       	rjmp	.+154    	; 0x570 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     4d6:	e0 80       	ld	r14, Z
     4d8:	f1 80       	ldd	r15, Z+1	; 0x01
     4da:	84 e0       	ldi	r24, 0x04	; 4
     4dc:	e8 0e       	add	r14, r24
     4de:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     4e0:	88 81       	ld	r24, Y
     4e2:	99 81       	ldd	r25, Y+1	; 0x01
     4e4:	91 83       	std	Z+1, r25	; 0x01
     4e6:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     4e8:	2a 81       	ldd	r18, Y+2	; 0x02
     4ea:	3b 81       	ldd	r19, Y+3	; 0x03
     4ec:	20 1b       	sub	r18, r16
     4ee:	31 0b       	sbc	r19, r17
     4f0:	29 30       	cpi	r18, 0x09	; 9
     4f2:	31 05       	cpc	r19, r1
     4f4:	48 f0       	brcs	.+18     	; 0x508 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     4f6:	ce 01       	movw	r24, r28
     4f8:	80 0f       	add	r24, r16
     4fa:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     4fc:	fc 01       	movw	r30, r24
     4fe:	33 83       	std	Z+3, r19	; 0x03
     500:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     502:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     504:	0a 83       	std	Y+2, r16	; 0x02
     506:	52 df       	rcall	.-348    	; 0x3ac <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     508:	2a 81       	ldd	r18, Y+2	; 0x02
     50a:	3b 81       	ldd	r19, Y+3	; 0x03
     50c:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <xFreeBytesRemaining>
     510:	90 91 87 02 	lds	r25, 0x0287	; 0x800287 <xFreeBytesRemaining+0x1>
     514:	82 1b       	sub	r24, r18
     516:	93 0b       	sbc	r25, r19
     518:	90 93 87 02 	sts	0x0287, r25	; 0x800287 <xFreeBytesRemaining+0x1>
     51c:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     520:	40 91 84 02 	lds	r20, 0x0284	; 0x800284 <xMinimumEverFreeBytesRemaining>
     524:	50 91 85 02 	lds	r21, 0x0285	; 0x800285 <xMinimumEverFreeBytesRemaining+0x1>
     528:	84 17       	cp	r24, r20
     52a:	95 07       	cpc	r25, r21
     52c:	20 f4       	brcc	.+8      	; 0x536 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     52e:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <xMinimumEverFreeBytesRemaining+0x1>
     532:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     536:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <xBlockAllocatedBit>
     53a:	90 91 7f 02 	lds	r25, 0x027F	; 0x80027f <xBlockAllocatedBit+0x1>
     53e:	28 2b       	or	r18, r24
     540:	39 2b       	or	r19, r25
     542:	3b 83       	std	Y+3, r19	; 0x03
     544:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     546:	19 82       	std	Y+1, r1	; 0x01
     548:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     54a:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <xNumberOfSuccessfulAllocations>
     54e:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <xNumberOfSuccessfulAllocations+0x1>
     552:	01 96       	adiw	r24, 0x01	; 1
     554:	90 93 83 02 	sts	0x0283, r25	; 0x800283 <xNumberOfSuccessfulAllocations+0x1>
     558:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <xNumberOfSuccessfulAllocations>
     55c:	0b c0       	rjmp	.+22     	; 0x574 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     55e:	e1 2c       	mov	r14, r1
     560:	f1 2c       	mov	r15, r1
     562:	08 c0       	rjmp	.+16     	; 0x574 <pvPortMalloc+0x134>
     564:	e1 2c       	mov	r14, r1
     566:	f1 2c       	mov	r15, r1
     568:	05 c0       	rjmp	.+10     	; 0x574 <pvPortMalloc+0x134>
     56a:	e1 2c       	mov	r14, r1
     56c:	f1 2c       	mov	r15, r1
     56e:	02 c0       	rjmp	.+4      	; 0x574 <pvPortMalloc+0x134>
     570:	e1 2c       	mov	r14, r1
     572:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     574:	0e 94 de 0b 	call	0x17bc	; 0x17bc <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     578:	e1 14       	cp	r14, r1
     57a:	f1 04       	cpc	r15, r1
     57c:	11 f4       	brne	.+4      	; 0x582 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     57e:	0e 94 38 13 	call	0x2670	; 0x2670 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     582:	c7 01       	movw	r24, r14
     584:	df 91       	pop	r29
     586:	cf 91       	pop	r28
     588:	1f 91       	pop	r17
     58a:	0f 91       	pop	r16
     58c:	ff 90       	pop	r15
     58e:	ef 90       	pop	r14
     590:	08 95       	ret

00000592 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     592:	0f 93       	push	r16
     594:	1f 93       	push	r17
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     59a:	00 97       	sbiw	r24, 0x00	; 0
     59c:	89 f1       	breq	.+98     	; 0x600 <vPortFree+0x6e>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     59e:	ec 01       	movw	r28, r24
     5a0:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     5a2:	4a 81       	ldd	r20, Y+2	; 0x02
     5a4:	5b 81       	ldd	r21, Y+3	; 0x03
     5a6:	20 91 7e 02 	lds	r18, 0x027E	; 0x80027e <xBlockAllocatedBit>
     5aa:	30 91 7f 02 	lds	r19, 0x027F	; 0x80027f <xBlockAllocatedBit+0x1>
     5ae:	ba 01       	movw	r22, r20
     5b0:	62 23       	and	r22, r18
     5b2:	73 23       	and	r23, r19
     5b4:	67 2b       	or	r22, r23
     5b6:	21 f1       	breq	.+72     	; 0x600 <vPortFree+0x6e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     5b8:	68 81       	ld	r22, Y
     5ba:	79 81       	ldd	r23, Y+1	; 0x01
     5bc:	67 2b       	or	r22, r23
     5be:	01 f5       	brne	.+64     	; 0x600 <vPortFree+0x6e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     5c0:	20 95       	com	r18
     5c2:	30 95       	com	r19
     5c4:	24 23       	and	r18, r20
     5c6:	35 23       	and	r19, r21
     5c8:	3b 83       	std	Y+3, r19	; 0x03
     5ca:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     5cc:	b7 d7       	rcall	.+3950   	; 0x153c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     5ce:	8a 81       	ldd	r24, Y+2	; 0x02
     5d0:	9b 81       	ldd	r25, Y+3	; 0x03
     5d2:	20 91 86 02 	lds	r18, 0x0286	; 0x800286 <xFreeBytesRemaining>
     5d6:	30 91 87 02 	lds	r19, 0x0287	; 0x800287 <xFreeBytesRemaining+0x1>
     5da:	82 0f       	add	r24, r18
     5dc:	93 1f       	adc	r25, r19
     5de:	90 93 87 02 	sts	0x0287, r25	; 0x800287 <xFreeBytesRemaining+0x1>
     5e2:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     5e6:	ce 01       	movw	r24, r28
     5e8:	e1 de       	rcall	.-574    	; 0x3ac <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     5ea:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <xNumberOfSuccessfulFrees>
     5ee:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <xNumberOfSuccessfulFrees+0x1>
     5f2:	01 96       	adiw	r24, 0x01	; 1
     5f4:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <xNumberOfSuccessfulFrees+0x1>
     5f8:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     5fc:	0e 94 de 0b 	call	0x17bc	; 0x17bc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     600:	df 91       	pop	r29
     602:	cf 91       	pop	r28
     604:	1f 91       	pop	r17
     606:	0f 91       	pop	r16
     608:	08 95       	ret

0000060a <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     60a:	fc 01       	movw	r30, r24
     60c:	03 96       	adiw	r24, 0x03	; 3
     60e:	92 83       	std	Z+2, r25	; 0x02
     610:	81 83       	std	Z+1, r24	; 0x01
     612:	4f ef       	ldi	r20, 0xFF	; 255
     614:	5f ef       	ldi	r21, 0xFF	; 255
     616:	ba 01       	movw	r22, r20
     618:	43 83       	std	Z+3, r20	; 0x03
     61a:	54 83       	std	Z+4, r21	; 0x04
     61c:	65 83       	std	Z+5, r22	; 0x05
     61e:	76 83       	std	Z+6, r23	; 0x06
     620:	90 87       	std	Z+8, r25	; 0x08
     622:	87 83       	std	Z+7, r24	; 0x07
     624:	92 87       	std	Z+10, r25	; 0x0a
     626:	81 87       	std	Z+9, r24	; 0x09
     628:	10 82       	st	Z, r1
     62a:	08 95       	ret

0000062c <vListInitialiseItem>:
     62c:	fc 01       	movw	r30, r24
     62e:	13 86       	std	Z+11, r1	; 0x0b
     630:	12 86       	std	Z+10, r1	; 0x0a
     632:	08 95       	ret

00000634 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     634:	0f 93       	push	r16
     636:	1f 93       	push	r17
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
     63c:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     63e:	08 81       	ld	r16, Y
     640:	19 81       	ldd	r17, Y+1	; 0x01
     642:	2a 81       	ldd	r18, Y+2	; 0x02
     644:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     646:	0f 3f       	cpi	r16, 0xFF	; 255
     648:	4f ef       	ldi	r20, 0xFF	; 255
     64a:	14 07       	cpc	r17, r20
     64c:	24 07       	cpc	r18, r20
     64e:	34 07       	cpc	r19, r20
     650:	21 f4       	brne	.+8      	; 0x65a <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     652:	fc 01       	movw	r30, r24
     654:	a1 85       	ldd	r26, Z+9	; 0x09
     656:	b2 85       	ldd	r27, Z+10	; 0x0a
     658:	11 c0       	rjmp	.+34     	; 0x67c <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     65a:	dc 01       	movw	r26, r24
     65c:	13 96       	adiw	r26, 0x03	; 3
     65e:	01 c0       	rjmp	.+2      	; 0x662 <vListInsert+0x2e>
     660:	df 01       	movw	r26, r30
     662:	14 96       	adiw	r26, 0x04	; 4
     664:	ed 91       	ld	r30, X+
     666:	fc 91       	ld	r31, X
     668:	15 97       	sbiw	r26, 0x05	; 5
     66a:	40 81       	ld	r20, Z
     66c:	51 81       	ldd	r21, Z+1	; 0x01
     66e:	62 81       	ldd	r22, Z+2	; 0x02
     670:	73 81       	ldd	r23, Z+3	; 0x03
     672:	04 17       	cp	r16, r20
     674:	15 07       	cpc	r17, r21
     676:	26 07       	cpc	r18, r22
     678:	37 07       	cpc	r19, r23
     67a:	90 f7       	brcc	.-28     	; 0x660 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     67c:	14 96       	adiw	r26, 0x04	; 4
     67e:	ed 91       	ld	r30, X+
     680:	fc 91       	ld	r31, X
     682:	15 97       	sbiw	r26, 0x05	; 5
     684:	fd 83       	std	Y+5, r31	; 0x05
     686:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     688:	d7 83       	std	Z+7, r29	; 0x07
     68a:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     68c:	bf 83       	std	Y+7, r27	; 0x07
     68e:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     690:	15 96       	adiw	r26, 0x05	; 5
     692:	dc 93       	st	X, r29
     694:	ce 93       	st	-X, r28
     696:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     698:	9b 87       	std	Y+11, r25	; 0x0b
     69a:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     69c:	fc 01       	movw	r30, r24
     69e:	20 81       	ld	r18, Z
     6a0:	2f 5f       	subi	r18, 0xFF	; 255
     6a2:	20 83       	st	Z, r18
}
     6a4:	df 91       	pop	r29
     6a6:	cf 91       	pop	r28
     6a8:	1f 91       	pop	r17
     6aa:	0f 91       	pop	r16
     6ac:	08 95       	ret

000006ae <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
     6b2:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     6b4:	a2 85       	ldd	r26, Z+10	; 0x0a
     6b6:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     6b8:	c4 81       	ldd	r28, Z+4	; 0x04
     6ba:	d5 81       	ldd	r29, Z+5	; 0x05
     6bc:	86 81       	ldd	r24, Z+6	; 0x06
     6be:	97 81       	ldd	r25, Z+7	; 0x07
     6c0:	9f 83       	std	Y+7, r25	; 0x07
     6c2:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     6c4:	c6 81       	ldd	r28, Z+6	; 0x06
     6c6:	d7 81       	ldd	r29, Z+7	; 0x07
     6c8:	84 81       	ldd	r24, Z+4	; 0x04
     6ca:	95 81       	ldd	r25, Z+5	; 0x05
     6cc:	9d 83       	std	Y+5, r25	; 0x05
     6ce:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     6d0:	11 96       	adiw	r26, 0x01	; 1
     6d2:	8d 91       	ld	r24, X+
     6d4:	9c 91       	ld	r25, X
     6d6:	12 97       	sbiw	r26, 0x02	; 2
     6d8:	e8 17       	cp	r30, r24
     6da:	f9 07       	cpc	r31, r25
     6dc:	31 f4       	brne	.+12     	; 0x6ea <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     6de:	86 81       	ldd	r24, Z+6	; 0x06
     6e0:	97 81       	ldd	r25, Z+7	; 0x07
     6e2:	12 96       	adiw	r26, 0x02	; 2
     6e4:	9c 93       	st	X, r25
     6e6:	8e 93       	st	-X, r24
     6e8:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     6ea:	13 86       	std	Z+11, r1	; 0x0b
     6ec:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     6ee:	8c 91       	ld	r24, X
     6f0:	81 50       	subi	r24, 0x01	; 1
     6f2:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     6f4:	8c 91       	ld	r24, X
}
     6f6:	df 91       	pop	r29
     6f8:	cf 91       	pop	r28
     6fa:	08 95       	ret

000006fc <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     6fc:	a8 95       	wdr
     6fe:	90 ec       	ldi	r25, 0xC0	; 192
     700:	88 e1       	ldi	r24, 0x18	; 24
     702:	0f b6       	in	r0, 0x3f	; 63
     704:	f8 94       	cli
     706:	a8 95       	wdr
     708:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     70c:	0f be       	out	0x3f, r0	; 63
     70e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     712:	08 95       	ret

00000714 <pxPortInitialiseStack>:
     714:	fc 01       	movw	r30, r24
     716:	60 83       	st	Z, r22
     718:	31 97       	sbiw	r30, 0x01	; 1
     71a:	70 83       	st	Z, r23
     71c:	31 97       	sbiw	r30, 0x01	; 1
     71e:	10 82       	st	Z, r1
     720:	31 97       	sbiw	r30, 0x01	; 1
     722:	10 82       	st	Z, r1
     724:	31 97       	sbiw	r30, 0x01	; 1
     726:	20 e8       	ldi	r18, 0x80	; 128
     728:	20 83       	st	Z, r18
     72a:	31 97       	sbiw	r30, 0x01	; 1
     72c:	10 82       	st	Z, r1
     72e:	31 97       	sbiw	r30, 0x01	; 1
     730:	10 82       	st	Z, r1
     732:	31 97       	sbiw	r30, 0x01	; 1
     734:	10 82       	st	Z, r1
     736:	77 97       	sbiw	r30, 0x17	; 23
     738:	40 83       	st	Z, r20
     73a:	31 97       	sbiw	r30, 0x01	; 1
     73c:	50 83       	st	Z, r21
     73e:	86 97       	sbiw	r24, 0x26	; 38
     740:	08 95       	ret

00000742 <xPortStartScheduler>:
     742:	dc df       	rcall	.-72     	; 0x6fc <prvSetupTimerInterrupt>
     744:	a0 91 11 0d 	lds	r26, 0x0D11	; 0x800d11 <pxCurrentTCB>
     748:	b0 91 12 0d 	lds	r27, 0x0D12	; 0x800d12 <pxCurrentTCB+0x1>
     74c:	cd 91       	ld	r28, X+
     74e:	cd bf       	out	0x3d, r28	; 61
     750:	dd 91       	ld	r29, X+
     752:	de bf       	out	0x3e, r29	; 62
     754:	ff 91       	pop	r31
     756:	ef 91       	pop	r30
     758:	df 91       	pop	r29
     75a:	cf 91       	pop	r28
     75c:	bf 91       	pop	r27
     75e:	af 91       	pop	r26
     760:	9f 91       	pop	r25
     762:	8f 91       	pop	r24
     764:	7f 91       	pop	r23
     766:	6f 91       	pop	r22
     768:	5f 91       	pop	r21
     76a:	4f 91       	pop	r20
     76c:	3f 91       	pop	r19
     76e:	2f 91       	pop	r18
     770:	1f 91       	pop	r17
     772:	0f 91       	pop	r16
     774:	ff 90       	pop	r15
     776:	ef 90       	pop	r14
     778:	df 90       	pop	r13
     77a:	cf 90       	pop	r12
     77c:	bf 90       	pop	r11
     77e:	af 90       	pop	r10
     780:	9f 90       	pop	r9
     782:	8f 90       	pop	r8
     784:	7f 90       	pop	r7
     786:	6f 90       	pop	r6
     788:	5f 90       	pop	r5
     78a:	4f 90       	pop	r4
     78c:	3f 90       	pop	r3
     78e:	2f 90       	pop	r2
     790:	1f 90       	pop	r1
     792:	0f 90       	pop	r0
     794:	0c be       	out	0x3c, r0	; 60
     796:	0f 90       	pop	r0
     798:	0b be       	out	0x3b, r0	; 59
     79a:	0f 90       	pop	r0
     79c:	0f be       	out	0x3f, r0	; 63
     79e:	0f 90       	pop	r0
     7a0:	08 95       	ret
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	08 95       	ret

000007a6 <vPortYield>:
     7a6:	0f 92       	push	r0
     7a8:	0f b6       	in	r0, 0x3f	; 63
     7aa:	f8 94       	cli
     7ac:	0f 92       	push	r0
     7ae:	0b b6       	in	r0, 0x3b	; 59
     7b0:	0f 92       	push	r0
     7b2:	0c b6       	in	r0, 0x3c	; 60
     7b4:	0f 92       	push	r0
     7b6:	1f 92       	push	r1
     7b8:	11 24       	eor	r1, r1
     7ba:	2f 92       	push	r2
     7bc:	3f 92       	push	r3
     7be:	4f 92       	push	r4
     7c0:	5f 92       	push	r5
     7c2:	6f 92       	push	r6
     7c4:	7f 92       	push	r7
     7c6:	8f 92       	push	r8
     7c8:	9f 92       	push	r9
     7ca:	af 92       	push	r10
     7cc:	bf 92       	push	r11
     7ce:	cf 92       	push	r12
     7d0:	df 92       	push	r13
     7d2:	ef 92       	push	r14
     7d4:	ff 92       	push	r15
     7d6:	0f 93       	push	r16
     7d8:	1f 93       	push	r17
     7da:	2f 93       	push	r18
     7dc:	3f 93       	push	r19
     7de:	4f 93       	push	r20
     7e0:	5f 93       	push	r21
     7e2:	6f 93       	push	r22
     7e4:	7f 93       	push	r23
     7e6:	8f 93       	push	r24
     7e8:	9f 93       	push	r25
     7ea:	af 93       	push	r26
     7ec:	bf 93       	push	r27
     7ee:	cf 93       	push	r28
     7f0:	df 93       	push	r29
     7f2:	ef 93       	push	r30
     7f4:	ff 93       	push	r31
     7f6:	a0 91 11 0d 	lds	r26, 0x0D11	; 0x800d11 <pxCurrentTCB>
     7fa:	b0 91 12 0d 	lds	r27, 0x0D12	; 0x800d12 <pxCurrentTCB+0x1>
     7fe:	0d b6       	in	r0, 0x3d	; 61
     800:	0d 92       	st	X+, r0
     802:	0e b6       	in	r0, 0x3e	; 62
     804:	0d 92       	st	X+, r0
     806:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <vTaskSwitchContext>
     80a:	a0 91 11 0d 	lds	r26, 0x0D11	; 0x800d11 <pxCurrentTCB>
     80e:	b0 91 12 0d 	lds	r27, 0x0D12	; 0x800d12 <pxCurrentTCB+0x1>
     812:	cd 91       	ld	r28, X+
     814:	cd bf       	out	0x3d, r28	; 61
     816:	dd 91       	ld	r29, X+
     818:	de bf       	out	0x3e, r29	; 62
     81a:	ff 91       	pop	r31
     81c:	ef 91       	pop	r30
     81e:	df 91       	pop	r29
     820:	cf 91       	pop	r28
     822:	bf 91       	pop	r27
     824:	af 91       	pop	r26
     826:	9f 91       	pop	r25
     828:	8f 91       	pop	r24
     82a:	7f 91       	pop	r23
     82c:	6f 91       	pop	r22
     82e:	5f 91       	pop	r21
     830:	4f 91       	pop	r20
     832:	3f 91       	pop	r19
     834:	2f 91       	pop	r18
     836:	1f 91       	pop	r17
     838:	0f 91       	pop	r16
     83a:	ff 90       	pop	r15
     83c:	ef 90       	pop	r14
     83e:	df 90       	pop	r13
     840:	cf 90       	pop	r12
     842:	bf 90       	pop	r11
     844:	af 90       	pop	r10
     846:	9f 90       	pop	r9
     848:	8f 90       	pop	r8
     84a:	7f 90       	pop	r7
     84c:	6f 90       	pop	r6
     84e:	5f 90       	pop	r5
     850:	4f 90       	pop	r4
     852:	3f 90       	pop	r3
     854:	2f 90       	pop	r2
     856:	1f 90       	pop	r1
     858:	0f 90       	pop	r0
     85a:	0c be       	out	0x3c, r0	; 60
     85c:	0f 90       	pop	r0
     85e:	0b be       	out	0x3b, r0	; 59
     860:	0f 90       	pop	r0
     862:	0f be       	out	0x3f, r0	; 63
     864:	0f 90       	pop	r0
     866:	08 95       	ret

00000868 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     868:	0f 92       	push	r0
     86a:	0f b6       	in	r0, 0x3f	; 63
     86c:	f8 94       	cli
     86e:	0f 92       	push	r0
     870:	0b b6       	in	r0, 0x3b	; 59
     872:	0f 92       	push	r0
     874:	0c b6       	in	r0, 0x3c	; 60
     876:	0f 92       	push	r0
     878:	1f 92       	push	r1
     87a:	11 24       	eor	r1, r1
     87c:	2f 92       	push	r2
     87e:	3f 92       	push	r3
     880:	4f 92       	push	r4
     882:	5f 92       	push	r5
     884:	6f 92       	push	r6
     886:	7f 92       	push	r7
     888:	8f 92       	push	r8
     88a:	9f 92       	push	r9
     88c:	af 92       	push	r10
     88e:	bf 92       	push	r11
     890:	cf 92       	push	r12
     892:	df 92       	push	r13
     894:	ef 92       	push	r14
     896:	ff 92       	push	r15
     898:	0f 93       	push	r16
     89a:	1f 93       	push	r17
     89c:	2f 93       	push	r18
     89e:	3f 93       	push	r19
     8a0:	4f 93       	push	r20
     8a2:	5f 93       	push	r21
     8a4:	6f 93       	push	r22
     8a6:	7f 93       	push	r23
     8a8:	8f 93       	push	r24
     8aa:	9f 93       	push	r25
     8ac:	af 93       	push	r26
     8ae:	bf 93       	push	r27
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
     8b4:	ef 93       	push	r30
     8b6:	ff 93       	push	r31
     8b8:	a0 91 11 0d 	lds	r26, 0x0D11	; 0x800d11 <pxCurrentTCB>
     8bc:	b0 91 12 0d 	lds	r27, 0x0D12	; 0x800d12 <pxCurrentTCB+0x1>
     8c0:	0d b6       	in	r0, 0x3d	; 61
     8c2:	0d 92       	st	X+, r0
     8c4:	0e b6       	in	r0, 0x3e	; 62
     8c6:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     8c8:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     8ca:	4c d6       	rcall	.+3224   	; 0x1564 <xTaskIncrementTick>
     8cc:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     8ce:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     8d2:	a0 91 11 0d 	lds	r26, 0x0D11	; 0x800d11 <pxCurrentTCB>
     8d6:	b0 91 12 0d 	lds	r27, 0x0D12	; 0x800d12 <pxCurrentTCB+0x1>
     8da:	cd 91       	ld	r28, X+
     8dc:	cd bf       	out	0x3d, r28	; 61
     8de:	dd 91       	ld	r29, X+
     8e0:	de bf       	out	0x3e, r29	; 62
     8e2:	ff 91       	pop	r31
     8e4:	ef 91       	pop	r30
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	bf 91       	pop	r27
     8ec:	af 91       	pop	r26
     8ee:	9f 91       	pop	r25
     8f0:	8f 91       	pop	r24
     8f2:	7f 91       	pop	r23
     8f4:	6f 91       	pop	r22
     8f6:	5f 91       	pop	r21
     8f8:	4f 91       	pop	r20
     8fa:	3f 91       	pop	r19
     8fc:	2f 91       	pop	r18
     8fe:	1f 91       	pop	r17
     900:	0f 91       	pop	r16
     902:	ff 90       	pop	r15
     904:	ef 90       	pop	r14
     906:	df 90       	pop	r13
     908:	cf 90       	pop	r12
     90a:	bf 90       	pop	r11
     90c:	af 90       	pop	r10
     90e:	9f 90       	pop	r9
     910:	8f 90       	pop	r8
     912:	7f 90       	pop	r7
     914:	6f 90       	pop	r6
     916:	5f 90       	pop	r5
     918:	4f 90       	pop	r4
     91a:	3f 90       	pop	r3
     91c:	2f 90       	pop	r2
     91e:	1f 90       	pop	r1
     920:	0f 90       	pop	r0
     922:	0c be       	out	0x3c, r0	; 60
     924:	0f 90       	pop	r0
     926:	0b be       	out	0x3b, r0	; 59
     928:	0f 90       	pop	r0
     92a:	0f be       	out	0x3f, r0	; 63
     92c:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     92e:	08 95       	ret

00000930 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     930:	9b df       	rcall	.-202    	; 0x868 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     932:	18 95       	reti

00000934 <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     934:	dc 01       	movw	r26, r24
     936:	53 96       	adiw	r26, 0x13	; 19
     938:	2c 91       	ld	r18, X
     93a:	53 97       	sbiw	r26, 0x13	; 19
     93c:	22 23       	and	r18, r18
     93e:	41 f0       	breq	.+16     	; 0x950 <prvGetDisinheritPriorityAfterTimeout+0x1c>
     940:	5a 96       	adiw	r26, 0x1a	; 26
     942:	ed 91       	ld	r30, X+
     944:	fc 91       	ld	r31, X
     946:	5b 97       	sbiw	r26, 0x1b	; 27
     948:	90 81       	ld	r25, Z
     94a:	8a e0       	ldi	r24, 0x0A	; 10
     94c:	89 1b       	sub	r24, r25
     94e:	08 95       	ret
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	08 95       	ret

00000954 <prvIsQueueEmpty>:
     954:	0f b6       	in	r0, 0x3f	; 63
     956:	f8 94       	cli
     958:	0f 92       	push	r0
     95a:	fc 01       	movw	r30, r24
     95c:	86 8d       	ldd	r24, Z+30	; 0x1e
     95e:	81 11       	cpse	r24, r1
     960:	02 c0       	rjmp	.+4      	; 0x966 <prvIsQueueEmpty+0x12>
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	01 c0       	rjmp	.+2      	; 0x968 <prvIsQueueEmpty+0x14>
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	0f 90       	pop	r0
     96a:	0f be       	out	0x3f, r0	; 63
     96c:	08 95       	ret

0000096e <prvIsQueueFull>:
     96e:	0f b6       	in	r0, 0x3f	; 63
     970:	f8 94       	cli
     972:	0f 92       	push	r0
     974:	fc 01       	movw	r30, r24
     976:	26 8d       	ldd	r18, Z+30	; 0x1e
     978:	87 8d       	ldd	r24, Z+31	; 0x1f
     97a:	28 13       	cpse	r18, r24
     97c:	02 c0       	rjmp	.+4      	; 0x982 <prvIsQueueFull+0x14>
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	01 c0       	rjmp	.+2      	; 0x984 <prvIsQueueFull+0x16>
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	0f 90       	pop	r0
     986:	0f be       	out	0x3f, r0	; 63
     988:	08 95       	ret

0000098a <prvCopyDataToQueue>:
     98a:	0f 93       	push	r16
     98c:	1f 93       	push	r17
     98e:	cf 93       	push	r28
     990:	df 93       	push	r29
     992:	ec 01       	movw	r28, r24
     994:	04 2f       	mov	r16, r20
     996:	1e 8d       	ldd	r17, Y+30	; 0x1e
     998:	48 a1       	ldd	r20, Y+32	; 0x20
     99a:	41 11       	cpse	r20, r1
     99c:	0c c0       	rjmp	.+24     	; 0x9b6 <prvCopyDataToQueue+0x2c>
     99e:	88 81       	ld	r24, Y
     9a0:	99 81       	ldd	r25, Y+1	; 0x01
     9a2:	89 2b       	or	r24, r25
     9a4:	09 f0       	breq	.+2      	; 0x9a8 <prvCopyDataToQueue+0x1e>
     9a6:	42 c0       	rjmp	.+132    	; 0xa2c <prvCopyDataToQueue+0xa2>
     9a8:	8c 81       	ldd	r24, Y+4	; 0x04
     9aa:	9d 81       	ldd	r25, Y+5	; 0x05
     9ac:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <xTaskPriorityDisinherit>
     9b0:	1d 82       	std	Y+5, r1	; 0x05
     9b2:	1c 82       	std	Y+4, r1	; 0x04
     9b4:	42 c0       	rjmp	.+132    	; 0xa3a <prvCopyDataToQueue+0xb0>
     9b6:	01 11       	cpse	r16, r1
     9b8:	17 c0       	rjmp	.+46     	; 0x9e8 <prvCopyDataToQueue+0x5e>
     9ba:	50 e0       	ldi	r21, 0x00	; 0
     9bc:	8a 81       	ldd	r24, Y+2	; 0x02
     9be:	9b 81       	ldd	r25, Y+3	; 0x03
     9c0:	0e 94 09 1a 	call	0x3412	; 0x3412 <memcpy>
     9c4:	28 a1       	ldd	r18, Y+32	; 0x20
     9c6:	8a 81       	ldd	r24, Y+2	; 0x02
     9c8:	9b 81       	ldd	r25, Y+3	; 0x03
     9ca:	82 0f       	add	r24, r18
     9cc:	91 1d       	adc	r25, r1
     9ce:	9b 83       	std	Y+3, r25	; 0x03
     9d0:	8a 83       	std	Y+2, r24	; 0x02
     9d2:	2c 81       	ldd	r18, Y+4	; 0x04
     9d4:	3d 81       	ldd	r19, Y+5	; 0x05
     9d6:	82 17       	cp	r24, r18
     9d8:	93 07       	cpc	r25, r19
     9da:	50 f1       	brcs	.+84     	; 0xa30 <prvCopyDataToQueue+0xa6>
     9dc:	88 81       	ld	r24, Y
     9de:	99 81       	ldd	r25, Y+1	; 0x01
     9e0:	9b 83       	std	Y+3, r25	; 0x03
     9e2:	8a 83       	std	Y+2, r24	; 0x02
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	29 c0       	rjmp	.+82     	; 0xa3a <prvCopyDataToQueue+0xb0>
     9e8:	50 e0       	ldi	r21, 0x00	; 0
     9ea:	8e 81       	ldd	r24, Y+6	; 0x06
     9ec:	9f 81       	ldd	r25, Y+7	; 0x07
     9ee:	0e 94 09 1a 	call	0x3412	; 0x3412 <memcpy>
     9f2:	88 a1       	ldd	r24, Y+32	; 0x20
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	91 95       	neg	r25
     9f8:	81 95       	neg	r24
     9fa:	91 09       	sbc	r25, r1
     9fc:	2e 81       	ldd	r18, Y+6	; 0x06
     9fe:	3f 81       	ldd	r19, Y+7	; 0x07
     a00:	28 0f       	add	r18, r24
     a02:	39 1f       	adc	r19, r25
     a04:	3f 83       	std	Y+7, r19	; 0x07
     a06:	2e 83       	std	Y+6, r18	; 0x06
     a08:	48 81       	ld	r20, Y
     a0a:	59 81       	ldd	r21, Y+1	; 0x01
     a0c:	24 17       	cp	r18, r20
     a0e:	35 07       	cpc	r19, r21
     a10:	30 f4       	brcc	.+12     	; 0xa1e <prvCopyDataToQueue+0x94>
     a12:	2c 81       	ldd	r18, Y+4	; 0x04
     a14:	3d 81       	ldd	r19, Y+5	; 0x05
     a16:	82 0f       	add	r24, r18
     a18:	93 1f       	adc	r25, r19
     a1a:	9f 83       	std	Y+7, r25	; 0x07
     a1c:	8e 83       	std	Y+6, r24	; 0x06
     a1e:	02 30       	cpi	r16, 0x02	; 2
     a20:	49 f4       	brne	.+18     	; 0xa34 <prvCopyDataToQueue+0xaa>
     a22:	11 23       	and	r17, r17
     a24:	49 f0       	breq	.+18     	; 0xa38 <prvCopyDataToQueue+0xae>
     a26:	11 50       	subi	r17, 0x01	; 1
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	07 c0       	rjmp	.+14     	; 0xa3a <prvCopyDataToQueue+0xb0>
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	05 c0       	rjmp	.+10     	; 0xa3a <prvCopyDataToQueue+0xb0>
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	03 c0       	rjmp	.+6      	; 0xa3a <prvCopyDataToQueue+0xb0>
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	01 c0       	rjmp	.+2      	; 0xa3a <prvCopyDataToQueue+0xb0>
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	1f 5f       	subi	r17, 0xFF	; 255
     a3c:	1e 8f       	std	Y+30, r17	; 0x1e
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	1f 91       	pop	r17
     a44:	0f 91       	pop	r16
     a46:	08 95       	ret

00000a48 <prvCopyDataFromQueue>:
     a48:	fc 01       	movw	r30, r24
     a4a:	40 a1       	ldd	r20, Z+32	; 0x20
     a4c:	44 23       	and	r20, r20
     a4e:	a9 f0       	breq	.+42     	; 0xa7a <prvCopyDataFromQueue+0x32>
     a50:	50 e0       	ldi	r21, 0x00	; 0
     a52:	26 81       	ldd	r18, Z+6	; 0x06
     a54:	37 81       	ldd	r19, Z+7	; 0x07
     a56:	24 0f       	add	r18, r20
     a58:	35 1f       	adc	r19, r21
     a5a:	37 83       	std	Z+7, r19	; 0x07
     a5c:	26 83       	std	Z+6, r18	; 0x06
     a5e:	84 81       	ldd	r24, Z+4	; 0x04
     a60:	95 81       	ldd	r25, Z+5	; 0x05
     a62:	28 17       	cp	r18, r24
     a64:	39 07       	cpc	r19, r25
     a66:	20 f0       	brcs	.+8      	; 0xa70 <prvCopyDataFromQueue+0x28>
     a68:	80 81       	ld	r24, Z
     a6a:	91 81       	ldd	r25, Z+1	; 0x01
     a6c:	97 83       	std	Z+7, r25	; 0x07
     a6e:	86 83       	std	Z+6, r24	; 0x06
     a70:	cb 01       	movw	r24, r22
     a72:	66 81       	ldd	r22, Z+6	; 0x06
     a74:	77 81       	ldd	r23, Z+7	; 0x07
     a76:	0c 94 09 1a 	jmp	0x3412	; 0x3412 <memcpy>
     a7a:	08 95       	ret

00000a7c <prvUnlockQueue>:
     a7c:	1f 93       	push	r17
     a7e:	cf 93       	push	r28
     a80:	df 93       	push	r29
     a82:	ec 01       	movw	r28, r24
     a84:	0f b6       	in	r0, 0x3f	; 63
     a86:	f8 94       	cli
     a88:	0f 92       	push	r0
     a8a:	1a a1       	ldd	r17, Y+34	; 0x22
     a8c:	0b c0       	rjmp	.+22     	; 0xaa4 <prvUnlockQueue+0x28>
     a8e:	8b 89       	ldd	r24, Y+19	; 0x13
     a90:	88 23       	and	r24, r24
     a92:	51 f0       	breq	.+20     	; 0xaa8 <prvUnlockQueue+0x2c>
     a94:	ce 01       	movw	r24, r28
     a96:	43 96       	adiw	r24, 0x13	; 19
     a98:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <xTaskRemoveFromEventList>
     a9c:	81 11       	cpse	r24, r1
     a9e:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <vTaskMissedYield>
     aa2:	11 50       	subi	r17, 0x01	; 1
     aa4:	11 16       	cp	r1, r17
     aa6:	9c f3       	brlt	.-26     	; 0xa8e <prvUnlockQueue+0x12>
     aa8:	8f ef       	ldi	r24, 0xFF	; 255
     aaa:	8a a3       	std	Y+34, r24	; 0x22
     aac:	0f 90       	pop	r0
     aae:	0f be       	out	0x3f, r0	; 63
     ab0:	0f b6       	in	r0, 0x3f	; 63
     ab2:	f8 94       	cli
     ab4:	0f 92       	push	r0
     ab6:	19 a1       	ldd	r17, Y+33	; 0x21
     ab8:	0b c0       	rjmp	.+22     	; 0xad0 <prvUnlockQueue+0x54>
     aba:	88 85       	ldd	r24, Y+8	; 0x08
     abc:	88 23       	and	r24, r24
     abe:	51 f0       	breq	.+20     	; 0xad4 <prvUnlockQueue+0x58>
     ac0:	ce 01       	movw	r24, r28
     ac2:	08 96       	adiw	r24, 0x08	; 8
     ac4:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <xTaskRemoveFromEventList>
     ac8:	81 11       	cpse	r24, r1
     aca:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <vTaskMissedYield>
     ace:	11 50       	subi	r17, 0x01	; 1
     ad0:	11 16       	cp	r1, r17
     ad2:	9c f3       	brlt	.-26     	; 0xaba <prvUnlockQueue+0x3e>
     ad4:	8f ef       	ldi	r24, 0xFF	; 255
     ad6:	89 a3       	std	Y+33, r24	; 0x21
     ad8:	0f 90       	pop	r0
     ada:	0f be       	out	0x3f, r0	; 63
     adc:	df 91       	pop	r29
     ade:	cf 91       	pop	r28
     ae0:	1f 91       	pop	r17
     ae2:	08 95       	ret

00000ae4 <xQueueGenericReset>:
     ae4:	cf 93       	push	r28
     ae6:	df 93       	push	r29
     ae8:	ec 01       	movw	r28, r24
     aea:	0f b6       	in	r0, 0x3f	; 63
     aec:	f8 94       	cli
     aee:	0f 92       	push	r0
     af0:	e8 81       	ld	r30, Y
     af2:	f9 81       	ldd	r31, Y+1	; 0x01
     af4:	8f 8d       	ldd	r24, Y+31	; 0x1f
     af6:	28 a1       	ldd	r18, Y+32	; 0x20
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	30 e0       	ldi	r19, 0x00	; 0
     afc:	82 9f       	mul	r24, r18
     afe:	a0 01       	movw	r20, r0
     b00:	83 9f       	mul	r24, r19
     b02:	50 0d       	add	r21, r0
     b04:	92 9f       	mul	r25, r18
     b06:	50 0d       	add	r21, r0
     b08:	11 24       	eor	r1, r1
     b0a:	4e 0f       	add	r20, r30
     b0c:	5f 1f       	adc	r21, r31
     b0e:	5d 83       	std	Y+5, r21	; 0x05
     b10:	4c 83       	std	Y+4, r20	; 0x04
     b12:	1e 8e       	std	Y+30, r1	; 0x1e
     b14:	fb 83       	std	Y+3, r31	; 0x03
     b16:	ea 83       	std	Y+2, r30	; 0x02
     b18:	01 97       	sbiw	r24, 0x01	; 1
     b1a:	28 9f       	mul	r18, r24
     b1c:	a0 01       	movw	r20, r0
     b1e:	29 9f       	mul	r18, r25
     b20:	50 0d       	add	r21, r0
     b22:	38 9f       	mul	r19, r24
     b24:	50 0d       	add	r21, r0
     b26:	11 24       	eor	r1, r1
     b28:	cf 01       	movw	r24, r30
     b2a:	84 0f       	add	r24, r20
     b2c:	95 1f       	adc	r25, r21
     b2e:	9f 83       	std	Y+7, r25	; 0x07
     b30:	8e 83       	std	Y+6, r24	; 0x06
     b32:	8f ef       	ldi	r24, 0xFF	; 255
     b34:	89 a3       	std	Y+33, r24	; 0x21
     b36:	8a a3       	std	Y+34, r24	; 0x22
     b38:	61 11       	cpse	r22, r1
     b3a:	0a c0       	rjmp	.+20     	; 0xb50 <xQueueGenericReset+0x6c>
     b3c:	88 85       	ldd	r24, Y+8	; 0x08
     b3e:	88 23       	and	r24, r24
     b40:	69 f0       	breq	.+26     	; 0xb5c <xQueueGenericReset+0x78>
     b42:	ce 01       	movw	r24, r28
     b44:	08 96       	adiw	r24, 0x08	; 8
     b46:	fc d7       	rcall	.+4088   	; 0x1b40 <xTaskRemoveFromEventList>
     b48:	88 23       	and	r24, r24
     b4a:	41 f0       	breq	.+16     	; 0xb5c <xQueueGenericReset+0x78>
     b4c:	2c de       	rcall	.-936    	; 0x7a6 <vPortYield>
     b4e:	06 c0       	rjmp	.+12     	; 0xb5c <xQueueGenericReset+0x78>
     b50:	ce 01       	movw	r24, r28
     b52:	08 96       	adiw	r24, 0x08	; 8
     b54:	5a dd       	rcall	.-1356   	; 0x60a <vListInitialise>
     b56:	ce 01       	movw	r24, r28
     b58:	43 96       	adiw	r24, 0x13	; 19
     b5a:	57 dd       	rcall	.-1362   	; 0x60a <vListInitialise>
     b5c:	0f 90       	pop	r0
     b5e:	0f be       	out	0x3f, r0	; 63
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	df 91       	pop	r29
     b64:	cf 91       	pop	r28
     b66:	08 95       	ret

00000b68 <prvInitialiseNewQueue>:
     b68:	0f 93       	push	r16
     b6a:	1f 93       	push	r17
     b6c:	f8 01       	movw	r30, r16
     b6e:	61 11       	cpse	r22, r1
     b70:	03 c0       	rjmp	.+6      	; 0xb78 <prvInitialiseNewQueue+0x10>
     b72:	11 83       	std	Z+1, r17	; 0x01
     b74:	00 83       	st	Z, r16
     b76:	02 c0       	rjmp	.+4      	; 0xb7c <prvInitialiseNewQueue+0x14>
     b78:	51 83       	std	Z+1, r21	; 0x01
     b7a:	40 83       	st	Z, r20
     b7c:	87 8f       	std	Z+31, r24	; 0x1f
     b7e:	60 a3       	std	Z+32, r22	; 0x20
     b80:	61 e0       	ldi	r22, 0x01	; 1
     b82:	cf 01       	movw	r24, r30
     b84:	af df       	rcall	.-162    	; 0xae4 <xQueueGenericReset>
     b86:	1f 91       	pop	r17
     b88:	0f 91       	pop	r16
     b8a:	08 95       	ret

00000b8c <xQueueGenericCreate>:
     b8c:	df 92       	push	r13
     b8e:	ef 92       	push	r14
     b90:	ff 92       	push	r15
     b92:	0f 93       	push	r16
     b94:	1f 93       	push	r17
     b96:	cf 93       	push	r28
     b98:	df 93       	push	r29
     b9a:	f8 2e       	mov	r15, r24
     b9c:	e6 2e       	mov	r14, r22
     b9e:	d4 2e       	mov	r13, r20
     ba0:	86 9f       	mul	r24, r22
     ba2:	c0 01       	movw	r24, r0
     ba4:	11 24       	eor	r1, r1
     ba6:	83 96       	adiw	r24, 0x23	; 35
     ba8:	4b dc       	rcall	.-1898   	; 0x440 <pvPortMalloc>
     baa:	ec 01       	movw	r28, r24
     bac:	00 97       	sbiw	r24, 0x00	; 0
     bae:	41 f0       	breq	.+16     	; 0xbc0 <xQueueGenericCreate+0x34>
     bb0:	8c 01       	movw	r16, r24
     bb2:	2d 2d       	mov	r18, r13
     bb4:	ac 01       	movw	r20, r24
     bb6:	4d 5d       	subi	r20, 0xDD	; 221
     bb8:	5f 4f       	sbci	r21, 0xFF	; 255
     bba:	6e 2d       	mov	r22, r14
     bbc:	8f 2d       	mov	r24, r15
     bbe:	d4 df       	rcall	.-88     	; 0xb68 <prvInitialiseNewQueue>
     bc0:	ce 01       	movw	r24, r28
     bc2:	df 91       	pop	r29
     bc4:	cf 91       	pop	r28
     bc6:	1f 91       	pop	r17
     bc8:	0f 91       	pop	r16
     bca:	ff 90       	pop	r15
     bcc:	ef 90       	pop	r14
     bce:	df 90       	pop	r13
     bd0:	08 95       	ret

00000bd2 <xQueueCreateCountingSemaphore>:
     bd2:	cf 93       	push	r28
     bd4:	c6 2f       	mov	r28, r22
     bd6:	42 e0       	ldi	r20, 0x02	; 2
     bd8:	60 e0       	ldi	r22, 0x00	; 0
     bda:	d8 df       	rcall	.-80     	; 0xb8c <xQueueGenericCreate>
     bdc:	00 97       	sbiw	r24, 0x00	; 0
     bde:	11 f0       	breq	.+4      	; 0xbe4 <xQueueCreateCountingSemaphore+0x12>
     be0:	fc 01       	movw	r30, r24
     be2:	c6 8f       	std	Z+30, r28	; 0x1e
     be4:	cf 91       	pop	r28
     be6:	08 95       	ret

00000be8 <xQueueGenericSend>:
     be8:	cf 92       	push	r12
     bea:	df 92       	push	r13
     bec:	ef 92       	push	r14
     bee:	ff 92       	push	r15
     bf0:	0f 93       	push	r16
     bf2:	1f 93       	push	r17
     bf4:	cf 93       	push	r28
     bf6:	df 93       	push	r29
     bf8:	cd b7       	in	r28, 0x3d	; 61
     bfa:	de b7       	in	r29, 0x3e	; 62
     bfc:	29 97       	sbiw	r28, 0x09	; 9
     bfe:	0f b6       	in	r0, 0x3f	; 63
     c00:	f8 94       	cli
     c02:	de bf       	out	0x3e, r29	; 62
     c04:	0f be       	out	0x3f, r0	; 63
     c06:	cd bf       	out	0x3d, r28	; 61
     c08:	7c 01       	movw	r14, r24
     c0a:	6b 01       	movw	r12, r22
     c0c:	2e 83       	std	Y+6, r18	; 0x06
     c0e:	3f 83       	std	Y+7, r19	; 0x07
     c10:	48 87       	std	Y+8, r20	; 0x08
     c12:	59 87       	std	Y+9, r21	; 0x09
     c14:	10 e0       	ldi	r17, 0x00	; 0
     c16:	0f b6       	in	r0, 0x3f	; 63
     c18:	f8 94       	cli
     c1a:	0f 92       	push	r0
     c1c:	f7 01       	movw	r30, r14
     c1e:	96 8d       	ldd	r25, Z+30	; 0x1e
     c20:	87 8d       	ldd	r24, Z+31	; 0x1f
     c22:	98 17       	cp	r25, r24
     c24:	10 f0       	brcs	.+4      	; 0xc2a <xQueueGenericSend+0x42>
     c26:	02 30       	cpi	r16, 0x02	; 2
     c28:	a9 f4       	brne	.+42     	; 0xc54 <xQueueGenericSend+0x6c>
     c2a:	40 2f       	mov	r20, r16
     c2c:	b6 01       	movw	r22, r12
     c2e:	c7 01       	movw	r24, r14
     c30:	ac de       	rcall	.-680    	; 0x98a <prvCopyDataToQueue>
     c32:	f7 01       	movw	r30, r14
     c34:	93 89       	ldd	r25, Z+19	; 0x13
     c36:	99 23       	and	r25, r25
     c38:	39 f0       	breq	.+14     	; 0xc48 <xQueueGenericSend+0x60>
     c3a:	c7 01       	movw	r24, r14
     c3c:	43 96       	adiw	r24, 0x13	; 19
     c3e:	80 d7       	rcall	.+3840   	; 0x1b40 <xTaskRemoveFromEventList>
     c40:	88 23       	and	r24, r24
     c42:	21 f0       	breq	.+8      	; 0xc4c <xQueueGenericSend+0x64>
     c44:	b0 dd       	rcall	.-1184   	; 0x7a6 <vPortYield>
     c46:	02 c0       	rjmp	.+4      	; 0xc4c <xQueueGenericSend+0x64>
     c48:	81 11       	cpse	r24, r1
     c4a:	ad dd       	rcall	.-1190   	; 0x7a6 <vPortYield>
     c4c:	0f 90       	pop	r0
     c4e:	0f be       	out	0x3f, r0	; 63
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	48 c0       	rjmp	.+144    	; 0xce4 <xQueueGenericSend+0xfc>
     c54:	8e 81       	ldd	r24, Y+6	; 0x06
     c56:	9f 81       	ldd	r25, Y+7	; 0x07
     c58:	a8 85       	ldd	r26, Y+8	; 0x08
     c5a:	b9 85       	ldd	r27, Y+9	; 0x09
     c5c:	89 2b       	or	r24, r25
     c5e:	8a 2b       	or	r24, r26
     c60:	8b 2b       	or	r24, r27
     c62:	21 f4       	brne	.+8      	; 0xc6c <xQueueGenericSend+0x84>
     c64:	0f 90       	pop	r0
     c66:	0f be       	out	0x3f, r0	; 63
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	3c c0       	rjmp	.+120    	; 0xce4 <xQueueGenericSend+0xfc>
     c6c:	11 11       	cpse	r17, r1
     c6e:	05 c0       	rjmp	.+10     	; 0xc7a <xQueueGenericSend+0x92>
     c70:	ce 01       	movw	r24, r28
     c72:	01 96       	adiw	r24, 0x01	; 1
     c74:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <vTaskInternalSetTimeOutState>
     c78:	11 e0       	ldi	r17, 0x01	; 1
     c7a:	0f 90       	pop	r0
     c7c:	0f be       	out	0x3f, r0	; 63
     c7e:	5e d4       	rcall	.+2236   	; 0x153c <vTaskSuspendAll>
     c80:	0f b6       	in	r0, 0x3f	; 63
     c82:	f8 94       	cli
     c84:	0f 92       	push	r0
     c86:	f7 01       	movw	r30, r14
     c88:	81 a1       	ldd	r24, Z+33	; 0x21
     c8a:	8f 3f       	cpi	r24, 0xFF	; 255
     c8c:	09 f4       	brne	.+2      	; 0xc90 <xQueueGenericSend+0xa8>
     c8e:	11 a2       	std	Z+33, r1	; 0x21
     c90:	f7 01       	movw	r30, r14
     c92:	82 a1       	ldd	r24, Z+34	; 0x22
     c94:	8f 3f       	cpi	r24, 0xFF	; 255
     c96:	09 f4       	brne	.+2      	; 0xc9a <xQueueGenericSend+0xb2>
     c98:	12 a2       	std	Z+34, r1	; 0x22
     c9a:	0f 90       	pop	r0
     c9c:	0f be       	out	0x3f, r0	; 63
     c9e:	be 01       	movw	r22, r28
     ca0:	6a 5f       	subi	r22, 0xFA	; 250
     ca2:	7f 4f       	sbci	r23, 0xFF	; 255
     ca4:	ce 01       	movw	r24, r28
     ca6:	01 96       	adiw	r24, 0x01	; 1
     ca8:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <xTaskCheckForTimeOut>
     cac:	81 11       	cpse	r24, r1
     cae:	16 c0       	rjmp	.+44     	; 0xcdc <xQueueGenericSend+0xf4>
     cb0:	c7 01       	movw	r24, r14
     cb2:	5d de       	rcall	.-838    	; 0x96e <prvIsQueueFull>
     cb4:	88 23       	and	r24, r24
     cb6:	71 f0       	breq	.+28     	; 0xcd4 <xQueueGenericSend+0xec>
     cb8:	4e 81       	ldd	r20, Y+6	; 0x06
     cba:	5f 81       	ldd	r21, Y+7	; 0x07
     cbc:	68 85       	ldd	r22, Y+8	; 0x08
     cbe:	79 85       	ldd	r23, Y+9	; 0x09
     cc0:	c7 01       	movw	r24, r14
     cc2:	08 96       	adiw	r24, 0x08	; 8
     cc4:	e4 d6       	rcall	.+3528   	; 0x1a8e <vTaskPlaceOnEventList>
     cc6:	c7 01       	movw	r24, r14
     cc8:	d9 de       	rcall	.-590    	; 0xa7c <prvUnlockQueue>
     cca:	78 d5       	rcall	.+2800   	; 0x17bc <xTaskResumeAll>
     ccc:	81 11       	cpse	r24, r1
     cce:	a3 cf       	rjmp	.-186    	; 0xc16 <xQueueGenericSend+0x2e>
     cd0:	6a dd       	rcall	.-1324   	; 0x7a6 <vPortYield>
     cd2:	a1 cf       	rjmp	.-190    	; 0xc16 <xQueueGenericSend+0x2e>
     cd4:	c7 01       	movw	r24, r14
     cd6:	d2 de       	rcall	.-604    	; 0xa7c <prvUnlockQueue>
     cd8:	71 d5       	rcall	.+2786   	; 0x17bc <xTaskResumeAll>
     cda:	9d cf       	rjmp	.-198    	; 0xc16 <xQueueGenericSend+0x2e>
     cdc:	c7 01       	movw	r24, r14
     cde:	ce de       	rcall	.-612    	; 0xa7c <prvUnlockQueue>
     ce0:	6d d5       	rcall	.+2778   	; 0x17bc <xTaskResumeAll>
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	29 96       	adiw	r28, 0x09	; 9
     ce6:	0f b6       	in	r0, 0x3f	; 63
     ce8:	f8 94       	cli
     cea:	de bf       	out	0x3e, r29	; 62
     cec:	0f be       	out	0x3f, r0	; 63
     cee:	cd bf       	out	0x3d, r28	; 61
     cf0:	df 91       	pop	r29
     cf2:	cf 91       	pop	r28
     cf4:	1f 91       	pop	r17
     cf6:	0f 91       	pop	r16
     cf8:	ff 90       	pop	r15
     cfa:	ef 90       	pop	r14
     cfc:	df 90       	pop	r13
     cfe:	cf 90       	pop	r12
     d00:	08 95       	ret

00000d02 <xQueueGenericSendFromISR>:
     d02:	ef 92       	push	r14
     d04:	ff 92       	push	r15
     d06:	0f 93       	push	r16
     d08:	1f 93       	push	r17
     d0a:	cf 93       	push	r28
     d0c:	df 93       	push	r29
     d0e:	8a 01       	movw	r16, r20
     d10:	fc 01       	movw	r30, r24
     d12:	56 8d       	ldd	r21, Z+30	; 0x1e
     d14:	37 8d       	ldd	r19, Z+31	; 0x1f
     d16:	53 17       	cp	r21, r19
     d18:	10 f0       	brcs	.+4      	; 0xd1e <xQueueGenericSendFromISR+0x1c>
     d1a:	22 30       	cpi	r18, 0x02	; 2
     d1c:	f1 f4       	brne	.+60     	; 0xd5a <xQueueGenericSendFromISR+0x58>
     d1e:	42 2f       	mov	r20, r18
     d20:	78 01       	movw	r14, r16
     d22:	ec 01       	movw	r28, r24
     d24:	1a a1       	ldd	r17, Y+34	; 0x22
     d26:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d28:	ce 01       	movw	r24, r28
     d2a:	2f de       	rcall	.-930    	; 0x98a <prvCopyDataToQueue>
     d2c:	1f 3f       	cpi	r17, 0xFF	; 255
     d2e:	79 f4       	brne	.+30     	; 0xd4e <xQueueGenericSendFromISR+0x4c>
     d30:	8b 89       	ldd	r24, Y+19	; 0x13
     d32:	88 23       	and	r24, r24
     d34:	a1 f0       	breq	.+40     	; 0xd5e <xQueueGenericSendFromISR+0x5c>
     d36:	ce 01       	movw	r24, r28
     d38:	43 96       	adiw	r24, 0x13	; 19
     d3a:	02 d7       	rcall	.+3588   	; 0x1b40 <xTaskRemoveFromEventList>
     d3c:	88 23       	and	r24, r24
     d3e:	89 f0       	breq	.+34     	; 0xd62 <xQueueGenericSendFromISR+0x60>
     d40:	e1 14       	cp	r14, r1
     d42:	f1 04       	cpc	r15, r1
     d44:	81 f0       	breq	.+32     	; 0xd66 <xQueueGenericSendFromISR+0x64>
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	f7 01       	movw	r30, r14
     d4a:	80 83       	st	Z, r24
     d4c:	0d c0       	rjmp	.+26     	; 0xd68 <xQueueGenericSendFromISR+0x66>
     d4e:	ff 24       	eor	r15, r15
     d50:	f3 94       	inc	r15
     d52:	f1 0e       	add	r15, r17
     d54:	fa a2       	std	Y+34, r15	; 0x22
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	07 c0       	rjmp	.+14     	; 0xd68 <xQueueGenericSendFromISR+0x66>
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	05 c0       	rjmp	.+10     	; 0xd68 <xQueueGenericSendFromISR+0x66>
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	03 c0       	rjmp	.+6      	; 0xd68 <xQueueGenericSendFromISR+0x66>
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	01 c0       	rjmp	.+2      	; 0xd68 <xQueueGenericSendFromISR+0x66>
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	df 91       	pop	r29
     d6a:	cf 91       	pop	r28
     d6c:	1f 91       	pop	r17
     d6e:	0f 91       	pop	r16
     d70:	ff 90       	pop	r15
     d72:	ef 90       	pop	r14
     d74:	08 95       	ret

00000d76 <xQueueReceive>:
     d76:	cf 92       	push	r12
     d78:	df 92       	push	r13
     d7a:	ef 92       	push	r14
     d7c:	ff 92       	push	r15
     d7e:	0f 93       	push	r16
     d80:	1f 93       	push	r17
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62
     d8a:	29 97       	sbiw	r28, 0x09	; 9
     d8c:	0f b6       	in	r0, 0x3f	; 63
     d8e:	f8 94       	cli
     d90:	de bf       	out	0x3e, r29	; 62
     d92:	0f be       	out	0x3f, r0	; 63
     d94:	cd bf       	out	0x3d, r28	; 61
     d96:	8c 01       	movw	r16, r24
     d98:	6b 01       	movw	r12, r22
     d9a:	2e 83       	std	Y+6, r18	; 0x06
     d9c:	3f 83       	std	Y+7, r19	; 0x07
     d9e:	48 87       	std	Y+8, r20	; 0x08
     da0:	59 87       	std	Y+9, r21	; 0x09
     da2:	e1 2c       	mov	r14, r1
     da4:	0f b6       	in	r0, 0x3f	; 63
     da6:	f8 94       	cli
     da8:	0f 92       	push	r0
     daa:	f8 01       	movw	r30, r16
     dac:	f6 8c       	ldd	r15, Z+30	; 0x1e
     dae:	ff 20       	and	r15, r15
     db0:	91 f0       	breq	.+36     	; 0xdd6 <xQueueReceive+0x60>
     db2:	b6 01       	movw	r22, r12
     db4:	c8 01       	movw	r24, r16
     db6:	48 de       	rcall	.-880    	; 0xa48 <prvCopyDataFromQueue>
     db8:	fa 94       	dec	r15
     dba:	f8 01       	movw	r30, r16
     dbc:	f6 8e       	std	Z+30, r15	; 0x1e
     dbe:	80 85       	ldd	r24, Z+8	; 0x08
     dc0:	88 23       	and	r24, r24
     dc2:	29 f0       	breq	.+10     	; 0xdce <xQueueReceive+0x58>
     dc4:	c8 01       	movw	r24, r16
     dc6:	08 96       	adiw	r24, 0x08	; 8
     dc8:	bb d6       	rcall	.+3446   	; 0x1b40 <xTaskRemoveFromEventList>
     dca:	81 11       	cpse	r24, r1
     dcc:	ec dc       	rcall	.-1576   	; 0x7a6 <vPortYield>
     dce:	0f 90       	pop	r0
     dd0:	0f be       	out	0x3f, r0	; 63
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	4c c0       	rjmp	.+152    	; 0xe6e <xQueueReceive+0xf8>
     dd6:	8e 81       	ldd	r24, Y+6	; 0x06
     dd8:	9f 81       	ldd	r25, Y+7	; 0x07
     dda:	a8 85       	ldd	r26, Y+8	; 0x08
     ddc:	b9 85       	ldd	r27, Y+9	; 0x09
     dde:	89 2b       	or	r24, r25
     de0:	8a 2b       	or	r24, r26
     de2:	8b 2b       	or	r24, r27
     de4:	21 f4       	brne	.+8      	; 0xdee <xQueueReceive+0x78>
     de6:	0f 90       	pop	r0
     de8:	0f be       	out	0x3f, r0	; 63
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	40 c0       	rjmp	.+128    	; 0xe6e <xQueueReceive+0xf8>
     dee:	e1 10       	cpse	r14, r1
     df0:	05 c0       	rjmp	.+10     	; 0xdfc <xQueueReceive+0x86>
     df2:	ce 01       	movw	r24, r28
     df4:	01 96       	adiw	r24, 0x01	; 1
     df6:	53 d7       	rcall	.+3750   	; 0x1c9e <vTaskInternalSetTimeOutState>
     df8:	ee 24       	eor	r14, r14
     dfa:	e3 94       	inc	r14
     dfc:	0f 90       	pop	r0
     dfe:	0f be       	out	0x3f, r0	; 63
     e00:	9d d3       	rcall	.+1850   	; 0x153c <vTaskSuspendAll>
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	f8 94       	cli
     e06:	0f 92       	push	r0
     e08:	f8 01       	movw	r30, r16
     e0a:	81 a1       	ldd	r24, Z+33	; 0x21
     e0c:	8f 3f       	cpi	r24, 0xFF	; 255
     e0e:	09 f4       	brne	.+2      	; 0xe12 <xQueueReceive+0x9c>
     e10:	11 a2       	std	Z+33, r1	; 0x21
     e12:	f8 01       	movw	r30, r16
     e14:	82 a1       	ldd	r24, Z+34	; 0x22
     e16:	8f 3f       	cpi	r24, 0xFF	; 255
     e18:	09 f4       	brne	.+2      	; 0xe1c <xQueueReceive+0xa6>
     e1a:	12 a2       	std	Z+34, r1	; 0x22
     e1c:	0f 90       	pop	r0
     e1e:	0f be       	out	0x3f, r0	; 63
     e20:	be 01       	movw	r22, r28
     e22:	6a 5f       	subi	r22, 0xFA	; 250
     e24:	7f 4f       	sbci	r23, 0xFF	; 255
     e26:	ce 01       	movw	r24, r28
     e28:	01 96       	adiw	r24, 0x01	; 1
     e2a:	4a d7       	rcall	.+3732   	; 0x1cc0 <xTaskCheckForTimeOut>
     e2c:	81 11       	cpse	r24, r1
     e2e:	16 c0       	rjmp	.+44     	; 0xe5c <xQueueReceive+0xe6>
     e30:	c8 01       	movw	r24, r16
     e32:	90 dd       	rcall	.-1248   	; 0x954 <prvIsQueueEmpty>
     e34:	88 23       	and	r24, r24
     e36:	71 f0       	breq	.+28     	; 0xe54 <xQueueReceive+0xde>
     e38:	4e 81       	ldd	r20, Y+6	; 0x06
     e3a:	5f 81       	ldd	r21, Y+7	; 0x07
     e3c:	68 85       	ldd	r22, Y+8	; 0x08
     e3e:	79 85       	ldd	r23, Y+9	; 0x09
     e40:	c8 01       	movw	r24, r16
     e42:	43 96       	adiw	r24, 0x13	; 19
     e44:	24 d6       	rcall	.+3144   	; 0x1a8e <vTaskPlaceOnEventList>
     e46:	c8 01       	movw	r24, r16
     e48:	19 de       	rcall	.-974    	; 0xa7c <prvUnlockQueue>
     e4a:	b8 d4       	rcall	.+2416   	; 0x17bc <xTaskResumeAll>
     e4c:	81 11       	cpse	r24, r1
     e4e:	aa cf       	rjmp	.-172    	; 0xda4 <xQueueReceive+0x2e>
     e50:	aa dc       	rcall	.-1708   	; 0x7a6 <vPortYield>
     e52:	a8 cf       	rjmp	.-176    	; 0xda4 <xQueueReceive+0x2e>
     e54:	c8 01       	movw	r24, r16
     e56:	12 de       	rcall	.-988    	; 0xa7c <prvUnlockQueue>
     e58:	b1 d4       	rcall	.+2402   	; 0x17bc <xTaskResumeAll>
     e5a:	a4 cf       	rjmp	.-184    	; 0xda4 <xQueueReceive+0x2e>
     e5c:	c8 01       	movw	r24, r16
     e5e:	0e de       	rcall	.-996    	; 0xa7c <prvUnlockQueue>
     e60:	ad d4       	rcall	.+2394   	; 0x17bc <xTaskResumeAll>
     e62:	c8 01       	movw	r24, r16
     e64:	77 dd       	rcall	.-1298   	; 0x954 <prvIsQueueEmpty>
     e66:	88 23       	and	r24, r24
     e68:	09 f4       	brne	.+2      	; 0xe6c <xQueueReceive+0xf6>
     e6a:	9c cf       	rjmp	.-200    	; 0xda4 <xQueueReceive+0x2e>
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	29 96       	adiw	r28, 0x09	; 9
     e70:	0f b6       	in	r0, 0x3f	; 63
     e72:	f8 94       	cli
     e74:	de bf       	out	0x3e, r29	; 62
     e76:	0f be       	out	0x3f, r0	; 63
     e78:	cd bf       	out	0x3d, r28	; 61
     e7a:	df 91       	pop	r29
     e7c:	cf 91       	pop	r28
     e7e:	1f 91       	pop	r17
     e80:	0f 91       	pop	r16
     e82:	ff 90       	pop	r15
     e84:	ef 90       	pop	r14
     e86:	df 90       	pop	r13
     e88:	cf 90       	pop	r12
     e8a:	08 95       	ret

00000e8c <xQueueSemaphoreTake>:
     e8c:	ef 92       	push	r14
     e8e:	ff 92       	push	r15
     e90:	0f 93       	push	r16
     e92:	1f 93       	push	r17
     e94:	cf 93       	push	r28
     e96:	df 93       	push	r29
     e98:	cd b7       	in	r28, 0x3d	; 61
     e9a:	de b7       	in	r29, 0x3e	; 62
     e9c:	29 97       	sbiw	r28, 0x09	; 9
     e9e:	0f b6       	in	r0, 0x3f	; 63
     ea0:	f8 94       	cli
     ea2:	de bf       	out	0x3e, r29	; 62
     ea4:	0f be       	out	0x3f, r0	; 63
     ea6:	cd bf       	out	0x3d, r28	; 61
     ea8:	8c 01       	movw	r16, r24
     eaa:	4e 83       	std	Y+6, r20	; 0x06
     eac:	5f 83       	std	Y+7, r21	; 0x07
     eae:	68 87       	std	Y+8, r22	; 0x08
     eb0:	79 87       	std	Y+9, r23	; 0x09
     eb2:	e1 2c       	mov	r14, r1
     eb4:	f1 2c       	mov	r15, r1
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	f8 94       	cli
     eba:	0f 92       	push	r0
     ebc:	f8 01       	movw	r30, r16
     ebe:	86 8d       	ldd	r24, Z+30	; 0x1e
     ec0:	88 23       	and	r24, r24
     ec2:	c1 f0       	breq	.+48     	; 0xef4 <xQueueSemaphoreTake+0x68>
     ec4:	81 50       	subi	r24, 0x01	; 1
     ec6:	86 8f       	std	Z+30, r24	; 0x1e
     ec8:	80 81       	ld	r24, Z
     eca:	91 81       	ldd	r25, Z+1	; 0x01
     ecc:	89 2b       	or	r24, r25
     ece:	29 f4       	brne	.+10     	; 0xeda <xQueueSemaphoreTake+0x4e>
     ed0:	0e 94 21 10 	call	0x2042	; 0x2042 <pvTaskIncrementMutexHeldCount>
     ed4:	f8 01       	movw	r30, r16
     ed6:	95 83       	std	Z+5, r25	; 0x05
     ed8:	84 83       	std	Z+4, r24	; 0x04
     eda:	f8 01       	movw	r30, r16
     edc:	80 85       	ldd	r24, Z+8	; 0x08
     ede:	88 23       	and	r24, r24
     ee0:	29 f0       	breq	.+10     	; 0xeec <xQueueSemaphoreTake+0x60>
     ee2:	c8 01       	movw	r24, r16
     ee4:	08 96       	adiw	r24, 0x08	; 8
     ee6:	2c d6       	rcall	.+3160   	; 0x1b40 <xTaskRemoveFromEventList>
     ee8:	81 11       	cpse	r24, r1
     eea:	5d dc       	rcall	.-1862   	; 0x7a6 <vPortYield>
     eec:	0f 90       	pop	r0
     eee:	0f be       	out	0x3f, r0	; 63
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	6a c0       	rjmp	.+212    	; 0xfc8 <xQueueSemaphoreTake+0x13c>
     ef4:	8e 81       	ldd	r24, Y+6	; 0x06
     ef6:	9f 81       	ldd	r25, Y+7	; 0x07
     ef8:	a8 85       	ldd	r26, Y+8	; 0x08
     efa:	b9 85       	ldd	r27, Y+9	; 0x09
     efc:	89 2b       	or	r24, r25
     efe:	8a 2b       	or	r24, r26
     f00:	8b 2b       	or	r24, r27
     f02:	21 f4       	brne	.+8      	; 0xf0c <xQueueSemaphoreTake+0x80>
     f04:	0f 90       	pop	r0
     f06:	0f be       	out	0x3f, r0	; 63
     f08:	80 e0       	ldi	r24, 0x00	; 0
     f0a:	5e c0       	rjmp	.+188    	; 0xfc8 <xQueueSemaphoreTake+0x13c>
     f0c:	f1 10       	cpse	r15, r1
     f0e:	05 c0       	rjmp	.+10     	; 0xf1a <xQueueSemaphoreTake+0x8e>
     f10:	ce 01       	movw	r24, r28
     f12:	01 96       	adiw	r24, 0x01	; 1
     f14:	c4 d6       	rcall	.+3464   	; 0x1c9e <vTaskInternalSetTimeOutState>
     f16:	ff 24       	eor	r15, r15
     f18:	f3 94       	inc	r15
     f1a:	0f 90       	pop	r0
     f1c:	0f be       	out	0x3f, r0	; 63
     f1e:	0e d3       	rcall	.+1564   	; 0x153c <vTaskSuspendAll>
     f20:	0f b6       	in	r0, 0x3f	; 63
     f22:	f8 94       	cli
     f24:	0f 92       	push	r0
     f26:	f8 01       	movw	r30, r16
     f28:	81 a1       	ldd	r24, Z+33	; 0x21
     f2a:	8f 3f       	cpi	r24, 0xFF	; 255
     f2c:	09 f4       	brne	.+2      	; 0xf30 <xQueueSemaphoreTake+0xa4>
     f2e:	11 a2       	std	Z+33, r1	; 0x21
     f30:	f8 01       	movw	r30, r16
     f32:	82 a1       	ldd	r24, Z+34	; 0x22
     f34:	8f 3f       	cpi	r24, 0xFF	; 255
     f36:	09 f4       	brne	.+2      	; 0xf3a <xQueueSemaphoreTake+0xae>
     f38:	12 a2       	std	Z+34, r1	; 0x22
     f3a:	0f 90       	pop	r0
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	be 01       	movw	r22, r28
     f40:	6a 5f       	subi	r22, 0xFA	; 250
     f42:	7f 4f       	sbci	r23, 0xFF	; 255
     f44:	ce 01       	movw	r24, r28
     f46:	01 96       	adiw	r24, 0x01	; 1
     f48:	bb d6       	rcall	.+3446   	; 0x1cc0 <xTaskCheckForTimeOut>
     f4a:	81 11       	cpse	r24, r1
     f4c:	24 c0       	rjmp	.+72     	; 0xf96 <xQueueSemaphoreTake+0x10a>
     f4e:	c8 01       	movw	r24, r16
     f50:	01 dd       	rcall	.-1534   	; 0x954 <prvIsQueueEmpty>
     f52:	88 23       	and	r24, r24
     f54:	e1 f0       	breq	.+56     	; 0xf8e <xQueueSemaphoreTake+0x102>
     f56:	f8 01       	movw	r30, r16
     f58:	80 81       	ld	r24, Z
     f5a:	91 81       	ldd	r25, Z+1	; 0x01
     f5c:	89 2b       	or	r24, r25
     f5e:	49 f4       	brne	.+18     	; 0xf72 <xQueueSemaphoreTake+0xe6>
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	f8 94       	cli
     f64:	0f 92       	push	r0
     f66:	84 81       	ldd	r24, Z+4	; 0x04
     f68:	95 81       	ldd	r25, Z+5	; 0x05
     f6a:	22 d7       	rcall	.+3652   	; 0x1db0 <xTaskPriorityInherit>
     f6c:	e8 2e       	mov	r14, r24
     f6e:	0f 90       	pop	r0
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	4e 81       	ldd	r20, Y+6	; 0x06
     f74:	5f 81       	ldd	r21, Y+7	; 0x07
     f76:	68 85       	ldd	r22, Y+8	; 0x08
     f78:	79 85       	ldd	r23, Y+9	; 0x09
     f7a:	c8 01       	movw	r24, r16
     f7c:	43 96       	adiw	r24, 0x13	; 19
     f7e:	87 d5       	rcall	.+2830   	; 0x1a8e <vTaskPlaceOnEventList>
     f80:	c8 01       	movw	r24, r16
     f82:	7c dd       	rcall	.-1288   	; 0xa7c <prvUnlockQueue>
     f84:	1b d4       	rcall	.+2102   	; 0x17bc <xTaskResumeAll>
     f86:	81 11       	cpse	r24, r1
     f88:	96 cf       	rjmp	.-212    	; 0xeb6 <xQueueSemaphoreTake+0x2a>
     f8a:	0d dc       	rcall	.-2022   	; 0x7a6 <vPortYield>
     f8c:	94 cf       	rjmp	.-216    	; 0xeb6 <xQueueSemaphoreTake+0x2a>
     f8e:	c8 01       	movw	r24, r16
     f90:	75 dd       	rcall	.-1302   	; 0xa7c <prvUnlockQueue>
     f92:	14 d4       	rcall	.+2088   	; 0x17bc <xTaskResumeAll>
     f94:	90 cf       	rjmp	.-224    	; 0xeb6 <xQueueSemaphoreTake+0x2a>
     f96:	c8 01       	movw	r24, r16
     f98:	71 dd       	rcall	.-1310   	; 0xa7c <prvUnlockQueue>
     f9a:	10 d4       	rcall	.+2080   	; 0x17bc <xTaskResumeAll>
     f9c:	c8 01       	movw	r24, r16
     f9e:	da dc       	rcall	.-1612   	; 0x954 <prvIsQueueEmpty>
     fa0:	88 23       	and	r24, r24
     fa2:	09 f4       	brne	.+2      	; 0xfa6 <xQueueSemaphoreTake+0x11a>
     fa4:	88 cf       	rjmp	.-240    	; 0xeb6 <xQueueSemaphoreTake+0x2a>
     fa6:	ee 20       	and	r14, r14
     fa8:	71 f0       	breq	.+28     	; 0xfc6 <xQueueSemaphoreTake+0x13a>
     faa:	0f b6       	in	r0, 0x3f	; 63
     fac:	f8 94       	cli
     fae:	0f 92       	push	r0
     fb0:	c8 01       	movw	r24, r16
     fb2:	c0 dc       	rcall	.-1664   	; 0x934 <prvGetDisinheritPriorityAfterTimeout>
     fb4:	68 2f       	mov	r22, r24
     fb6:	f8 01       	movw	r30, r16
     fb8:	84 81       	ldd	r24, Z+4	; 0x04
     fba:	95 81       	ldd	r25, Z+5	; 0x05
     fbc:	db d7       	rcall	.+4022   	; 0x1f74 <vTaskPriorityDisinheritAfterTimeout>
     fbe:	0f 90       	pop	r0
     fc0:	0f be       	out	0x3f, r0	; 63
     fc2:	80 e0       	ldi	r24, 0x00	; 0
     fc4:	01 c0       	rjmp	.+2      	; 0xfc8 <xQueueSemaphoreTake+0x13c>
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	29 96       	adiw	r28, 0x09	; 9
     fca:	0f b6       	in	r0, 0x3f	; 63
     fcc:	f8 94       	cli
     fce:	de bf       	out	0x3e, r29	; 62
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	cd bf       	out	0x3d, r28	; 61
     fd4:	df 91       	pop	r29
     fd6:	cf 91       	pop	r28
     fd8:	1f 91       	pop	r17
     fda:	0f 91       	pop	r16
     fdc:	ff 90       	pop	r15
     fde:	ef 90       	pop	r14
     fe0:	08 95       	ret

00000fe2 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     fe2:	cf 93       	push	r28
     fe4:	df 93       	push	r29
     fe6:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	f8 94       	cli
     fec:	0f 92       	push	r0
     fee:	89 a1       	ldd	r24, Y+33	; 0x21
     ff0:	8f 3f       	cpi	r24, 0xFF	; 255
     ff2:	09 f4       	brne	.+2      	; 0xff6 <vQueueWaitForMessageRestricted+0x14>
     ff4:	19 a2       	std	Y+33, r1	; 0x21
     ff6:	8a a1       	ldd	r24, Y+34	; 0x22
     ff8:	8f 3f       	cpi	r24, 0xFF	; 255
     ffa:	09 f4       	brne	.+2      	; 0xffe <vQueueWaitForMessageRestricted+0x1c>
     ffc:	1a a2       	std	Y+34, r1	; 0x22
     ffe:	0f 90       	pop	r0
    1000:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1002:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1004:	81 11       	cpse	r24, r1
    1006:	03 c0       	rjmp	.+6      	; 0x100e <__EEPROM_REGION_LENGTH__+0xe>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1008:	ce 01       	movw	r24, r28
    100a:	43 96       	adiw	r24, 0x13	; 19
    100c:	57 d5       	rcall	.+2734   	; 0x1abc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    100e:	ce 01       	movw	r24, r28
    1010:	35 dd       	rcall	.-1430   	; 0xa7c <prvUnlockQueue>
    }
    1012:	df 91       	pop	r29
    1014:	cf 91       	pop	r28
    1016:	08 95       	ret

00001018 <prvResetNextTaskUnblockTime>:
    1018:	e0 91 8b 0c 	lds	r30, 0x0C8B	; 0x800c8b <pxDelayedTaskList>
    101c:	f0 91 8c 0c 	lds	r31, 0x0C8C	; 0x800c8c <pxDelayedTaskList+0x1>
    1020:	80 81       	ld	r24, Z
    1022:	81 11       	cpse	r24, r1
    1024:	0c c0       	rjmp	.+24     	; 0x103e <prvResetNextTaskUnblockTime+0x26>
    1026:	8f ef       	ldi	r24, 0xFF	; 255
    1028:	9f ef       	ldi	r25, 0xFF	; 255
    102a:	dc 01       	movw	r26, r24
    102c:	80 93 55 0c 	sts	0x0C55, r24	; 0x800c55 <xNextTaskUnblockTime>
    1030:	90 93 56 0c 	sts	0x0C56, r25	; 0x800c56 <xNextTaskUnblockTime+0x1>
    1034:	a0 93 57 0c 	sts	0x0C57, r26	; 0x800c57 <xNextTaskUnblockTime+0x2>
    1038:	b0 93 58 0c 	sts	0x0C58, r27	; 0x800c58 <xNextTaskUnblockTime+0x3>
    103c:	08 95       	ret
    103e:	e0 91 8b 0c 	lds	r30, 0x0C8B	; 0x800c8b <pxDelayedTaskList>
    1042:	f0 91 8c 0c 	lds	r31, 0x0C8C	; 0x800c8c <pxDelayedTaskList+0x1>
    1046:	07 80       	ldd	r0, Z+7	; 0x07
    1048:	f0 85       	ldd	r31, Z+8	; 0x08
    104a:	e0 2d       	mov	r30, r0
    104c:	80 81       	ld	r24, Z
    104e:	91 81       	ldd	r25, Z+1	; 0x01
    1050:	a2 81       	ldd	r26, Z+2	; 0x02
    1052:	b3 81       	ldd	r27, Z+3	; 0x03
    1054:	80 93 55 0c 	sts	0x0C55, r24	; 0x800c55 <xNextTaskUnblockTime>
    1058:	90 93 56 0c 	sts	0x0C56, r25	; 0x800c56 <xNextTaskUnblockTime+0x1>
    105c:	a0 93 57 0c 	sts	0x0C57, r26	; 0x800c57 <xNextTaskUnblockTime+0x2>
    1060:	b0 93 58 0c 	sts	0x0C58, r27	; 0x800c58 <xNextTaskUnblockTime+0x3>
    1064:	08 95       	ret

00001066 <prvDeleteTCB>:
    1066:	cf 93       	push	r28
    1068:	df 93       	push	r29
    106a:	ec 01       	movw	r28, r24
    106c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    106e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1070:	90 da       	rcall	.-2784   	; 0x592 <vPortFree>
    1072:	ce 01       	movw	r24, r28
    1074:	8e da       	rcall	.-2788   	; 0x592 <vPortFree>
    1076:	df 91       	pop	r29
    1078:	cf 91       	pop	r28
    107a:	08 95       	ret

0000107c <prvInitialiseNewTask>:
    107c:	4f 92       	push	r4
    107e:	5f 92       	push	r5
    1080:	6f 92       	push	r6
    1082:	7f 92       	push	r7
    1084:	8f 92       	push	r8
    1086:	9f 92       	push	r9
    1088:	af 92       	push	r10
    108a:	bf 92       	push	r11
    108c:	cf 92       	push	r12
    108e:	df 92       	push	r13
    1090:	ef 92       	push	r14
    1092:	ff 92       	push	r15
    1094:	0f 93       	push	r16
    1096:	cf 93       	push	r28
    1098:	df 93       	push	r29
    109a:	2c 01       	movw	r4, r24
    109c:	5b 01       	movw	r10, r22
    109e:	4a 01       	movw	r8, r20
    10a0:	39 01       	movw	r6, r18
    10a2:	e6 01       	movw	r28, r12
    10a4:	65 ea       	ldi	r22, 0xA5	; 165
    10a6:	70 e0       	ldi	r23, 0x00	; 0
    10a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10ac:	0e 94 12 1a 	call	0x3424	; 0x3424 <memset>
    10b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10b4:	21 e0       	ldi	r18, 0x01	; 1
    10b6:	82 1a       	sub	r8, r18
    10b8:	91 08       	sbc	r9, r1
    10ba:	88 0e       	add	r8, r24
    10bc:	99 1e       	adc	r9, r25
    10be:	a1 14       	cp	r10, r1
    10c0:	b1 04       	cpc	r11, r1
    10c2:	89 f4       	brne	.+34     	; 0x10e6 <prvInitialiseNewTask+0x6a>
    10c4:	15 c0       	rjmp	.+42     	; 0x10f0 <prvInitialiseNewTask+0x74>
    10c6:	82 2f       	mov	r24, r18
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	f5 01       	movw	r30, r10
    10cc:	e8 0f       	add	r30, r24
    10ce:	f9 1f       	adc	r31, r25
    10d0:	30 81       	ld	r19, Z
    10d2:	de 01       	movw	r26, r28
    10d4:	a8 0f       	add	r26, r24
    10d6:	b9 1f       	adc	r27, r25
    10d8:	5d 96       	adiw	r26, 0x1d	; 29
    10da:	3c 93       	st	X, r19
    10dc:	80 81       	ld	r24, Z
    10de:	88 23       	and	r24, r24
    10e0:	29 f0       	breq	.+10     	; 0x10ec <prvInitialiseNewTask+0x70>
    10e2:	2f 5f       	subi	r18, 0xFF	; 255
    10e4:	01 c0       	rjmp	.+2      	; 0x10e8 <prvInitialiseNewTask+0x6c>
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	20 31       	cpi	r18, 0x10	; 16
    10ea:	68 f3       	brcs	.-38     	; 0x10c6 <prvInitialiseNewTask+0x4a>
    10ec:	1c a6       	std	Y+44, r1	; 0x2c
    10ee:	01 c0       	rjmp	.+2      	; 0x10f2 <prvInitialiseNewTask+0x76>
    10f0:	1d 8e       	std	Y+29, r1	; 0x1d
    10f2:	0a 30       	cpi	r16, 0x0A	; 10
    10f4:	08 f0       	brcs	.+2      	; 0x10f8 <prvInitialiseNewTask+0x7c>
    10f6:	09 e0       	ldi	r16, 0x09	; 9
    10f8:	0a 8f       	std	Y+26, r16	; 0x1a
    10fa:	0d a7       	std	Y+45, r16	; 0x2d
    10fc:	1e a6       	std	Y+46, r1	; 0x2e
    10fe:	ce 01       	movw	r24, r28
    1100:	02 96       	adiw	r24, 0x02	; 2
    1102:	94 da       	rcall	.-2776   	; 0x62c <vListInitialiseItem>
    1104:	ce 01       	movw	r24, r28
    1106:	0e 96       	adiw	r24, 0x0e	; 14
    1108:	91 da       	rcall	.-2782   	; 0x62c <vListInitialiseItem>
    110a:	db 87       	std	Y+11, r29	; 0x0b
    110c:	ca 87       	std	Y+10, r28	; 0x0a
    110e:	8a e0       	ldi	r24, 0x0A	; 10
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	a0 e0       	ldi	r26, 0x00	; 0
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	80 1b       	sub	r24, r16
    1118:	91 09       	sbc	r25, r1
    111a:	a1 09       	sbc	r26, r1
    111c:	b1 09       	sbc	r27, r1
    111e:	8e 87       	std	Y+14, r24	; 0x0e
    1120:	9f 87       	std	Y+15, r25	; 0x0f
    1122:	a8 8b       	std	Y+16, r26	; 0x10
    1124:	b9 8b       	std	Y+17, r27	; 0x11
    1126:	df 8b       	std	Y+23, r29	; 0x17
    1128:	ce 8b       	std	Y+22, r28	; 0x16
    112a:	18 aa       	std	Y+48, r1	; 0x30
    112c:	1f a6       	std	Y+47, r1	; 0x2f
    112e:	84 e0       	ldi	r24, 0x04	; 4
    1130:	fe 01       	movw	r30, r28
    1132:	f1 96       	adiw	r30, 0x31	; 49
    1134:	df 01       	movw	r26, r30
    1136:	1d 92       	st	X+, r1
    1138:	8a 95       	dec	r24
    113a:	e9 f7       	brne	.-6      	; 0x1136 <prvInitialiseNewTask+0xba>
    113c:	1d aa       	std	Y+53, r1	; 0x35
    113e:	a3 01       	movw	r20, r6
    1140:	b2 01       	movw	r22, r4
    1142:	c4 01       	movw	r24, r8
    1144:	e7 da       	rcall	.-2610   	; 0x714 <pxPortInitialiseStack>
    1146:	99 83       	std	Y+1, r25	; 0x01
    1148:	88 83       	st	Y, r24
    114a:	e1 14       	cp	r14, r1
    114c:	f1 04       	cpc	r15, r1
    114e:	19 f0       	breq	.+6      	; 0x1156 <prvInitialiseNewTask+0xda>
    1150:	f7 01       	movw	r30, r14
    1152:	d1 83       	std	Z+1, r29	; 0x01
    1154:	c0 83       	st	Z, r28
    1156:	df 91       	pop	r29
    1158:	cf 91       	pop	r28
    115a:	0f 91       	pop	r16
    115c:	ff 90       	pop	r15
    115e:	ef 90       	pop	r14
    1160:	df 90       	pop	r13
    1162:	cf 90       	pop	r12
    1164:	bf 90       	pop	r11
    1166:	af 90       	pop	r10
    1168:	9f 90       	pop	r9
    116a:	8f 90       	pop	r8
    116c:	7f 90       	pop	r7
    116e:	6f 90       	pop	r6
    1170:	5f 90       	pop	r5
    1172:	4f 90       	pop	r4
    1174:	08 95       	ret

00001176 <prvInitialiseTaskLists>:
    1176:	cf 93       	push	r28
    1178:	c0 e0       	ldi	r28, 0x00	; 0
    117a:	08 c0       	rjmp	.+16     	; 0x118c <prvInitialiseTaskLists+0x16>
    117c:	2b e0       	ldi	r18, 0x0B	; 11
    117e:	c2 9f       	mul	r28, r18
    1180:	c0 01       	movw	r24, r0
    1182:	11 24       	eor	r1, r1
    1184:	8d 55       	subi	r24, 0x5D	; 93
    1186:	93 4f       	sbci	r25, 0xF3	; 243
    1188:	40 da       	rcall	.-2944   	; 0x60a <vListInitialise>
    118a:	cf 5f       	subi	r28, 0xFF	; 255
    118c:	ca 30       	cpi	r28, 0x0A	; 10
    118e:	b0 f3       	brcs	.-20     	; 0x117c <prvInitialiseTaskLists+0x6>
    1190:	88 e9       	ldi	r24, 0x98	; 152
    1192:	9c e0       	ldi	r25, 0x0C	; 12
    1194:	3a da       	rcall	.-2956   	; 0x60a <vListInitialise>
    1196:	8d e8       	ldi	r24, 0x8D	; 141
    1198:	9c e0       	ldi	r25, 0x0C	; 12
    119a:	37 da       	rcall	.-2962   	; 0x60a <vListInitialise>
    119c:	8e e7       	ldi	r24, 0x7E	; 126
    119e:	9c e0       	ldi	r25, 0x0C	; 12
    11a0:	34 da       	rcall	.-2968   	; 0x60a <vListInitialise>
    11a2:	83 e7       	ldi	r24, 0x73	; 115
    11a4:	9c e0       	ldi	r25, 0x0C	; 12
    11a6:	31 da       	rcall	.-2974   	; 0x60a <vListInitialise>
    11a8:	87 e6       	ldi	r24, 0x67	; 103
    11aa:	9c e0       	ldi	r25, 0x0C	; 12
    11ac:	2e da       	rcall	.-2980   	; 0x60a <vListInitialise>
    11ae:	88 e9       	ldi	r24, 0x98	; 152
    11b0:	9c e0       	ldi	r25, 0x0C	; 12
    11b2:	90 93 8c 0c 	sts	0x0C8C, r25	; 0x800c8c <pxDelayedTaskList+0x1>
    11b6:	80 93 8b 0c 	sts	0x0C8B, r24	; 0x800c8b <pxDelayedTaskList>
    11ba:	8d e8       	ldi	r24, 0x8D	; 141
    11bc:	9c e0       	ldi	r25, 0x0C	; 12
    11be:	90 93 8a 0c 	sts	0x0C8A, r25	; 0x800c8a <pxOverflowDelayedTaskList+0x1>
    11c2:	80 93 89 0c 	sts	0x0C89, r24	; 0x800c89 <pxOverflowDelayedTaskList>
    11c6:	cf 91       	pop	r28
    11c8:	08 95       	ret

000011ca <prvAddNewTaskToReadyList>:
    11ca:	cf 93       	push	r28
    11cc:	df 93       	push	r29
    11ce:	ec 01       	movw	r28, r24
    11d0:	0f b6       	in	r0, 0x3f	; 63
    11d2:	f8 94       	cli
    11d4:	0f 92       	push	r0
    11d6:	80 91 66 0c 	lds	r24, 0x0C66	; 0x800c66 <uxCurrentNumberOfTasks>
    11da:	8f 5f       	subi	r24, 0xFF	; 255
    11dc:	80 93 66 0c 	sts	0x0C66, r24	; 0x800c66 <uxCurrentNumberOfTasks>
    11e0:	80 91 11 0d 	lds	r24, 0x0D11	; 0x800d11 <pxCurrentTCB>
    11e4:	90 91 12 0d 	lds	r25, 0x0D12	; 0x800d12 <pxCurrentTCB+0x1>
    11e8:	89 2b       	or	r24, r25
    11ea:	51 f4       	brne	.+20     	; 0x1200 <prvAddNewTaskToReadyList+0x36>
    11ec:	d0 93 12 0d 	sts	0x0D12, r29	; 0x800d12 <pxCurrentTCB+0x1>
    11f0:	c0 93 11 0d 	sts	0x0D11, r28	; 0x800d11 <pxCurrentTCB>
    11f4:	80 91 66 0c 	lds	r24, 0x0C66	; 0x800c66 <uxCurrentNumberOfTasks>
    11f8:	81 30       	cpi	r24, 0x01	; 1
    11fa:	91 f4       	brne	.+36     	; 0x1220 <prvAddNewTaskToReadyList+0x56>
    11fc:	bc df       	rcall	.-136    	; 0x1176 <prvInitialiseTaskLists>
    11fe:	10 c0       	rjmp	.+32     	; 0x1220 <prvAddNewTaskToReadyList+0x56>
    1200:	80 91 60 0c 	lds	r24, 0x0C60	; 0x800c60 <xSchedulerRunning>
    1204:	81 11       	cpse	r24, r1
    1206:	0c c0       	rjmp	.+24     	; 0x1220 <prvAddNewTaskToReadyList+0x56>
    1208:	e0 91 11 0d 	lds	r30, 0x0D11	; 0x800d11 <pxCurrentTCB>
    120c:	f0 91 12 0d 	lds	r31, 0x0D12	; 0x800d12 <pxCurrentTCB+0x1>
    1210:	92 8d       	ldd	r25, Z+26	; 0x1a
    1212:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1214:	89 17       	cp	r24, r25
    1216:	20 f0       	brcs	.+8      	; 0x1220 <prvAddNewTaskToReadyList+0x56>
    1218:	d0 93 12 0d 	sts	0x0D12, r29	; 0x800d12 <pxCurrentTCB+0x1>
    121c:	c0 93 11 0d 	sts	0x0D11, r28	; 0x800d11 <pxCurrentTCB>
    1220:	80 91 59 0c 	lds	r24, 0x0C59	; 0x800c59 <uxTaskNumber>
    1224:	8f 5f       	subi	r24, 0xFF	; 255
    1226:	80 93 59 0c 	sts	0x0C59, r24	; 0x800c59 <uxTaskNumber>
    122a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    122c:	80 91 61 0c 	lds	r24, 0x0C61	; 0x800c61 <uxTopReadyPriority>
    1230:	8e 17       	cp	r24, r30
    1232:	10 f4       	brcc	.+4      	; 0x1238 <prvAddNewTaskToReadyList+0x6e>
    1234:	e0 93 61 0c 	sts	0x0C61, r30	; 0x800c61 <uxTopReadyPriority>
    1238:	8b e0       	ldi	r24, 0x0B	; 11
    123a:	8e 9f       	mul	r24, r30
    123c:	f0 01       	movw	r30, r0
    123e:	11 24       	eor	r1, r1
    1240:	ed 55       	subi	r30, 0x5D	; 93
    1242:	f3 4f       	sbci	r31, 0xF3	; 243
    1244:	01 80       	ldd	r0, Z+1	; 0x01
    1246:	f2 81       	ldd	r31, Z+2	; 0x02
    1248:	e0 2d       	mov	r30, r0
    124a:	ff 83       	std	Y+7, r31	; 0x07
    124c:	ee 83       	std	Y+6, r30	; 0x06
    124e:	26 81       	ldd	r18, Z+6	; 0x06
    1250:	37 81       	ldd	r19, Z+7	; 0x07
    1252:	39 87       	std	Y+9, r19	; 0x09
    1254:	28 87       	std	Y+8, r18	; 0x08
    1256:	a6 81       	ldd	r26, Z+6	; 0x06
    1258:	b7 81       	ldd	r27, Z+7	; 0x07
    125a:	9e 01       	movw	r18, r28
    125c:	2e 5f       	subi	r18, 0xFE	; 254
    125e:	3f 4f       	sbci	r19, 0xFF	; 255
    1260:	15 96       	adiw	r26, 0x05	; 5
    1262:	3c 93       	st	X, r19
    1264:	2e 93       	st	-X, r18
    1266:	14 97       	sbiw	r26, 0x04	; 4
    1268:	37 83       	std	Z+7, r19	; 0x07
    126a:	26 83       	std	Z+6, r18	; 0x06
    126c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    126e:	8e 9f       	mul	r24, r30
    1270:	f0 01       	movw	r30, r0
    1272:	11 24       	eor	r1, r1
    1274:	ed 55       	subi	r30, 0x5D	; 93
    1276:	f3 4f       	sbci	r31, 0xF3	; 243
    1278:	fd 87       	std	Y+13, r31	; 0x0d
    127a:	ec 87       	std	Y+12, r30	; 0x0c
    127c:	80 81       	ld	r24, Z
    127e:	8f 5f       	subi	r24, 0xFF	; 255
    1280:	80 83       	st	Z, r24
    1282:	0f 90       	pop	r0
    1284:	0f be       	out	0x3f, r0	; 63
    1286:	80 91 60 0c 	lds	r24, 0x0C60	; 0x800c60 <xSchedulerRunning>
    128a:	88 23       	and	r24, r24
    128c:	49 f0       	breq	.+18     	; 0x12a0 <prvAddNewTaskToReadyList+0xd6>
    128e:	e0 91 11 0d 	lds	r30, 0x0D11	; 0x800d11 <pxCurrentTCB>
    1292:	f0 91 12 0d 	lds	r31, 0x0D12	; 0x800d12 <pxCurrentTCB+0x1>
    1296:	92 8d       	ldd	r25, Z+26	; 0x1a
    1298:	8a 8d       	ldd	r24, Y+26	; 0x1a
    129a:	98 17       	cp	r25, r24
    129c:	08 f4       	brcc	.+2      	; 0x12a0 <prvAddNewTaskToReadyList+0xd6>
    129e:	83 da       	rcall	.-2810   	; 0x7a6 <vPortYield>
    12a0:	df 91       	pop	r29
    12a2:	cf 91       	pop	r28
    12a4:	08 95       	ret

000012a6 <prvCheckTasksWaitingTermination>:
    12a6:	cf 93       	push	r28
    12a8:	df 93       	push	r29
    12aa:	1a c0       	rjmp	.+52     	; 0x12e0 <prvCheckTasksWaitingTermination+0x3a>
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	f8 94       	cli
    12b0:	0f 92       	push	r0
    12b2:	e0 91 7a 0c 	lds	r30, 0x0C7A	; 0x800c7a <xTasksWaitingTermination+0x7>
    12b6:	f0 91 7b 0c 	lds	r31, 0x0C7B	; 0x800c7b <xTasksWaitingTermination+0x8>
    12ba:	c0 85       	ldd	r28, Z+8	; 0x08
    12bc:	d1 85       	ldd	r29, Z+9	; 0x09
    12be:	ce 01       	movw	r24, r28
    12c0:	02 96       	adiw	r24, 0x02	; 2
    12c2:	f5 d9       	rcall	.-3094   	; 0x6ae <uxListRemove>
    12c4:	80 91 66 0c 	lds	r24, 0x0C66	; 0x800c66 <uxCurrentNumberOfTasks>
    12c8:	81 50       	subi	r24, 0x01	; 1
    12ca:	80 93 66 0c 	sts	0x0C66, r24	; 0x800c66 <uxCurrentNumberOfTasks>
    12ce:	80 91 72 0c 	lds	r24, 0x0C72	; 0x800c72 <uxDeletedTasksWaitingCleanUp>
    12d2:	81 50       	subi	r24, 0x01	; 1
    12d4:	80 93 72 0c 	sts	0x0C72, r24	; 0x800c72 <uxDeletedTasksWaitingCleanUp>
    12d8:	0f 90       	pop	r0
    12da:	0f be       	out	0x3f, r0	; 63
    12dc:	ce 01       	movw	r24, r28
    12de:	c3 de       	rcall	.-634    	; 0x1066 <prvDeleteTCB>
    12e0:	80 91 72 0c 	lds	r24, 0x0C72	; 0x800c72 <uxDeletedTasksWaitingCleanUp>
    12e4:	81 11       	cpse	r24, r1
    12e6:	e2 cf       	rjmp	.-60     	; 0x12ac <prvCheckTasksWaitingTermination+0x6>
    12e8:	df 91       	pop	r29
    12ea:	cf 91       	pop	r28
    12ec:	08 95       	ret

000012ee <prvAddCurrentTaskToDelayedList>:
    12ee:	8f 92       	push	r8
    12f0:	9f 92       	push	r9
    12f2:	af 92       	push	r10
    12f4:	bf 92       	push	r11
    12f6:	cf 92       	push	r12
    12f8:	df 92       	push	r13
    12fa:	ef 92       	push	r14
    12fc:	ff 92       	push	r15
    12fe:	cf 93       	push	r28
    1300:	df 93       	push	r29
    1302:	6b 01       	movw	r12, r22
    1304:	7c 01       	movw	r14, r24
    1306:	c4 2f       	mov	r28, r20
    1308:	80 90 62 0c 	lds	r8, 0x0C62	; 0x800c62 <xTickCount>
    130c:	90 90 63 0c 	lds	r9, 0x0C63	; 0x800c63 <xTickCount+0x1>
    1310:	a0 90 64 0c 	lds	r10, 0x0C64	; 0x800c64 <xTickCount+0x2>
    1314:	b0 90 65 0c 	lds	r11, 0x0C65	; 0x800c65 <xTickCount+0x3>
    1318:	80 91 11 0d 	lds	r24, 0x0D11	; 0x800d11 <pxCurrentTCB>
    131c:	90 91 12 0d 	lds	r25, 0x0D12	; 0x800d12 <pxCurrentTCB+0x1>
    1320:	02 96       	adiw	r24, 0x02	; 2
    1322:	c5 d9       	rcall	.-3190   	; 0x6ae <uxListRemove>
    1324:	8f ef       	ldi	r24, 0xFF	; 255
    1326:	c8 16       	cp	r12, r24
    1328:	d8 06       	cpc	r13, r24
    132a:	e8 06       	cpc	r14, r24
    132c:	f8 06       	cpc	r15, r24
    132e:	b1 f5       	brne	.+108    	; 0x139c <prvAddCurrentTaskToDelayedList+0xae>
    1330:	cc 23       	and	r28, r28
    1332:	a1 f1       	breq	.+104    	; 0x139c <prvAddCurrentTaskToDelayedList+0xae>
    1334:	e7 e6       	ldi	r30, 0x67	; 103
    1336:	fc e0       	ldi	r31, 0x0C	; 12
    1338:	a1 81       	ldd	r26, Z+1	; 0x01
    133a:	b2 81       	ldd	r27, Z+2	; 0x02
    133c:	c0 91 11 0d 	lds	r28, 0x0D11	; 0x800d11 <pxCurrentTCB>
    1340:	d0 91 12 0d 	lds	r29, 0x0D12	; 0x800d12 <pxCurrentTCB+0x1>
    1344:	bf 83       	std	Y+7, r27	; 0x07
    1346:	ae 83       	std	Y+6, r26	; 0x06
    1348:	c0 91 11 0d 	lds	r28, 0x0D11	; 0x800d11 <pxCurrentTCB>
    134c:	d0 91 12 0d 	lds	r29, 0x0D12	; 0x800d12 <pxCurrentTCB+0x1>
    1350:	16 96       	adiw	r26, 0x06	; 6
    1352:	8d 91       	ld	r24, X+
    1354:	9c 91       	ld	r25, X
    1356:	17 97       	sbiw	r26, 0x07	; 7
    1358:	99 87       	std	Y+9, r25	; 0x09
    135a:	88 87       	std	Y+8, r24	; 0x08
    135c:	16 96       	adiw	r26, 0x06	; 6
    135e:	cd 91       	ld	r28, X+
    1360:	dc 91       	ld	r29, X
    1362:	17 97       	sbiw	r26, 0x07	; 7
    1364:	80 91 11 0d 	lds	r24, 0x0D11	; 0x800d11 <pxCurrentTCB>
    1368:	90 91 12 0d 	lds	r25, 0x0D12	; 0x800d12 <pxCurrentTCB+0x1>
    136c:	02 96       	adiw	r24, 0x02	; 2
    136e:	9d 83       	std	Y+5, r25	; 0x05
    1370:	8c 83       	std	Y+4, r24	; 0x04
    1372:	80 91 11 0d 	lds	r24, 0x0D11	; 0x800d11 <pxCurrentTCB>
    1376:	90 91 12 0d 	lds	r25, 0x0D12	; 0x800d12 <pxCurrentTCB+0x1>
    137a:	02 96       	adiw	r24, 0x02	; 2
    137c:	17 96       	adiw	r26, 0x07	; 7
    137e:	9c 93       	st	X, r25
    1380:	8e 93       	st	-X, r24
    1382:	16 97       	sbiw	r26, 0x06	; 6
    1384:	a0 91 11 0d 	lds	r26, 0x0D11	; 0x800d11 <pxCurrentTCB>
    1388:	b0 91 12 0d 	lds	r27, 0x0D12	; 0x800d12 <pxCurrentTCB+0x1>
    138c:	1d 96       	adiw	r26, 0x0d	; 13
    138e:	fc 93       	st	X, r31
    1390:	ee 93       	st	-X, r30
    1392:	1c 97       	sbiw	r26, 0x0c	; 12
    1394:	80 81       	ld	r24, Z
    1396:	8f 5f       	subi	r24, 0xFF	; 255
    1398:	80 83       	st	Z, r24
    139a:	3d c0       	rjmp	.+122    	; 0x1416 <prvAddCurrentTaskToDelayedList+0x128>
    139c:	c8 0c       	add	r12, r8
    139e:	d9 1c       	adc	r13, r9
    13a0:	ea 1c       	adc	r14, r10
    13a2:	fb 1c       	adc	r15, r11
    13a4:	e0 91 11 0d 	lds	r30, 0x0D11	; 0x800d11 <pxCurrentTCB>
    13a8:	f0 91 12 0d 	lds	r31, 0x0D12	; 0x800d12 <pxCurrentTCB+0x1>
    13ac:	c2 82       	std	Z+2, r12	; 0x02
    13ae:	d3 82       	std	Z+3, r13	; 0x03
    13b0:	e4 82       	std	Z+4, r14	; 0x04
    13b2:	f5 82       	std	Z+5, r15	; 0x05
    13b4:	c8 14       	cp	r12, r8
    13b6:	d9 04       	cpc	r13, r9
    13b8:	ea 04       	cpc	r14, r10
    13ba:	fb 04       	cpc	r15, r11
    13bc:	60 f4       	brcc	.+24     	; 0x13d6 <prvAddCurrentTaskToDelayedList+0xe8>
    13be:	60 91 11 0d 	lds	r22, 0x0D11	; 0x800d11 <pxCurrentTCB>
    13c2:	70 91 12 0d 	lds	r23, 0x0D12	; 0x800d12 <pxCurrentTCB+0x1>
    13c6:	80 91 89 0c 	lds	r24, 0x0C89	; 0x800c89 <pxOverflowDelayedTaskList>
    13ca:	90 91 8a 0c 	lds	r25, 0x0C8A	; 0x800c8a <pxOverflowDelayedTaskList+0x1>
    13ce:	6e 5f       	subi	r22, 0xFE	; 254
    13d0:	7f 4f       	sbci	r23, 0xFF	; 255
    13d2:	30 d9       	rcall	.-3488   	; 0x634 <vListInsert>
    13d4:	20 c0       	rjmp	.+64     	; 0x1416 <prvAddCurrentTaskToDelayedList+0x128>
    13d6:	60 91 11 0d 	lds	r22, 0x0D11	; 0x800d11 <pxCurrentTCB>
    13da:	70 91 12 0d 	lds	r23, 0x0D12	; 0x800d12 <pxCurrentTCB+0x1>
    13de:	80 91 8b 0c 	lds	r24, 0x0C8B	; 0x800c8b <pxDelayedTaskList>
    13e2:	90 91 8c 0c 	lds	r25, 0x0C8C	; 0x800c8c <pxDelayedTaskList+0x1>
    13e6:	6e 5f       	subi	r22, 0xFE	; 254
    13e8:	7f 4f       	sbci	r23, 0xFF	; 255
    13ea:	24 d9       	rcall	.-3512   	; 0x634 <vListInsert>
    13ec:	80 91 55 0c 	lds	r24, 0x0C55	; 0x800c55 <xNextTaskUnblockTime>
    13f0:	90 91 56 0c 	lds	r25, 0x0C56	; 0x800c56 <xNextTaskUnblockTime+0x1>
    13f4:	a0 91 57 0c 	lds	r26, 0x0C57	; 0x800c57 <xNextTaskUnblockTime+0x2>
    13f8:	b0 91 58 0c 	lds	r27, 0x0C58	; 0x800c58 <xNextTaskUnblockTime+0x3>
    13fc:	c8 16       	cp	r12, r24
    13fe:	d9 06       	cpc	r13, r25
    1400:	ea 06       	cpc	r14, r26
    1402:	fb 06       	cpc	r15, r27
    1404:	40 f4       	brcc	.+16     	; 0x1416 <prvAddCurrentTaskToDelayedList+0x128>
    1406:	c0 92 55 0c 	sts	0x0C55, r12	; 0x800c55 <xNextTaskUnblockTime>
    140a:	d0 92 56 0c 	sts	0x0C56, r13	; 0x800c56 <xNextTaskUnblockTime+0x1>
    140e:	e0 92 57 0c 	sts	0x0C57, r14	; 0x800c57 <xNextTaskUnblockTime+0x2>
    1412:	f0 92 58 0c 	sts	0x0C58, r15	; 0x800c58 <xNextTaskUnblockTime+0x3>
    1416:	df 91       	pop	r29
    1418:	cf 91       	pop	r28
    141a:	ff 90       	pop	r15
    141c:	ef 90       	pop	r14
    141e:	df 90       	pop	r13
    1420:	cf 90       	pop	r12
    1422:	bf 90       	pop	r11
    1424:	af 90       	pop	r10
    1426:	9f 90       	pop	r9
    1428:	8f 90       	pop	r8
    142a:	08 95       	ret

0000142c <xTaskCreate>:
    142c:	2f 92       	push	r2
    142e:	3f 92       	push	r3
    1430:	4f 92       	push	r4
    1432:	5f 92       	push	r5
    1434:	6f 92       	push	r6
    1436:	7f 92       	push	r7
    1438:	8f 92       	push	r8
    143a:	9f 92       	push	r9
    143c:	af 92       	push	r10
    143e:	bf 92       	push	r11
    1440:	cf 92       	push	r12
    1442:	df 92       	push	r13
    1444:	ef 92       	push	r14
    1446:	ff 92       	push	r15
    1448:	0f 93       	push	r16
    144a:	cf 93       	push	r28
    144c:	df 93       	push	r29
    144e:	3c 01       	movw	r6, r24
    1450:	1b 01       	movw	r2, r22
    1452:	4a 01       	movw	r8, r20
    1454:	29 01       	movw	r4, r18
    1456:	ca 01       	movw	r24, r20
    1458:	0e 94 20 02 	call	0x440	; 0x440 <pvPortMalloc>
    145c:	6c 01       	movw	r12, r24
    145e:	89 2b       	or	r24, r25
    1460:	69 f0       	breq	.+26     	; 0x147c <xTaskCreate+0x50>
    1462:	86 e3       	ldi	r24, 0x36	; 54
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	0e 94 20 02 	call	0x440	; 0x440 <pvPortMalloc>
    146a:	ec 01       	movw	r28, r24
    146c:	89 2b       	or	r24, r25
    146e:	19 f0       	breq	.+6      	; 0x1476 <xTaskCreate+0x4a>
    1470:	dc 8e       	std	Y+28, r13	; 0x1c
    1472:	cb 8e       	std	Y+27, r12	; 0x1b
    1474:	05 c0       	rjmp	.+10     	; 0x1480 <xTaskCreate+0x54>
    1476:	c6 01       	movw	r24, r12
    1478:	8c d8       	rcall	.-3816   	; 0x592 <vPortFree>
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <xTaskCreate+0x54>
    147c:	c0 e0       	ldi	r28, 0x00	; 0
    147e:	d0 e0       	ldi	r29, 0x00	; 0
    1480:	20 97       	sbiw	r28, 0x00	; 0
    1482:	61 f0       	breq	.+24     	; 0x149c <xTaskCreate+0x70>
    1484:	a1 2c       	mov	r10, r1
    1486:	b1 2c       	mov	r11, r1
    1488:	6e 01       	movw	r12, r28
    148a:	92 01       	movw	r18, r4
    148c:	a4 01       	movw	r20, r8
    148e:	b1 01       	movw	r22, r2
    1490:	c3 01       	movw	r24, r6
    1492:	f4 dd       	rcall	.-1048   	; 0x107c <prvInitialiseNewTask>
    1494:	ce 01       	movw	r24, r28
    1496:	99 de       	rcall	.-718    	; 0x11ca <prvAddNewTaskToReadyList>
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	01 c0       	rjmp	.+2      	; 0x149e <xTaskCreate+0x72>
    149c:	8f ef       	ldi	r24, 0xFF	; 255
    149e:	df 91       	pop	r29
    14a0:	cf 91       	pop	r28
    14a2:	0f 91       	pop	r16
    14a4:	ff 90       	pop	r15
    14a6:	ef 90       	pop	r14
    14a8:	df 90       	pop	r13
    14aa:	cf 90       	pop	r12
    14ac:	bf 90       	pop	r11
    14ae:	af 90       	pop	r10
    14b0:	9f 90       	pop	r9
    14b2:	8f 90       	pop	r8
    14b4:	7f 90       	pop	r7
    14b6:	6f 90       	pop	r6
    14b8:	5f 90       	pop	r5
    14ba:	4f 90       	pop	r4
    14bc:	3f 90       	pop	r3
    14be:	2f 90       	pop	r2
    14c0:	08 95       	ret

000014c2 <vTaskStartScheduler>:
    14c2:	ef 92       	push	r14
    14c4:	ff 92       	push	r15
    14c6:	0f 93       	push	r16
    14c8:	0f 2e       	mov	r0, r31
    14ca:	f3 e5       	ldi	r31, 0x53	; 83
    14cc:	ef 2e       	mov	r14, r31
    14ce:	fc e0       	ldi	r31, 0x0C	; 12
    14d0:	ff 2e       	mov	r15, r31
    14d2:	f0 2d       	mov	r31, r0
    14d4:	00 e0       	ldi	r16, 0x00	; 0
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	40 ec       	ldi	r20, 0xC0	; 192
    14dc:	50 e0       	ldi	r21, 0x00	; 0
    14de:	6d e6       	ldi	r22, 0x6D	; 109
    14e0:	72 e0       	ldi	r23, 0x02	; 2
    14e2:	8c e7       	ldi	r24, 0x7C	; 124
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	a2 df       	rcall	.-188    	; 0x142c <xTaskCreate>
    14e8:	81 30       	cpi	r24, 0x01	; 1
    14ea:	09 f4       	brne	.+2      	; 0x14ee <vTaskStartScheduler+0x2c>
    14ec:	46 d6       	rcall	.+3212   	; 0x217a <xTimerCreateTimerTask>
    14ee:	81 30       	cpi	r24, 0x01	; 1
    14f0:	f9 f4       	brne	.+62     	; 0x1530 <vTaskStartScheduler+0x6e>
    14f2:	f8 94       	cli
    14f4:	8f ef       	ldi	r24, 0xFF	; 255
    14f6:	9f ef       	ldi	r25, 0xFF	; 255
    14f8:	dc 01       	movw	r26, r24
    14fa:	80 93 55 0c 	sts	0x0C55, r24	; 0x800c55 <xNextTaskUnblockTime>
    14fe:	90 93 56 0c 	sts	0x0C56, r25	; 0x800c56 <xNextTaskUnblockTime+0x1>
    1502:	a0 93 57 0c 	sts	0x0C57, r26	; 0x800c57 <xNextTaskUnblockTime+0x2>
    1506:	b0 93 58 0c 	sts	0x0C58, r27	; 0x800c58 <xNextTaskUnblockTime+0x3>
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	80 93 60 0c 	sts	0x0C60, r24	; 0x800c60 <xSchedulerRunning>
    1510:	10 92 62 0c 	sts	0x0C62, r1	; 0x800c62 <xTickCount>
    1514:	10 92 63 0c 	sts	0x0C63, r1	; 0x800c63 <xTickCount+0x1>
    1518:	10 92 64 0c 	sts	0x0C64, r1	; 0x800c64 <xTickCount+0x2>
    151c:	10 92 65 0c 	sts	0x0C65, r1	; 0x800c65 <xTickCount+0x3>
    1520:	e0 91 11 0d 	lds	r30, 0x0D11	; 0x800d11 <pxCurrentTCB>
    1524:	f0 91 12 0d 	lds	r31, 0x0D12	; 0x800d12 <pxCurrentTCB+0x1>
    1528:	87 a5       	ldd	r24, Z+47	; 0x2f
    152a:	0e 94 9d 01 	call	0x33a	; 0x33a <task_switch_in>
    152e:	09 d9       	rcall	.-3566   	; 0x742 <xPortStartScheduler>
    1530:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1534:	0f 91       	pop	r16
    1536:	ff 90       	pop	r15
    1538:	ef 90       	pop	r14
    153a:	08 95       	ret

0000153c <vTaskSuspendAll>:
    153c:	80 91 52 0c 	lds	r24, 0x0C52	; 0x800c52 <uxSchedulerSuspended>
    1540:	8f 5f       	subi	r24, 0xFF	; 255
    1542:	80 93 52 0c 	sts	0x0C52, r24	; 0x800c52 <uxSchedulerSuspended>
    1546:	08 95       	ret

00001548 <xTaskGetTickCount>:
    1548:	0f b6       	in	r0, 0x3f	; 63
    154a:	f8 94       	cli
    154c:	0f 92       	push	r0
    154e:	60 91 62 0c 	lds	r22, 0x0C62	; 0x800c62 <xTickCount>
    1552:	70 91 63 0c 	lds	r23, 0x0C63	; 0x800c63 <xTickCount+0x1>
    1556:	80 91 64 0c 	lds	r24, 0x0C64	; 0x800c64 <xTickCount+0x2>
    155a:	90 91 65 0c 	lds	r25, 0x0C65	; 0x800c65 <xTickCount+0x3>
    155e:	0f 90       	pop	r0
    1560:	0f be       	out	0x3f, r0	; 63
    1562:	08 95       	ret

00001564 <xTaskIncrementTick>:
    1564:	cf 92       	push	r12
    1566:	df 92       	push	r13
    1568:	ef 92       	push	r14
    156a:	ff 92       	push	r15
    156c:	cf 93       	push	r28
    156e:	df 93       	push	r29
    1570:	80 91 52 0c 	lds	r24, 0x0C52	; 0x800c52 <uxSchedulerSuspended>
    1574:	81 11       	cpse	r24, r1
    1576:	05 c1       	rjmp	.+522    	; 0x1782 <xTaskIncrementTick+0x21e>
    1578:	c0 90 62 0c 	lds	r12, 0x0C62	; 0x800c62 <xTickCount>
    157c:	d0 90 63 0c 	lds	r13, 0x0C63	; 0x800c63 <xTickCount+0x1>
    1580:	e0 90 64 0c 	lds	r14, 0x0C64	; 0x800c64 <xTickCount+0x2>
    1584:	f0 90 65 0c 	lds	r15, 0x0C65	; 0x800c65 <xTickCount+0x3>
    1588:	8f ef       	ldi	r24, 0xFF	; 255
    158a:	c8 1a       	sub	r12, r24
    158c:	d8 0a       	sbc	r13, r24
    158e:	e8 0a       	sbc	r14, r24
    1590:	f8 0a       	sbc	r15, r24
    1592:	c0 92 62 0c 	sts	0x0C62, r12	; 0x800c62 <xTickCount>
    1596:	d0 92 63 0c 	sts	0x0C63, r13	; 0x800c63 <xTickCount+0x1>
    159a:	e0 92 64 0c 	sts	0x0C64, r14	; 0x800c64 <xTickCount+0x2>
    159e:	f0 92 65 0c 	sts	0x0C65, r15	; 0x800c65 <xTickCount+0x3>
    15a2:	c1 14       	cp	r12, r1
    15a4:	d1 04       	cpc	r13, r1
    15a6:	e1 04       	cpc	r14, r1
    15a8:	f1 04       	cpc	r15, r1
    15aa:	b1 f4       	brne	.+44     	; 0x15d8 <xTaskIncrementTick+0x74>
    15ac:	80 91 8b 0c 	lds	r24, 0x0C8B	; 0x800c8b <pxDelayedTaskList>
    15b0:	90 91 8c 0c 	lds	r25, 0x0C8C	; 0x800c8c <pxDelayedTaskList+0x1>
    15b4:	20 91 89 0c 	lds	r18, 0x0C89	; 0x800c89 <pxOverflowDelayedTaskList>
    15b8:	30 91 8a 0c 	lds	r19, 0x0C8A	; 0x800c8a <pxOverflowDelayedTaskList+0x1>
    15bc:	30 93 8c 0c 	sts	0x0C8C, r19	; 0x800c8c <pxDelayedTaskList+0x1>
    15c0:	20 93 8b 0c 	sts	0x0C8B, r18	; 0x800c8b <pxDelayedTaskList>
    15c4:	90 93 8a 0c 	sts	0x0C8A, r25	; 0x800c8a <pxOverflowDelayedTaskList+0x1>
    15c8:	80 93 89 0c 	sts	0x0C89, r24	; 0x800c89 <pxOverflowDelayedTaskList>
    15cc:	80 91 5a 0c 	lds	r24, 0x0C5A	; 0x800c5a <xNumOfOverflows>
    15d0:	8f 5f       	subi	r24, 0xFF	; 255
    15d2:	80 93 5a 0c 	sts	0x0C5A, r24	; 0x800c5a <xNumOfOverflows>
    15d6:	20 dd       	rcall	.-1472   	; 0x1018 <prvResetNextTaskUnblockTime>
    15d8:	80 91 55 0c 	lds	r24, 0x0C55	; 0x800c55 <xNextTaskUnblockTime>
    15dc:	90 91 56 0c 	lds	r25, 0x0C56	; 0x800c56 <xNextTaskUnblockTime+0x1>
    15e0:	a0 91 57 0c 	lds	r26, 0x0C57	; 0x800c57 <xNextTaskUnblockTime+0x2>
    15e4:	b0 91 58 0c 	lds	r27, 0x0C58	; 0x800c58 <xNextTaskUnblockTime+0x3>
    15e8:	c8 16       	cp	r12, r24
    15ea:	d9 06       	cpc	r13, r25
    15ec:	ea 06       	cpc	r14, r26
    15ee:	fb 06       	cpc	r15, r27
    15f0:	20 f4       	brcc	.+8      	; 0x15fa <xTaskIncrementTick+0x96>
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	b2 c0       	rjmp	.+356    	; 0x175a <xTaskIncrementTick+0x1f6>
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	01 c0       	rjmp	.+2      	; 0x15fc <xTaskIncrementTick+0x98>
    15fa:	80 e0       	ldi	r24, 0x00	; 0
    15fc:	e0 91 8b 0c 	lds	r30, 0x0C8B	; 0x800c8b <pxDelayedTaskList>
    1600:	f0 91 8c 0c 	lds	r31, 0x0C8C	; 0x800c8c <pxDelayedTaskList+0x1>
    1604:	90 81       	ld	r25, Z
    1606:	91 11       	cpse	r25, r1
    1608:	0c c0       	rjmp	.+24     	; 0x1622 <xTaskIncrementTick+0xbe>
    160a:	4f ef       	ldi	r20, 0xFF	; 255
    160c:	5f ef       	ldi	r21, 0xFF	; 255
    160e:	ba 01       	movw	r22, r20
    1610:	40 93 55 0c 	sts	0x0C55, r20	; 0x800c55 <xNextTaskUnblockTime>
    1614:	50 93 56 0c 	sts	0x0C56, r21	; 0x800c56 <xNextTaskUnblockTime+0x1>
    1618:	60 93 57 0c 	sts	0x0C57, r22	; 0x800c57 <xNextTaskUnblockTime+0x2>
    161c:	70 93 58 0c 	sts	0x0C58, r23	; 0x800c58 <xNextTaskUnblockTime+0x3>
    1620:	9c c0       	rjmp	.+312    	; 0x175a <xTaskIncrementTick+0x1f6>
    1622:	e0 91 8b 0c 	lds	r30, 0x0C8B	; 0x800c8b <pxDelayedTaskList>
    1626:	f0 91 8c 0c 	lds	r31, 0x0C8C	; 0x800c8c <pxDelayedTaskList+0x1>
    162a:	07 80       	ldd	r0, Z+7	; 0x07
    162c:	f0 85       	ldd	r31, Z+8	; 0x08
    162e:	e0 2d       	mov	r30, r0
    1630:	00 84       	ldd	r0, Z+8	; 0x08
    1632:	f1 85       	ldd	r31, Z+9	; 0x09
    1634:	e0 2d       	mov	r30, r0
    1636:	42 81       	ldd	r20, Z+2	; 0x02
    1638:	53 81       	ldd	r21, Z+3	; 0x03
    163a:	64 81       	ldd	r22, Z+4	; 0x04
    163c:	75 81       	ldd	r23, Z+5	; 0x05
    163e:	c4 16       	cp	r12, r20
    1640:	d5 06       	cpc	r13, r21
    1642:	e6 06       	cpc	r14, r22
    1644:	f7 06       	cpc	r15, r23
    1646:	48 f4       	brcc	.+18     	; 0x165a <xTaskIncrementTick+0xf6>
    1648:	40 93 55 0c 	sts	0x0C55, r20	; 0x800c55 <xNextTaskUnblockTime>
    164c:	50 93 56 0c 	sts	0x0C56, r21	; 0x800c56 <xNextTaskUnblockTime+0x1>
    1650:	60 93 57 0c 	sts	0x0C57, r22	; 0x800c57 <xNextTaskUnblockTime+0x2>
    1654:	70 93 58 0c 	sts	0x0C58, r23	; 0x800c58 <xNextTaskUnblockTime+0x3>
    1658:	80 c0       	rjmp	.+256    	; 0x175a <xTaskIncrementTick+0x1f6>
    165a:	a4 85       	ldd	r26, Z+12	; 0x0c
    165c:	b5 85       	ldd	r27, Z+13	; 0x0d
    165e:	c6 81       	ldd	r28, Z+6	; 0x06
    1660:	d7 81       	ldd	r29, Z+7	; 0x07
    1662:	20 85       	ldd	r18, Z+8	; 0x08
    1664:	31 85       	ldd	r19, Z+9	; 0x09
    1666:	3f 83       	std	Y+7, r19	; 0x07
    1668:	2e 83       	std	Y+6, r18	; 0x06
    166a:	c0 85       	ldd	r28, Z+8	; 0x08
    166c:	d1 85       	ldd	r29, Z+9	; 0x09
    166e:	26 81       	ldd	r18, Z+6	; 0x06
    1670:	37 81       	ldd	r19, Z+7	; 0x07
    1672:	3d 83       	std	Y+5, r19	; 0x05
    1674:	2c 83       	std	Y+4, r18	; 0x04
    1676:	11 96       	adiw	r26, 0x01	; 1
    1678:	4d 91       	ld	r20, X+
    167a:	5c 91       	ld	r21, X
    167c:	12 97       	sbiw	r26, 0x02	; 2
    167e:	9f 01       	movw	r18, r30
    1680:	2e 5f       	subi	r18, 0xFE	; 254
    1682:	3f 4f       	sbci	r19, 0xFF	; 255
    1684:	42 17       	cp	r20, r18
    1686:	53 07       	cpc	r21, r19
    1688:	31 f4       	brne	.+12     	; 0x1696 <xTaskIncrementTick+0x132>
    168a:	40 85       	ldd	r20, Z+8	; 0x08
    168c:	51 85       	ldd	r21, Z+9	; 0x09
    168e:	12 96       	adiw	r26, 0x02	; 2
    1690:	5c 93       	st	X, r21
    1692:	4e 93       	st	-X, r20
    1694:	11 97       	sbiw	r26, 0x01	; 1
    1696:	15 86       	std	Z+13, r1	; 0x0d
    1698:	14 86       	std	Z+12, r1	; 0x0c
    169a:	9c 91       	ld	r25, X
    169c:	91 50       	subi	r25, 0x01	; 1
    169e:	9c 93       	st	X, r25
    16a0:	a0 8d       	ldd	r26, Z+24	; 0x18
    16a2:	b1 8d       	ldd	r27, Z+25	; 0x19
    16a4:	10 97       	sbiw	r26, 0x00	; 0
    16a6:	09 f1       	breq	.+66     	; 0x16ea <xTaskIncrementTick+0x186>
    16a8:	c2 89       	ldd	r28, Z+18	; 0x12
    16aa:	d3 89       	ldd	r29, Z+19	; 0x13
    16ac:	44 89       	ldd	r20, Z+20	; 0x14
    16ae:	55 89       	ldd	r21, Z+21	; 0x15
    16b0:	5f 83       	std	Y+7, r21	; 0x07
    16b2:	4e 83       	std	Y+6, r20	; 0x06
    16b4:	c4 89       	ldd	r28, Z+20	; 0x14
    16b6:	d5 89       	ldd	r29, Z+21	; 0x15
    16b8:	42 89       	ldd	r20, Z+18	; 0x12
    16ba:	53 89       	ldd	r21, Z+19	; 0x13
    16bc:	5d 83       	std	Y+5, r21	; 0x05
    16be:	4c 83       	std	Y+4, r20	; 0x04
    16c0:	11 96       	adiw	r26, 0x01	; 1
    16c2:	6d 91       	ld	r22, X+
    16c4:	7c 91       	ld	r23, X
    16c6:	12 97       	sbiw	r26, 0x02	; 2
    16c8:	af 01       	movw	r20, r30
    16ca:	42 5f       	subi	r20, 0xF2	; 242
    16cc:	5f 4f       	sbci	r21, 0xFF	; 255
    16ce:	64 17       	cp	r22, r20
    16d0:	75 07       	cpc	r23, r21
    16d2:	31 f4       	brne	.+12     	; 0x16e0 <xTaskIncrementTick+0x17c>
    16d4:	44 89       	ldd	r20, Z+20	; 0x14
    16d6:	55 89       	ldd	r21, Z+21	; 0x15
    16d8:	12 96       	adiw	r26, 0x02	; 2
    16da:	5c 93       	st	X, r21
    16dc:	4e 93       	st	-X, r20
    16de:	11 97       	sbiw	r26, 0x01	; 1
    16e0:	11 8e       	std	Z+25, r1	; 0x19
    16e2:	10 8e       	std	Z+24, r1	; 0x18
    16e4:	9c 91       	ld	r25, X
    16e6:	91 50       	subi	r25, 0x01	; 1
    16e8:	9c 93       	st	X, r25
    16ea:	a2 8d       	ldd	r26, Z+26	; 0x1a
    16ec:	90 91 61 0c 	lds	r25, 0x0C61	; 0x800c61 <uxTopReadyPriority>
    16f0:	9a 17       	cp	r25, r26
    16f2:	10 f4       	brcc	.+4      	; 0x16f8 <xTaskIncrementTick+0x194>
    16f4:	a0 93 61 0c 	sts	0x0C61, r26	; 0x800c61 <uxTopReadyPriority>
    16f8:	9b e0       	ldi	r25, 0x0B	; 11
    16fa:	9a 9f       	mul	r25, r26
    16fc:	d0 01       	movw	r26, r0
    16fe:	11 24       	eor	r1, r1
    1700:	ad 55       	subi	r26, 0x5D	; 93
    1702:	b3 4f       	sbci	r27, 0xF3	; 243
    1704:	11 96       	adiw	r26, 0x01	; 1
    1706:	0d 90       	ld	r0, X+
    1708:	bc 91       	ld	r27, X
    170a:	a0 2d       	mov	r26, r0
    170c:	b7 83       	std	Z+7, r27	; 0x07
    170e:	a6 83       	std	Z+6, r26	; 0x06
    1710:	16 96       	adiw	r26, 0x06	; 6
    1712:	4d 91       	ld	r20, X+
    1714:	5c 91       	ld	r21, X
    1716:	17 97       	sbiw	r26, 0x07	; 7
    1718:	51 87       	std	Z+9, r21	; 0x09
    171a:	40 87       	std	Z+8, r20	; 0x08
    171c:	16 96       	adiw	r26, 0x06	; 6
    171e:	cd 91       	ld	r28, X+
    1720:	dc 91       	ld	r29, X
    1722:	17 97       	sbiw	r26, 0x07	; 7
    1724:	3d 83       	std	Y+5, r19	; 0x05
    1726:	2c 83       	std	Y+4, r18	; 0x04
    1728:	17 96       	adiw	r26, 0x07	; 7
    172a:	3c 93       	st	X, r19
    172c:	2e 93       	st	-X, r18
    172e:	16 97       	sbiw	r26, 0x06	; 6
    1730:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1732:	9a 9f       	mul	r25, r26
    1734:	d0 01       	movw	r26, r0
    1736:	11 24       	eor	r1, r1
    1738:	ad 55       	subi	r26, 0x5D	; 93
    173a:	b3 4f       	sbci	r27, 0xF3	; 243
    173c:	b5 87       	std	Z+13, r27	; 0x0d
    173e:	a4 87       	std	Z+12, r26	; 0x0c
    1740:	9c 91       	ld	r25, X
    1742:	9f 5f       	subi	r25, 0xFF	; 255
    1744:	9c 93       	st	X, r25
    1746:	22 8d       	ldd	r18, Z+26	; 0x1a
    1748:	e0 91 11 0d 	lds	r30, 0x0D11	; 0x800d11 <pxCurrentTCB>
    174c:	f0 91 12 0d 	lds	r31, 0x0D12	; 0x800d12 <pxCurrentTCB+0x1>
    1750:	92 8d       	ldd	r25, Z+26	; 0x1a
    1752:	29 17       	cp	r18, r25
    1754:	08 f0       	brcs	.+2      	; 0x1758 <xTaskIncrementTick+0x1f4>
    1756:	4f cf       	rjmp	.-354    	; 0x15f6 <xTaskIncrementTick+0x92>
    1758:	51 cf       	rjmp	.-350    	; 0x15fc <xTaskIncrementTick+0x98>
    175a:	e0 91 11 0d 	lds	r30, 0x0D11	; 0x800d11 <pxCurrentTCB>
    175e:	f0 91 12 0d 	lds	r31, 0x0D12	; 0x800d12 <pxCurrentTCB+0x1>
    1762:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1764:	9b e0       	ldi	r25, 0x0B	; 11
    1766:	e9 9f       	mul	r30, r25
    1768:	f0 01       	movw	r30, r0
    176a:	11 24       	eor	r1, r1
    176c:	ed 55       	subi	r30, 0x5D	; 93
    176e:	f3 4f       	sbci	r31, 0xF3	; 243
    1770:	90 81       	ld	r25, Z
    1772:	92 30       	cpi	r25, 0x02	; 2
    1774:	08 f0       	brcs	.+2      	; 0x1778 <xTaskIncrementTick+0x214>
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	90 91 5b 0c 	lds	r25, 0x0C5B	; 0x800c5b <xYieldPending>
    177c:	91 11       	cpse	r25, r1
    177e:	16 c0       	rjmp	.+44     	; 0x17ac <xTaskIncrementTick+0x248>
    1780:	16 c0       	rjmp	.+44     	; 0x17ae <xTaskIncrementTick+0x24a>
    1782:	80 91 5c 0c 	lds	r24, 0x0C5C	; 0x800c5c <xPendedTicks>
    1786:	90 91 5d 0c 	lds	r25, 0x0C5D	; 0x800c5d <xPendedTicks+0x1>
    178a:	a0 91 5e 0c 	lds	r26, 0x0C5E	; 0x800c5e <xPendedTicks+0x2>
    178e:	b0 91 5f 0c 	lds	r27, 0x0C5F	; 0x800c5f <xPendedTicks+0x3>
    1792:	01 96       	adiw	r24, 0x01	; 1
    1794:	a1 1d       	adc	r26, r1
    1796:	b1 1d       	adc	r27, r1
    1798:	80 93 5c 0c 	sts	0x0C5C, r24	; 0x800c5c <xPendedTicks>
    179c:	90 93 5d 0c 	sts	0x0C5D, r25	; 0x800c5d <xPendedTicks+0x1>
    17a0:	a0 93 5e 0c 	sts	0x0C5E, r26	; 0x800c5e <xPendedTicks+0x2>
    17a4:	b0 93 5f 0c 	sts	0x0C5F, r27	; 0x800c5f <xPendedTicks+0x3>
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	01 c0       	rjmp	.+2      	; 0x17ae <xTaskIncrementTick+0x24a>
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	df 91       	pop	r29
    17b0:	cf 91       	pop	r28
    17b2:	ff 90       	pop	r15
    17b4:	ef 90       	pop	r14
    17b6:	df 90       	pop	r13
    17b8:	cf 90       	pop	r12
    17ba:	08 95       	ret

000017bc <xTaskResumeAll>:
    17bc:	cf 92       	push	r12
    17be:	df 92       	push	r13
    17c0:	ef 92       	push	r14
    17c2:	ff 92       	push	r15
    17c4:	cf 93       	push	r28
    17c6:	df 93       	push	r29
    17c8:	0f b6       	in	r0, 0x3f	; 63
    17ca:	f8 94       	cli
    17cc:	0f 92       	push	r0
    17ce:	80 91 52 0c 	lds	r24, 0x0C52	; 0x800c52 <uxSchedulerSuspended>
    17d2:	81 50       	subi	r24, 0x01	; 1
    17d4:	80 93 52 0c 	sts	0x0C52, r24	; 0x800c52 <uxSchedulerSuspended>
    17d8:	80 91 52 0c 	lds	r24, 0x0C52	; 0x800c52 <uxSchedulerSuspended>
    17dc:	81 11       	cpse	r24, r1
    17de:	be c0       	rjmp	.+380    	; 0x195c <xTaskResumeAll+0x1a0>
    17e0:	80 91 66 0c 	lds	r24, 0x0C66	; 0x800c66 <uxCurrentNumberOfTasks>
    17e4:	81 11       	cpse	r24, r1
    17e6:	88 c0       	rjmp	.+272    	; 0x18f8 <xTaskResumeAll+0x13c>
    17e8:	bc c0       	rjmp	.+376    	; 0x1962 <xTaskResumeAll+0x1a6>
    17ea:	e0 91 85 0c 	lds	r30, 0x0C85	; 0x800c85 <xPendingReadyList+0x7>
    17ee:	f0 91 86 0c 	lds	r31, 0x0C86	; 0x800c86 <xPendingReadyList+0x8>
    17f2:	00 84       	ldd	r0, Z+8	; 0x08
    17f4:	f1 85       	ldd	r31, Z+9	; 0x09
    17f6:	e0 2d       	mov	r30, r0
    17f8:	a0 8d       	ldd	r26, Z+24	; 0x18
    17fa:	b1 8d       	ldd	r27, Z+25	; 0x19
    17fc:	c2 89       	ldd	r28, Z+18	; 0x12
    17fe:	d3 89       	ldd	r29, Z+19	; 0x13
    1800:	84 89       	ldd	r24, Z+20	; 0x14
    1802:	95 89       	ldd	r25, Z+21	; 0x15
    1804:	9f 83       	std	Y+7, r25	; 0x07
    1806:	8e 83       	std	Y+6, r24	; 0x06
    1808:	c4 89       	ldd	r28, Z+20	; 0x14
    180a:	d5 89       	ldd	r29, Z+21	; 0x15
    180c:	82 89       	ldd	r24, Z+18	; 0x12
    180e:	93 89       	ldd	r25, Z+19	; 0x13
    1810:	9d 83       	std	Y+5, r25	; 0x05
    1812:	8c 83       	std	Y+4, r24	; 0x04
    1814:	11 96       	adiw	r26, 0x01	; 1
    1816:	2d 91       	ld	r18, X+
    1818:	3c 91       	ld	r19, X
    181a:	12 97       	sbiw	r26, 0x02	; 2
    181c:	cf 01       	movw	r24, r30
    181e:	0e 96       	adiw	r24, 0x0e	; 14
    1820:	28 17       	cp	r18, r24
    1822:	39 07       	cpc	r19, r25
    1824:	31 f4       	brne	.+12     	; 0x1832 <xTaskResumeAll+0x76>
    1826:	84 89       	ldd	r24, Z+20	; 0x14
    1828:	95 89       	ldd	r25, Z+21	; 0x15
    182a:	12 96       	adiw	r26, 0x02	; 2
    182c:	9c 93       	st	X, r25
    182e:	8e 93       	st	-X, r24
    1830:	11 97       	sbiw	r26, 0x01	; 1
    1832:	11 8e       	std	Z+25, r1	; 0x19
    1834:	10 8e       	std	Z+24, r1	; 0x18
    1836:	8c 91       	ld	r24, X
    1838:	81 50       	subi	r24, 0x01	; 1
    183a:	8c 93       	st	X, r24
    183c:	a4 85       	ldd	r26, Z+12	; 0x0c
    183e:	b5 85       	ldd	r27, Z+13	; 0x0d
    1840:	c6 81       	ldd	r28, Z+6	; 0x06
    1842:	d7 81       	ldd	r29, Z+7	; 0x07
    1844:	80 85       	ldd	r24, Z+8	; 0x08
    1846:	91 85       	ldd	r25, Z+9	; 0x09
    1848:	9f 83       	std	Y+7, r25	; 0x07
    184a:	8e 83       	std	Y+6, r24	; 0x06
    184c:	c0 85       	ldd	r28, Z+8	; 0x08
    184e:	d1 85       	ldd	r29, Z+9	; 0x09
    1850:	86 81       	ldd	r24, Z+6	; 0x06
    1852:	97 81       	ldd	r25, Z+7	; 0x07
    1854:	9d 83       	std	Y+5, r25	; 0x05
    1856:	8c 83       	std	Y+4, r24	; 0x04
    1858:	11 96       	adiw	r26, 0x01	; 1
    185a:	8d 91       	ld	r24, X+
    185c:	9c 91       	ld	r25, X
    185e:	12 97       	sbiw	r26, 0x02	; 2
    1860:	9f 01       	movw	r18, r30
    1862:	2e 5f       	subi	r18, 0xFE	; 254
    1864:	3f 4f       	sbci	r19, 0xFF	; 255
    1866:	82 17       	cp	r24, r18
    1868:	93 07       	cpc	r25, r19
    186a:	31 f4       	brne	.+12     	; 0x1878 <xTaskResumeAll+0xbc>
    186c:	80 85       	ldd	r24, Z+8	; 0x08
    186e:	91 85       	ldd	r25, Z+9	; 0x09
    1870:	12 96       	adiw	r26, 0x02	; 2
    1872:	9c 93       	st	X, r25
    1874:	8e 93       	st	-X, r24
    1876:	11 97       	sbiw	r26, 0x01	; 1
    1878:	15 86       	std	Z+13, r1	; 0x0d
    187a:	14 86       	std	Z+12, r1	; 0x0c
    187c:	8c 91       	ld	r24, X
    187e:	81 50       	subi	r24, 0x01	; 1
    1880:	8c 93       	st	X, r24
    1882:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1884:	80 91 61 0c 	lds	r24, 0x0C61	; 0x800c61 <uxTopReadyPriority>
    1888:	8a 17       	cp	r24, r26
    188a:	10 f4       	brcc	.+4      	; 0x1890 <xTaskResumeAll+0xd4>
    188c:	a0 93 61 0c 	sts	0x0C61, r26	; 0x800c61 <uxTopReadyPriority>
    1890:	8b e0       	ldi	r24, 0x0B	; 11
    1892:	8a 9f       	mul	r24, r26
    1894:	d0 01       	movw	r26, r0
    1896:	11 24       	eor	r1, r1
    1898:	ad 55       	subi	r26, 0x5D	; 93
    189a:	b3 4f       	sbci	r27, 0xF3	; 243
    189c:	11 96       	adiw	r26, 0x01	; 1
    189e:	0d 90       	ld	r0, X+
    18a0:	bc 91       	ld	r27, X
    18a2:	a0 2d       	mov	r26, r0
    18a4:	b7 83       	std	Z+7, r27	; 0x07
    18a6:	a6 83       	std	Z+6, r26	; 0x06
    18a8:	16 96       	adiw	r26, 0x06	; 6
    18aa:	4d 91       	ld	r20, X+
    18ac:	5c 91       	ld	r21, X
    18ae:	17 97       	sbiw	r26, 0x07	; 7
    18b0:	51 87       	std	Z+9, r21	; 0x09
    18b2:	40 87       	std	Z+8, r20	; 0x08
    18b4:	16 96       	adiw	r26, 0x06	; 6
    18b6:	cd 91       	ld	r28, X+
    18b8:	dc 91       	ld	r29, X
    18ba:	17 97       	sbiw	r26, 0x07	; 7
    18bc:	3d 83       	std	Y+5, r19	; 0x05
    18be:	2c 83       	std	Y+4, r18	; 0x04
    18c0:	17 96       	adiw	r26, 0x07	; 7
    18c2:	3c 93       	st	X, r19
    18c4:	2e 93       	st	-X, r18
    18c6:	16 97       	sbiw	r26, 0x06	; 6
    18c8:	a2 8d       	ldd	r26, Z+26	; 0x1a
    18ca:	8a 9f       	mul	r24, r26
    18cc:	d0 01       	movw	r26, r0
    18ce:	11 24       	eor	r1, r1
    18d0:	ad 55       	subi	r26, 0x5D	; 93
    18d2:	b3 4f       	sbci	r27, 0xF3	; 243
    18d4:	b5 87       	std	Z+13, r27	; 0x0d
    18d6:	a4 87       	std	Z+12, r26	; 0x0c
    18d8:	8c 91       	ld	r24, X
    18da:	8f 5f       	subi	r24, 0xFF	; 255
    18dc:	8c 93       	st	X, r24
    18de:	92 8d       	ldd	r25, Z+26	; 0x1a
    18e0:	a0 91 11 0d 	lds	r26, 0x0D11	; 0x800d11 <pxCurrentTCB>
    18e4:	b0 91 12 0d 	lds	r27, 0x0D12	; 0x800d12 <pxCurrentTCB+0x1>
    18e8:	5a 96       	adiw	r26, 0x1a	; 26
    18ea:	8c 91       	ld	r24, X
    18ec:	98 17       	cp	r25, r24
    18ee:	30 f0       	brcs	.+12     	; 0x18fc <xTaskResumeAll+0x140>
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	80 93 5b 0c 	sts	0x0C5B, r24	; 0x800c5b <xYieldPending>
    18f6:	02 c0       	rjmp	.+4      	; 0x18fc <xTaskResumeAll+0x140>
    18f8:	e0 e0       	ldi	r30, 0x00	; 0
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 91 7e 0c 	lds	r24, 0x0C7E	; 0x800c7e <xPendingReadyList>
    1900:	81 11       	cpse	r24, r1
    1902:	73 cf       	rjmp	.-282    	; 0x17ea <xTaskResumeAll+0x2e>
    1904:	ef 2b       	or	r30, r31
    1906:	09 f0       	breq	.+2      	; 0x190a <xTaskResumeAll+0x14e>
    1908:	87 db       	rcall	.-2290   	; 0x1018 <prvResetNextTaskUnblockTime>
    190a:	c0 90 5c 0c 	lds	r12, 0x0C5C	; 0x800c5c <xPendedTicks>
    190e:	d0 90 5d 0c 	lds	r13, 0x0C5D	; 0x800c5d <xPendedTicks+0x1>
    1912:	e0 90 5e 0c 	lds	r14, 0x0C5E	; 0x800c5e <xPendedTicks+0x2>
    1916:	f0 90 5f 0c 	lds	r15, 0x0C5F	; 0x800c5f <xPendedTicks+0x3>
    191a:	c1 14       	cp	r12, r1
    191c:	d1 04       	cpc	r13, r1
    191e:	e1 04       	cpc	r14, r1
    1920:	f1 04       	cpc	r15, r1
    1922:	a1 f0       	breq	.+40     	; 0x194c <xTaskResumeAll+0x190>
    1924:	1f de       	rcall	.-962    	; 0x1564 <xTaskIncrementTick>
    1926:	88 23       	and	r24, r24
    1928:	19 f0       	breq	.+6      	; 0x1930 <xTaskResumeAll+0x174>
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	80 93 5b 0c 	sts	0x0C5B, r24	; 0x800c5b <xYieldPending>
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	c8 1a       	sub	r12, r24
    1934:	d1 08       	sbc	r13, r1
    1936:	e1 08       	sbc	r14, r1
    1938:	f1 08       	sbc	r15, r1
    193a:	a1 f7       	brne	.-24     	; 0x1924 <xTaskResumeAll+0x168>
    193c:	10 92 5c 0c 	sts	0x0C5C, r1	; 0x800c5c <xPendedTicks>
    1940:	10 92 5d 0c 	sts	0x0C5D, r1	; 0x800c5d <xPendedTicks+0x1>
    1944:	10 92 5e 0c 	sts	0x0C5E, r1	; 0x800c5e <xPendedTicks+0x2>
    1948:	10 92 5f 0c 	sts	0x0C5F, r1	; 0x800c5f <xPendedTicks+0x3>
    194c:	80 91 5b 0c 	lds	r24, 0x0C5B	; 0x800c5b <xYieldPending>
    1950:	88 23       	and	r24, r24
    1952:	31 f0       	breq	.+12     	; 0x1960 <xTaskResumeAll+0x1a4>
    1954:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <vPortYield>
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	03 c0       	rjmp	.+6      	; 0x1962 <xTaskResumeAll+0x1a6>
    195c:	80 e0       	ldi	r24, 0x00	; 0
    195e:	01 c0       	rjmp	.+2      	; 0x1962 <xTaskResumeAll+0x1a6>
    1960:	80 e0       	ldi	r24, 0x00	; 0
    1962:	0f 90       	pop	r0
    1964:	0f be       	out	0x3f, r0	; 63
    1966:	df 91       	pop	r29
    1968:	cf 91       	pop	r28
    196a:	ff 90       	pop	r15
    196c:	ef 90       	pop	r14
    196e:	df 90       	pop	r13
    1970:	cf 90       	pop	r12
    1972:	08 95       	ret

00001974 <vTaskDelay>:
    1974:	cf 92       	push	r12
    1976:	df 92       	push	r13
    1978:	ef 92       	push	r14
    197a:	ff 92       	push	r15
    197c:	6b 01       	movw	r12, r22
    197e:	7c 01       	movw	r14, r24
    1980:	67 2b       	or	r22, r23
    1982:	68 2b       	or	r22, r24
    1984:	69 2b       	or	r22, r25
    1986:	39 f0       	breq	.+14     	; 0x1996 <vTaskDelay+0x22>
    1988:	d9 dd       	rcall	.-1102   	; 0x153c <vTaskSuspendAll>
    198a:	40 e0       	ldi	r20, 0x00	; 0
    198c:	c7 01       	movw	r24, r14
    198e:	b6 01       	movw	r22, r12
    1990:	ae dc       	rcall	.-1700   	; 0x12ee <prvAddCurrentTaskToDelayedList>
    1992:	14 df       	rcall	.-472    	; 0x17bc <xTaskResumeAll>
    1994:	01 c0       	rjmp	.+2      	; 0x1998 <vTaskDelay+0x24>
    1996:	80 e0       	ldi	r24, 0x00	; 0
    1998:	81 11       	cpse	r24, r1
    199a:	02 c0       	rjmp	.+4      	; 0x19a0 <vTaskDelay+0x2c>
    199c:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <vPortYield>
    19a0:	ff 90       	pop	r15
    19a2:	ef 90       	pop	r14
    19a4:	df 90       	pop	r13
    19a6:	cf 90       	pop	r12
    19a8:	08 95       	ret

000019aa <vTaskSwitchContext>:
    19aa:	80 91 52 0c 	lds	r24, 0x0C52	; 0x800c52 <uxSchedulerSuspended>
    19ae:	88 23       	and	r24, r24
    19b0:	21 f0       	breq	.+8      	; 0x19ba <vTaskSwitchContext+0x10>
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	80 93 5b 0c 	sts	0x0C5B, r24	; 0x800c5b <xYieldPending>
    19b8:	08 95       	ret
    19ba:	10 92 5b 0c 	sts	0x0C5B, r1	; 0x800c5b <xYieldPending>
    19be:	e0 91 11 0d 	lds	r30, 0x0D11	; 0x800d11 <pxCurrentTCB>
    19c2:	f0 91 12 0d 	lds	r31, 0x0D12	; 0x800d12 <pxCurrentTCB+0x1>
    19c6:	87 a5       	ldd	r24, Z+47	; 0x2f
    19c8:	0e 94 a7 01 	call	0x34e	; 0x34e <task_switch_out>
    19cc:	e0 91 11 0d 	lds	r30, 0x0D11	; 0x800d11 <pxCurrentTCB>
    19d0:	f0 91 12 0d 	lds	r31, 0x0D12	; 0x800d12 <pxCurrentTCB+0x1>
    19d4:	20 81       	ld	r18, Z
    19d6:	31 81       	ldd	r19, Z+1	; 0x01
    19d8:	e0 91 11 0d 	lds	r30, 0x0D11	; 0x800d11 <pxCurrentTCB>
    19dc:	f0 91 12 0d 	lds	r31, 0x0D12	; 0x800d12 <pxCurrentTCB+0x1>
    19e0:	83 8d       	ldd	r24, Z+27	; 0x1b
    19e2:	94 8d       	ldd	r25, Z+28	; 0x1c
    19e4:	82 17       	cp	r24, r18
    19e6:	93 07       	cpc	r25, r19
    19e8:	58 f0       	brcs	.+22     	; 0x1a00 <vTaskSwitchContext+0x56>
    19ea:	60 91 11 0d 	lds	r22, 0x0D11	; 0x800d11 <pxCurrentTCB>
    19ee:	70 91 12 0d 	lds	r23, 0x0D12	; 0x800d12 <pxCurrentTCB+0x1>
    19f2:	63 5e       	subi	r22, 0xE3	; 227
    19f4:	7f 4f       	sbci	r23, 0xFF	; 255
    19f6:	80 91 11 0d 	lds	r24, 0x0D11	; 0x800d11 <pxCurrentTCB>
    19fa:	90 91 12 0d 	lds	r25, 0x0D12	; 0x800d12 <pxCurrentTCB+0x1>
    19fe:	44 d6       	rcall	.+3208   	; 0x2688 <vApplicationStackOverflowHook>
    1a00:	80 91 61 0c 	lds	r24, 0x0C61	; 0x800c61 <uxTopReadyPriority>
    1a04:	01 c0       	rjmp	.+2      	; 0x1a08 <vTaskSwitchContext+0x5e>
    1a06:	81 50       	subi	r24, 0x01	; 1
    1a08:	28 2f       	mov	r18, r24
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	9b e0       	ldi	r25, 0x0B	; 11
    1a0e:	92 9f       	mul	r25, r18
    1a10:	f0 01       	movw	r30, r0
    1a12:	93 9f       	mul	r25, r19
    1a14:	f0 0d       	add	r31, r0
    1a16:	11 24       	eor	r1, r1
    1a18:	ed 55       	subi	r30, 0x5D	; 93
    1a1a:	f3 4f       	sbci	r31, 0xF3	; 243
    1a1c:	90 81       	ld	r25, Z
    1a1e:	99 23       	and	r25, r25
    1a20:	91 f3       	breq	.-28     	; 0x1a06 <vTaskSwitchContext+0x5c>
    1a22:	9b e0       	ldi	r25, 0x0B	; 11
    1a24:	92 9f       	mul	r25, r18
    1a26:	a0 01       	movw	r20, r0
    1a28:	93 9f       	mul	r25, r19
    1a2a:	50 0d       	add	r21, r0
    1a2c:	11 24       	eor	r1, r1
    1a2e:	df 01       	movw	r26, r30
    1a30:	01 80       	ldd	r0, Z+1	; 0x01
    1a32:	f2 81       	ldd	r31, Z+2	; 0x02
    1a34:	e0 2d       	mov	r30, r0
    1a36:	04 80       	ldd	r0, Z+4	; 0x04
    1a38:	f5 81       	ldd	r31, Z+5	; 0x05
    1a3a:	e0 2d       	mov	r30, r0
    1a3c:	12 96       	adiw	r26, 0x02	; 2
    1a3e:	fc 93       	st	X, r31
    1a40:	ee 93       	st	-X, r30
    1a42:	11 97       	sbiw	r26, 0x01	; 1
    1a44:	4a 55       	subi	r20, 0x5A	; 90
    1a46:	53 4f       	sbci	r21, 0xF3	; 243
    1a48:	e4 17       	cp	r30, r20
    1a4a:	f5 07       	cpc	r31, r21
    1a4c:	29 f4       	brne	.+10     	; 0x1a58 <vTaskSwitchContext+0xae>
    1a4e:	44 81       	ldd	r20, Z+4	; 0x04
    1a50:	55 81       	ldd	r21, Z+5	; 0x05
    1a52:	fd 01       	movw	r30, r26
    1a54:	52 83       	std	Z+2, r21	; 0x02
    1a56:	41 83       	std	Z+1, r20	; 0x01
    1a58:	9b e0       	ldi	r25, 0x0B	; 11
    1a5a:	92 9f       	mul	r25, r18
    1a5c:	f0 01       	movw	r30, r0
    1a5e:	93 9f       	mul	r25, r19
    1a60:	f0 0d       	add	r31, r0
    1a62:	11 24       	eor	r1, r1
    1a64:	ed 55       	subi	r30, 0x5D	; 93
    1a66:	f3 4f       	sbci	r31, 0xF3	; 243
    1a68:	01 80       	ldd	r0, Z+1	; 0x01
    1a6a:	f2 81       	ldd	r31, Z+2	; 0x02
    1a6c:	e0 2d       	mov	r30, r0
    1a6e:	20 85       	ldd	r18, Z+8	; 0x08
    1a70:	31 85       	ldd	r19, Z+9	; 0x09
    1a72:	30 93 12 0d 	sts	0x0D12, r19	; 0x800d12 <pxCurrentTCB+0x1>
    1a76:	20 93 11 0d 	sts	0x0D11, r18	; 0x800d11 <pxCurrentTCB>
    1a7a:	80 93 61 0c 	sts	0x0C61, r24	; 0x800c61 <uxTopReadyPriority>
    1a7e:	e0 91 11 0d 	lds	r30, 0x0D11	; 0x800d11 <pxCurrentTCB>
    1a82:	f0 91 12 0d 	lds	r31, 0x0D12	; 0x800d12 <pxCurrentTCB+0x1>
    1a86:	87 a5       	ldd	r24, Z+47	; 0x2f
    1a88:	0c 94 9d 01 	jmp	0x33a	; 0x33a <task_switch_in>
    1a8c:	08 95       	ret

00001a8e <vTaskPlaceOnEventList>:
    1a8e:	cf 92       	push	r12
    1a90:	df 92       	push	r13
    1a92:	ef 92       	push	r14
    1a94:	ff 92       	push	r15
    1a96:	6a 01       	movw	r12, r20
    1a98:	7b 01       	movw	r14, r22
    1a9a:	60 91 11 0d 	lds	r22, 0x0D11	; 0x800d11 <pxCurrentTCB>
    1a9e:	70 91 12 0d 	lds	r23, 0x0D12	; 0x800d12 <pxCurrentTCB+0x1>
    1aa2:	62 5f       	subi	r22, 0xF2	; 242
    1aa4:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa6:	0e 94 1a 03 	call	0x634	; 0x634 <vListInsert>
    1aaa:	41 e0       	ldi	r20, 0x01	; 1
    1aac:	c7 01       	movw	r24, r14
    1aae:	b6 01       	movw	r22, r12
    1ab0:	1e dc       	rcall	.-1988   	; 0x12ee <prvAddCurrentTaskToDelayedList>
    1ab2:	ff 90       	pop	r15
    1ab4:	ef 90       	pop	r14
    1ab6:	df 90       	pop	r13
    1ab8:	cf 90       	pop	r12
    1aba:	08 95       	ret

00001abc <vTaskPlaceOnEventListRestricted>:
    1abc:	cf 93       	push	r28
    1abe:	df 93       	push	r29
    1ac0:	fc 01       	movw	r30, r24
    1ac2:	cb 01       	movw	r24, r22
    1ac4:	ba 01       	movw	r22, r20
    1ac6:	a1 81       	ldd	r26, Z+1	; 0x01
    1ac8:	b2 81       	ldd	r27, Z+2	; 0x02
    1aca:	c0 91 11 0d 	lds	r28, 0x0D11	; 0x800d11 <pxCurrentTCB>
    1ace:	d0 91 12 0d 	lds	r29, 0x0D12	; 0x800d12 <pxCurrentTCB+0x1>
    1ad2:	bb 8b       	std	Y+19, r27	; 0x13
    1ad4:	aa 8b       	std	Y+18, r26	; 0x12
    1ad6:	c0 91 11 0d 	lds	r28, 0x0D11	; 0x800d11 <pxCurrentTCB>
    1ada:	d0 91 12 0d 	lds	r29, 0x0D12	; 0x800d12 <pxCurrentTCB+0x1>
    1ade:	16 96       	adiw	r26, 0x06	; 6
    1ae0:	4d 91       	ld	r20, X+
    1ae2:	5c 91       	ld	r21, X
    1ae4:	17 97       	sbiw	r26, 0x07	; 7
    1ae6:	5d 8b       	std	Y+21, r21	; 0x15
    1ae8:	4c 8b       	std	Y+20, r20	; 0x14
    1aea:	16 96       	adiw	r26, 0x06	; 6
    1aec:	cd 91       	ld	r28, X+
    1aee:	dc 91       	ld	r29, X
    1af0:	17 97       	sbiw	r26, 0x07	; 7
    1af2:	40 91 11 0d 	lds	r20, 0x0D11	; 0x800d11 <pxCurrentTCB>
    1af6:	50 91 12 0d 	lds	r21, 0x0D12	; 0x800d12 <pxCurrentTCB+0x1>
    1afa:	42 5f       	subi	r20, 0xF2	; 242
    1afc:	5f 4f       	sbci	r21, 0xFF	; 255
    1afe:	5d 83       	std	Y+5, r21	; 0x05
    1b00:	4c 83       	std	Y+4, r20	; 0x04
    1b02:	40 91 11 0d 	lds	r20, 0x0D11	; 0x800d11 <pxCurrentTCB>
    1b06:	50 91 12 0d 	lds	r21, 0x0D12	; 0x800d12 <pxCurrentTCB+0x1>
    1b0a:	42 5f       	subi	r20, 0xF2	; 242
    1b0c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b0e:	17 96       	adiw	r26, 0x07	; 7
    1b10:	5c 93       	st	X, r21
    1b12:	4e 93       	st	-X, r20
    1b14:	16 97       	sbiw	r26, 0x06	; 6
    1b16:	a0 91 11 0d 	lds	r26, 0x0D11	; 0x800d11 <pxCurrentTCB>
    1b1a:	b0 91 12 0d 	lds	r27, 0x0D12	; 0x800d12 <pxCurrentTCB+0x1>
    1b1e:	59 96       	adiw	r26, 0x19	; 25
    1b20:	fc 93       	st	X, r31
    1b22:	ee 93       	st	-X, r30
    1b24:	58 97       	sbiw	r26, 0x18	; 24
    1b26:	30 81       	ld	r19, Z
    1b28:	3f 5f       	subi	r19, 0xFF	; 255
    1b2a:	30 83       	st	Z, r19
    1b2c:	22 23       	and	r18, r18
    1b2e:	19 f0       	breq	.+6      	; 0x1b36 <vTaskPlaceOnEventListRestricted+0x7a>
    1b30:	6f ef       	ldi	r22, 0xFF	; 255
    1b32:	7f ef       	ldi	r23, 0xFF	; 255
    1b34:	cb 01       	movw	r24, r22
    1b36:	42 2f       	mov	r20, r18
    1b38:	da db       	rcall	.-2124   	; 0x12ee <prvAddCurrentTaskToDelayedList>
    1b3a:	df 91       	pop	r29
    1b3c:	cf 91       	pop	r28
    1b3e:	08 95       	ret

00001b40 <xTaskRemoveFromEventList>:
    1b40:	cf 93       	push	r28
    1b42:	df 93       	push	r29
    1b44:	dc 01       	movw	r26, r24
    1b46:	17 96       	adiw	r26, 0x07	; 7
    1b48:	ed 91       	ld	r30, X+
    1b4a:	fc 91       	ld	r31, X
    1b4c:	18 97       	sbiw	r26, 0x08	; 8
    1b4e:	00 84       	ldd	r0, Z+8	; 0x08
    1b50:	f1 85       	ldd	r31, Z+9	; 0x09
    1b52:	e0 2d       	mov	r30, r0
    1b54:	a0 8d       	ldd	r26, Z+24	; 0x18
    1b56:	b1 8d       	ldd	r27, Z+25	; 0x19
    1b58:	c2 89       	ldd	r28, Z+18	; 0x12
    1b5a:	d3 89       	ldd	r29, Z+19	; 0x13
    1b5c:	84 89       	ldd	r24, Z+20	; 0x14
    1b5e:	95 89       	ldd	r25, Z+21	; 0x15
    1b60:	9f 83       	std	Y+7, r25	; 0x07
    1b62:	8e 83       	std	Y+6, r24	; 0x06
    1b64:	c4 89       	ldd	r28, Z+20	; 0x14
    1b66:	d5 89       	ldd	r29, Z+21	; 0x15
    1b68:	82 89       	ldd	r24, Z+18	; 0x12
    1b6a:	93 89       	ldd	r25, Z+19	; 0x13
    1b6c:	9d 83       	std	Y+5, r25	; 0x05
    1b6e:	8c 83       	std	Y+4, r24	; 0x04
    1b70:	11 96       	adiw	r26, 0x01	; 1
    1b72:	8d 91       	ld	r24, X+
    1b74:	9c 91       	ld	r25, X
    1b76:	12 97       	sbiw	r26, 0x02	; 2
    1b78:	9f 01       	movw	r18, r30
    1b7a:	22 5f       	subi	r18, 0xF2	; 242
    1b7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b7e:	82 17       	cp	r24, r18
    1b80:	93 07       	cpc	r25, r19
    1b82:	31 f4       	brne	.+12     	; 0x1b90 <xTaskRemoveFromEventList+0x50>
    1b84:	84 89       	ldd	r24, Z+20	; 0x14
    1b86:	95 89       	ldd	r25, Z+21	; 0x15
    1b88:	12 96       	adiw	r26, 0x02	; 2
    1b8a:	9c 93       	st	X, r25
    1b8c:	8e 93       	st	-X, r24
    1b8e:	11 97       	sbiw	r26, 0x01	; 1
    1b90:	11 8e       	std	Z+25, r1	; 0x19
    1b92:	10 8e       	std	Z+24, r1	; 0x18
    1b94:	8c 91       	ld	r24, X
    1b96:	81 50       	subi	r24, 0x01	; 1
    1b98:	8c 93       	st	X, r24
    1b9a:	80 91 52 0c 	lds	r24, 0x0C52	; 0x800c52 <uxSchedulerSuspended>
    1b9e:	81 11       	cpse	r24, r1
    1ba0:	52 c0       	rjmp	.+164    	; 0x1c46 <xTaskRemoveFromEventList+0x106>
    1ba2:	a4 85       	ldd	r26, Z+12	; 0x0c
    1ba4:	b5 85       	ldd	r27, Z+13	; 0x0d
    1ba6:	c6 81       	ldd	r28, Z+6	; 0x06
    1ba8:	d7 81       	ldd	r29, Z+7	; 0x07
    1baa:	80 85       	ldd	r24, Z+8	; 0x08
    1bac:	91 85       	ldd	r25, Z+9	; 0x09
    1bae:	9f 83       	std	Y+7, r25	; 0x07
    1bb0:	8e 83       	std	Y+6, r24	; 0x06
    1bb2:	c0 85       	ldd	r28, Z+8	; 0x08
    1bb4:	d1 85       	ldd	r29, Z+9	; 0x09
    1bb6:	86 81       	ldd	r24, Z+6	; 0x06
    1bb8:	97 81       	ldd	r25, Z+7	; 0x07
    1bba:	9d 83       	std	Y+5, r25	; 0x05
    1bbc:	8c 83       	std	Y+4, r24	; 0x04
    1bbe:	11 96       	adiw	r26, 0x01	; 1
    1bc0:	8d 91       	ld	r24, X+
    1bc2:	9c 91       	ld	r25, X
    1bc4:	12 97       	sbiw	r26, 0x02	; 2
    1bc6:	9f 01       	movw	r18, r30
    1bc8:	2e 5f       	subi	r18, 0xFE	; 254
    1bca:	3f 4f       	sbci	r19, 0xFF	; 255
    1bcc:	82 17       	cp	r24, r18
    1bce:	93 07       	cpc	r25, r19
    1bd0:	31 f4       	brne	.+12     	; 0x1bde <xTaskRemoveFromEventList+0x9e>
    1bd2:	80 85       	ldd	r24, Z+8	; 0x08
    1bd4:	91 85       	ldd	r25, Z+9	; 0x09
    1bd6:	12 96       	adiw	r26, 0x02	; 2
    1bd8:	9c 93       	st	X, r25
    1bda:	8e 93       	st	-X, r24
    1bdc:	11 97       	sbiw	r26, 0x01	; 1
    1bde:	15 86       	std	Z+13, r1	; 0x0d
    1be0:	14 86       	std	Z+12, r1	; 0x0c
    1be2:	8c 91       	ld	r24, X
    1be4:	81 50       	subi	r24, 0x01	; 1
    1be6:	8c 93       	st	X, r24
    1be8:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1bea:	80 91 61 0c 	lds	r24, 0x0C61	; 0x800c61 <uxTopReadyPriority>
    1bee:	8a 17       	cp	r24, r26
    1bf0:	10 f4       	brcc	.+4      	; 0x1bf6 <xTaskRemoveFromEventList+0xb6>
    1bf2:	a0 93 61 0c 	sts	0x0C61, r26	; 0x800c61 <uxTopReadyPriority>
    1bf6:	8b e0       	ldi	r24, 0x0B	; 11
    1bf8:	8a 9f       	mul	r24, r26
    1bfa:	d0 01       	movw	r26, r0
    1bfc:	11 24       	eor	r1, r1
    1bfe:	ad 55       	subi	r26, 0x5D	; 93
    1c00:	b3 4f       	sbci	r27, 0xF3	; 243
    1c02:	11 96       	adiw	r26, 0x01	; 1
    1c04:	0d 90       	ld	r0, X+
    1c06:	bc 91       	ld	r27, X
    1c08:	a0 2d       	mov	r26, r0
    1c0a:	b7 83       	std	Z+7, r27	; 0x07
    1c0c:	a6 83       	std	Z+6, r26	; 0x06
    1c0e:	16 96       	adiw	r26, 0x06	; 6
    1c10:	4d 91       	ld	r20, X+
    1c12:	5c 91       	ld	r21, X
    1c14:	17 97       	sbiw	r26, 0x07	; 7
    1c16:	51 87       	std	Z+9, r21	; 0x09
    1c18:	40 87       	std	Z+8, r20	; 0x08
    1c1a:	16 96       	adiw	r26, 0x06	; 6
    1c1c:	cd 91       	ld	r28, X+
    1c1e:	dc 91       	ld	r29, X
    1c20:	17 97       	sbiw	r26, 0x07	; 7
    1c22:	3d 83       	std	Y+5, r19	; 0x05
    1c24:	2c 83       	std	Y+4, r18	; 0x04
    1c26:	17 96       	adiw	r26, 0x07	; 7
    1c28:	3c 93       	st	X, r19
    1c2a:	2e 93       	st	-X, r18
    1c2c:	16 97       	sbiw	r26, 0x06	; 6
    1c2e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1c30:	8a 9f       	mul	r24, r26
    1c32:	d0 01       	movw	r26, r0
    1c34:	11 24       	eor	r1, r1
    1c36:	ad 55       	subi	r26, 0x5D	; 93
    1c38:	b3 4f       	sbci	r27, 0xF3	; 243
    1c3a:	b5 87       	std	Z+13, r27	; 0x0d
    1c3c:	a4 87       	std	Z+12, r26	; 0x0c
    1c3e:	8c 91       	ld	r24, X
    1c40:	8f 5f       	subi	r24, 0xFF	; 255
    1c42:	8c 93       	st	X, r24
    1c44:	1c c0       	rjmp	.+56     	; 0x1c7e <xTaskRemoveFromEventList+0x13e>
    1c46:	4e e7       	ldi	r20, 0x7E	; 126
    1c48:	5c e0       	ldi	r21, 0x0C	; 12
    1c4a:	da 01       	movw	r26, r20
    1c4c:	11 96       	adiw	r26, 0x01	; 1
    1c4e:	cd 91       	ld	r28, X+
    1c50:	dc 91       	ld	r29, X
    1c52:	12 97       	sbiw	r26, 0x02	; 2
    1c54:	d3 8b       	std	Z+19, r29	; 0x13
    1c56:	c2 8b       	std	Z+18, r28	; 0x12
    1c58:	8e 81       	ldd	r24, Y+6	; 0x06
    1c5a:	9f 81       	ldd	r25, Y+7	; 0x07
    1c5c:	95 8b       	std	Z+21, r25	; 0x15
    1c5e:	84 8b       	std	Z+20, r24	; 0x14
    1c60:	8e 81       	ldd	r24, Y+6	; 0x06
    1c62:	9f 81       	ldd	r25, Y+7	; 0x07
    1c64:	dc 01       	movw	r26, r24
    1c66:	15 96       	adiw	r26, 0x05	; 5
    1c68:	3c 93       	st	X, r19
    1c6a:	2e 93       	st	-X, r18
    1c6c:	14 97       	sbiw	r26, 0x04	; 4
    1c6e:	3f 83       	std	Y+7, r19	; 0x07
    1c70:	2e 83       	std	Y+6, r18	; 0x06
    1c72:	51 8f       	std	Z+25, r21	; 0x19
    1c74:	40 8f       	std	Z+24, r20	; 0x18
    1c76:	da 01       	movw	r26, r20
    1c78:	8c 91       	ld	r24, X
    1c7a:	8f 5f       	subi	r24, 0xFF	; 255
    1c7c:	8c 93       	st	X, r24
    1c7e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c80:	e0 91 11 0d 	lds	r30, 0x0D11	; 0x800d11 <pxCurrentTCB>
    1c84:	f0 91 12 0d 	lds	r31, 0x0D12	; 0x800d12 <pxCurrentTCB+0x1>
    1c88:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c8a:	89 17       	cp	r24, r25
    1c8c:	20 f4       	brcc	.+8      	; 0x1c96 <xTaskRemoveFromEventList+0x156>
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	80 93 5b 0c 	sts	0x0C5B, r24	; 0x800c5b <xYieldPending>
    1c94:	01 c0       	rjmp	.+2      	; 0x1c98 <xTaskRemoveFromEventList+0x158>
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	df 91       	pop	r29
    1c9a:	cf 91       	pop	r28
    1c9c:	08 95       	ret

00001c9e <vTaskInternalSetTimeOutState>:
    1c9e:	20 91 5a 0c 	lds	r18, 0x0C5A	; 0x800c5a <xNumOfOverflows>
    1ca2:	fc 01       	movw	r30, r24
    1ca4:	20 83       	st	Z, r18
    1ca6:	40 91 62 0c 	lds	r20, 0x0C62	; 0x800c62 <xTickCount>
    1caa:	50 91 63 0c 	lds	r21, 0x0C63	; 0x800c63 <xTickCount+0x1>
    1cae:	60 91 64 0c 	lds	r22, 0x0C64	; 0x800c64 <xTickCount+0x2>
    1cb2:	70 91 65 0c 	lds	r23, 0x0C65	; 0x800c65 <xTickCount+0x3>
    1cb6:	41 83       	std	Z+1, r20	; 0x01
    1cb8:	52 83       	std	Z+2, r21	; 0x02
    1cba:	63 83       	std	Z+3, r22	; 0x03
    1cbc:	74 83       	std	Z+4, r23	; 0x04
    1cbe:	08 95       	ret

00001cc0 <xTaskCheckForTimeOut>:
    1cc0:	8f 92       	push	r8
    1cc2:	9f 92       	push	r9
    1cc4:	af 92       	push	r10
    1cc6:	bf 92       	push	r11
    1cc8:	cf 92       	push	r12
    1cca:	df 92       	push	r13
    1ccc:	ef 92       	push	r14
    1cce:	ff 92       	push	r15
    1cd0:	0f 93       	push	r16
    1cd2:	1f 93       	push	r17
    1cd4:	cf 93       	push	r28
    1cd6:	df 93       	push	r29
    1cd8:	fb 01       	movw	r30, r22
    1cda:	0f b6       	in	r0, 0x3f	; 63
    1cdc:	f8 94       	cli
    1cde:	0f 92       	push	r0
    1ce0:	c0 90 62 0c 	lds	r12, 0x0C62	; 0x800c62 <xTickCount>
    1ce4:	d0 90 63 0c 	lds	r13, 0x0C63	; 0x800c63 <xTickCount+0x1>
    1ce8:	e0 90 64 0c 	lds	r14, 0x0C64	; 0x800c64 <xTickCount+0x2>
    1cec:	f0 90 65 0c 	lds	r15, 0x0C65	; 0x800c65 <xTickCount+0x3>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	11 96       	adiw	r26, 0x01	; 1
    1cf4:	0d 91       	ld	r16, X+
    1cf6:	1d 91       	ld	r17, X+
    1cf8:	2d 91       	ld	r18, X+
    1cfa:	3c 91       	ld	r19, X
    1cfc:	14 97       	sbiw	r26, 0x04	; 4
    1cfe:	46 01       	movw	r8, r12
    1d00:	57 01       	movw	r10, r14
    1d02:	80 1a       	sub	r8, r16
    1d04:	91 0a       	sbc	r9, r17
    1d06:	a2 0a       	sbc	r10, r18
    1d08:	b3 0a       	sbc	r11, r19
    1d0a:	40 81       	ld	r20, Z
    1d0c:	51 81       	ldd	r21, Z+1	; 0x01
    1d0e:	62 81       	ldd	r22, Z+2	; 0x02
    1d10:	73 81       	ldd	r23, Z+3	; 0x03
    1d12:	4f 3f       	cpi	r20, 0xFF	; 255
    1d14:	bf ef       	ldi	r27, 0xFF	; 255
    1d16:	5b 07       	cpc	r21, r27
    1d18:	6b 07       	cpc	r22, r27
    1d1a:	7b 07       	cpc	r23, r27
    1d1c:	39 f1       	breq	.+78     	; 0x1d6c <xTaskCheckForTimeOut+0xac>
    1d1e:	ec 01       	movw	r28, r24
    1d20:	b8 81       	ld	r27, Y
    1d22:	a0 91 5a 0c 	lds	r26, 0x0C5A	; 0x800c5a <xNumOfOverflows>
    1d26:	ba 17       	cp	r27, r26
    1d28:	59 f0       	breq	.+22     	; 0x1d40 <xTaskCheckForTimeOut+0x80>
    1d2a:	c0 16       	cp	r12, r16
    1d2c:	d1 06       	cpc	r13, r17
    1d2e:	e2 06       	cpc	r14, r18
    1d30:	f3 06       	cpc	r15, r19
    1d32:	30 f0       	brcs	.+12     	; 0x1d40 <xTaskCheckForTimeOut+0x80>
    1d34:	10 82       	st	Z, r1
    1d36:	11 82       	std	Z+1, r1	; 0x01
    1d38:	12 82       	std	Z+2, r1	; 0x02
    1d3a:	13 82       	std	Z+3, r1	; 0x03
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	17 c0       	rjmp	.+46     	; 0x1d6e <xTaskCheckForTimeOut+0xae>
    1d40:	84 16       	cp	r8, r20
    1d42:	95 06       	cpc	r9, r21
    1d44:	a6 06       	cpc	r10, r22
    1d46:	b7 06       	cpc	r11, r23
    1d48:	58 f4       	brcc	.+22     	; 0x1d60 <xTaskCheckForTimeOut+0xa0>
    1d4a:	48 19       	sub	r20, r8
    1d4c:	59 09       	sbc	r21, r9
    1d4e:	6a 09       	sbc	r22, r10
    1d50:	7b 09       	sbc	r23, r11
    1d52:	40 83       	st	Z, r20
    1d54:	51 83       	std	Z+1, r21	; 0x01
    1d56:	62 83       	std	Z+2, r22	; 0x02
    1d58:	73 83       	std	Z+3, r23	; 0x03
    1d5a:	a1 df       	rcall	.-190    	; 0x1c9e <vTaskInternalSetTimeOutState>
    1d5c:	80 e0       	ldi	r24, 0x00	; 0
    1d5e:	07 c0       	rjmp	.+14     	; 0x1d6e <xTaskCheckForTimeOut+0xae>
    1d60:	10 82       	st	Z, r1
    1d62:	11 82       	std	Z+1, r1	; 0x01
    1d64:	12 82       	std	Z+2, r1	; 0x02
    1d66:	13 82       	std	Z+3, r1	; 0x03
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	01 c0       	rjmp	.+2      	; 0x1d6e <xTaskCheckForTimeOut+0xae>
    1d6c:	80 e0       	ldi	r24, 0x00	; 0
    1d6e:	0f 90       	pop	r0
    1d70:	0f be       	out	0x3f, r0	; 63
    1d72:	df 91       	pop	r29
    1d74:	cf 91       	pop	r28
    1d76:	1f 91       	pop	r17
    1d78:	0f 91       	pop	r16
    1d7a:	ff 90       	pop	r15
    1d7c:	ef 90       	pop	r14
    1d7e:	df 90       	pop	r13
    1d80:	cf 90       	pop	r12
    1d82:	bf 90       	pop	r11
    1d84:	af 90       	pop	r10
    1d86:	9f 90       	pop	r9
    1d88:	8f 90       	pop	r8
    1d8a:	08 95       	ret

00001d8c <vTaskMissedYield>:
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	80 93 5b 0c 	sts	0x0C5B, r24	; 0x800c5b <xYieldPending>
    1d92:	08 95       	ret

00001d94 <xTaskGetSchedulerState>:
    1d94:	80 91 60 0c 	lds	r24, 0x0C60	; 0x800c60 <xSchedulerRunning>
    1d98:	88 23       	and	r24, r24
    1d9a:	31 f0       	breq	.+12     	; 0x1da8 <xTaskGetSchedulerState+0x14>
    1d9c:	80 91 52 0c 	lds	r24, 0x0C52	; 0x800c52 <uxSchedulerSuspended>
    1da0:	81 11       	cpse	r24, r1
    1da2:	04 c0       	rjmp	.+8      	; 0x1dac <xTaskGetSchedulerState+0x18>
    1da4:	82 e0       	ldi	r24, 0x02	; 2
    1da6:	08 95       	ret
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	08 95       	ret
    1dac:	80 e0       	ldi	r24, 0x00	; 0
    1dae:	08 95       	ret

00001db0 <xTaskPriorityInherit>:
    1db0:	0f 93       	push	r16
    1db2:	1f 93       	push	r17
    1db4:	cf 93       	push	r28
    1db6:	df 93       	push	r29
    1db8:	fc 01       	movw	r30, r24
    1dba:	89 2b       	or	r24, r25
    1dbc:	09 f4       	brne	.+2      	; 0x1dc0 <xTaskPriorityInherit+0x10>
    1dbe:	77 c0       	rjmp	.+238    	; 0x1eae <xTaskPriorityInherit+0xfe>
    1dc0:	82 8d       	ldd	r24, Z+26	; 0x1a
    1dc2:	a0 91 11 0d 	lds	r26, 0x0D11	; 0x800d11 <pxCurrentTCB>
    1dc6:	b0 91 12 0d 	lds	r27, 0x0D12	; 0x800d12 <pxCurrentTCB+0x1>
    1dca:	5a 96       	adiw	r26, 0x1a	; 26
    1dcc:	9c 91       	ld	r25, X
    1dce:	89 17       	cp	r24, r25
    1dd0:	08 f0       	brcs	.+2      	; 0x1dd4 <xTaskPriorityInherit+0x24>
    1dd2:	63 c0       	rjmp	.+198    	; 0x1e9a <xTaskPriorityInherit+0xea>
    1dd4:	46 85       	ldd	r20, Z+14	; 0x0e
    1dd6:	57 85       	ldd	r21, Z+15	; 0x0f
    1dd8:	60 89       	ldd	r22, Z+16	; 0x10
    1dda:	71 89       	ldd	r23, Z+17	; 0x11
    1ddc:	77 23       	and	r23, r23
    1dde:	94 f0       	brlt	.+36     	; 0x1e04 <xTaskPriorityInherit+0x54>
    1de0:	a0 91 11 0d 	lds	r26, 0x0D11	; 0x800d11 <pxCurrentTCB>
    1de4:	b0 91 12 0d 	lds	r27, 0x0D12	; 0x800d12 <pxCurrentTCB+0x1>
    1de8:	5a 96       	adiw	r26, 0x1a	; 26
    1dea:	9c 91       	ld	r25, X
    1dec:	4a e0       	ldi	r20, 0x0A	; 10
    1dee:	50 e0       	ldi	r21, 0x00	; 0
    1df0:	60 e0       	ldi	r22, 0x00	; 0
    1df2:	70 e0       	ldi	r23, 0x00	; 0
    1df4:	49 1b       	sub	r20, r25
    1df6:	51 09       	sbc	r21, r1
    1df8:	61 09       	sbc	r22, r1
    1dfa:	71 09       	sbc	r23, r1
    1dfc:	46 87       	std	Z+14, r20	; 0x0e
    1dfe:	57 87       	std	Z+15, r21	; 0x0f
    1e00:	60 8b       	std	Z+16, r22	; 0x10
    1e02:	71 8b       	std	Z+17, r23	; 0x11
    1e04:	24 85       	ldd	r18, Z+12	; 0x0c
    1e06:	35 85       	ldd	r19, Z+13	; 0x0d
    1e08:	4b e0       	ldi	r20, 0x0B	; 11
    1e0a:	84 9f       	mul	r24, r20
    1e0c:	c0 01       	movw	r24, r0
    1e0e:	11 24       	eor	r1, r1
    1e10:	8d 55       	subi	r24, 0x5D	; 93
    1e12:	93 4f       	sbci	r25, 0xF3	; 243
    1e14:	28 17       	cp	r18, r24
    1e16:	39 07       	cpc	r19, r25
    1e18:	b9 f5       	brne	.+110    	; 0x1e88 <xTaskPriorityInherit+0xd8>
    1e1a:	ef 01       	movw	r28, r30
    1e1c:	8f 01       	movw	r16, r30
    1e1e:	0e 5f       	subi	r16, 0xFE	; 254
    1e20:	1f 4f       	sbci	r17, 0xFF	; 255
    1e22:	c8 01       	movw	r24, r16
    1e24:	0e 94 57 03 	call	0x6ae	; 0x6ae <uxListRemove>
    1e28:	e0 91 11 0d 	lds	r30, 0x0D11	; 0x800d11 <pxCurrentTCB>
    1e2c:	f0 91 12 0d 	lds	r31, 0x0D12	; 0x800d12 <pxCurrentTCB+0x1>
    1e30:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1e32:	ea 8f       	std	Y+26, r30	; 0x1a
    1e34:	80 91 61 0c 	lds	r24, 0x0C61	; 0x800c61 <uxTopReadyPriority>
    1e38:	8e 17       	cp	r24, r30
    1e3a:	10 f4       	brcc	.+4      	; 0x1e40 <xTaskPriorityInherit+0x90>
    1e3c:	e0 93 61 0c 	sts	0x0C61, r30	; 0x800c61 <uxTopReadyPriority>
    1e40:	8b e0       	ldi	r24, 0x0B	; 11
    1e42:	8e 9f       	mul	r24, r30
    1e44:	f0 01       	movw	r30, r0
    1e46:	11 24       	eor	r1, r1
    1e48:	ed 55       	subi	r30, 0x5D	; 93
    1e4a:	f3 4f       	sbci	r31, 0xF3	; 243
    1e4c:	01 80       	ldd	r0, Z+1	; 0x01
    1e4e:	f2 81       	ldd	r31, Z+2	; 0x02
    1e50:	e0 2d       	mov	r30, r0
    1e52:	ff 83       	std	Y+7, r31	; 0x07
    1e54:	ee 83       	std	Y+6, r30	; 0x06
    1e56:	26 81       	ldd	r18, Z+6	; 0x06
    1e58:	37 81       	ldd	r19, Z+7	; 0x07
    1e5a:	39 87       	std	Y+9, r19	; 0x09
    1e5c:	28 87       	std	Y+8, r18	; 0x08
    1e5e:	a6 81       	ldd	r26, Z+6	; 0x06
    1e60:	b7 81       	ldd	r27, Z+7	; 0x07
    1e62:	15 96       	adiw	r26, 0x05	; 5
    1e64:	1c 93       	st	X, r17
    1e66:	0e 93       	st	-X, r16
    1e68:	14 97       	sbiw	r26, 0x04	; 4
    1e6a:	17 83       	std	Z+7, r17	; 0x07
    1e6c:	06 83       	std	Z+6, r16	; 0x06
    1e6e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1e70:	8e 9f       	mul	r24, r30
    1e72:	f0 01       	movw	r30, r0
    1e74:	11 24       	eor	r1, r1
    1e76:	ed 55       	subi	r30, 0x5D	; 93
    1e78:	f3 4f       	sbci	r31, 0xF3	; 243
    1e7a:	fd 87       	std	Y+13, r31	; 0x0d
    1e7c:	ec 87       	std	Y+12, r30	; 0x0c
    1e7e:	80 81       	ld	r24, Z
    1e80:	8f 5f       	subi	r24, 0xFF	; 255
    1e82:	80 83       	st	Z, r24
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	16 c0       	rjmp	.+44     	; 0x1eb4 <xTaskPriorityInherit+0x104>
    1e88:	a0 91 11 0d 	lds	r26, 0x0D11	; 0x800d11 <pxCurrentTCB>
    1e8c:	b0 91 12 0d 	lds	r27, 0x0D12	; 0x800d12 <pxCurrentTCB+0x1>
    1e90:	5a 96       	adiw	r26, 0x1a	; 26
    1e92:	8c 91       	ld	r24, X
    1e94:	82 8f       	std	Z+26, r24	; 0x1a
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	0d c0       	rjmp	.+26     	; 0x1eb4 <xTaskPriorityInherit+0x104>
    1e9a:	95 a5       	ldd	r25, Z+45	; 0x2d
    1e9c:	e0 91 11 0d 	lds	r30, 0x0D11	; 0x800d11 <pxCurrentTCB>
    1ea0:	f0 91 12 0d 	lds	r31, 0x0D12	; 0x800d12 <pxCurrentTCB+0x1>
    1ea4:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ea6:	98 17       	cp	r25, r24
    1ea8:	20 f0       	brcs	.+8      	; 0x1eb2 <xTaskPriorityInherit+0x102>
    1eaa:	80 e0       	ldi	r24, 0x00	; 0
    1eac:	03 c0       	rjmp	.+6      	; 0x1eb4 <xTaskPriorityInherit+0x104>
    1eae:	80 e0       	ldi	r24, 0x00	; 0
    1eb0:	01 c0       	rjmp	.+2      	; 0x1eb4 <xTaskPriorityInherit+0x104>
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	df 91       	pop	r29
    1eb6:	cf 91       	pop	r28
    1eb8:	1f 91       	pop	r17
    1eba:	0f 91       	pop	r16
    1ebc:	08 95       	ret

00001ebe <xTaskPriorityDisinherit>:
    1ebe:	0f 93       	push	r16
    1ec0:	1f 93       	push	r17
    1ec2:	cf 93       	push	r28
    1ec4:	df 93       	push	r29
    1ec6:	fc 01       	movw	r30, r24
    1ec8:	89 2b       	or	r24, r25
    1eca:	09 f4       	brne	.+2      	; 0x1ece <xTaskPriorityDisinherit+0x10>
    1ecc:	49 c0       	rjmp	.+146    	; 0x1f60 <xTaskPriorityDisinherit+0xa2>
    1ece:	86 a5       	ldd	r24, Z+46	; 0x2e
    1ed0:	81 50       	subi	r24, 0x01	; 1
    1ed2:	86 a7       	std	Z+46, r24	; 0x2e
    1ed4:	22 8d       	ldd	r18, Z+26	; 0x1a
    1ed6:	95 a5       	ldd	r25, Z+45	; 0x2d
    1ed8:	29 17       	cp	r18, r25
    1eda:	09 f4       	brne	.+2      	; 0x1ede <xTaskPriorityDisinherit+0x20>
    1edc:	43 c0       	rjmp	.+134    	; 0x1f64 <xTaskPriorityDisinherit+0xa6>
    1ede:	81 11       	cpse	r24, r1
    1ee0:	43 c0       	rjmp	.+134    	; 0x1f68 <xTaskPriorityDisinherit+0xaa>
    1ee2:	ef 01       	movw	r28, r30
    1ee4:	8f 01       	movw	r16, r30
    1ee6:	0e 5f       	subi	r16, 0xFE	; 254
    1ee8:	1f 4f       	sbci	r17, 0xFF	; 255
    1eea:	c8 01       	movw	r24, r16
    1eec:	0e 94 57 03 	call	0x6ae	; 0x6ae <uxListRemove>
    1ef0:	ed a5       	ldd	r30, Y+45	; 0x2d
    1ef2:	ea 8f       	std	Y+26, r30	; 0x1a
    1ef4:	8a e0       	ldi	r24, 0x0A	; 10
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	a0 e0       	ldi	r26, 0x00	; 0
    1efa:	b0 e0       	ldi	r27, 0x00	; 0
    1efc:	8e 1b       	sub	r24, r30
    1efe:	91 09       	sbc	r25, r1
    1f00:	a1 09       	sbc	r26, r1
    1f02:	b1 09       	sbc	r27, r1
    1f04:	8e 87       	std	Y+14, r24	; 0x0e
    1f06:	9f 87       	std	Y+15, r25	; 0x0f
    1f08:	a8 8b       	std	Y+16, r26	; 0x10
    1f0a:	b9 8b       	std	Y+17, r27	; 0x11
    1f0c:	80 91 61 0c 	lds	r24, 0x0C61	; 0x800c61 <uxTopReadyPriority>
    1f10:	8e 17       	cp	r24, r30
    1f12:	10 f4       	brcc	.+4      	; 0x1f18 <xTaskPriorityDisinherit+0x5a>
    1f14:	e0 93 61 0c 	sts	0x0C61, r30	; 0x800c61 <uxTopReadyPriority>
    1f18:	8b e0       	ldi	r24, 0x0B	; 11
    1f1a:	8e 9f       	mul	r24, r30
    1f1c:	f0 01       	movw	r30, r0
    1f1e:	11 24       	eor	r1, r1
    1f20:	ed 55       	subi	r30, 0x5D	; 93
    1f22:	f3 4f       	sbci	r31, 0xF3	; 243
    1f24:	01 80       	ldd	r0, Z+1	; 0x01
    1f26:	f2 81       	ldd	r31, Z+2	; 0x02
    1f28:	e0 2d       	mov	r30, r0
    1f2a:	ff 83       	std	Y+7, r31	; 0x07
    1f2c:	ee 83       	std	Y+6, r30	; 0x06
    1f2e:	26 81       	ldd	r18, Z+6	; 0x06
    1f30:	37 81       	ldd	r19, Z+7	; 0x07
    1f32:	39 87       	std	Y+9, r19	; 0x09
    1f34:	28 87       	std	Y+8, r18	; 0x08
    1f36:	a6 81       	ldd	r26, Z+6	; 0x06
    1f38:	b7 81       	ldd	r27, Z+7	; 0x07
    1f3a:	15 96       	adiw	r26, 0x05	; 5
    1f3c:	1c 93       	st	X, r17
    1f3e:	0e 93       	st	-X, r16
    1f40:	14 97       	sbiw	r26, 0x04	; 4
    1f42:	17 83       	std	Z+7, r17	; 0x07
    1f44:	06 83       	std	Z+6, r16	; 0x06
    1f46:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1f48:	8e 9f       	mul	r24, r30
    1f4a:	f0 01       	movw	r30, r0
    1f4c:	11 24       	eor	r1, r1
    1f4e:	ed 55       	subi	r30, 0x5D	; 93
    1f50:	f3 4f       	sbci	r31, 0xF3	; 243
    1f52:	fd 87       	std	Y+13, r31	; 0x0d
    1f54:	ec 87       	std	Y+12, r30	; 0x0c
    1f56:	80 81       	ld	r24, Z
    1f58:	8f 5f       	subi	r24, 0xFF	; 255
    1f5a:	80 83       	st	Z, r24
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	05 c0       	rjmp	.+10     	; 0x1f6a <xTaskPriorityDisinherit+0xac>
    1f60:	80 e0       	ldi	r24, 0x00	; 0
    1f62:	03 c0       	rjmp	.+6      	; 0x1f6a <xTaskPriorityDisinherit+0xac>
    1f64:	80 e0       	ldi	r24, 0x00	; 0
    1f66:	01 c0       	rjmp	.+2      	; 0x1f6a <xTaskPriorityDisinherit+0xac>
    1f68:	80 e0       	ldi	r24, 0x00	; 0
    1f6a:	df 91       	pop	r29
    1f6c:	cf 91       	pop	r28
    1f6e:	1f 91       	pop	r17
    1f70:	0f 91       	pop	r16
    1f72:	08 95       	ret

00001f74 <vTaskPriorityDisinheritAfterTimeout>:
    1f74:	0f 93       	push	r16
    1f76:	1f 93       	push	r17
    1f78:	cf 93       	push	r28
    1f7a:	df 93       	push	r29
    1f7c:	fc 01       	movw	r30, r24
    1f7e:	89 2b       	or	r24, r25
    1f80:	09 f4       	brne	.+2      	; 0x1f84 <vTaskPriorityDisinheritAfterTimeout+0x10>
    1f82:	5a c0       	rjmp	.+180    	; 0x2038 <__DATA_REGION_LENGTH__+0x38>
    1f84:	85 a5       	ldd	r24, Z+45	; 0x2d
    1f86:	86 17       	cp	r24, r22
    1f88:	08 f4       	brcc	.+2      	; 0x1f8c <vTaskPriorityDisinheritAfterTimeout+0x18>
    1f8a:	86 2f       	mov	r24, r22
    1f8c:	92 8d       	ldd	r25, Z+26	; 0x1a
    1f8e:	89 17       	cp	r24, r25
    1f90:	09 f4       	brne	.+2      	; 0x1f94 <vTaskPriorityDisinheritAfterTimeout+0x20>
    1f92:	52 c0       	rjmp	.+164    	; 0x2038 <__DATA_REGION_LENGTH__+0x38>
    1f94:	26 a5       	ldd	r18, Z+46	; 0x2e
    1f96:	21 30       	cpi	r18, 0x01	; 1
    1f98:	09 f0       	breq	.+2      	; 0x1f9c <vTaskPriorityDisinheritAfterTimeout+0x28>
    1f9a:	4e c0       	rjmp	.+156    	; 0x2038 <__DATA_REGION_LENGTH__+0x38>
    1f9c:	82 8f       	std	Z+26, r24	; 0x1a
    1f9e:	46 85       	ldd	r20, Z+14	; 0x0e
    1fa0:	57 85       	ldd	r21, Z+15	; 0x0f
    1fa2:	60 89       	ldd	r22, Z+16	; 0x10
    1fa4:	71 89       	ldd	r23, Z+17	; 0x11
    1fa6:	77 23       	and	r23, r23
    1fa8:	64 f0       	brlt	.+24     	; 0x1fc2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    1faa:	4a e0       	ldi	r20, 0x0A	; 10
    1fac:	50 e0       	ldi	r21, 0x00	; 0
    1fae:	60 e0       	ldi	r22, 0x00	; 0
    1fb0:	70 e0       	ldi	r23, 0x00	; 0
    1fb2:	48 1b       	sub	r20, r24
    1fb4:	51 09       	sbc	r21, r1
    1fb6:	61 09       	sbc	r22, r1
    1fb8:	71 09       	sbc	r23, r1
    1fba:	46 87       	std	Z+14, r20	; 0x0e
    1fbc:	57 87       	std	Z+15, r21	; 0x0f
    1fbe:	60 8b       	std	Z+16, r22	; 0x10
    1fc0:	71 8b       	std	Z+17, r23	; 0x11
    1fc2:	24 85       	ldd	r18, Z+12	; 0x0c
    1fc4:	35 85       	ldd	r19, Z+13	; 0x0d
    1fc6:	4b e0       	ldi	r20, 0x0B	; 11
    1fc8:	94 9f       	mul	r25, r20
    1fca:	c0 01       	movw	r24, r0
    1fcc:	11 24       	eor	r1, r1
    1fce:	8d 55       	subi	r24, 0x5D	; 93
    1fd0:	93 4f       	sbci	r25, 0xF3	; 243
    1fd2:	28 17       	cp	r18, r24
    1fd4:	39 07       	cpc	r19, r25
    1fd6:	81 f5       	brne	.+96     	; 0x2038 <__DATA_REGION_LENGTH__+0x38>
    1fd8:	ef 01       	movw	r28, r30
    1fda:	8f 01       	movw	r16, r30
    1fdc:	0e 5f       	subi	r16, 0xFE	; 254
    1fde:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe0:	c8 01       	movw	r24, r16
    1fe2:	0e 94 57 03 	call	0x6ae	; 0x6ae <uxListRemove>
    1fe6:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1fe8:	80 91 61 0c 	lds	r24, 0x0C61	; 0x800c61 <uxTopReadyPriority>
    1fec:	8e 17       	cp	r24, r30
    1fee:	10 f4       	brcc	.+4      	; 0x1ff4 <vTaskPriorityDisinheritAfterTimeout+0x80>
    1ff0:	e0 93 61 0c 	sts	0x0C61, r30	; 0x800c61 <uxTopReadyPriority>
    1ff4:	8b e0       	ldi	r24, 0x0B	; 11
    1ff6:	8e 9f       	mul	r24, r30
    1ff8:	f0 01       	movw	r30, r0
    1ffa:	11 24       	eor	r1, r1
    1ffc:	ed 55       	subi	r30, 0x5D	; 93
    1ffe:	f3 4f       	sbci	r31, 0xF3	; 243
    2000:	01 80       	ldd	r0, Z+1	; 0x01
    2002:	f2 81       	ldd	r31, Z+2	; 0x02
    2004:	e0 2d       	mov	r30, r0
    2006:	ff 83       	std	Y+7, r31	; 0x07
    2008:	ee 83       	std	Y+6, r30	; 0x06
    200a:	26 81       	ldd	r18, Z+6	; 0x06
    200c:	37 81       	ldd	r19, Z+7	; 0x07
    200e:	39 87       	std	Y+9, r19	; 0x09
    2010:	28 87       	std	Y+8, r18	; 0x08
    2012:	a6 81       	ldd	r26, Z+6	; 0x06
    2014:	b7 81       	ldd	r27, Z+7	; 0x07
    2016:	15 96       	adiw	r26, 0x05	; 5
    2018:	1c 93       	st	X, r17
    201a:	0e 93       	st	-X, r16
    201c:	14 97       	sbiw	r26, 0x04	; 4
    201e:	17 83       	std	Z+7, r17	; 0x07
    2020:	06 83       	std	Z+6, r16	; 0x06
    2022:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2024:	8e 9f       	mul	r24, r30
    2026:	f0 01       	movw	r30, r0
    2028:	11 24       	eor	r1, r1
    202a:	ed 55       	subi	r30, 0x5D	; 93
    202c:	f3 4f       	sbci	r31, 0xF3	; 243
    202e:	fd 87       	std	Y+13, r31	; 0x0d
    2030:	ec 87       	std	Y+12, r30	; 0x0c
    2032:	80 81       	ld	r24, Z
    2034:	8f 5f       	subi	r24, 0xFF	; 255
    2036:	80 83       	st	Z, r24
    2038:	df 91       	pop	r29
    203a:	cf 91       	pop	r28
    203c:	1f 91       	pop	r17
    203e:	0f 91       	pop	r16
    2040:	08 95       	ret

00002042 <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    2042:	80 91 11 0d 	lds	r24, 0x0D11	; 0x800d11 <pxCurrentTCB>
    2046:	90 91 12 0d 	lds	r25, 0x0D12	; 0x800d12 <pxCurrentTCB+0x1>
    204a:	89 2b       	or	r24, r25
    204c:	39 f0       	breq	.+14     	; 0x205c <pvTaskIncrementMutexHeldCount+0x1a>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    204e:	e0 91 11 0d 	lds	r30, 0x0D11	; 0x800d11 <pxCurrentTCB>
    2052:	f0 91 12 0d 	lds	r31, 0x0D12	; 0x800d12 <pxCurrentTCB+0x1>
    2056:	86 a5       	ldd	r24, Z+46	; 0x2e
    2058:	8f 5f       	subi	r24, 0xFF	; 255
    205a:	86 a7       	std	Z+46, r24	; 0x2e
        }

        return ( TaskHandle_t ) pxCurrentTCB;
    205c:	80 91 11 0d 	lds	r24, 0x0D11	; 0x800d11 <pxCurrentTCB>
    2060:	90 91 12 0d 	lds	r25, 0x0D12	; 0x800d12 <pxCurrentTCB+0x1>
    }
    2064:	08 95       	ret

00002066 <prvGetNextExpireTime>:
    2066:	dc 01       	movw	r26, r24
    2068:	e0 91 1d 0d 	lds	r30, 0x0D1D	; 0x800d1d <pxCurrentTimerList>
    206c:	f0 91 1e 0d 	lds	r31, 0x0D1E	; 0x800d1e <pxCurrentTimerList+0x1>
    2070:	80 81       	ld	r24, Z
    2072:	91 e0       	ldi	r25, 0x01	; 1
    2074:	81 11       	cpse	r24, r1
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	9c 93       	st	X, r25
    207a:	91 11       	cpse	r25, r1
    207c:	08 c0       	rjmp	.+16     	; 0x208e <prvGetNextExpireTime+0x28>
    207e:	07 80       	ldd	r0, Z+7	; 0x07
    2080:	f0 85       	ldd	r31, Z+8	; 0x08
    2082:	e0 2d       	mov	r30, r0
    2084:	60 81       	ld	r22, Z
    2086:	71 81       	ldd	r23, Z+1	; 0x01
    2088:	82 81       	ldd	r24, Z+2	; 0x02
    208a:	93 81       	ldd	r25, Z+3	; 0x03
    208c:	08 95       	ret
    208e:	60 e0       	ldi	r22, 0x00	; 0
    2090:	70 e0       	ldi	r23, 0x00	; 0
    2092:	cb 01       	movw	r24, r22
    2094:	08 95       	ret

00002096 <prvInsertTimerInActiveList>:
    2096:	cf 92       	push	r12
    2098:	df 92       	push	r13
    209a:	ef 92       	push	r14
    209c:	ff 92       	push	r15
    209e:	0f 93       	push	r16
    20a0:	1f 93       	push	r17
    20a2:	fc 01       	movw	r30, r24
    20a4:	42 83       	std	Z+2, r20	; 0x02
    20a6:	53 83       	std	Z+3, r21	; 0x03
    20a8:	64 83       	std	Z+4, r22	; 0x04
    20aa:	75 83       	std	Z+5, r23	; 0x05
    20ac:	93 87       	std	Z+11, r25	; 0x0b
    20ae:	82 87       	std	Z+10, r24	; 0x0a
    20b0:	04 17       	cp	r16, r20
    20b2:	15 07       	cpc	r17, r21
    20b4:	26 07       	cpc	r18, r22
    20b6:	37 07       	cpc	r19, r23
    20b8:	c0 f0       	brcs	.+48     	; 0x20ea <prvInsertTimerInActiveList+0x54>
    20ba:	0c 19       	sub	r16, r12
    20bc:	1d 09       	sbc	r17, r13
    20be:	2e 09       	sbc	r18, r14
    20c0:	3f 09       	sbc	r19, r15
    20c2:	86 85       	ldd	r24, Z+14	; 0x0e
    20c4:	97 85       	ldd	r25, Z+15	; 0x0f
    20c6:	a0 89       	ldd	r26, Z+16	; 0x10
    20c8:	b1 89       	ldd	r27, Z+17	; 0x11
    20ca:	08 17       	cp	r16, r24
    20cc:	19 07       	cpc	r17, r25
    20ce:	2a 07       	cpc	r18, r26
    20d0:	3b 07       	cpc	r19, r27
    20d2:	00 f5       	brcc	.+64     	; 0x2114 <prvInsertTimerInActiveList+0x7e>
    20d4:	bf 01       	movw	r22, r30
    20d6:	6e 5f       	subi	r22, 0xFE	; 254
    20d8:	7f 4f       	sbci	r23, 0xFF	; 255
    20da:	80 91 1b 0d 	lds	r24, 0x0D1B	; 0x800d1b <pxOverflowTimerList>
    20de:	90 91 1c 0d 	lds	r25, 0x0D1C	; 0x800d1c <pxOverflowTimerList+0x1>
    20e2:	0e 94 1a 03 	call	0x634	; 0x634 <vListInsert>
    20e6:	80 e0       	ldi	r24, 0x00	; 0
    20e8:	18 c0       	rjmp	.+48     	; 0x211a <prvInsertTimerInActiveList+0x84>
    20ea:	0c 15       	cp	r16, r12
    20ec:	1d 05       	cpc	r17, r13
    20ee:	2e 05       	cpc	r18, r14
    20f0:	3f 05       	cpc	r19, r15
    20f2:	28 f4       	brcc	.+10     	; 0x20fe <prvInsertTimerInActiveList+0x68>
    20f4:	4c 15       	cp	r20, r12
    20f6:	5d 05       	cpc	r21, r13
    20f8:	6e 05       	cpc	r22, r14
    20fa:	7f 05       	cpc	r23, r15
    20fc:	68 f4       	brcc	.+26     	; 0x2118 <prvInsertTimerInActiveList+0x82>
    20fe:	bf 01       	movw	r22, r30
    2100:	6e 5f       	subi	r22, 0xFE	; 254
    2102:	7f 4f       	sbci	r23, 0xFF	; 255
    2104:	80 91 1d 0d 	lds	r24, 0x0D1D	; 0x800d1d <pxCurrentTimerList>
    2108:	90 91 1e 0d 	lds	r25, 0x0D1E	; 0x800d1e <pxCurrentTimerList+0x1>
    210c:	0e 94 1a 03 	call	0x634	; 0x634 <vListInsert>
    2110:	80 e0       	ldi	r24, 0x00	; 0
    2112:	03 c0       	rjmp	.+6      	; 0x211a <prvInsertTimerInActiveList+0x84>
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	01 c0       	rjmp	.+2      	; 0x211a <prvInsertTimerInActiveList+0x84>
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	1f 91       	pop	r17
    211c:	0f 91       	pop	r16
    211e:	ff 90       	pop	r15
    2120:	ef 90       	pop	r14
    2122:	df 90       	pop	r13
    2124:	cf 90       	pop	r12
    2126:	08 95       	ret

00002128 <prvCheckForValidListAndQueue>:
    2128:	0f b6       	in	r0, 0x3f	; 63
    212a:	f8 94       	cli
    212c:	0f 92       	push	r0
    212e:	80 91 19 0d 	lds	r24, 0x0D19	; 0x800d19 <xTimerQueue>
    2132:	90 91 1a 0d 	lds	r25, 0x0D1A	; 0x800d1a <xTimerQueue+0x1>
    2136:	89 2b       	or	r24, r25
    2138:	e9 f4       	brne	.+58     	; 0x2174 <prvCheckForValidListAndQueue+0x4c>
    213a:	8a e2       	ldi	r24, 0x2A	; 42
    213c:	9d e0       	ldi	r25, 0x0D	; 13
    213e:	0e 94 05 03 	call	0x60a	; 0x60a <vListInitialise>
    2142:	8f e1       	ldi	r24, 0x1F	; 31
    2144:	9d e0       	ldi	r25, 0x0D	; 13
    2146:	0e 94 05 03 	call	0x60a	; 0x60a <vListInitialise>
    214a:	8a e2       	ldi	r24, 0x2A	; 42
    214c:	9d e0       	ldi	r25, 0x0D	; 13
    214e:	90 93 1e 0d 	sts	0x0D1E, r25	; 0x800d1e <pxCurrentTimerList+0x1>
    2152:	80 93 1d 0d 	sts	0x0D1D, r24	; 0x800d1d <pxCurrentTimerList>
    2156:	8f e1       	ldi	r24, 0x1F	; 31
    2158:	9d e0       	ldi	r25, 0x0D	; 13
    215a:	90 93 1c 0d 	sts	0x0D1C, r25	; 0x800d1c <pxOverflowTimerList+0x1>
    215e:	80 93 1b 0d 	sts	0x0D1B, r24	; 0x800d1b <pxOverflowTimerList>
    2162:	40 e0       	ldi	r20, 0x00	; 0
    2164:	67 e0       	ldi	r22, 0x07	; 7
    2166:	8a e0       	ldi	r24, 0x0A	; 10
    2168:	0e 94 c6 05 	call	0xb8c	; 0xb8c <xQueueGenericCreate>
    216c:	90 93 1a 0d 	sts	0x0D1A, r25	; 0x800d1a <xTimerQueue+0x1>
    2170:	80 93 19 0d 	sts	0x0D19, r24	; 0x800d19 <xTimerQueue>
    2174:	0f 90       	pop	r0
    2176:	0f be       	out	0x3f, r0	; 63
    2178:	08 95       	ret

0000217a <xTimerCreateTimerTask>:
    217a:	ef 92       	push	r14
    217c:	ff 92       	push	r15
    217e:	0f 93       	push	r16
    2180:	d3 df       	rcall	.-90     	; 0x2128 <prvCheckForValidListAndQueue>
    2182:	80 91 19 0d 	lds	r24, 0x0D19	; 0x800d19 <xTimerQueue>
    2186:	90 91 1a 0d 	lds	r25, 0x0D1A	; 0x800d1a <xTimerQueue+0x1>
    218a:	89 2b       	or	r24, r25
    218c:	89 f0       	breq	.+34     	; 0x21b0 <xTimerCreateTimerTask+0x36>
    218e:	0f 2e       	mov	r0, r31
    2190:	f7 e1       	ldi	r31, 0x17	; 23
    2192:	ef 2e       	mov	r14, r31
    2194:	fd e0       	ldi	r31, 0x0D	; 13
    2196:	ff 2e       	mov	r15, r31
    2198:	f0 2d       	mov	r31, r0
    219a:	03 e0       	ldi	r16, 0x03	; 3
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	40 ec       	ldi	r20, 0xC0	; 192
    21a2:	50 e0       	ldi	r21, 0x00	; 0
    21a4:	62 e7       	ldi	r22, 0x72	; 114
    21a6:	72 e0       	ldi	r23, 0x02	; 2
    21a8:	86 e8       	ldi	r24, 0x86	; 134
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	3f d9       	rcall	.-3458   	; 0x142c <xTaskCreate>
    21ae:	01 c0       	rjmp	.+2      	; 0x21b2 <xTimerCreateTimerTask+0x38>
    21b0:	80 e0       	ldi	r24, 0x00	; 0
    21b2:	0f 91       	pop	r16
    21b4:	ff 90       	pop	r15
    21b6:	ef 90       	pop	r14
    21b8:	08 95       	ret

000021ba <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    21ba:	8f 92       	push	r8
    21bc:	9f 92       	push	r9
    21be:	af 92       	push	r10
    21c0:	bf 92       	push	r11
    21c2:	cf 92       	push	r12
    21c4:	df 92       	push	r13
    21c6:	ef 92       	push	r14
    21c8:	ff 92       	push	r15
    21ca:	0f 93       	push	r16
    21cc:	1f 93       	push	r17
    21ce:	cf 93       	push	r28
    21d0:	df 93       	push	r29
    21d2:	cd b7       	in	r28, 0x3d	; 61
    21d4:	de b7       	in	r29, 0x3e	; 62
    21d6:	27 97       	sbiw	r28, 0x07	; 7
    21d8:	0f b6       	in	r0, 0x3f	; 63
    21da:	f8 94       	cli
    21dc:	de bf       	out	0x3e, r29	; 62
    21de:	0f be       	out	0x3f, r0	; 63
    21e0:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    21e2:	e0 91 19 0d 	lds	r30, 0x0D19	; 0x800d19 <xTimerQueue>
    21e6:	f0 91 1a 0d 	lds	r31, 0x0D1A	; 0x800d1a <xTimerQueue+0x1>
    21ea:	30 97       	sbiw	r30, 0x00	; 0
    21ec:	81 f1       	breq	.+96     	; 0x224e <__stack+0x4f>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    21ee:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    21f0:	2a 83       	std	Y+2, r18	; 0x02
    21f2:	3b 83       	std	Y+3, r19	; 0x03
    21f4:	4c 83       	std	Y+4, r20	; 0x04
    21f6:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    21f8:	9f 83       	std	Y+7, r25	; 0x07
    21fa:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    21fc:	66 30       	cpi	r22, 0x06	; 6
    21fe:	f4 f4       	brge	.+60     	; 0x223c <__stack+0x3d>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2200:	c9 dd       	rcall	.-1134   	; 0x1d94 <xTaskGetSchedulerState>
    2202:	82 30       	cpi	r24, 0x02	; 2
    2204:	69 f4       	brne	.+26     	; 0x2220 <__stack+0x21>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2206:	00 e0       	ldi	r16, 0x00	; 0
    2208:	a7 01       	movw	r20, r14
    220a:	96 01       	movw	r18, r12
    220c:	be 01       	movw	r22, r28
    220e:	6f 5f       	subi	r22, 0xFF	; 255
    2210:	7f 4f       	sbci	r23, 0xFF	; 255
    2212:	80 91 19 0d 	lds	r24, 0x0D19	; 0x800d19 <xTimerQueue>
    2216:	90 91 1a 0d 	lds	r25, 0x0D1A	; 0x800d1a <xTimerQueue+0x1>
    221a:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <xQueueGenericSend>
    221e:	18 c0       	rjmp	.+48     	; 0x2250 <__stack+0x51>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2220:	00 e0       	ldi	r16, 0x00	; 0
    2222:	20 e0       	ldi	r18, 0x00	; 0
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	a9 01       	movw	r20, r18
    2228:	be 01       	movw	r22, r28
    222a:	6f 5f       	subi	r22, 0xFF	; 255
    222c:	7f 4f       	sbci	r23, 0xFF	; 255
    222e:	80 91 19 0d 	lds	r24, 0x0D19	; 0x800d19 <xTimerQueue>
    2232:	90 91 1a 0d 	lds	r25, 0x0D1A	; 0x800d1a <xTimerQueue+0x1>
    2236:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <xQueueGenericSend>
    223a:	0a c0       	rjmp	.+20     	; 0x2250 <__stack+0x51>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    223c:	20 e0       	ldi	r18, 0x00	; 0
    223e:	a8 01       	movw	r20, r16
    2240:	be 01       	movw	r22, r28
    2242:	6f 5f       	subi	r22, 0xFF	; 255
    2244:	7f 4f       	sbci	r23, 0xFF	; 255
    2246:	cf 01       	movw	r24, r30
    2248:	0e 94 81 06 	call	0xd02	; 0xd02 <xQueueGenericSendFromISR>
    224c:	01 c0       	rjmp	.+2      	; 0x2250 <__stack+0x51>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    224e:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2250:	27 96       	adiw	r28, 0x07	; 7
    2252:	0f b6       	in	r0, 0x3f	; 63
    2254:	f8 94       	cli
    2256:	de bf       	out	0x3e, r29	; 62
    2258:	0f be       	out	0x3f, r0	; 63
    225a:	cd bf       	out	0x3d, r28	; 61
    225c:	df 91       	pop	r29
    225e:	cf 91       	pop	r28
    2260:	1f 91       	pop	r17
    2262:	0f 91       	pop	r16
    2264:	ff 90       	pop	r15
    2266:	ef 90       	pop	r14
    2268:	df 90       	pop	r13
    226a:	cf 90       	pop	r12
    226c:	bf 90       	pop	r11
    226e:	af 90       	pop	r10
    2270:	9f 90       	pop	r9
    2272:	8f 90       	pop	r8
    2274:	08 95       	ret

00002276 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    2276:	8f 92       	push	r8
    2278:	9f 92       	push	r9
    227a:	af 92       	push	r10
    227c:	bf 92       	push	r11
    227e:	cf 92       	push	r12
    2280:	df 92       	push	r13
    2282:	ef 92       	push	r14
    2284:	ff 92       	push	r15
    2286:	0f 93       	push	r16
    2288:	1f 93       	push	r17
    228a:	cf 93       	push	r28
    228c:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    228e:	3b c0       	rjmp	.+118    	; 0x2306 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2290:	07 80       	ldd	r0, Z+7	; 0x07
    2292:	f0 85       	ldd	r31, Z+8	; 0x08
    2294:	e0 2d       	mov	r30, r0
    2296:	80 80       	ld	r8, Z
    2298:	91 80       	ldd	r9, Z+1	; 0x01
    229a:	a2 80       	ldd	r10, Z+2	; 0x02
    229c:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    229e:	c0 85       	ldd	r28, Z+8	; 0x08
    22a0:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    22a2:	8e 01       	movw	r16, r28
    22a4:	0e 5f       	subi	r16, 0xFE	; 254
    22a6:	1f 4f       	sbci	r17, 0xFF	; 255
    22a8:	c8 01       	movw	r24, r16
    22aa:	0e 94 57 03 	call	0x6ae	; 0x6ae <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    22ae:	ec 89       	ldd	r30, Y+20	; 0x14
    22b0:	fd 89       	ldd	r31, Y+21	; 0x15
    22b2:	ce 01       	movw	r24, r28
    22b4:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    22b6:	8e 89       	ldd	r24, Y+22	; 0x16
    22b8:	82 ff       	sbrs	r24, 2
    22ba:	25 c0       	rjmp	.+74     	; 0x2306 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    22bc:	8e 85       	ldd	r24, Y+14	; 0x0e
    22be:	9f 85       	ldd	r25, Y+15	; 0x0f
    22c0:	a8 89       	ldd	r26, Y+16	; 0x10
    22c2:	b9 89       	ldd	r27, Y+17	; 0x11
    22c4:	88 0d       	add	r24, r8
    22c6:	99 1d       	adc	r25, r9
    22c8:	aa 1d       	adc	r26, r10
    22ca:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    22cc:	88 16       	cp	r8, r24
    22ce:	99 06       	cpc	r9, r25
    22d0:	aa 06       	cpc	r10, r26
    22d2:	bb 06       	cpc	r11, r27
    22d4:	70 f4       	brcc	.+28     	; 0x22f2 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    22d6:	8a 83       	std	Y+2, r24	; 0x02
    22d8:	9b 83       	std	Y+3, r25	; 0x03
    22da:	ac 83       	std	Y+4, r26	; 0x04
    22dc:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    22de:	db 87       	std	Y+11, r29	; 0x0b
    22e0:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    22e2:	b8 01       	movw	r22, r16
    22e4:	80 91 1d 0d 	lds	r24, 0x0D1D	; 0x800d1d <pxCurrentTimerList>
    22e8:	90 91 1e 0d 	lds	r25, 0x0D1E	; 0x800d1e <pxCurrentTimerList+0x1>
    22ec:	0e 94 1a 03 	call	0x634	; 0x634 <vListInsert>
    22f0:	0a c0       	rjmp	.+20     	; 0x2306 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    22f2:	c1 2c       	mov	r12, r1
    22f4:	d1 2c       	mov	r13, r1
    22f6:	76 01       	movw	r14, r12
    22f8:	00 e0       	ldi	r16, 0x00	; 0
    22fa:	10 e0       	ldi	r17, 0x00	; 0
    22fc:	a5 01       	movw	r20, r10
    22fe:	94 01       	movw	r18, r8
    2300:	60 e0       	ldi	r22, 0x00	; 0
    2302:	ce 01       	movw	r24, r28
    2304:	5a df       	rcall	.-332    	; 0x21ba <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2306:	e0 91 1d 0d 	lds	r30, 0x0D1D	; 0x800d1d <pxCurrentTimerList>
    230a:	f0 91 1e 0d 	lds	r31, 0x0D1E	; 0x800d1e <pxCurrentTimerList+0x1>
    230e:	80 81       	ld	r24, Z
    2310:	81 11       	cpse	r24, r1
    2312:	be cf       	rjmp	.-132    	; 0x2290 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    2314:	80 91 1b 0d 	lds	r24, 0x0D1B	; 0x800d1b <pxOverflowTimerList>
    2318:	90 91 1c 0d 	lds	r25, 0x0D1C	; 0x800d1c <pxOverflowTimerList+0x1>
    231c:	90 93 1e 0d 	sts	0x0D1E, r25	; 0x800d1e <pxCurrentTimerList+0x1>
    2320:	80 93 1d 0d 	sts	0x0D1D, r24	; 0x800d1d <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    2324:	f0 93 1c 0d 	sts	0x0D1C, r31	; 0x800d1c <pxOverflowTimerList+0x1>
    2328:	e0 93 1b 0d 	sts	0x0D1B, r30	; 0x800d1b <pxOverflowTimerList>
    }
    232c:	df 91       	pop	r29
    232e:	cf 91       	pop	r28
    2330:	1f 91       	pop	r17
    2332:	0f 91       	pop	r16
    2334:	ff 90       	pop	r15
    2336:	ef 90       	pop	r14
    2338:	df 90       	pop	r13
    233a:	cf 90       	pop	r12
    233c:	bf 90       	pop	r11
    233e:	af 90       	pop	r10
    2340:	9f 90       	pop	r9
    2342:	8f 90       	pop	r8
    2344:	08 95       	ret

00002346 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    2346:	cf 92       	push	r12
    2348:	df 92       	push	r13
    234a:	ef 92       	push	r14
    234c:	ff 92       	push	r15
    234e:	cf 93       	push	r28
    2350:	df 93       	push	r29
    2352:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    2354:	f9 d8       	rcall	.-3598   	; 0x1548 <xTaskGetTickCount>
    2356:	6b 01       	movw	r12, r22
    2358:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    235a:	80 91 13 0d 	lds	r24, 0x0D13	; 0x800d13 <xLastTime.2448>
    235e:	90 91 14 0d 	lds	r25, 0x0D14	; 0x800d14 <xLastTime.2448+0x1>
    2362:	a0 91 15 0d 	lds	r26, 0x0D15	; 0x800d15 <xLastTime.2448+0x2>
    2366:	b0 91 16 0d 	lds	r27, 0x0D16	; 0x800d16 <xLastTime.2448+0x3>
    236a:	c8 16       	cp	r12, r24
    236c:	d9 06       	cpc	r13, r25
    236e:	ea 06       	cpc	r14, r26
    2370:	fb 06       	cpc	r15, r27
        {
            prvSwitchTimerLists();
    2372:	20 f4       	brcc	.+8      	; 0x237c <prvSampleTimeNow+0x36>
    2374:	80 df       	rcall	.-256    	; 0x2276 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	88 83       	st	Y, r24
    237a:	01 c0       	rjmp	.+2      	; 0x237e <prvSampleTimeNow+0x38>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    237c:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    237e:	c0 92 13 0d 	sts	0x0D13, r12	; 0x800d13 <xLastTime.2448>
    2382:	d0 92 14 0d 	sts	0x0D14, r13	; 0x800d14 <xLastTime.2448+0x1>
    2386:	e0 92 15 0d 	sts	0x0D15, r14	; 0x800d15 <xLastTime.2448+0x2>
    238a:	f0 92 16 0d 	sts	0x0D16, r15	; 0x800d16 <xLastTime.2448+0x3>

        return xTimeNow;
    }
    238e:	c7 01       	movw	r24, r14
    2390:	b6 01       	movw	r22, r12
    2392:	df 91       	pop	r29
    2394:	cf 91       	pop	r28
    2396:	ff 90       	pop	r15
    2398:	ef 90       	pop	r14
    239a:	df 90       	pop	r13
    239c:	cf 90       	pop	r12
    239e:	08 95       	ret

000023a0 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    23a0:	4f 92       	push	r4
    23a2:	5f 92       	push	r5
    23a4:	6f 92       	push	r6
    23a6:	7f 92       	push	r7
    23a8:	8f 92       	push	r8
    23aa:	9f 92       	push	r9
    23ac:	af 92       	push	r10
    23ae:	bf 92       	push	r11
    23b0:	cf 92       	push	r12
    23b2:	df 92       	push	r13
    23b4:	ef 92       	push	r14
    23b6:	ff 92       	push	r15
    23b8:	0f 93       	push	r16
    23ba:	1f 93       	push	r17
    23bc:	cf 93       	push	r28
    23be:	df 93       	push	r29
    23c0:	4b 01       	movw	r8, r22
    23c2:	5c 01       	movw	r10, r24
    23c4:	29 01       	movw	r4, r18
    23c6:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    23c8:	e0 91 1d 0d 	lds	r30, 0x0D1D	; 0x800d1d <pxCurrentTimerList>
    23cc:	f0 91 1e 0d 	lds	r31, 0x0D1E	; 0x800d1e <pxCurrentTimerList+0x1>
    23d0:	07 80       	ldd	r0, Z+7	; 0x07
    23d2:	f0 85       	ldd	r31, Z+8	; 0x08
    23d4:	e0 2d       	mov	r30, r0
    23d6:	c0 85       	ldd	r28, Z+8	; 0x08
    23d8:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    23da:	ce 01       	movw	r24, r28
    23dc:	02 96       	adiw	r24, 0x02	; 2
    23de:	0e 94 57 03 	call	0x6ae	; 0x6ae <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    23e2:	8e 89       	ldd	r24, Y+22	; 0x16
    23e4:	82 ff       	sbrs	r24, 2
    23e6:	1b c0       	rjmp	.+54     	; 0x241e <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    23e8:	4e 85       	ldd	r20, Y+14	; 0x0e
    23ea:	5f 85       	ldd	r21, Y+15	; 0x0f
    23ec:	68 89       	ldd	r22, Y+16	; 0x10
    23ee:	79 89       	ldd	r23, Y+17	; 0x11
    23f0:	48 0d       	add	r20, r8
    23f2:	59 1d       	adc	r21, r9
    23f4:	6a 1d       	adc	r22, r10
    23f6:	7b 1d       	adc	r23, r11
    23f8:	75 01       	movw	r14, r10
    23fa:	64 01       	movw	r12, r8
    23fc:	93 01       	movw	r18, r6
    23fe:	82 01       	movw	r16, r4
    2400:	ce 01       	movw	r24, r28
    2402:	49 de       	rcall	.-878    	; 0x2096 <prvInsertTimerInActiveList>
    2404:	88 23       	and	r24, r24
    2406:	69 f0       	breq	.+26     	; 0x2422 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2408:	c1 2c       	mov	r12, r1
    240a:	d1 2c       	mov	r13, r1
    240c:	76 01       	movw	r14, r12
    240e:	00 e0       	ldi	r16, 0x00	; 0
    2410:	10 e0       	ldi	r17, 0x00	; 0
    2412:	a5 01       	movw	r20, r10
    2414:	94 01       	movw	r18, r8
    2416:	60 e0       	ldi	r22, 0x00	; 0
    2418:	ce 01       	movw	r24, r28
    241a:	cf de       	rcall	.-610    	; 0x21ba <xTimerGenericCommand>
    241c:	02 c0       	rjmp	.+4      	; 0x2422 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    241e:	8e 7f       	andi	r24, 0xFE	; 254
    2420:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2422:	ec 89       	ldd	r30, Y+20	; 0x14
    2424:	fd 89       	ldd	r31, Y+21	; 0x15
    2426:	ce 01       	movw	r24, r28
    2428:	19 95       	eicall
    }
    242a:	df 91       	pop	r29
    242c:	cf 91       	pop	r28
    242e:	1f 91       	pop	r17
    2430:	0f 91       	pop	r16
    2432:	ff 90       	pop	r15
    2434:	ef 90       	pop	r14
    2436:	df 90       	pop	r13
    2438:	cf 90       	pop	r12
    243a:	bf 90       	pop	r11
    243c:	af 90       	pop	r10
    243e:	9f 90       	pop	r9
    2440:	8f 90       	pop	r8
    2442:	7f 90       	pop	r7
    2444:	6f 90       	pop	r6
    2446:	5f 90       	pop	r5
    2448:	4f 90       	pop	r4
    244a:	08 95       	ret

0000244c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    244c:	8f 92       	push	r8
    244e:	9f 92       	push	r9
    2450:	af 92       	push	r10
    2452:	bf 92       	push	r11
    2454:	cf 92       	push	r12
    2456:	df 92       	push	r13
    2458:	ef 92       	push	r14
    245a:	ff 92       	push	r15
    245c:	1f 93       	push	r17
    245e:	cf 93       	push	r28
    2460:	df 93       	push	r29
    2462:	1f 92       	push	r1
    2464:	cd b7       	in	r28, 0x3d	; 61
    2466:	de b7       	in	r29, 0x3e	; 62
    2468:	6b 01       	movw	r12, r22
    246a:	7c 01       	movw	r14, r24
    246c:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    246e:	66 d8       	rcall	.-3892   	; 0x153c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2470:	ce 01       	movw	r24, r28
    2472:	01 96       	adiw	r24, 0x01	; 1
    2474:	68 df       	rcall	.-304    	; 0x2346 <prvSampleTimeNow>
    2476:	4b 01       	movw	r8, r22
    2478:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    247a:	89 81       	ldd	r24, Y+1	; 0x01
    247c:	81 11       	cpse	r24, r1
    247e:	2b c0       	rjmp	.+86     	; 0x24d6 <prvProcessTimerOrBlockTask+0x8a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2480:	11 11       	cpse	r17, r1
    2482:	0c c0       	rjmp	.+24     	; 0x249c <prvProcessTimerOrBlockTask+0x50>
    2484:	8c 14       	cp	r8, r12
    2486:	9d 04       	cpc	r9, r13
    2488:	ae 04       	cpc	r10, r14
    248a:	bf 04       	cpc	r11, r15
                {
                    ( void ) xTaskResumeAll();
    248c:	38 f0       	brcs	.+14     	; 0x249c <prvProcessTimerOrBlockTask+0x50>
    248e:	96 d9       	rcall	.-3284   	; 0x17bc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    2490:	a5 01       	movw	r20, r10
    2492:	94 01       	movw	r18, r8
    2494:	c7 01       	movw	r24, r14
    2496:	b6 01       	movw	r22, r12
    2498:	83 df       	rcall	.-250    	; 0x23a0 <prvProcessExpiredTimer>
    249a:	1e c0       	rjmp	.+60     	; 0x24d8 <prvProcessTimerOrBlockTask+0x8c>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    249c:	11 23       	and	r17, r17
    249e:	41 f0       	breq	.+16     	; 0x24b0 <prvProcessTimerOrBlockTask+0x64>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    24a0:	e0 91 1b 0d 	lds	r30, 0x0D1B	; 0x800d1b <pxOverflowTimerList>
    24a4:	f0 91 1c 0d 	lds	r31, 0x0D1C	; 0x800d1c <pxOverflowTimerList+0x1>
    24a8:	80 81       	ld	r24, Z
    24aa:	11 e0       	ldi	r17, 0x01	; 1
    24ac:	81 11       	cpse	r24, r1
    24ae:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    24b0:	b7 01       	movw	r22, r14
    24b2:	a6 01       	movw	r20, r12
    24b4:	48 19       	sub	r20, r8
    24b6:	59 09       	sbc	r21, r9
    24b8:	6a 09       	sbc	r22, r10
    24ba:	7b 09       	sbc	r23, r11
    24bc:	21 2f       	mov	r18, r17
    24be:	80 91 19 0d 	lds	r24, 0x0D19	; 0x800d19 <xTimerQueue>
    24c2:	90 91 1a 0d 	lds	r25, 0x0D1A	; 0x800d1a <xTimerQueue+0x1>
    24c6:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    24ca:	78 d9       	rcall	.-3344   	; 0x17bc <xTaskResumeAll>
    24cc:	81 11       	cpse	r24, r1
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    24ce:	04 c0       	rjmp	.+8      	; 0x24d8 <prvProcessTimerOrBlockTask+0x8c>
    24d0:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <vPortYield>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    24d4:	01 c0       	rjmp	.+2      	; 0x24d8 <prvProcessTimerOrBlockTask+0x8c>
    24d6:	72 d9       	rcall	.-3356   	; 0x17bc <xTaskResumeAll>
            }
        }
    }
    24d8:	0f 90       	pop	r0
    24da:	df 91       	pop	r29
    24dc:	cf 91       	pop	r28
    24de:	1f 91       	pop	r17
    24e0:	ff 90       	pop	r15
    24e2:	ef 90       	pop	r14
    24e4:	df 90       	pop	r13
    24e6:	cf 90       	pop	r12
    24e8:	bf 90       	pop	r11
    24ea:	af 90       	pop	r10
    24ec:	9f 90       	pop	r9
    24ee:	8f 90       	pop	r8
    24f0:	08 95       	ret

000024f2 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    24f2:	af 92       	push	r10
    24f4:	bf 92       	push	r11
    24f6:	cf 92       	push	r12
    24f8:	df 92       	push	r13
    24fa:	ef 92       	push	r14
    24fc:	ff 92       	push	r15
    24fe:	0f 93       	push	r16
    2500:	1f 93       	push	r17
    2502:	cf 93       	push	r28
    2504:	df 93       	push	r29
    2506:	cd b7       	in	r28, 0x3d	; 61
    2508:	de b7       	in	r29, 0x3e	; 62
    250a:	28 97       	sbiw	r28, 0x08	; 8
    250c:	0f b6       	in	r0, 0x3f	; 63
    250e:	f8 94       	cli
    2510:	de bf       	out	0x3e, r29	; 62
    2512:	0f be       	out	0x3f, r0	; 63
    2514:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2516:	81 c0       	rjmp	.+258    	; 0x261a <prvProcessReceivedCommands+0x128>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2518:	89 81       	ldd	r24, Y+1	; 0x01
    251a:	88 23       	and	r24, r24
    251c:	0c f4       	brge	.+2      	; 0x2520 <prvProcessReceivedCommands+0x2e>
    251e:	7d c0       	rjmp	.+250    	; 0x261a <prvProcessReceivedCommands+0x128>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2520:	ae 80       	ldd	r10, Y+6	; 0x06
    2522:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    2524:	d5 01       	movw	r26, r10
    2526:	1c 96       	adiw	r26, 0x0c	; 12
    2528:	8d 91       	ld	r24, X+
    252a:	9c 91       	ld	r25, X
    252c:	1d 97       	sbiw	r26, 0x0d	; 13
    252e:	89 2b       	or	r24, r25
    2530:	21 f0       	breq	.+8      	; 0x253a <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2532:	c5 01       	movw	r24, r10
    2534:	02 96       	adiw	r24, 0x02	; 2
    2536:	0e 94 57 03 	call	0x6ae	; 0x6ae <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    253a:	ce 01       	movw	r24, r28
    253c:	08 96       	adiw	r24, 0x08	; 8
    253e:	03 df       	rcall	.-506    	; 0x2346 <prvSampleTimeNow>
    2540:	8b 01       	movw	r16, r22
    2542:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    2544:	e9 81       	ldd	r30, Y+1	; 0x01
    2546:	0e 2e       	mov	r0, r30
    2548:	00 0c       	add	r0, r0
    254a:	ff 0b       	sbc	r31, r31
    254c:	ea 30       	cpi	r30, 0x0A	; 10
    254e:	f1 05       	cpc	r31, r1
    2550:	08 f0       	brcs	.+2      	; 0x2554 <prvProcessReceivedCommands+0x62>
    2552:	63 c0       	rjmp	.+198    	; 0x261a <prvProcessReceivedCommands+0x128>
    2554:	88 27       	eor	r24, r24
    2556:	ee 58       	subi	r30, 0x8E	; 142
    2558:	ff 4f       	sbci	r31, 0xFF	; 255
    255a:	8f 4f       	sbci	r24, 0xFF	; 255
    255c:	2d c6       	rjmp	.+3162   	; 0x31b8 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    255e:	f5 01       	movw	r30, r10
    2560:	86 89       	ldd	r24, Z+22	; 0x16
    2562:	81 60       	ori	r24, 0x01	; 1
    2564:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    2566:	ca 80       	ldd	r12, Y+2	; 0x02
    2568:	db 80       	ldd	r13, Y+3	; 0x03
    256a:	ec 80       	ldd	r14, Y+4	; 0x04
    256c:	fd 80       	ldd	r15, Y+5	; 0x05
    256e:	46 85       	ldd	r20, Z+14	; 0x0e
    2570:	57 85       	ldd	r21, Z+15	; 0x0f
    2572:	60 89       	ldd	r22, Z+16	; 0x10
    2574:	71 89       	ldd	r23, Z+17	; 0x11
    2576:	4c 0d       	add	r20, r12
    2578:	5d 1d       	adc	r21, r13
    257a:	6e 1d       	adc	r22, r14
    257c:	7f 1d       	adc	r23, r15
    257e:	c5 01       	movw	r24, r10
    2580:	8a dd       	rcall	.-1260   	; 0x2096 <prvInsertTimerInActiveList>
    2582:	88 23       	and	r24, r24
    2584:	09 f4       	brne	.+2      	; 0x2588 <prvProcessReceivedCommands+0x96>
    2586:	49 c0       	rjmp	.+146    	; 0x261a <prvProcessReceivedCommands+0x128>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2588:	d5 01       	movw	r26, r10
    258a:	54 96       	adiw	r26, 0x14	; 20
    258c:	ed 91       	ld	r30, X+
    258e:	fc 91       	ld	r31, X
    2590:	55 97       	sbiw	r26, 0x15	; 21
    2592:	c5 01       	movw	r24, r10
    2594:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2596:	f5 01       	movw	r30, r10
    2598:	86 89       	ldd	r24, Z+22	; 0x16
    259a:	82 ff       	sbrs	r24, 2
    259c:	3e c0       	rjmp	.+124    	; 0x261a <prvProcessReceivedCommands+0x128>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    259e:	4a 81       	ldd	r20, Y+2	; 0x02
    25a0:	5b 81       	ldd	r21, Y+3	; 0x03
    25a2:	6c 81       	ldd	r22, Y+4	; 0x04
    25a4:	7d 81       	ldd	r23, Y+5	; 0x05
    25a6:	86 85       	ldd	r24, Z+14	; 0x0e
    25a8:	97 85       	ldd	r25, Z+15	; 0x0f
    25aa:	a0 89       	ldd	r26, Z+16	; 0x10
    25ac:	b1 89       	ldd	r27, Z+17	; 0x11
    25ae:	9a 01       	movw	r18, r20
    25b0:	ab 01       	movw	r20, r22
    25b2:	28 0f       	add	r18, r24
    25b4:	39 1f       	adc	r19, r25
    25b6:	4a 1f       	adc	r20, r26
    25b8:	5b 1f       	adc	r21, r27
    25ba:	c1 2c       	mov	r12, r1
    25bc:	d1 2c       	mov	r13, r1
    25be:	76 01       	movw	r14, r12
    25c0:	00 e0       	ldi	r16, 0x00	; 0
    25c2:	10 e0       	ldi	r17, 0x00	; 0
    25c4:	60 e0       	ldi	r22, 0x00	; 0
    25c6:	c5 01       	movw	r24, r10
    25c8:	f8 dd       	rcall	.-1040   	; 0x21ba <xTimerGenericCommand>
    25ca:	27 c0       	rjmp	.+78     	; 0x261a <prvProcessReceivedCommands+0x128>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    25cc:	d5 01       	movw	r26, r10
    25ce:	56 96       	adiw	r26, 0x16	; 22
    25d0:	8c 91       	ld	r24, X
    25d2:	56 97       	sbiw	r26, 0x16	; 22
    25d4:	8e 7f       	andi	r24, 0xFE	; 254
    25d6:	56 96       	adiw	r26, 0x16	; 22
    25d8:	8c 93       	st	X, r24
                        break;
    25da:	1f c0       	rjmp	.+62     	; 0x261a <prvProcessReceivedCommands+0x128>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    25dc:	f5 01       	movw	r30, r10
    25de:	86 89       	ldd	r24, Z+22	; 0x16
    25e0:	81 60       	ori	r24, 0x01	; 1
    25e2:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    25e4:	4a 81       	ldd	r20, Y+2	; 0x02
    25e6:	5b 81       	ldd	r21, Y+3	; 0x03
    25e8:	6c 81       	ldd	r22, Y+4	; 0x04
    25ea:	7d 81       	ldd	r23, Y+5	; 0x05
    25ec:	46 87       	std	Z+14, r20	; 0x0e
    25ee:	57 87       	std	Z+15, r21	; 0x0f
    25f0:	60 8b       	std	Z+16, r22	; 0x10
    25f2:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    25f4:	40 0f       	add	r20, r16
    25f6:	51 1f       	adc	r21, r17
    25f8:	62 1f       	adc	r22, r18
    25fa:	73 1f       	adc	r23, r19
    25fc:	68 01       	movw	r12, r16
    25fe:	79 01       	movw	r14, r18
    2600:	c5 01       	movw	r24, r10
    2602:	49 dd       	rcall	.-1390   	; 0x2096 <prvInsertTimerInActiveList>
                        break;
    2604:	0a c0       	rjmp	.+20     	; 0x261a <prvProcessReceivedCommands+0x128>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    2606:	f5 01       	movw	r30, r10
    2608:	86 89       	ldd	r24, Z+22	; 0x16
    260a:	81 fd       	sbrc	r24, 1
    260c:	04 c0       	rjmp	.+8      	; 0x2616 <prvProcessReceivedCommands+0x124>
                                {
                                    vPortFree( pxTimer );
    260e:	c5 01       	movw	r24, r10
    2610:	0e 94 c9 02 	call	0x592	; 0x592 <vPortFree>
    2614:	02 c0       	rjmp	.+4      	; 0x261a <prvProcessReceivedCommands+0x128>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2616:	8e 7f       	andi	r24, 0xFE	; 254
    2618:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    261a:	20 e0       	ldi	r18, 0x00	; 0
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	a9 01       	movw	r20, r18
    2620:	be 01       	movw	r22, r28
    2622:	6f 5f       	subi	r22, 0xFF	; 255
    2624:	7f 4f       	sbci	r23, 0xFF	; 255
    2626:	80 91 19 0d 	lds	r24, 0x0D19	; 0x800d19 <xTimerQueue>
    262a:	90 91 1a 0d 	lds	r25, 0x0D1A	; 0x800d1a <xTimerQueue+0x1>
    262e:	0e 94 bb 06 	call	0xd76	; 0xd76 <xQueueReceive>
    2632:	81 11       	cpse	r24, r1
    2634:	71 cf       	rjmp	.-286    	; 0x2518 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    2636:	28 96       	adiw	r28, 0x08	; 8
    2638:	0f b6       	in	r0, 0x3f	; 63
    263a:	f8 94       	cli
    263c:	de bf       	out	0x3e, r29	; 62
    263e:	0f be       	out	0x3f, r0	; 63
    2640:	cd bf       	out	0x3d, r28	; 61
    2642:	df 91       	pop	r29
    2644:	cf 91       	pop	r28
    2646:	1f 91       	pop	r17
    2648:	0f 91       	pop	r16
    264a:	ff 90       	pop	r15
    264c:	ef 90       	pop	r14
    264e:	df 90       	pop	r13
    2650:	cf 90       	pop	r12
    2652:	bf 90       	pop	r11
    2654:	af 90       	pop	r10
    2656:	08 95       	ret

00002658 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2658:	08 95       	ret

0000265a <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    265a:	84 b1       	in	r24, 0x04	; 4
    265c:	80 68       	ori	r24, 0x80	; 128
    265e:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2660:	85 b1       	in	r24, 0x05	; 5
    2662:	80 68       	ori	r24, 0x80	; 128
    2664:	85 b9       	out	0x05, r24	; 5
    2666:	08 95       	ret

00002668 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    2668:	83 b1       	in	r24, 0x03	; 3
    266a:	80 68       	ori	r24, 0x80	; 128
    266c:	83 b9       	out	0x03, r24	; 3
    266e:	08 95       	ret

00002670 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    2670:	f4 df       	rcall	.-24     	; 0x265a <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2672:	2f ef       	ldi	r18, 0xFF	; 255
    2674:	80 e7       	ldi	r24, 0x70	; 112
    2676:	92 e0       	ldi	r25, 0x02	; 2
    2678:	21 50       	subi	r18, 0x01	; 1
    267a:	80 40       	sbci	r24, 0x00	; 0
    267c:	90 40       	sbci	r25, 0x00	; 0
    267e:	e1 f7       	brne	.-8      	; 0x2678 <vApplicationMallocFailedHook+0x8>
    2680:	00 c0       	rjmp	.+0      	; 0x2682 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    2682:	00 00       	nop
    2684:	f1 df       	rcall	.-30     	; 0x2668 <prvBlinkMainLed>
    2686:	f5 cf       	rjmp	.-22     	; 0x2672 <vApplicationMallocFailedHook+0x2>

00002688 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    2688:	e8 df       	rcall	.-48     	; 0x265a <prvSetMainLedOn>
    268a:	2f ef       	ldi	r18, 0xFF	; 255
    268c:	87 ea       	ldi	r24, 0xA7	; 167
    268e:	91 e6       	ldi	r25, 0x61	; 97
    2690:	21 50       	subi	r18, 0x01	; 1
    2692:	80 40       	sbci	r24, 0x00	; 0
    2694:	90 40       	sbci	r25, 0x00	; 0
    2696:	e1 f7       	brne	.-8      	; 0x2690 <vApplicationStackOverflowHook+0x8>
    2698:	00 c0       	rjmp	.+0      	; 0x269a <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    269a:	00 00       	nop
    269c:	e5 df       	rcall	.-54     	; 0x2668 <prvBlinkMainLed>
    269e:	f5 cf       	rjmp	.-22     	; 0x268a <vApplicationStackOverflowHook+0x2>

000026a0 <usart_getchar>:
    26a0:	cf 93       	push	r28
    26a2:	df 93       	push	r29
    26a4:	1f 92       	push	r1
    26a6:	cd b7       	in	r28, 0x3d	; 61
    26a8:	de b7       	in	r29, 0x3e	; 62
    26aa:	be 01       	movw	r22, r28
    26ac:	6f 5f       	subi	r22, 0xFF	; 255
    26ae:	7f 4f       	sbci	r23, 0xFF	; 255
    26b0:	80 91 35 0d 	lds	r24, 0x0D35	; 0x800d35 <_com_serial_instance>
    26b4:	90 91 36 0d 	lds	r25, 0x0D36	; 0x800d36 <_com_serial_instance+0x1>
    26b8:	01 d1       	rcall	.+514    	; 0x28bc <serial_getByte>
    26ba:	81 11       	cpse	r24, r1
    26bc:	f6 cf       	rjmp	.-20     	; 0x26aa <usart_getchar+0xa>
    26be:	89 81       	ldd	r24, Y+1	; 0x01
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	0f 90       	pop	r0
    26c4:	df 91       	pop	r29
    26c6:	cf 91       	pop	r28
    26c8:	08 95       	ret

000026ca <usart_putchar>:
    26ca:	68 2f       	mov	r22, r24
    26cc:	80 91 35 0d 	lds	r24, 0x0D35	; 0x800d35 <_com_serial_instance>
    26d0:	90 91 36 0d 	lds	r25, 0x0D36	; 0x800d36 <_com_serial_instance+0x1>
    26d4:	c8 d0       	rcall	.+400    	; 0x2866 <serial_sendByte>
    26d6:	80 e0       	ldi	r24, 0x00	; 0
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	08 95       	ret

000026dc <stdio_initialise>:
    26dc:	8f 92       	push	r8
    26de:	9f 92       	push	r9
    26e0:	af 92       	push	r10
    26e2:	cf 92       	push	r12
    26e4:	ef 92       	push	r14
    26e6:	0f 93       	push	r16
    26e8:	81 2c       	mov	r8, r1
    26ea:	91 2c       	mov	r9, r1
    26ec:	68 94       	set
    26ee:	aa 24       	eor	r10, r10
    26f0:	a7 f8       	bld	r10, 7
    26f2:	68 94       	set
    26f4:	cc 24       	eor	r12, r12
    26f6:	c7 f8       	bld	r12, 7
    26f8:	e1 2c       	mov	r14, r1
    26fa:	00 e0       	ldi	r16, 0x00	; 0
    26fc:	23 e0       	ldi	r18, 0x03	; 3
    26fe:	40 e0       	ldi	r20, 0x00	; 0
    2700:	51 ee       	ldi	r21, 0xE1	; 225
    2702:	60 e0       	ldi	r22, 0x00	; 0
    2704:	70 e0       	ldi	r23, 0x00	; 0
    2706:	13 d0       	rcall	.+38     	; 0x272e <serial_create>
    2708:	90 93 36 0d 	sts	0x0D36, r25	; 0x800d36 <_com_serial_instance+0x1>
    270c:	80 93 35 0d 	sts	0x0D35, r24	; 0x800d35 <_com_serial_instance>
    2710:	ed e0       	ldi	r30, 0x0D	; 13
    2712:	fe e0       	ldi	r31, 0x0E	; 14
    2714:	87 e0       	ldi	r24, 0x07	; 7
    2716:	92 e0       	ldi	r25, 0x02	; 2
    2718:	91 83       	std	Z+1, r25	; 0x01
    271a:	80 83       	st	Z, r24
    271c:	93 83       	std	Z+3, r25	; 0x03
    271e:	82 83       	std	Z+2, r24	; 0x02
    2720:	0f 91       	pop	r16
    2722:	ef 90       	pop	r14
    2724:	cf 90       	pop	r12
    2726:	af 90       	pop	r10
    2728:	9f 90       	pop	r9
    272a:	8f 90       	pop	r8
    272c:	08 95       	ret

0000272e <serial_create>:
    272e:	2f 92       	push	r2
    2730:	3f 92       	push	r3
    2732:	4f 92       	push	r4
    2734:	5f 92       	push	r5
    2736:	6f 92       	push	r6
    2738:	7f 92       	push	r7
    273a:	8f 92       	push	r8
    273c:	9f 92       	push	r9
    273e:	af 92       	push	r10
    2740:	cf 92       	push	r12
    2742:	ef 92       	push	r14
    2744:	ff 92       	push	r15
    2746:	0f 93       	push	r16
    2748:	1f 93       	push	r17
    274a:	cf 93       	push	r28
    274c:	df 93       	push	r29
    274e:	cd b7       	in	r28, 0x3d	; 61
    2750:	de b7       	in	r29, 0x3e	; 62
    2752:	f8 2e       	mov	r15, r24
    2754:	2a 01       	movw	r4, r20
    2756:	3b 01       	movw	r6, r22
    2758:	88 e0       	ldi	r24, 0x08	; 8
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	35 d5       	rcall	.+2666   	; 0x31c8 <malloc>
    275e:	8c 01       	movw	r16, r24
    2760:	8f 2d       	mov	r24, r15
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	fc 01       	movw	r30, r24
    2766:	ee 0f       	add	r30, r30
    2768:	ff 1f       	adc	r31, r31
    276a:	e9 5c       	subi	r30, 0xC9	; 201
    276c:	f2 4f       	sbci	r31, 0xF2	; 242
    276e:	11 83       	std	Z+1, r17	; 0x01
    2770:	00 83       	st	Z, r16
    2772:	01 15       	cp	r16, r1
    2774:	11 05       	cpc	r17, r1
    2776:	09 f4       	brne	.+2      	; 0x277a <serial_create+0x4c>
    2778:	64 c0       	rjmp	.+200    	; 0x2842 <serial_create+0x114>
    277a:	88 0f       	add	r24, r24
    277c:	99 1f       	adc	r25, r25
    277e:	fc 01       	movw	r30, r24
    2780:	eb 5e       	subi	r30, 0xEB	; 235
    2782:	fd 4f       	sbci	r31, 0xFD	; 253
    2784:	80 81       	ld	r24, Z
    2786:	91 81       	ldd	r25, Z+1	; 0x01
    2788:	d8 01       	movw	r26, r16
    278a:	8d 93       	st	X+, r24
    278c:	9c 93       	st	X, r25
    278e:	8c 2d       	mov	r24, r12
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	88 0f       	add	r24, r24
    2794:	99 1f       	adc	r25, r25
    2796:	88 0f       	add	r24, r24
    2798:	99 1f       	adc	r25, r25
    279a:	16 d5       	rcall	.+2604   	; 0x31c8 <malloc>
    279c:	1c 01       	movw	r2, r24
    279e:	86 e0       	ldi	r24, 0x06	; 6
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	12 d5       	rcall	.+2596   	; 0x31c8 <malloc>
    27a4:	7c 01       	movw	r14, r24
    27a6:	4c 2d       	mov	r20, r12
    27a8:	b1 01       	movw	r22, r2
    27aa:	00 d3       	rcall	.+1536   	; 0x2dac <fifo_init>
    27ac:	f8 01       	movw	r30, r16
    27ae:	f5 82       	std	Z+5, r15	; 0x05
    27b0:	e4 82       	std	Z+4, r14	; 0x04
    27b2:	8a 2d       	mov	r24, r10
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	88 0f       	add	r24, r24
    27b8:	99 1f       	adc	r25, r25
    27ba:	88 0f       	add	r24, r24
    27bc:	99 1f       	adc	r25, r25
    27be:	04 d5       	rcall	.+2568   	; 0x31c8 <malloc>
    27c0:	1c 01       	movw	r2, r24
    27c2:	86 e0       	ldi	r24, 0x06	; 6
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	00 d5       	rcall	.+2560   	; 0x31c8 <malloc>
    27c8:	7c 01       	movw	r14, r24
    27ca:	4a 2d       	mov	r20, r10
    27cc:	b1 01       	movw	r22, r2
    27ce:	ee d2       	rcall	.+1500   	; 0x2dac <fifo_init>
    27d0:	d8 01       	movw	r26, r16
    27d2:	13 96       	adiw	r26, 0x03	; 3
    27d4:	fc 92       	st	X, r15
    27d6:	ee 92       	st	-X, r14
    27d8:	12 97       	sbiw	r26, 0x02	; 2
    27da:	17 96       	adiw	r26, 0x07	; 7
    27dc:	9c 92       	st	X, r9
    27de:	8e 92       	st	-X, r8
    27e0:	16 97       	sbiw	r26, 0x06	; 6
    27e2:	ff b6       	in	r15, 0x3f	; 63
    27e4:	f8 94       	cli
    27e6:	ed 91       	ld	r30, X+
    27e8:	fc 91       	ld	r31, X
    27ea:	11 97       	sbiw	r26, 0x01	; 1
    27ec:	36 97       	sbiw	r30, 0x06	; 6
    27ee:	80 81       	ld	r24, Z
    27f0:	82 60       	ori	r24, 0x02	; 2
    27f2:	80 83       	st	Z, r24
    27f4:	8d 90       	ld	r8, X+
    27f6:	9c 90       	ld	r9, X
    27f8:	c3 01       	movw	r24, r6
    27fa:	b2 01       	movw	r22, r4
    27fc:	ec d3       	rcall	.+2008   	; 0x2fd6 <__floatunsisf>
    27fe:	20 e0       	ldi	r18, 0x00	; 0
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	40 e0       	ldi	r20, 0x00	; 0
    2804:	51 e4       	ldi	r21, 0x41	; 65
    2806:	75 d4       	rcall	.+2282   	; 0x30f2 <__mulsf3>
    2808:	9b 01       	movw	r18, r22
    280a:	ac 01       	movw	r20, r24
    280c:	60 e0       	ldi	r22, 0x00	; 0
    280e:	74 e2       	ldi	r23, 0x24	; 36
    2810:	84 e7       	ldi	r24, 0x74	; 116
    2812:	9b e4       	ldi	r25, 0x4B	; 75
    2814:	4c d3       	rcall	.+1688   	; 0x2eae <__divsf3>
    2816:	20 e0       	ldi	r18, 0x00	; 0
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	40 e8       	ldi	r20, 0x80	; 128
    281c:	5f e3       	ldi	r21, 0x3F	; 63
    281e:	e2 d2       	rcall	.+1476   	; 0x2de4 <__subsf3>
    2820:	ae d3       	rcall	.+1884   	; 0x2f7e <__fixunssfsi>
    2822:	f4 01       	movw	r30, r8
    2824:	32 97       	sbiw	r30, 0x02	; 2
    2826:	60 83       	st	Z, r22
    2828:	d8 01       	movw	r26, r16
    282a:	ed 91       	ld	r30, X+
    282c:	fc 91       	ld	r31, X
    282e:	11 97       	sbiw	r26, 0x01	; 1
    2830:	35 97       	sbiw	r30, 0x05	; 5
    2832:	88 e9       	ldi	r24, 0x98	; 152
    2834:	80 83       	st	Z, r24
    2836:	ed 91       	ld	r30, X+
    2838:	fc 91       	ld	r31, X
    283a:	34 97       	sbiw	r30, 0x04	; 4
    283c:	86 e0       	ldi	r24, 0x06	; 6
    283e:	80 83       	st	Z, r24
    2840:	ff be       	out	0x3f, r15	; 63
    2842:	c8 01       	movw	r24, r16
    2844:	df 91       	pop	r29
    2846:	cf 91       	pop	r28
    2848:	1f 91       	pop	r17
    284a:	0f 91       	pop	r16
    284c:	ff 90       	pop	r15
    284e:	ef 90       	pop	r14
    2850:	cf 90       	pop	r12
    2852:	af 90       	pop	r10
    2854:	9f 90       	pop	r9
    2856:	8f 90       	pop	r8
    2858:	7f 90       	pop	r7
    285a:	6f 90       	pop	r6
    285c:	5f 90       	pop	r5
    285e:	4f 90       	pop	r4
    2860:	3f 90       	pop	r3
    2862:	2f 90       	pop	r2
    2864:	08 95       	ret

00002866 <serial_sendByte>:
    2866:	cf 93       	push	r28
    2868:	df 93       	push	r29
    286a:	dc 01       	movw	r26, r24
    286c:	89 2b       	or	r24, r25
    286e:	01 f1       	breq	.+64     	; 0x28b0 <serial_sendByte+0x4a>
    2870:	12 96       	adiw	r26, 0x02	; 2
    2872:	ed 91       	ld	r30, X+
    2874:	fc 91       	ld	r31, X
    2876:	13 97       	sbiw	r26, 0x03	; 3
    2878:	93 81       	ldd	r25, Z+3	; 0x03
    287a:	82 81       	ldd	r24, Z+2	; 0x02
    287c:	25 81       	ldd	r18, Z+5	; 0x05
    287e:	98 1b       	sub	r25, r24
    2880:	92 23       	and	r25, r18
    2882:	84 81       	ldd	r24, Z+4	; 0x04
    2884:	98 17       	cp	r25, r24
    2886:	b1 f0       	breq	.+44     	; 0x28b4 <serial_sendByte+0x4e>
    2888:	83 81       	ldd	r24, Z+3	; 0x03
    288a:	26 95       	lsr	r18
    288c:	28 23       	and	r18, r24
    288e:	c0 81       	ld	r28, Z
    2890:	d1 81       	ldd	r29, Z+1	; 0x01
    2892:	c2 0f       	add	r28, r18
    2894:	d1 1d       	adc	r29, r1
    2896:	68 83       	st	Y, r22
    2898:	8f 5f       	subi	r24, 0xFF	; 255
    289a:	95 81       	ldd	r25, Z+5	; 0x05
    289c:	89 23       	and	r24, r25
    289e:	83 83       	std	Z+3, r24	; 0x03
    28a0:	ed 91       	ld	r30, X+
    28a2:	fc 91       	ld	r31, X
    28a4:	35 97       	sbiw	r30, 0x05	; 5
    28a6:	80 81       	ld	r24, Z
    28a8:	80 62       	ori	r24, 0x20	; 32
    28aa:	80 83       	st	Z, r24
    28ac:	80 e0       	ldi	r24, 0x00	; 0
    28ae:	03 c0       	rjmp	.+6      	; 0x28b6 <serial_sendByte+0x50>
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	01 c0       	rjmp	.+2      	; 0x28b6 <serial_sendByte+0x50>
    28b4:	82 e0       	ldi	r24, 0x02	; 2
    28b6:	df 91       	pop	r29
    28b8:	cf 91       	pop	r28
    28ba:	08 95       	ret

000028bc <serial_getByte>:
    28bc:	00 97       	sbiw	r24, 0x00	; 0
    28be:	d1 f0       	breq	.+52     	; 0x28f4 <serial_getByte+0x38>
    28c0:	dc 01       	movw	r26, r24
    28c2:	14 96       	adiw	r26, 0x04	; 4
    28c4:	ed 91       	ld	r30, X+
    28c6:	fc 91       	ld	r31, X
    28c8:	15 97       	sbiw	r26, 0x05	; 5
    28ca:	93 81       	ldd	r25, Z+3	; 0x03
    28cc:	82 81       	ldd	r24, Z+2	; 0x02
    28ce:	98 17       	cp	r25, r24
    28d0:	99 f0       	breq	.+38     	; 0x28f8 <serial_getByte+0x3c>
    28d2:	92 81       	ldd	r25, Z+2	; 0x02
    28d4:	85 81       	ldd	r24, Z+5	; 0x05
    28d6:	86 95       	lsr	r24
    28d8:	89 23       	and	r24, r25
    28da:	a0 81       	ld	r26, Z
    28dc:	b1 81       	ldd	r27, Z+1	; 0x01
    28de:	a8 0f       	add	r26, r24
    28e0:	b1 1d       	adc	r27, r1
    28e2:	8c 91       	ld	r24, X
    28e4:	db 01       	movw	r26, r22
    28e6:	8c 93       	st	X, r24
    28e8:	9f 5f       	subi	r25, 0xFF	; 255
    28ea:	85 81       	ldd	r24, Z+5	; 0x05
    28ec:	98 23       	and	r25, r24
    28ee:	92 83       	std	Z+2, r25	; 0x02
    28f0:	80 e0       	ldi	r24, 0x00	; 0
    28f2:	08 95       	ret
    28f4:	81 e0       	ldi	r24, 0x01	; 1
    28f6:	08 95       	ret
    28f8:	83 e0       	ldi	r24, 0x03	; 3
    28fa:	08 95       	ret

000028fc <__vector_25>:
    28fc:	1f 92       	push	r1
    28fe:	0f 92       	push	r0
    2900:	0f b6       	in	r0, 0x3f	; 63
    2902:	0f 92       	push	r0
    2904:	11 24       	eor	r1, r1
    2906:	0b b6       	in	r0, 0x3b	; 59
    2908:	0f 92       	push	r0
    290a:	2f 93       	push	r18
    290c:	3f 93       	push	r19
    290e:	4f 93       	push	r20
    2910:	5f 93       	push	r21
    2912:	6f 93       	push	r22
    2914:	7f 93       	push	r23
    2916:	8f 93       	push	r24
    2918:	9f 93       	push	r25
    291a:	af 93       	push	r26
    291c:	bf 93       	push	r27
    291e:	cf 93       	push	r28
    2920:	df 93       	push	r29
    2922:	ef 93       	push	r30
    2924:	ff 93       	push	r31
    2926:	a0 91 37 0d 	lds	r26, 0x0D37	; 0x800d37 <_ser_handle>
    292a:	b0 91 38 0d 	lds	r27, 0x0D38	; 0x800d38 <_ser_handle+0x1>
    292e:	10 97       	sbiw	r26, 0x00	; 0
    2930:	11 f1       	breq	.+68     	; 0x2976 <__vector_25+0x7a>
    2932:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    2936:	14 96       	adiw	r26, 0x04	; 4
    2938:	ed 91       	ld	r30, X+
    293a:	fc 91       	ld	r31, X
    293c:	15 97       	sbiw	r26, 0x05	; 5
    293e:	93 81       	ldd	r25, Z+3	; 0x03
    2940:	82 81       	ldd	r24, Z+2	; 0x02
    2942:	25 81       	ldd	r18, Z+5	; 0x05
    2944:	98 1b       	sub	r25, r24
    2946:	92 23       	and	r25, r18
    2948:	84 81       	ldd	r24, Z+4	; 0x04
    294a:	98 17       	cp	r25, r24
    294c:	61 f0       	breq	.+24     	; 0x2966 <__vector_25+0x6a>
    294e:	83 81       	ldd	r24, Z+3	; 0x03
    2950:	26 95       	lsr	r18
    2952:	28 23       	and	r18, r24
    2954:	c0 81       	ld	r28, Z
    2956:	d1 81       	ldd	r29, Z+1	; 0x01
    2958:	c2 0f       	add	r28, r18
    295a:	d1 1d       	adc	r29, r1
    295c:	68 83       	st	Y, r22
    295e:	8f 5f       	subi	r24, 0xFF	; 255
    2960:	95 81       	ldd	r25, Z+5	; 0x05
    2962:	89 23       	and	r24, r25
    2964:	83 83       	std	Z+3, r24	; 0x03
    2966:	16 96       	adiw	r26, 0x06	; 6
    2968:	ed 91       	ld	r30, X+
    296a:	fc 91       	ld	r31, X
    296c:	17 97       	sbiw	r26, 0x07	; 7
    296e:	30 97       	sbiw	r30, 0x00	; 0
    2970:	11 f0       	breq	.+4      	; 0x2976 <__vector_25+0x7a>
    2972:	cd 01       	movw	r24, r26
    2974:	19 95       	eicall
    2976:	ff 91       	pop	r31
    2978:	ef 91       	pop	r30
    297a:	df 91       	pop	r29
    297c:	cf 91       	pop	r28
    297e:	bf 91       	pop	r27
    2980:	af 91       	pop	r26
    2982:	9f 91       	pop	r25
    2984:	8f 91       	pop	r24
    2986:	7f 91       	pop	r23
    2988:	6f 91       	pop	r22
    298a:	5f 91       	pop	r21
    298c:	4f 91       	pop	r20
    298e:	3f 91       	pop	r19
    2990:	2f 91       	pop	r18
    2992:	0f 90       	pop	r0
    2994:	0b be       	out	0x3b, r0	; 59
    2996:	0f 90       	pop	r0
    2998:	0f be       	out	0x3f, r0	; 63
    299a:	0f 90       	pop	r0
    299c:	1f 90       	pop	r1
    299e:	18 95       	reti

000029a0 <__vector_26>:
    29a0:	1f 92       	push	r1
    29a2:	0f 92       	push	r0
    29a4:	0f b6       	in	r0, 0x3f	; 63
    29a6:	0f 92       	push	r0
    29a8:	11 24       	eor	r1, r1
    29aa:	0b b6       	in	r0, 0x3b	; 59
    29ac:	0f 92       	push	r0
    29ae:	2f 93       	push	r18
    29b0:	8f 93       	push	r24
    29b2:	9f 93       	push	r25
    29b4:	af 93       	push	r26
    29b6:	bf 93       	push	r27
    29b8:	ef 93       	push	r30
    29ba:	ff 93       	push	r31
    29bc:	e0 91 37 0d 	lds	r30, 0x0D37	; 0x800d37 <_ser_handle>
    29c0:	f0 91 38 0d 	lds	r31, 0x0D38	; 0x800d38 <_ser_handle+0x1>
    29c4:	30 97       	sbiw	r30, 0x00	; 0
    29c6:	b9 f0       	breq	.+46     	; 0x29f6 <__vector_26+0x56>
    29c8:	02 80       	ldd	r0, Z+2	; 0x02
    29ca:	f3 81       	ldd	r31, Z+3	; 0x03
    29cc:	e0 2d       	mov	r30, r0
    29ce:	93 81       	ldd	r25, Z+3	; 0x03
    29d0:	82 81       	ldd	r24, Z+2	; 0x02
    29d2:	98 17       	cp	r25, r24
    29d4:	b1 f0       	breq	.+44     	; 0x2a02 <__vector_26+0x62>
    29d6:	92 81       	ldd	r25, Z+2	; 0x02
    29d8:	85 81       	ldd	r24, Z+5	; 0x05
    29da:	28 2f       	mov	r18, r24
    29dc:	26 95       	lsr	r18
    29de:	29 23       	and	r18, r25
    29e0:	a0 81       	ld	r26, Z
    29e2:	b1 81       	ldd	r27, Z+1	; 0x01
    29e4:	a2 0f       	add	r26, r18
    29e6:	b1 1d       	adc	r27, r1
    29e8:	2c 91       	ld	r18, X
    29ea:	9f 5f       	subi	r25, 0xFF	; 255
    29ec:	89 23       	and	r24, r25
    29ee:	82 83       	std	Z+2, r24	; 0x02
    29f0:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    29f4:	0b c0       	rjmp	.+22     	; 0x2a0c <__vector_26+0x6c>
    29f6:	e1 ec       	ldi	r30, 0xC1	; 193
    29f8:	f0 e0       	ldi	r31, 0x00	; 0
    29fa:	80 81       	ld	r24, Z
    29fc:	8f 7d       	andi	r24, 0xDF	; 223
    29fe:	80 83       	st	Z, r24
    2a00:	05 c0       	rjmp	.+10     	; 0x2a0c <__vector_26+0x6c>
    2a02:	e1 ec       	ldi	r30, 0xC1	; 193
    2a04:	f0 e0       	ldi	r31, 0x00	; 0
    2a06:	80 81       	ld	r24, Z
    2a08:	8f 7d       	andi	r24, 0xDF	; 223
    2a0a:	80 83       	st	Z, r24
    2a0c:	ff 91       	pop	r31
    2a0e:	ef 91       	pop	r30
    2a10:	bf 91       	pop	r27
    2a12:	af 91       	pop	r26
    2a14:	9f 91       	pop	r25
    2a16:	8f 91       	pop	r24
    2a18:	2f 91       	pop	r18
    2a1a:	0f 90       	pop	r0
    2a1c:	0b be       	out	0x3b, r0	; 59
    2a1e:	0f 90       	pop	r0
    2a20:	0f be       	out	0x3f, r0	; 63
    2a22:	0f 90       	pop	r0
    2a24:	1f 90       	pop	r1
    2a26:	18 95       	reti

00002a28 <__vector_36>:
    2a28:	1f 92       	push	r1
    2a2a:	0f 92       	push	r0
    2a2c:	0f b6       	in	r0, 0x3f	; 63
    2a2e:	0f 92       	push	r0
    2a30:	11 24       	eor	r1, r1
    2a32:	0b b6       	in	r0, 0x3b	; 59
    2a34:	0f 92       	push	r0
    2a36:	2f 93       	push	r18
    2a38:	3f 93       	push	r19
    2a3a:	4f 93       	push	r20
    2a3c:	5f 93       	push	r21
    2a3e:	6f 93       	push	r22
    2a40:	7f 93       	push	r23
    2a42:	8f 93       	push	r24
    2a44:	9f 93       	push	r25
    2a46:	af 93       	push	r26
    2a48:	bf 93       	push	r27
    2a4a:	cf 93       	push	r28
    2a4c:	df 93       	push	r29
    2a4e:	ef 93       	push	r30
    2a50:	ff 93       	push	r31
    2a52:	a0 91 39 0d 	lds	r26, 0x0D39	; 0x800d39 <_ser_handle+0x2>
    2a56:	b0 91 3a 0d 	lds	r27, 0x0D3A	; 0x800d3a <_ser_handle+0x3>
    2a5a:	10 97       	sbiw	r26, 0x00	; 0
    2a5c:	11 f1       	breq	.+68     	; 0x2aa2 <__vector_36+0x7a>
    2a5e:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    2a62:	14 96       	adiw	r26, 0x04	; 4
    2a64:	ed 91       	ld	r30, X+
    2a66:	fc 91       	ld	r31, X
    2a68:	15 97       	sbiw	r26, 0x05	; 5
    2a6a:	93 81       	ldd	r25, Z+3	; 0x03
    2a6c:	82 81       	ldd	r24, Z+2	; 0x02
    2a6e:	25 81       	ldd	r18, Z+5	; 0x05
    2a70:	98 1b       	sub	r25, r24
    2a72:	92 23       	and	r25, r18
    2a74:	84 81       	ldd	r24, Z+4	; 0x04
    2a76:	98 17       	cp	r25, r24
    2a78:	61 f0       	breq	.+24     	; 0x2a92 <__vector_36+0x6a>
    2a7a:	83 81       	ldd	r24, Z+3	; 0x03
    2a7c:	26 95       	lsr	r18
    2a7e:	28 23       	and	r18, r24
    2a80:	c0 81       	ld	r28, Z
    2a82:	d1 81       	ldd	r29, Z+1	; 0x01
    2a84:	c2 0f       	add	r28, r18
    2a86:	d1 1d       	adc	r29, r1
    2a88:	68 83       	st	Y, r22
    2a8a:	8f 5f       	subi	r24, 0xFF	; 255
    2a8c:	95 81       	ldd	r25, Z+5	; 0x05
    2a8e:	89 23       	and	r24, r25
    2a90:	83 83       	std	Z+3, r24	; 0x03
    2a92:	16 96       	adiw	r26, 0x06	; 6
    2a94:	ed 91       	ld	r30, X+
    2a96:	fc 91       	ld	r31, X
    2a98:	17 97       	sbiw	r26, 0x07	; 7
    2a9a:	30 97       	sbiw	r30, 0x00	; 0
    2a9c:	11 f0       	breq	.+4      	; 0x2aa2 <__vector_36+0x7a>
    2a9e:	cd 01       	movw	r24, r26
    2aa0:	19 95       	eicall
    2aa2:	ff 91       	pop	r31
    2aa4:	ef 91       	pop	r30
    2aa6:	df 91       	pop	r29
    2aa8:	cf 91       	pop	r28
    2aaa:	bf 91       	pop	r27
    2aac:	af 91       	pop	r26
    2aae:	9f 91       	pop	r25
    2ab0:	8f 91       	pop	r24
    2ab2:	7f 91       	pop	r23
    2ab4:	6f 91       	pop	r22
    2ab6:	5f 91       	pop	r21
    2ab8:	4f 91       	pop	r20
    2aba:	3f 91       	pop	r19
    2abc:	2f 91       	pop	r18
    2abe:	0f 90       	pop	r0
    2ac0:	0b be       	out	0x3b, r0	; 59
    2ac2:	0f 90       	pop	r0
    2ac4:	0f be       	out	0x3f, r0	; 63
    2ac6:	0f 90       	pop	r0
    2ac8:	1f 90       	pop	r1
    2aca:	18 95       	reti

00002acc <__vector_37>:
    2acc:	1f 92       	push	r1
    2ace:	0f 92       	push	r0
    2ad0:	0f b6       	in	r0, 0x3f	; 63
    2ad2:	0f 92       	push	r0
    2ad4:	11 24       	eor	r1, r1
    2ad6:	0b b6       	in	r0, 0x3b	; 59
    2ad8:	0f 92       	push	r0
    2ada:	2f 93       	push	r18
    2adc:	8f 93       	push	r24
    2ade:	9f 93       	push	r25
    2ae0:	af 93       	push	r26
    2ae2:	bf 93       	push	r27
    2ae4:	ef 93       	push	r30
    2ae6:	ff 93       	push	r31
    2ae8:	e0 91 39 0d 	lds	r30, 0x0D39	; 0x800d39 <_ser_handle+0x2>
    2aec:	f0 91 3a 0d 	lds	r31, 0x0D3A	; 0x800d3a <_ser_handle+0x3>
    2af0:	30 97       	sbiw	r30, 0x00	; 0
    2af2:	b9 f0       	breq	.+46     	; 0x2b22 <__vector_37+0x56>
    2af4:	02 80       	ldd	r0, Z+2	; 0x02
    2af6:	f3 81       	ldd	r31, Z+3	; 0x03
    2af8:	e0 2d       	mov	r30, r0
    2afa:	93 81       	ldd	r25, Z+3	; 0x03
    2afc:	82 81       	ldd	r24, Z+2	; 0x02
    2afe:	98 17       	cp	r25, r24
    2b00:	b1 f0       	breq	.+44     	; 0x2b2e <__vector_37+0x62>
    2b02:	92 81       	ldd	r25, Z+2	; 0x02
    2b04:	85 81       	ldd	r24, Z+5	; 0x05
    2b06:	28 2f       	mov	r18, r24
    2b08:	26 95       	lsr	r18
    2b0a:	29 23       	and	r18, r25
    2b0c:	a0 81       	ld	r26, Z
    2b0e:	b1 81       	ldd	r27, Z+1	; 0x01
    2b10:	a2 0f       	add	r26, r18
    2b12:	b1 1d       	adc	r27, r1
    2b14:	2c 91       	ld	r18, X
    2b16:	9f 5f       	subi	r25, 0xFF	; 255
    2b18:	89 23       	and	r24, r25
    2b1a:	82 83       	std	Z+2, r24	; 0x02
    2b1c:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    2b20:	0b c0       	rjmp	.+22     	; 0x2b38 <__vector_37+0x6c>
    2b22:	e9 ec       	ldi	r30, 0xC9	; 201
    2b24:	f0 e0       	ldi	r31, 0x00	; 0
    2b26:	80 81       	ld	r24, Z
    2b28:	8f 7d       	andi	r24, 0xDF	; 223
    2b2a:	80 83       	st	Z, r24
    2b2c:	05 c0       	rjmp	.+10     	; 0x2b38 <__vector_37+0x6c>
    2b2e:	e9 ec       	ldi	r30, 0xC9	; 201
    2b30:	f0 e0       	ldi	r31, 0x00	; 0
    2b32:	80 81       	ld	r24, Z
    2b34:	8f 7d       	andi	r24, 0xDF	; 223
    2b36:	80 83       	st	Z, r24
    2b38:	ff 91       	pop	r31
    2b3a:	ef 91       	pop	r30
    2b3c:	bf 91       	pop	r27
    2b3e:	af 91       	pop	r26
    2b40:	9f 91       	pop	r25
    2b42:	8f 91       	pop	r24
    2b44:	2f 91       	pop	r18
    2b46:	0f 90       	pop	r0
    2b48:	0b be       	out	0x3b, r0	; 59
    2b4a:	0f 90       	pop	r0
    2b4c:	0f be       	out	0x3f, r0	; 63
    2b4e:	0f 90       	pop	r0
    2b50:	1f 90       	pop	r1
    2b52:	18 95       	reti

00002b54 <__vector_51>:
    2b54:	1f 92       	push	r1
    2b56:	0f 92       	push	r0
    2b58:	0f b6       	in	r0, 0x3f	; 63
    2b5a:	0f 92       	push	r0
    2b5c:	11 24       	eor	r1, r1
    2b5e:	0b b6       	in	r0, 0x3b	; 59
    2b60:	0f 92       	push	r0
    2b62:	2f 93       	push	r18
    2b64:	3f 93       	push	r19
    2b66:	4f 93       	push	r20
    2b68:	5f 93       	push	r21
    2b6a:	6f 93       	push	r22
    2b6c:	7f 93       	push	r23
    2b6e:	8f 93       	push	r24
    2b70:	9f 93       	push	r25
    2b72:	af 93       	push	r26
    2b74:	bf 93       	push	r27
    2b76:	cf 93       	push	r28
    2b78:	df 93       	push	r29
    2b7a:	ef 93       	push	r30
    2b7c:	ff 93       	push	r31
    2b7e:	a0 91 3b 0d 	lds	r26, 0x0D3B	; 0x800d3b <_ser_handle+0x4>
    2b82:	b0 91 3c 0d 	lds	r27, 0x0D3C	; 0x800d3c <_ser_handle+0x5>
    2b86:	10 97       	sbiw	r26, 0x00	; 0
    2b88:	11 f1       	breq	.+68     	; 0x2bce <__vector_51+0x7a>
    2b8a:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    2b8e:	14 96       	adiw	r26, 0x04	; 4
    2b90:	ed 91       	ld	r30, X+
    2b92:	fc 91       	ld	r31, X
    2b94:	15 97       	sbiw	r26, 0x05	; 5
    2b96:	93 81       	ldd	r25, Z+3	; 0x03
    2b98:	82 81       	ldd	r24, Z+2	; 0x02
    2b9a:	25 81       	ldd	r18, Z+5	; 0x05
    2b9c:	98 1b       	sub	r25, r24
    2b9e:	92 23       	and	r25, r18
    2ba0:	84 81       	ldd	r24, Z+4	; 0x04
    2ba2:	98 17       	cp	r25, r24
    2ba4:	61 f0       	breq	.+24     	; 0x2bbe <__vector_51+0x6a>
    2ba6:	83 81       	ldd	r24, Z+3	; 0x03
    2ba8:	26 95       	lsr	r18
    2baa:	28 23       	and	r18, r24
    2bac:	c0 81       	ld	r28, Z
    2bae:	d1 81       	ldd	r29, Z+1	; 0x01
    2bb0:	c2 0f       	add	r28, r18
    2bb2:	d1 1d       	adc	r29, r1
    2bb4:	68 83       	st	Y, r22
    2bb6:	8f 5f       	subi	r24, 0xFF	; 255
    2bb8:	95 81       	ldd	r25, Z+5	; 0x05
    2bba:	89 23       	and	r24, r25
    2bbc:	83 83       	std	Z+3, r24	; 0x03
    2bbe:	16 96       	adiw	r26, 0x06	; 6
    2bc0:	ed 91       	ld	r30, X+
    2bc2:	fc 91       	ld	r31, X
    2bc4:	17 97       	sbiw	r26, 0x07	; 7
    2bc6:	30 97       	sbiw	r30, 0x00	; 0
    2bc8:	11 f0       	breq	.+4      	; 0x2bce <__vector_51+0x7a>
    2bca:	cd 01       	movw	r24, r26
    2bcc:	19 95       	eicall
    2bce:	ff 91       	pop	r31
    2bd0:	ef 91       	pop	r30
    2bd2:	df 91       	pop	r29
    2bd4:	cf 91       	pop	r28
    2bd6:	bf 91       	pop	r27
    2bd8:	af 91       	pop	r26
    2bda:	9f 91       	pop	r25
    2bdc:	8f 91       	pop	r24
    2bde:	7f 91       	pop	r23
    2be0:	6f 91       	pop	r22
    2be2:	5f 91       	pop	r21
    2be4:	4f 91       	pop	r20
    2be6:	3f 91       	pop	r19
    2be8:	2f 91       	pop	r18
    2bea:	0f 90       	pop	r0
    2bec:	0b be       	out	0x3b, r0	; 59
    2bee:	0f 90       	pop	r0
    2bf0:	0f be       	out	0x3f, r0	; 63
    2bf2:	0f 90       	pop	r0
    2bf4:	1f 90       	pop	r1
    2bf6:	18 95       	reti

00002bf8 <__vector_52>:
    2bf8:	1f 92       	push	r1
    2bfa:	0f 92       	push	r0
    2bfc:	0f b6       	in	r0, 0x3f	; 63
    2bfe:	0f 92       	push	r0
    2c00:	11 24       	eor	r1, r1
    2c02:	0b b6       	in	r0, 0x3b	; 59
    2c04:	0f 92       	push	r0
    2c06:	2f 93       	push	r18
    2c08:	8f 93       	push	r24
    2c0a:	9f 93       	push	r25
    2c0c:	af 93       	push	r26
    2c0e:	bf 93       	push	r27
    2c10:	ef 93       	push	r30
    2c12:	ff 93       	push	r31
    2c14:	e0 91 3b 0d 	lds	r30, 0x0D3B	; 0x800d3b <_ser_handle+0x4>
    2c18:	f0 91 3c 0d 	lds	r31, 0x0D3C	; 0x800d3c <_ser_handle+0x5>
    2c1c:	30 97       	sbiw	r30, 0x00	; 0
    2c1e:	b9 f0       	breq	.+46     	; 0x2c4e <__vector_52+0x56>
    2c20:	02 80       	ldd	r0, Z+2	; 0x02
    2c22:	f3 81       	ldd	r31, Z+3	; 0x03
    2c24:	e0 2d       	mov	r30, r0
    2c26:	93 81       	ldd	r25, Z+3	; 0x03
    2c28:	82 81       	ldd	r24, Z+2	; 0x02
    2c2a:	98 17       	cp	r25, r24
    2c2c:	b1 f0       	breq	.+44     	; 0x2c5a <__vector_52+0x62>
    2c2e:	92 81       	ldd	r25, Z+2	; 0x02
    2c30:	85 81       	ldd	r24, Z+5	; 0x05
    2c32:	28 2f       	mov	r18, r24
    2c34:	26 95       	lsr	r18
    2c36:	29 23       	and	r18, r25
    2c38:	a0 81       	ld	r26, Z
    2c3a:	b1 81       	ldd	r27, Z+1	; 0x01
    2c3c:	a2 0f       	add	r26, r18
    2c3e:	b1 1d       	adc	r27, r1
    2c40:	2c 91       	ld	r18, X
    2c42:	9f 5f       	subi	r25, 0xFF	; 255
    2c44:	89 23       	and	r24, r25
    2c46:	82 83       	std	Z+2, r24	; 0x02
    2c48:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    2c4c:	0b c0       	rjmp	.+22     	; 0x2c64 <__vector_52+0x6c>
    2c4e:	e1 ed       	ldi	r30, 0xD1	; 209
    2c50:	f0 e0       	ldi	r31, 0x00	; 0
    2c52:	80 81       	ld	r24, Z
    2c54:	8f 7d       	andi	r24, 0xDF	; 223
    2c56:	80 83       	st	Z, r24
    2c58:	05 c0       	rjmp	.+10     	; 0x2c64 <__vector_52+0x6c>
    2c5a:	e1 ed       	ldi	r30, 0xD1	; 209
    2c5c:	f0 e0       	ldi	r31, 0x00	; 0
    2c5e:	80 81       	ld	r24, Z
    2c60:	8f 7d       	andi	r24, 0xDF	; 223
    2c62:	80 83       	st	Z, r24
    2c64:	ff 91       	pop	r31
    2c66:	ef 91       	pop	r30
    2c68:	bf 91       	pop	r27
    2c6a:	af 91       	pop	r26
    2c6c:	9f 91       	pop	r25
    2c6e:	8f 91       	pop	r24
    2c70:	2f 91       	pop	r18
    2c72:	0f 90       	pop	r0
    2c74:	0b be       	out	0x3b, r0	; 59
    2c76:	0f 90       	pop	r0
    2c78:	0f be       	out	0x3f, r0	; 63
    2c7a:	0f 90       	pop	r0
    2c7c:	1f 90       	pop	r1
    2c7e:	18 95       	reti

00002c80 <__vector_54>:
    2c80:	1f 92       	push	r1
    2c82:	0f 92       	push	r0
    2c84:	0f b6       	in	r0, 0x3f	; 63
    2c86:	0f 92       	push	r0
    2c88:	11 24       	eor	r1, r1
    2c8a:	0b b6       	in	r0, 0x3b	; 59
    2c8c:	0f 92       	push	r0
    2c8e:	2f 93       	push	r18
    2c90:	3f 93       	push	r19
    2c92:	4f 93       	push	r20
    2c94:	5f 93       	push	r21
    2c96:	6f 93       	push	r22
    2c98:	7f 93       	push	r23
    2c9a:	8f 93       	push	r24
    2c9c:	9f 93       	push	r25
    2c9e:	af 93       	push	r26
    2ca0:	bf 93       	push	r27
    2ca2:	cf 93       	push	r28
    2ca4:	df 93       	push	r29
    2ca6:	ef 93       	push	r30
    2ca8:	ff 93       	push	r31
    2caa:	a0 91 3d 0d 	lds	r26, 0x0D3D	; 0x800d3d <_ser_handle+0x6>
    2cae:	b0 91 3e 0d 	lds	r27, 0x0D3E	; 0x800d3e <_ser_handle+0x7>
    2cb2:	10 97       	sbiw	r26, 0x00	; 0
    2cb4:	11 f1       	breq	.+68     	; 0x2cfa <__vector_54+0x7a>
    2cb6:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    2cba:	14 96       	adiw	r26, 0x04	; 4
    2cbc:	ed 91       	ld	r30, X+
    2cbe:	fc 91       	ld	r31, X
    2cc0:	15 97       	sbiw	r26, 0x05	; 5
    2cc2:	93 81       	ldd	r25, Z+3	; 0x03
    2cc4:	82 81       	ldd	r24, Z+2	; 0x02
    2cc6:	25 81       	ldd	r18, Z+5	; 0x05
    2cc8:	98 1b       	sub	r25, r24
    2cca:	92 23       	and	r25, r18
    2ccc:	84 81       	ldd	r24, Z+4	; 0x04
    2cce:	98 17       	cp	r25, r24
    2cd0:	61 f0       	breq	.+24     	; 0x2cea <__vector_54+0x6a>
    2cd2:	83 81       	ldd	r24, Z+3	; 0x03
    2cd4:	26 95       	lsr	r18
    2cd6:	28 23       	and	r18, r24
    2cd8:	c0 81       	ld	r28, Z
    2cda:	d1 81       	ldd	r29, Z+1	; 0x01
    2cdc:	c2 0f       	add	r28, r18
    2cde:	d1 1d       	adc	r29, r1
    2ce0:	68 83       	st	Y, r22
    2ce2:	8f 5f       	subi	r24, 0xFF	; 255
    2ce4:	95 81       	ldd	r25, Z+5	; 0x05
    2ce6:	89 23       	and	r24, r25
    2ce8:	83 83       	std	Z+3, r24	; 0x03
    2cea:	16 96       	adiw	r26, 0x06	; 6
    2cec:	ed 91       	ld	r30, X+
    2cee:	fc 91       	ld	r31, X
    2cf0:	17 97       	sbiw	r26, 0x07	; 7
    2cf2:	30 97       	sbiw	r30, 0x00	; 0
    2cf4:	11 f0       	breq	.+4      	; 0x2cfa <__vector_54+0x7a>
    2cf6:	cd 01       	movw	r24, r26
    2cf8:	19 95       	eicall
    2cfa:	ff 91       	pop	r31
    2cfc:	ef 91       	pop	r30
    2cfe:	df 91       	pop	r29
    2d00:	cf 91       	pop	r28
    2d02:	bf 91       	pop	r27
    2d04:	af 91       	pop	r26
    2d06:	9f 91       	pop	r25
    2d08:	8f 91       	pop	r24
    2d0a:	7f 91       	pop	r23
    2d0c:	6f 91       	pop	r22
    2d0e:	5f 91       	pop	r21
    2d10:	4f 91       	pop	r20
    2d12:	3f 91       	pop	r19
    2d14:	2f 91       	pop	r18
    2d16:	0f 90       	pop	r0
    2d18:	0b be       	out	0x3b, r0	; 59
    2d1a:	0f 90       	pop	r0
    2d1c:	0f be       	out	0x3f, r0	; 63
    2d1e:	0f 90       	pop	r0
    2d20:	1f 90       	pop	r1
    2d22:	18 95       	reti

00002d24 <__vector_55>:
    2d24:	1f 92       	push	r1
    2d26:	0f 92       	push	r0
    2d28:	0f b6       	in	r0, 0x3f	; 63
    2d2a:	0f 92       	push	r0
    2d2c:	11 24       	eor	r1, r1
    2d2e:	0b b6       	in	r0, 0x3b	; 59
    2d30:	0f 92       	push	r0
    2d32:	2f 93       	push	r18
    2d34:	8f 93       	push	r24
    2d36:	9f 93       	push	r25
    2d38:	af 93       	push	r26
    2d3a:	bf 93       	push	r27
    2d3c:	ef 93       	push	r30
    2d3e:	ff 93       	push	r31
    2d40:	e0 91 3d 0d 	lds	r30, 0x0D3D	; 0x800d3d <_ser_handle+0x6>
    2d44:	f0 91 3e 0d 	lds	r31, 0x0D3E	; 0x800d3e <_ser_handle+0x7>
    2d48:	30 97       	sbiw	r30, 0x00	; 0
    2d4a:	b9 f0       	breq	.+46     	; 0x2d7a <__vector_55+0x56>
    2d4c:	02 80       	ldd	r0, Z+2	; 0x02
    2d4e:	f3 81       	ldd	r31, Z+3	; 0x03
    2d50:	e0 2d       	mov	r30, r0
    2d52:	93 81       	ldd	r25, Z+3	; 0x03
    2d54:	82 81       	ldd	r24, Z+2	; 0x02
    2d56:	98 17       	cp	r25, r24
    2d58:	b1 f0       	breq	.+44     	; 0x2d86 <__vector_55+0x62>
    2d5a:	92 81       	ldd	r25, Z+2	; 0x02
    2d5c:	85 81       	ldd	r24, Z+5	; 0x05
    2d5e:	28 2f       	mov	r18, r24
    2d60:	26 95       	lsr	r18
    2d62:	29 23       	and	r18, r25
    2d64:	a0 81       	ld	r26, Z
    2d66:	b1 81       	ldd	r27, Z+1	; 0x01
    2d68:	a2 0f       	add	r26, r18
    2d6a:	b1 1d       	adc	r27, r1
    2d6c:	2c 91       	ld	r18, X
    2d6e:	9f 5f       	subi	r25, 0xFF	; 255
    2d70:	89 23       	and	r24, r25
    2d72:	82 83       	std	Z+2, r24	; 0x02
    2d74:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    2d78:	0b c0       	rjmp	.+22     	; 0x2d90 <__vector_55+0x6c>
    2d7a:	e1 e3       	ldi	r30, 0x31	; 49
    2d7c:	f1 e0       	ldi	r31, 0x01	; 1
    2d7e:	80 81       	ld	r24, Z
    2d80:	8f 7d       	andi	r24, 0xDF	; 223
    2d82:	80 83       	st	Z, r24
    2d84:	05 c0       	rjmp	.+10     	; 0x2d90 <__vector_55+0x6c>
    2d86:	e1 e3       	ldi	r30, 0x31	; 49
    2d88:	f1 e0       	ldi	r31, 0x01	; 1
    2d8a:	80 81       	ld	r24, Z
    2d8c:	8f 7d       	andi	r24, 0xDF	; 223
    2d8e:	80 83       	st	Z, r24
    2d90:	ff 91       	pop	r31
    2d92:	ef 91       	pop	r30
    2d94:	bf 91       	pop	r27
    2d96:	af 91       	pop	r26
    2d98:	9f 91       	pop	r25
    2d9a:	8f 91       	pop	r24
    2d9c:	2f 91       	pop	r18
    2d9e:	0f 90       	pop	r0
    2da0:	0b be       	out	0x3b, r0	; 59
    2da2:	0f 90       	pop	r0
    2da4:	0f be       	out	0x3f, r0	; 63
    2da6:	0f 90       	pop	r0
    2da8:	1f 90       	pop	r1
    2daa:	18 95       	reti

00002dac <fifo_init>:
    2dac:	fc 01       	movw	r30, r24
    2dae:	41 11       	cpse	r20, r1
    2db0:	01 c0       	rjmp	.+2      	; 0x2db4 <fifo_init+0x8>
    2db2:	2b d3       	rcall	.+1622   	; 0x340a <abort>
    2db4:	84 2f       	mov	r24, r20
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	9c 01       	movw	r18, r24
    2dba:	21 50       	subi	r18, 0x01	; 1
    2dbc:	31 09       	sbc	r19, r1
    2dbe:	82 23       	and	r24, r18
    2dc0:	93 23       	and	r25, r19
    2dc2:	89 2b       	or	r24, r25
    2dc4:	09 f0       	breq	.+2      	; 0x2dc8 <fifo_init+0x1c>
    2dc6:	21 d3       	rcall	.+1602   	; 0x340a <abort>
    2dc8:	41 38       	cpi	r20, 0x81	; 129
    2dca:	08 f0       	brcs	.+2      	; 0x2dce <fifo_init+0x22>
    2dcc:	1e d3       	rcall	.+1596   	; 0x340a <abort>
    2dce:	12 82       	std	Z+2, r1	; 0x02
    2dd0:	13 82       	std	Z+3, r1	; 0x03
    2dd2:	44 83       	std	Z+4, r20	; 0x04
    2dd4:	44 0f       	add	r20, r20
    2dd6:	41 50       	subi	r20, 0x01	; 1
    2dd8:	45 83       	std	Z+5, r20	; 0x05
    2dda:	71 83       	std	Z+1, r23	; 0x01
    2ddc:	60 83       	st	Z, r22
    2dde:	80 e0       	ldi	r24, 0x00	; 0
    2de0:	90 e0       	ldi	r25, 0x00	; 0
    2de2:	08 95       	ret

00002de4 <__subsf3>:
    2de4:	50 58       	subi	r21, 0x80	; 128

00002de6 <__addsf3>:
    2de6:	bb 27       	eor	r27, r27
    2de8:	aa 27       	eor	r26, r26
    2dea:	0e d0       	rcall	.+28     	; 0x2e08 <__addsf3x>
    2dec:	48 c1       	rjmp	.+656    	; 0x307e <__fp_round>
    2dee:	39 d1       	rcall	.+626    	; 0x3062 <__fp_pscA>
    2df0:	30 f0       	brcs	.+12     	; 0x2dfe <__addsf3+0x18>
    2df2:	3e d1       	rcall	.+636    	; 0x3070 <__fp_pscB>
    2df4:	20 f0       	brcs	.+8      	; 0x2dfe <__addsf3+0x18>
    2df6:	31 f4       	brne	.+12     	; 0x2e04 <__addsf3+0x1e>
    2df8:	9f 3f       	cpi	r25, 0xFF	; 255
    2dfa:	11 f4       	brne	.+4      	; 0x2e00 <__addsf3+0x1a>
    2dfc:	1e f4       	brtc	.+6      	; 0x2e04 <__addsf3+0x1e>
    2dfe:	2e c1       	rjmp	.+604    	; 0x305c <__fp_nan>
    2e00:	0e f4       	brtc	.+2      	; 0x2e04 <__addsf3+0x1e>
    2e02:	e0 95       	com	r30
    2e04:	e7 fb       	bst	r30, 7
    2e06:	24 c1       	rjmp	.+584    	; 0x3050 <__fp_inf>

00002e08 <__addsf3x>:
    2e08:	e9 2f       	mov	r30, r25
    2e0a:	4a d1       	rcall	.+660    	; 0x30a0 <__fp_split3>
    2e0c:	80 f3       	brcs	.-32     	; 0x2dee <__addsf3+0x8>
    2e0e:	ba 17       	cp	r27, r26
    2e10:	62 07       	cpc	r22, r18
    2e12:	73 07       	cpc	r23, r19
    2e14:	84 07       	cpc	r24, r20
    2e16:	95 07       	cpc	r25, r21
    2e18:	18 f0       	brcs	.+6      	; 0x2e20 <__addsf3x+0x18>
    2e1a:	71 f4       	brne	.+28     	; 0x2e38 <__addsf3x+0x30>
    2e1c:	9e f5       	brtc	.+102    	; 0x2e84 <__addsf3x+0x7c>
    2e1e:	62 c1       	rjmp	.+708    	; 0x30e4 <__fp_zero>
    2e20:	0e f4       	brtc	.+2      	; 0x2e24 <__addsf3x+0x1c>
    2e22:	e0 95       	com	r30
    2e24:	0b 2e       	mov	r0, r27
    2e26:	ba 2f       	mov	r27, r26
    2e28:	a0 2d       	mov	r26, r0
    2e2a:	0b 01       	movw	r0, r22
    2e2c:	b9 01       	movw	r22, r18
    2e2e:	90 01       	movw	r18, r0
    2e30:	0c 01       	movw	r0, r24
    2e32:	ca 01       	movw	r24, r20
    2e34:	a0 01       	movw	r20, r0
    2e36:	11 24       	eor	r1, r1
    2e38:	ff 27       	eor	r31, r31
    2e3a:	59 1b       	sub	r21, r25
    2e3c:	99 f0       	breq	.+38     	; 0x2e64 <__addsf3x+0x5c>
    2e3e:	59 3f       	cpi	r21, 0xF9	; 249
    2e40:	50 f4       	brcc	.+20     	; 0x2e56 <__addsf3x+0x4e>
    2e42:	50 3e       	cpi	r21, 0xE0	; 224
    2e44:	68 f1       	brcs	.+90     	; 0x2ea0 <__addsf3x+0x98>
    2e46:	1a 16       	cp	r1, r26
    2e48:	f0 40       	sbci	r31, 0x00	; 0
    2e4a:	a2 2f       	mov	r26, r18
    2e4c:	23 2f       	mov	r18, r19
    2e4e:	34 2f       	mov	r19, r20
    2e50:	44 27       	eor	r20, r20
    2e52:	58 5f       	subi	r21, 0xF8	; 248
    2e54:	f3 cf       	rjmp	.-26     	; 0x2e3c <__addsf3x+0x34>
    2e56:	46 95       	lsr	r20
    2e58:	37 95       	ror	r19
    2e5a:	27 95       	ror	r18
    2e5c:	a7 95       	ror	r26
    2e5e:	f0 40       	sbci	r31, 0x00	; 0
    2e60:	53 95       	inc	r21
    2e62:	c9 f7       	brne	.-14     	; 0x2e56 <__addsf3x+0x4e>
    2e64:	7e f4       	brtc	.+30     	; 0x2e84 <__addsf3x+0x7c>
    2e66:	1f 16       	cp	r1, r31
    2e68:	ba 0b       	sbc	r27, r26
    2e6a:	62 0b       	sbc	r22, r18
    2e6c:	73 0b       	sbc	r23, r19
    2e6e:	84 0b       	sbc	r24, r20
    2e70:	ba f0       	brmi	.+46     	; 0x2ea0 <__addsf3x+0x98>
    2e72:	91 50       	subi	r25, 0x01	; 1
    2e74:	a1 f0       	breq	.+40     	; 0x2e9e <__addsf3x+0x96>
    2e76:	ff 0f       	add	r31, r31
    2e78:	bb 1f       	adc	r27, r27
    2e7a:	66 1f       	adc	r22, r22
    2e7c:	77 1f       	adc	r23, r23
    2e7e:	88 1f       	adc	r24, r24
    2e80:	c2 f7       	brpl	.-16     	; 0x2e72 <__addsf3x+0x6a>
    2e82:	0e c0       	rjmp	.+28     	; 0x2ea0 <__addsf3x+0x98>
    2e84:	ba 0f       	add	r27, r26
    2e86:	62 1f       	adc	r22, r18
    2e88:	73 1f       	adc	r23, r19
    2e8a:	84 1f       	adc	r24, r20
    2e8c:	48 f4       	brcc	.+18     	; 0x2ea0 <__addsf3x+0x98>
    2e8e:	87 95       	ror	r24
    2e90:	77 95       	ror	r23
    2e92:	67 95       	ror	r22
    2e94:	b7 95       	ror	r27
    2e96:	f7 95       	ror	r31
    2e98:	9e 3f       	cpi	r25, 0xFE	; 254
    2e9a:	08 f0       	brcs	.+2      	; 0x2e9e <__addsf3x+0x96>
    2e9c:	b3 cf       	rjmp	.-154    	; 0x2e04 <__addsf3+0x1e>
    2e9e:	93 95       	inc	r25
    2ea0:	88 0f       	add	r24, r24
    2ea2:	08 f0       	brcs	.+2      	; 0x2ea6 <__addsf3x+0x9e>
    2ea4:	99 27       	eor	r25, r25
    2ea6:	ee 0f       	add	r30, r30
    2ea8:	97 95       	ror	r25
    2eaa:	87 95       	ror	r24
    2eac:	08 95       	ret

00002eae <__divsf3>:
    2eae:	0c d0       	rcall	.+24     	; 0x2ec8 <__divsf3x>
    2eb0:	e6 c0       	rjmp	.+460    	; 0x307e <__fp_round>
    2eb2:	de d0       	rcall	.+444    	; 0x3070 <__fp_pscB>
    2eb4:	40 f0       	brcs	.+16     	; 0x2ec6 <__divsf3+0x18>
    2eb6:	d5 d0       	rcall	.+426    	; 0x3062 <__fp_pscA>
    2eb8:	30 f0       	brcs	.+12     	; 0x2ec6 <__divsf3+0x18>
    2eba:	21 f4       	brne	.+8      	; 0x2ec4 <__divsf3+0x16>
    2ebc:	5f 3f       	cpi	r21, 0xFF	; 255
    2ebe:	19 f0       	breq	.+6      	; 0x2ec6 <__divsf3+0x18>
    2ec0:	c7 c0       	rjmp	.+398    	; 0x3050 <__fp_inf>
    2ec2:	51 11       	cpse	r21, r1
    2ec4:	10 c1       	rjmp	.+544    	; 0x30e6 <__fp_szero>
    2ec6:	ca c0       	rjmp	.+404    	; 0x305c <__fp_nan>

00002ec8 <__divsf3x>:
    2ec8:	eb d0       	rcall	.+470    	; 0x30a0 <__fp_split3>
    2eca:	98 f3       	brcs	.-26     	; 0x2eb2 <__divsf3+0x4>

00002ecc <__divsf3_pse>:
    2ecc:	99 23       	and	r25, r25
    2ece:	c9 f3       	breq	.-14     	; 0x2ec2 <__divsf3+0x14>
    2ed0:	55 23       	and	r21, r21
    2ed2:	b1 f3       	breq	.-20     	; 0x2ec0 <__divsf3+0x12>
    2ed4:	95 1b       	sub	r25, r21
    2ed6:	55 0b       	sbc	r21, r21
    2ed8:	bb 27       	eor	r27, r27
    2eda:	aa 27       	eor	r26, r26
    2edc:	62 17       	cp	r22, r18
    2ede:	73 07       	cpc	r23, r19
    2ee0:	84 07       	cpc	r24, r20
    2ee2:	38 f0       	brcs	.+14     	; 0x2ef2 <__divsf3_pse+0x26>
    2ee4:	9f 5f       	subi	r25, 0xFF	; 255
    2ee6:	5f 4f       	sbci	r21, 0xFF	; 255
    2ee8:	22 0f       	add	r18, r18
    2eea:	33 1f       	adc	r19, r19
    2eec:	44 1f       	adc	r20, r20
    2eee:	aa 1f       	adc	r26, r26
    2ef0:	a9 f3       	breq	.-22     	; 0x2edc <__divsf3_pse+0x10>
    2ef2:	33 d0       	rcall	.+102    	; 0x2f5a <__divsf3_pse+0x8e>
    2ef4:	0e 2e       	mov	r0, r30
    2ef6:	3a f0       	brmi	.+14     	; 0x2f06 <__divsf3_pse+0x3a>
    2ef8:	e0 e8       	ldi	r30, 0x80	; 128
    2efa:	30 d0       	rcall	.+96     	; 0x2f5c <__divsf3_pse+0x90>
    2efc:	91 50       	subi	r25, 0x01	; 1
    2efe:	50 40       	sbci	r21, 0x00	; 0
    2f00:	e6 95       	lsr	r30
    2f02:	00 1c       	adc	r0, r0
    2f04:	ca f7       	brpl	.-14     	; 0x2ef8 <__divsf3_pse+0x2c>
    2f06:	29 d0       	rcall	.+82     	; 0x2f5a <__divsf3_pse+0x8e>
    2f08:	fe 2f       	mov	r31, r30
    2f0a:	27 d0       	rcall	.+78     	; 0x2f5a <__divsf3_pse+0x8e>
    2f0c:	66 0f       	add	r22, r22
    2f0e:	77 1f       	adc	r23, r23
    2f10:	88 1f       	adc	r24, r24
    2f12:	bb 1f       	adc	r27, r27
    2f14:	26 17       	cp	r18, r22
    2f16:	37 07       	cpc	r19, r23
    2f18:	48 07       	cpc	r20, r24
    2f1a:	ab 07       	cpc	r26, r27
    2f1c:	b0 e8       	ldi	r27, 0x80	; 128
    2f1e:	09 f0       	breq	.+2      	; 0x2f22 <__divsf3_pse+0x56>
    2f20:	bb 0b       	sbc	r27, r27
    2f22:	80 2d       	mov	r24, r0
    2f24:	bf 01       	movw	r22, r30
    2f26:	ff 27       	eor	r31, r31
    2f28:	93 58       	subi	r25, 0x83	; 131
    2f2a:	5f 4f       	sbci	r21, 0xFF	; 255
    2f2c:	2a f0       	brmi	.+10     	; 0x2f38 <__divsf3_pse+0x6c>
    2f2e:	9e 3f       	cpi	r25, 0xFE	; 254
    2f30:	51 05       	cpc	r21, r1
    2f32:	68 f0       	brcs	.+26     	; 0x2f4e <__divsf3_pse+0x82>
    2f34:	8d c0       	rjmp	.+282    	; 0x3050 <__fp_inf>
    2f36:	d7 c0       	rjmp	.+430    	; 0x30e6 <__fp_szero>
    2f38:	5f 3f       	cpi	r21, 0xFF	; 255
    2f3a:	ec f3       	brlt	.-6      	; 0x2f36 <__divsf3_pse+0x6a>
    2f3c:	98 3e       	cpi	r25, 0xE8	; 232
    2f3e:	dc f3       	brlt	.-10     	; 0x2f36 <__divsf3_pse+0x6a>
    2f40:	86 95       	lsr	r24
    2f42:	77 95       	ror	r23
    2f44:	67 95       	ror	r22
    2f46:	b7 95       	ror	r27
    2f48:	f7 95       	ror	r31
    2f4a:	9f 5f       	subi	r25, 0xFF	; 255
    2f4c:	c9 f7       	brne	.-14     	; 0x2f40 <__divsf3_pse+0x74>
    2f4e:	88 0f       	add	r24, r24
    2f50:	91 1d       	adc	r25, r1
    2f52:	96 95       	lsr	r25
    2f54:	87 95       	ror	r24
    2f56:	97 f9       	bld	r25, 7
    2f58:	08 95       	ret
    2f5a:	e1 e0       	ldi	r30, 0x01	; 1
    2f5c:	66 0f       	add	r22, r22
    2f5e:	77 1f       	adc	r23, r23
    2f60:	88 1f       	adc	r24, r24
    2f62:	bb 1f       	adc	r27, r27
    2f64:	62 17       	cp	r22, r18
    2f66:	73 07       	cpc	r23, r19
    2f68:	84 07       	cpc	r24, r20
    2f6a:	ba 07       	cpc	r27, r26
    2f6c:	20 f0       	brcs	.+8      	; 0x2f76 <__divsf3_pse+0xaa>
    2f6e:	62 1b       	sub	r22, r18
    2f70:	73 0b       	sbc	r23, r19
    2f72:	84 0b       	sbc	r24, r20
    2f74:	ba 0b       	sbc	r27, r26
    2f76:	ee 1f       	adc	r30, r30
    2f78:	88 f7       	brcc	.-30     	; 0x2f5c <__divsf3_pse+0x90>
    2f7a:	e0 95       	com	r30
    2f7c:	08 95       	ret

00002f7e <__fixunssfsi>:
    2f7e:	98 d0       	rcall	.+304    	; 0x30b0 <__fp_splitA>
    2f80:	88 f0       	brcs	.+34     	; 0x2fa4 <__fixunssfsi+0x26>
    2f82:	9f 57       	subi	r25, 0x7F	; 127
    2f84:	90 f0       	brcs	.+36     	; 0x2faa <__fixunssfsi+0x2c>
    2f86:	b9 2f       	mov	r27, r25
    2f88:	99 27       	eor	r25, r25
    2f8a:	b7 51       	subi	r27, 0x17	; 23
    2f8c:	a0 f0       	brcs	.+40     	; 0x2fb6 <__fixunssfsi+0x38>
    2f8e:	d1 f0       	breq	.+52     	; 0x2fc4 <__fixunssfsi+0x46>
    2f90:	66 0f       	add	r22, r22
    2f92:	77 1f       	adc	r23, r23
    2f94:	88 1f       	adc	r24, r24
    2f96:	99 1f       	adc	r25, r25
    2f98:	1a f0       	brmi	.+6      	; 0x2fa0 <__fixunssfsi+0x22>
    2f9a:	ba 95       	dec	r27
    2f9c:	c9 f7       	brne	.-14     	; 0x2f90 <__fixunssfsi+0x12>
    2f9e:	12 c0       	rjmp	.+36     	; 0x2fc4 <__fixunssfsi+0x46>
    2fa0:	b1 30       	cpi	r27, 0x01	; 1
    2fa2:	81 f0       	breq	.+32     	; 0x2fc4 <__fixunssfsi+0x46>
    2fa4:	9f d0       	rcall	.+318    	; 0x30e4 <__fp_zero>
    2fa6:	b1 e0       	ldi	r27, 0x01	; 1
    2fa8:	08 95       	ret
    2faa:	9c c0       	rjmp	.+312    	; 0x30e4 <__fp_zero>
    2fac:	67 2f       	mov	r22, r23
    2fae:	78 2f       	mov	r23, r24
    2fb0:	88 27       	eor	r24, r24
    2fb2:	b8 5f       	subi	r27, 0xF8	; 248
    2fb4:	39 f0       	breq	.+14     	; 0x2fc4 <__fixunssfsi+0x46>
    2fb6:	b9 3f       	cpi	r27, 0xF9	; 249
    2fb8:	cc f3       	brlt	.-14     	; 0x2fac <__fixunssfsi+0x2e>
    2fba:	86 95       	lsr	r24
    2fbc:	77 95       	ror	r23
    2fbe:	67 95       	ror	r22
    2fc0:	b3 95       	inc	r27
    2fc2:	d9 f7       	brne	.-10     	; 0x2fba <__fixunssfsi+0x3c>
    2fc4:	3e f4       	brtc	.+14     	; 0x2fd4 <__fixunssfsi+0x56>
    2fc6:	90 95       	com	r25
    2fc8:	80 95       	com	r24
    2fca:	70 95       	com	r23
    2fcc:	61 95       	neg	r22
    2fce:	7f 4f       	sbci	r23, 0xFF	; 255
    2fd0:	8f 4f       	sbci	r24, 0xFF	; 255
    2fd2:	9f 4f       	sbci	r25, 0xFF	; 255
    2fd4:	08 95       	ret

00002fd6 <__floatunsisf>:
    2fd6:	e8 94       	clt
    2fd8:	09 c0       	rjmp	.+18     	; 0x2fec <__floatsisf+0x12>

00002fda <__floatsisf>:
    2fda:	97 fb       	bst	r25, 7
    2fdc:	3e f4       	brtc	.+14     	; 0x2fec <__floatsisf+0x12>
    2fde:	90 95       	com	r25
    2fe0:	80 95       	com	r24
    2fe2:	70 95       	com	r23
    2fe4:	61 95       	neg	r22
    2fe6:	7f 4f       	sbci	r23, 0xFF	; 255
    2fe8:	8f 4f       	sbci	r24, 0xFF	; 255
    2fea:	9f 4f       	sbci	r25, 0xFF	; 255
    2fec:	99 23       	and	r25, r25
    2fee:	a9 f0       	breq	.+42     	; 0x301a <__floatsisf+0x40>
    2ff0:	f9 2f       	mov	r31, r25
    2ff2:	96 e9       	ldi	r25, 0x96	; 150
    2ff4:	bb 27       	eor	r27, r27
    2ff6:	93 95       	inc	r25
    2ff8:	f6 95       	lsr	r31
    2ffa:	87 95       	ror	r24
    2ffc:	77 95       	ror	r23
    2ffe:	67 95       	ror	r22
    3000:	b7 95       	ror	r27
    3002:	f1 11       	cpse	r31, r1
    3004:	f8 cf       	rjmp	.-16     	; 0x2ff6 <__floatsisf+0x1c>
    3006:	fa f4       	brpl	.+62     	; 0x3046 <__floatsisf+0x6c>
    3008:	bb 0f       	add	r27, r27
    300a:	11 f4       	brne	.+4      	; 0x3010 <__floatsisf+0x36>
    300c:	60 ff       	sbrs	r22, 0
    300e:	1b c0       	rjmp	.+54     	; 0x3046 <__floatsisf+0x6c>
    3010:	6f 5f       	subi	r22, 0xFF	; 255
    3012:	7f 4f       	sbci	r23, 0xFF	; 255
    3014:	8f 4f       	sbci	r24, 0xFF	; 255
    3016:	9f 4f       	sbci	r25, 0xFF	; 255
    3018:	16 c0       	rjmp	.+44     	; 0x3046 <__floatsisf+0x6c>
    301a:	88 23       	and	r24, r24
    301c:	11 f0       	breq	.+4      	; 0x3022 <__floatsisf+0x48>
    301e:	96 e9       	ldi	r25, 0x96	; 150
    3020:	11 c0       	rjmp	.+34     	; 0x3044 <__floatsisf+0x6a>
    3022:	77 23       	and	r23, r23
    3024:	21 f0       	breq	.+8      	; 0x302e <__floatsisf+0x54>
    3026:	9e e8       	ldi	r25, 0x8E	; 142
    3028:	87 2f       	mov	r24, r23
    302a:	76 2f       	mov	r23, r22
    302c:	05 c0       	rjmp	.+10     	; 0x3038 <__floatsisf+0x5e>
    302e:	66 23       	and	r22, r22
    3030:	71 f0       	breq	.+28     	; 0x304e <__floatsisf+0x74>
    3032:	96 e8       	ldi	r25, 0x86	; 134
    3034:	86 2f       	mov	r24, r22
    3036:	70 e0       	ldi	r23, 0x00	; 0
    3038:	60 e0       	ldi	r22, 0x00	; 0
    303a:	2a f0       	brmi	.+10     	; 0x3046 <__floatsisf+0x6c>
    303c:	9a 95       	dec	r25
    303e:	66 0f       	add	r22, r22
    3040:	77 1f       	adc	r23, r23
    3042:	88 1f       	adc	r24, r24
    3044:	da f7       	brpl	.-10     	; 0x303c <__floatsisf+0x62>
    3046:	88 0f       	add	r24, r24
    3048:	96 95       	lsr	r25
    304a:	87 95       	ror	r24
    304c:	97 f9       	bld	r25, 7
    304e:	08 95       	ret

00003050 <__fp_inf>:
    3050:	97 f9       	bld	r25, 7
    3052:	9f 67       	ori	r25, 0x7F	; 127
    3054:	80 e8       	ldi	r24, 0x80	; 128
    3056:	70 e0       	ldi	r23, 0x00	; 0
    3058:	60 e0       	ldi	r22, 0x00	; 0
    305a:	08 95       	ret

0000305c <__fp_nan>:
    305c:	9f ef       	ldi	r25, 0xFF	; 255
    305e:	80 ec       	ldi	r24, 0xC0	; 192
    3060:	08 95       	ret

00003062 <__fp_pscA>:
    3062:	00 24       	eor	r0, r0
    3064:	0a 94       	dec	r0
    3066:	16 16       	cp	r1, r22
    3068:	17 06       	cpc	r1, r23
    306a:	18 06       	cpc	r1, r24
    306c:	09 06       	cpc	r0, r25
    306e:	08 95       	ret

00003070 <__fp_pscB>:
    3070:	00 24       	eor	r0, r0
    3072:	0a 94       	dec	r0
    3074:	12 16       	cp	r1, r18
    3076:	13 06       	cpc	r1, r19
    3078:	14 06       	cpc	r1, r20
    307a:	05 06       	cpc	r0, r21
    307c:	08 95       	ret

0000307e <__fp_round>:
    307e:	09 2e       	mov	r0, r25
    3080:	03 94       	inc	r0
    3082:	00 0c       	add	r0, r0
    3084:	11 f4       	brne	.+4      	; 0x308a <__fp_round+0xc>
    3086:	88 23       	and	r24, r24
    3088:	52 f0       	brmi	.+20     	; 0x309e <__fp_round+0x20>
    308a:	bb 0f       	add	r27, r27
    308c:	40 f4       	brcc	.+16     	; 0x309e <__fp_round+0x20>
    308e:	bf 2b       	or	r27, r31
    3090:	11 f4       	brne	.+4      	; 0x3096 <__fp_round+0x18>
    3092:	60 ff       	sbrs	r22, 0
    3094:	04 c0       	rjmp	.+8      	; 0x309e <__fp_round+0x20>
    3096:	6f 5f       	subi	r22, 0xFF	; 255
    3098:	7f 4f       	sbci	r23, 0xFF	; 255
    309a:	8f 4f       	sbci	r24, 0xFF	; 255
    309c:	9f 4f       	sbci	r25, 0xFF	; 255
    309e:	08 95       	ret

000030a0 <__fp_split3>:
    30a0:	57 fd       	sbrc	r21, 7
    30a2:	90 58       	subi	r25, 0x80	; 128
    30a4:	44 0f       	add	r20, r20
    30a6:	55 1f       	adc	r21, r21
    30a8:	59 f0       	breq	.+22     	; 0x30c0 <__fp_splitA+0x10>
    30aa:	5f 3f       	cpi	r21, 0xFF	; 255
    30ac:	71 f0       	breq	.+28     	; 0x30ca <__fp_splitA+0x1a>
    30ae:	47 95       	ror	r20

000030b0 <__fp_splitA>:
    30b0:	88 0f       	add	r24, r24
    30b2:	97 fb       	bst	r25, 7
    30b4:	99 1f       	adc	r25, r25
    30b6:	61 f0       	breq	.+24     	; 0x30d0 <__fp_splitA+0x20>
    30b8:	9f 3f       	cpi	r25, 0xFF	; 255
    30ba:	79 f0       	breq	.+30     	; 0x30da <__fp_splitA+0x2a>
    30bc:	87 95       	ror	r24
    30be:	08 95       	ret
    30c0:	12 16       	cp	r1, r18
    30c2:	13 06       	cpc	r1, r19
    30c4:	14 06       	cpc	r1, r20
    30c6:	55 1f       	adc	r21, r21
    30c8:	f2 cf       	rjmp	.-28     	; 0x30ae <__fp_split3+0xe>
    30ca:	46 95       	lsr	r20
    30cc:	f1 df       	rcall	.-30     	; 0x30b0 <__fp_splitA>
    30ce:	08 c0       	rjmp	.+16     	; 0x30e0 <__fp_splitA+0x30>
    30d0:	16 16       	cp	r1, r22
    30d2:	17 06       	cpc	r1, r23
    30d4:	18 06       	cpc	r1, r24
    30d6:	99 1f       	adc	r25, r25
    30d8:	f1 cf       	rjmp	.-30     	; 0x30bc <__fp_splitA+0xc>
    30da:	86 95       	lsr	r24
    30dc:	71 05       	cpc	r23, r1
    30de:	61 05       	cpc	r22, r1
    30e0:	08 94       	sec
    30e2:	08 95       	ret

000030e4 <__fp_zero>:
    30e4:	e8 94       	clt

000030e6 <__fp_szero>:
    30e6:	bb 27       	eor	r27, r27
    30e8:	66 27       	eor	r22, r22
    30ea:	77 27       	eor	r23, r23
    30ec:	cb 01       	movw	r24, r22
    30ee:	97 f9       	bld	r25, 7
    30f0:	08 95       	ret

000030f2 <__mulsf3>:
    30f2:	0b d0       	rcall	.+22     	; 0x310a <__mulsf3x>
    30f4:	c4 cf       	rjmp	.-120    	; 0x307e <__fp_round>
    30f6:	b5 df       	rcall	.-150    	; 0x3062 <__fp_pscA>
    30f8:	28 f0       	brcs	.+10     	; 0x3104 <__mulsf3+0x12>
    30fa:	ba df       	rcall	.-140    	; 0x3070 <__fp_pscB>
    30fc:	18 f0       	brcs	.+6      	; 0x3104 <__mulsf3+0x12>
    30fe:	95 23       	and	r25, r21
    3100:	09 f0       	breq	.+2      	; 0x3104 <__mulsf3+0x12>
    3102:	a6 cf       	rjmp	.-180    	; 0x3050 <__fp_inf>
    3104:	ab cf       	rjmp	.-170    	; 0x305c <__fp_nan>
    3106:	11 24       	eor	r1, r1
    3108:	ee cf       	rjmp	.-36     	; 0x30e6 <__fp_szero>

0000310a <__mulsf3x>:
    310a:	ca df       	rcall	.-108    	; 0x30a0 <__fp_split3>
    310c:	a0 f3       	brcs	.-24     	; 0x30f6 <__mulsf3+0x4>

0000310e <__mulsf3_pse>:
    310e:	95 9f       	mul	r25, r21
    3110:	d1 f3       	breq	.-12     	; 0x3106 <__mulsf3+0x14>
    3112:	95 0f       	add	r25, r21
    3114:	50 e0       	ldi	r21, 0x00	; 0
    3116:	55 1f       	adc	r21, r21
    3118:	62 9f       	mul	r22, r18
    311a:	f0 01       	movw	r30, r0
    311c:	72 9f       	mul	r23, r18
    311e:	bb 27       	eor	r27, r27
    3120:	f0 0d       	add	r31, r0
    3122:	b1 1d       	adc	r27, r1
    3124:	63 9f       	mul	r22, r19
    3126:	aa 27       	eor	r26, r26
    3128:	f0 0d       	add	r31, r0
    312a:	b1 1d       	adc	r27, r1
    312c:	aa 1f       	adc	r26, r26
    312e:	64 9f       	mul	r22, r20
    3130:	66 27       	eor	r22, r22
    3132:	b0 0d       	add	r27, r0
    3134:	a1 1d       	adc	r26, r1
    3136:	66 1f       	adc	r22, r22
    3138:	82 9f       	mul	r24, r18
    313a:	22 27       	eor	r18, r18
    313c:	b0 0d       	add	r27, r0
    313e:	a1 1d       	adc	r26, r1
    3140:	62 1f       	adc	r22, r18
    3142:	73 9f       	mul	r23, r19
    3144:	b0 0d       	add	r27, r0
    3146:	a1 1d       	adc	r26, r1
    3148:	62 1f       	adc	r22, r18
    314a:	83 9f       	mul	r24, r19
    314c:	a0 0d       	add	r26, r0
    314e:	61 1d       	adc	r22, r1
    3150:	22 1f       	adc	r18, r18
    3152:	74 9f       	mul	r23, r20
    3154:	33 27       	eor	r19, r19
    3156:	a0 0d       	add	r26, r0
    3158:	61 1d       	adc	r22, r1
    315a:	23 1f       	adc	r18, r19
    315c:	84 9f       	mul	r24, r20
    315e:	60 0d       	add	r22, r0
    3160:	21 1d       	adc	r18, r1
    3162:	82 2f       	mov	r24, r18
    3164:	76 2f       	mov	r23, r22
    3166:	6a 2f       	mov	r22, r26
    3168:	11 24       	eor	r1, r1
    316a:	9f 57       	subi	r25, 0x7F	; 127
    316c:	50 40       	sbci	r21, 0x00	; 0
    316e:	8a f0       	brmi	.+34     	; 0x3192 <__mulsf3_pse+0x84>
    3170:	e1 f0       	breq	.+56     	; 0x31aa <__mulsf3_pse+0x9c>
    3172:	88 23       	and	r24, r24
    3174:	4a f0       	brmi	.+18     	; 0x3188 <__mulsf3_pse+0x7a>
    3176:	ee 0f       	add	r30, r30
    3178:	ff 1f       	adc	r31, r31
    317a:	bb 1f       	adc	r27, r27
    317c:	66 1f       	adc	r22, r22
    317e:	77 1f       	adc	r23, r23
    3180:	88 1f       	adc	r24, r24
    3182:	91 50       	subi	r25, 0x01	; 1
    3184:	50 40       	sbci	r21, 0x00	; 0
    3186:	a9 f7       	brne	.-22     	; 0x3172 <__mulsf3_pse+0x64>
    3188:	9e 3f       	cpi	r25, 0xFE	; 254
    318a:	51 05       	cpc	r21, r1
    318c:	70 f0       	brcs	.+28     	; 0x31aa <__mulsf3_pse+0x9c>
    318e:	60 cf       	rjmp	.-320    	; 0x3050 <__fp_inf>
    3190:	aa cf       	rjmp	.-172    	; 0x30e6 <__fp_szero>
    3192:	5f 3f       	cpi	r21, 0xFF	; 255
    3194:	ec f3       	brlt	.-6      	; 0x3190 <__mulsf3_pse+0x82>
    3196:	98 3e       	cpi	r25, 0xE8	; 232
    3198:	dc f3       	brlt	.-10     	; 0x3190 <__mulsf3_pse+0x82>
    319a:	86 95       	lsr	r24
    319c:	77 95       	ror	r23
    319e:	67 95       	ror	r22
    31a0:	b7 95       	ror	r27
    31a2:	f7 95       	ror	r31
    31a4:	e7 95       	ror	r30
    31a6:	9f 5f       	subi	r25, 0xFF	; 255
    31a8:	c1 f7       	brne	.-16     	; 0x319a <__mulsf3_pse+0x8c>
    31aa:	fe 2b       	or	r31, r30
    31ac:	88 0f       	add	r24, r24
    31ae:	91 1d       	adc	r25, r1
    31b0:	96 95       	lsr	r25
    31b2:	87 95       	ror	r24
    31b4:	97 f9       	bld	r25, 7
    31b6:	08 95       	ret

000031b8 <__tablejump2__>:
    31b8:	ee 0f       	add	r30, r30
    31ba:	ff 1f       	adc	r31, r31
    31bc:	88 1f       	adc	r24, r24
    31be:	8b bf       	out	0x3b, r24	; 59
    31c0:	07 90       	elpm	r0, Z+
    31c2:	f6 91       	elpm	r31, Z
    31c4:	e0 2d       	mov	r30, r0
    31c6:	19 94       	eijmp

000031c8 <malloc>:
    31c8:	0f 93       	push	r16
    31ca:	1f 93       	push	r17
    31cc:	cf 93       	push	r28
    31ce:	df 93       	push	r29
    31d0:	82 30       	cpi	r24, 0x02	; 2
    31d2:	91 05       	cpc	r25, r1
    31d4:	10 f4       	brcc	.+4      	; 0x31da <malloc+0x12>
    31d6:	82 e0       	ldi	r24, 0x02	; 2
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	e0 91 0b 0e 	lds	r30, 0x0E0B	; 0x800e0b <__flp>
    31de:	f0 91 0c 0e 	lds	r31, 0x0E0C	; 0x800e0c <__flp+0x1>
    31e2:	20 e0       	ldi	r18, 0x00	; 0
    31e4:	30 e0       	ldi	r19, 0x00	; 0
    31e6:	a0 e0       	ldi	r26, 0x00	; 0
    31e8:	b0 e0       	ldi	r27, 0x00	; 0
    31ea:	30 97       	sbiw	r30, 0x00	; 0
    31ec:	19 f1       	breq	.+70     	; 0x3234 <malloc+0x6c>
    31ee:	40 81       	ld	r20, Z
    31f0:	51 81       	ldd	r21, Z+1	; 0x01
    31f2:	02 81       	ldd	r16, Z+2	; 0x02
    31f4:	13 81       	ldd	r17, Z+3	; 0x03
    31f6:	48 17       	cp	r20, r24
    31f8:	59 07       	cpc	r21, r25
    31fa:	c8 f0       	brcs	.+50     	; 0x322e <malloc+0x66>
    31fc:	84 17       	cp	r24, r20
    31fe:	95 07       	cpc	r25, r21
    3200:	69 f4       	brne	.+26     	; 0x321c <malloc+0x54>
    3202:	10 97       	sbiw	r26, 0x00	; 0
    3204:	31 f0       	breq	.+12     	; 0x3212 <malloc+0x4a>
    3206:	12 96       	adiw	r26, 0x02	; 2
    3208:	0c 93       	st	X, r16
    320a:	12 97       	sbiw	r26, 0x02	; 2
    320c:	13 96       	adiw	r26, 0x03	; 3
    320e:	1c 93       	st	X, r17
    3210:	27 c0       	rjmp	.+78     	; 0x3260 <malloc+0x98>
    3212:	00 93 0b 0e 	sts	0x0E0B, r16	; 0x800e0b <__flp>
    3216:	10 93 0c 0e 	sts	0x0E0C, r17	; 0x800e0c <__flp+0x1>
    321a:	22 c0       	rjmp	.+68     	; 0x3260 <malloc+0x98>
    321c:	21 15       	cp	r18, r1
    321e:	31 05       	cpc	r19, r1
    3220:	19 f0       	breq	.+6      	; 0x3228 <malloc+0x60>
    3222:	42 17       	cp	r20, r18
    3224:	53 07       	cpc	r21, r19
    3226:	18 f4       	brcc	.+6      	; 0x322e <malloc+0x66>
    3228:	9a 01       	movw	r18, r20
    322a:	bd 01       	movw	r22, r26
    322c:	ef 01       	movw	r28, r30
    322e:	df 01       	movw	r26, r30
    3230:	f8 01       	movw	r30, r16
    3232:	db cf       	rjmp	.-74     	; 0x31ea <malloc+0x22>
    3234:	21 15       	cp	r18, r1
    3236:	31 05       	cpc	r19, r1
    3238:	f9 f0       	breq	.+62     	; 0x3278 <malloc+0xb0>
    323a:	28 1b       	sub	r18, r24
    323c:	39 0b       	sbc	r19, r25
    323e:	24 30       	cpi	r18, 0x04	; 4
    3240:	31 05       	cpc	r19, r1
    3242:	80 f4       	brcc	.+32     	; 0x3264 <malloc+0x9c>
    3244:	8a 81       	ldd	r24, Y+2	; 0x02
    3246:	9b 81       	ldd	r25, Y+3	; 0x03
    3248:	61 15       	cp	r22, r1
    324a:	71 05       	cpc	r23, r1
    324c:	21 f0       	breq	.+8      	; 0x3256 <malloc+0x8e>
    324e:	fb 01       	movw	r30, r22
    3250:	93 83       	std	Z+3, r25	; 0x03
    3252:	82 83       	std	Z+2, r24	; 0x02
    3254:	04 c0       	rjmp	.+8      	; 0x325e <malloc+0x96>
    3256:	90 93 0c 0e 	sts	0x0E0C, r25	; 0x800e0c <__flp+0x1>
    325a:	80 93 0b 0e 	sts	0x0E0B, r24	; 0x800e0b <__flp>
    325e:	fe 01       	movw	r30, r28
    3260:	32 96       	adiw	r30, 0x02	; 2
    3262:	44 c0       	rjmp	.+136    	; 0x32ec <malloc+0x124>
    3264:	fe 01       	movw	r30, r28
    3266:	e2 0f       	add	r30, r18
    3268:	f3 1f       	adc	r31, r19
    326a:	81 93       	st	Z+, r24
    326c:	91 93       	st	Z+, r25
    326e:	22 50       	subi	r18, 0x02	; 2
    3270:	31 09       	sbc	r19, r1
    3272:	39 83       	std	Y+1, r19	; 0x01
    3274:	28 83       	st	Y, r18
    3276:	3a c0       	rjmp	.+116    	; 0x32ec <malloc+0x124>
    3278:	20 91 09 0e 	lds	r18, 0x0E09	; 0x800e09 <__brkval>
    327c:	30 91 0a 0e 	lds	r19, 0x0E0A	; 0x800e0a <__brkval+0x1>
    3280:	23 2b       	or	r18, r19
    3282:	41 f4       	brne	.+16     	; 0x3294 <malloc+0xcc>
    3284:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    3288:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    328c:	30 93 0a 0e 	sts	0x0E0A, r19	; 0x800e0a <__brkval+0x1>
    3290:	20 93 09 0e 	sts	0x0E09, r18	; 0x800e09 <__brkval>
    3294:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    3298:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    329c:	21 15       	cp	r18, r1
    329e:	31 05       	cpc	r19, r1
    32a0:	41 f4       	brne	.+16     	; 0x32b2 <malloc+0xea>
    32a2:	2d b7       	in	r18, 0x3d	; 61
    32a4:	3e b7       	in	r19, 0x3e	; 62
    32a6:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    32aa:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    32ae:	24 1b       	sub	r18, r20
    32b0:	35 0b       	sbc	r19, r21
    32b2:	e0 91 09 0e 	lds	r30, 0x0E09	; 0x800e09 <__brkval>
    32b6:	f0 91 0a 0e 	lds	r31, 0x0E0A	; 0x800e0a <__brkval+0x1>
    32ba:	e2 17       	cp	r30, r18
    32bc:	f3 07       	cpc	r31, r19
    32be:	a0 f4       	brcc	.+40     	; 0x32e8 <malloc+0x120>
    32c0:	2e 1b       	sub	r18, r30
    32c2:	3f 0b       	sbc	r19, r31
    32c4:	28 17       	cp	r18, r24
    32c6:	39 07       	cpc	r19, r25
    32c8:	78 f0       	brcs	.+30     	; 0x32e8 <malloc+0x120>
    32ca:	ac 01       	movw	r20, r24
    32cc:	4e 5f       	subi	r20, 0xFE	; 254
    32ce:	5f 4f       	sbci	r21, 0xFF	; 255
    32d0:	24 17       	cp	r18, r20
    32d2:	35 07       	cpc	r19, r21
    32d4:	48 f0       	brcs	.+18     	; 0x32e8 <malloc+0x120>
    32d6:	4e 0f       	add	r20, r30
    32d8:	5f 1f       	adc	r21, r31
    32da:	50 93 0a 0e 	sts	0x0E0A, r21	; 0x800e0a <__brkval+0x1>
    32de:	40 93 09 0e 	sts	0x0E09, r20	; 0x800e09 <__brkval>
    32e2:	81 93       	st	Z+, r24
    32e4:	91 93       	st	Z+, r25
    32e6:	02 c0       	rjmp	.+4      	; 0x32ec <malloc+0x124>
    32e8:	e0 e0       	ldi	r30, 0x00	; 0
    32ea:	f0 e0       	ldi	r31, 0x00	; 0
    32ec:	cf 01       	movw	r24, r30
    32ee:	df 91       	pop	r29
    32f0:	cf 91       	pop	r28
    32f2:	1f 91       	pop	r17
    32f4:	0f 91       	pop	r16
    32f6:	08 95       	ret

000032f8 <free>:
    32f8:	cf 93       	push	r28
    32fa:	df 93       	push	r29
    32fc:	00 97       	sbiw	r24, 0x00	; 0
    32fe:	09 f4       	brne	.+2      	; 0x3302 <free+0xa>
    3300:	81 c0       	rjmp	.+258    	; 0x3404 <free+0x10c>
    3302:	fc 01       	movw	r30, r24
    3304:	32 97       	sbiw	r30, 0x02	; 2
    3306:	13 82       	std	Z+3, r1	; 0x03
    3308:	12 82       	std	Z+2, r1	; 0x02
    330a:	a0 91 0b 0e 	lds	r26, 0x0E0B	; 0x800e0b <__flp>
    330e:	b0 91 0c 0e 	lds	r27, 0x0E0C	; 0x800e0c <__flp+0x1>
    3312:	10 97       	sbiw	r26, 0x00	; 0
    3314:	81 f4       	brne	.+32     	; 0x3336 <free+0x3e>
    3316:	20 81       	ld	r18, Z
    3318:	31 81       	ldd	r19, Z+1	; 0x01
    331a:	82 0f       	add	r24, r18
    331c:	93 1f       	adc	r25, r19
    331e:	20 91 09 0e 	lds	r18, 0x0E09	; 0x800e09 <__brkval>
    3322:	30 91 0a 0e 	lds	r19, 0x0E0A	; 0x800e0a <__brkval+0x1>
    3326:	28 17       	cp	r18, r24
    3328:	39 07       	cpc	r19, r25
    332a:	51 f5       	brne	.+84     	; 0x3380 <free+0x88>
    332c:	f0 93 0a 0e 	sts	0x0E0A, r31	; 0x800e0a <__brkval+0x1>
    3330:	e0 93 09 0e 	sts	0x0E09, r30	; 0x800e09 <__brkval>
    3334:	67 c0       	rjmp	.+206    	; 0x3404 <free+0x10c>
    3336:	ed 01       	movw	r28, r26
    3338:	20 e0       	ldi	r18, 0x00	; 0
    333a:	30 e0       	ldi	r19, 0x00	; 0
    333c:	ce 17       	cp	r28, r30
    333e:	df 07       	cpc	r29, r31
    3340:	40 f4       	brcc	.+16     	; 0x3352 <free+0x5a>
    3342:	4a 81       	ldd	r20, Y+2	; 0x02
    3344:	5b 81       	ldd	r21, Y+3	; 0x03
    3346:	9e 01       	movw	r18, r28
    3348:	41 15       	cp	r20, r1
    334a:	51 05       	cpc	r21, r1
    334c:	f1 f0       	breq	.+60     	; 0x338a <free+0x92>
    334e:	ea 01       	movw	r28, r20
    3350:	f5 cf       	rjmp	.-22     	; 0x333c <free+0x44>
    3352:	d3 83       	std	Z+3, r29	; 0x03
    3354:	c2 83       	std	Z+2, r28	; 0x02
    3356:	40 81       	ld	r20, Z
    3358:	51 81       	ldd	r21, Z+1	; 0x01
    335a:	84 0f       	add	r24, r20
    335c:	95 1f       	adc	r25, r21
    335e:	c8 17       	cp	r28, r24
    3360:	d9 07       	cpc	r29, r25
    3362:	59 f4       	brne	.+22     	; 0x337a <free+0x82>
    3364:	88 81       	ld	r24, Y
    3366:	99 81       	ldd	r25, Y+1	; 0x01
    3368:	84 0f       	add	r24, r20
    336a:	95 1f       	adc	r25, r21
    336c:	02 96       	adiw	r24, 0x02	; 2
    336e:	91 83       	std	Z+1, r25	; 0x01
    3370:	80 83       	st	Z, r24
    3372:	8a 81       	ldd	r24, Y+2	; 0x02
    3374:	9b 81       	ldd	r25, Y+3	; 0x03
    3376:	93 83       	std	Z+3, r25	; 0x03
    3378:	82 83       	std	Z+2, r24	; 0x02
    337a:	21 15       	cp	r18, r1
    337c:	31 05       	cpc	r19, r1
    337e:	29 f4       	brne	.+10     	; 0x338a <free+0x92>
    3380:	f0 93 0c 0e 	sts	0x0E0C, r31	; 0x800e0c <__flp+0x1>
    3384:	e0 93 0b 0e 	sts	0x0E0B, r30	; 0x800e0b <__flp>
    3388:	3d c0       	rjmp	.+122    	; 0x3404 <free+0x10c>
    338a:	e9 01       	movw	r28, r18
    338c:	fb 83       	std	Y+3, r31	; 0x03
    338e:	ea 83       	std	Y+2, r30	; 0x02
    3390:	49 91       	ld	r20, Y+
    3392:	59 91       	ld	r21, Y+
    3394:	c4 0f       	add	r28, r20
    3396:	d5 1f       	adc	r29, r21
    3398:	ec 17       	cp	r30, r28
    339a:	fd 07       	cpc	r31, r29
    339c:	61 f4       	brne	.+24     	; 0x33b6 <free+0xbe>
    339e:	80 81       	ld	r24, Z
    33a0:	91 81       	ldd	r25, Z+1	; 0x01
    33a2:	84 0f       	add	r24, r20
    33a4:	95 1f       	adc	r25, r21
    33a6:	02 96       	adiw	r24, 0x02	; 2
    33a8:	e9 01       	movw	r28, r18
    33aa:	99 83       	std	Y+1, r25	; 0x01
    33ac:	88 83       	st	Y, r24
    33ae:	82 81       	ldd	r24, Z+2	; 0x02
    33b0:	93 81       	ldd	r25, Z+3	; 0x03
    33b2:	9b 83       	std	Y+3, r25	; 0x03
    33b4:	8a 83       	std	Y+2, r24	; 0x02
    33b6:	e0 e0       	ldi	r30, 0x00	; 0
    33b8:	f0 e0       	ldi	r31, 0x00	; 0
    33ba:	12 96       	adiw	r26, 0x02	; 2
    33bc:	8d 91       	ld	r24, X+
    33be:	9c 91       	ld	r25, X
    33c0:	13 97       	sbiw	r26, 0x03	; 3
    33c2:	00 97       	sbiw	r24, 0x00	; 0
    33c4:	19 f0       	breq	.+6      	; 0x33cc <free+0xd4>
    33c6:	fd 01       	movw	r30, r26
    33c8:	dc 01       	movw	r26, r24
    33ca:	f7 cf       	rjmp	.-18     	; 0x33ba <free+0xc2>
    33cc:	8d 91       	ld	r24, X+
    33ce:	9c 91       	ld	r25, X
    33d0:	11 97       	sbiw	r26, 0x01	; 1
    33d2:	9d 01       	movw	r18, r26
    33d4:	2e 5f       	subi	r18, 0xFE	; 254
    33d6:	3f 4f       	sbci	r19, 0xFF	; 255
    33d8:	82 0f       	add	r24, r18
    33da:	93 1f       	adc	r25, r19
    33dc:	20 91 09 0e 	lds	r18, 0x0E09	; 0x800e09 <__brkval>
    33e0:	30 91 0a 0e 	lds	r19, 0x0E0A	; 0x800e0a <__brkval+0x1>
    33e4:	28 17       	cp	r18, r24
    33e6:	39 07       	cpc	r19, r25
    33e8:	69 f4       	brne	.+26     	; 0x3404 <free+0x10c>
    33ea:	30 97       	sbiw	r30, 0x00	; 0
    33ec:	29 f4       	brne	.+10     	; 0x33f8 <free+0x100>
    33ee:	10 92 0c 0e 	sts	0x0E0C, r1	; 0x800e0c <__flp+0x1>
    33f2:	10 92 0b 0e 	sts	0x0E0B, r1	; 0x800e0b <__flp>
    33f6:	02 c0       	rjmp	.+4      	; 0x33fc <free+0x104>
    33f8:	13 82       	std	Z+3, r1	; 0x03
    33fa:	12 82       	std	Z+2, r1	; 0x02
    33fc:	b0 93 0a 0e 	sts	0x0E0A, r27	; 0x800e0a <__brkval+0x1>
    3400:	a0 93 09 0e 	sts	0x0E09, r26	; 0x800e09 <__brkval>
    3404:	df 91       	pop	r29
    3406:	cf 91       	pop	r28
    3408:	08 95       	ret

0000340a <abort>:
    340a:	81 e0       	ldi	r24, 0x01	; 1
    340c:	90 e0       	ldi	r25, 0x00	; 0
    340e:	f8 94       	cli
    3410:	05 c3       	rjmp	.+1546   	; 0x3a1c <_exit>

00003412 <memcpy>:
    3412:	fb 01       	movw	r30, r22
    3414:	dc 01       	movw	r26, r24
    3416:	02 c0       	rjmp	.+4      	; 0x341c <memcpy+0xa>
    3418:	01 90       	ld	r0, Z+
    341a:	0d 92       	st	X+, r0
    341c:	41 50       	subi	r20, 0x01	; 1
    341e:	50 40       	sbci	r21, 0x00	; 0
    3420:	d8 f7       	brcc	.-10     	; 0x3418 <memcpy+0x6>
    3422:	08 95       	ret

00003424 <memset>:
    3424:	dc 01       	movw	r26, r24
    3426:	01 c0       	rjmp	.+2      	; 0x342a <memset+0x6>
    3428:	6d 93       	st	X+, r22
    342a:	41 50       	subi	r20, 0x01	; 1
    342c:	50 40       	sbci	r21, 0x00	; 0
    342e:	e0 f7       	brcc	.-8      	; 0x3428 <memset+0x4>
    3430:	08 95       	ret

00003432 <printf>:
    3432:	cf 93       	push	r28
    3434:	df 93       	push	r29
    3436:	cd b7       	in	r28, 0x3d	; 61
    3438:	de b7       	in	r29, 0x3e	; 62
    343a:	ae 01       	movw	r20, r28
    343c:	4a 5f       	subi	r20, 0xFA	; 250
    343e:	5f 4f       	sbci	r21, 0xFF	; 255
    3440:	fa 01       	movw	r30, r20
    3442:	61 91       	ld	r22, Z+
    3444:	71 91       	ld	r23, Z+
    3446:	af 01       	movw	r20, r30
    3448:	80 91 0f 0e 	lds	r24, 0x0E0F	; 0x800e0f <__iob+0x2>
    344c:	90 91 10 0e 	lds	r25, 0x0E10	; 0x800e10 <__iob+0x3>
    3450:	38 d0       	rcall	.+112    	; 0x34c2 <vfprintf>
    3452:	df 91       	pop	r29
    3454:	cf 91       	pop	r28
    3456:	08 95       	ret

00003458 <putchar>:
    3458:	60 91 0f 0e 	lds	r22, 0x0E0F	; 0x800e0f <__iob+0x2>
    345c:	70 91 10 0e 	lds	r23, 0x0E10	; 0x800e10 <__iob+0x3>
    3460:	43 c2       	rjmp	.+1158   	; 0x38e8 <fputc>

00003462 <puts>:
    3462:	0f 93       	push	r16
    3464:	1f 93       	push	r17
    3466:	cf 93       	push	r28
    3468:	df 93       	push	r29
    346a:	e0 91 0f 0e 	lds	r30, 0x0E0F	; 0x800e0f <__iob+0x2>
    346e:	f0 91 10 0e 	lds	r31, 0x0E10	; 0x800e10 <__iob+0x3>
    3472:	23 81       	ldd	r18, Z+3	; 0x03
    3474:	21 ff       	sbrs	r18, 1
    3476:	1b c0       	rjmp	.+54     	; 0x34ae <puts+0x4c>
    3478:	8c 01       	movw	r16, r24
    347a:	d0 e0       	ldi	r29, 0x00	; 0
    347c:	c0 e0       	ldi	r28, 0x00	; 0
    347e:	f8 01       	movw	r30, r16
    3480:	81 91       	ld	r24, Z+
    3482:	8f 01       	movw	r16, r30
    3484:	60 91 0f 0e 	lds	r22, 0x0E0F	; 0x800e0f <__iob+0x2>
    3488:	70 91 10 0e 	lds	r23, 0x0E10	; 0x800e10 <__iob+0x3>
    348c:	db 01       	movw	r26, r22
    348e:	18 96       	adiw	r26, 0x08	; 8
    3490:	ed 91       	ld	r30, X+
    3492:	fc 91       	ld	r31, X
    3494:	19 97       	sbiw	r26, 0x09	; 9
    3496:	88 23       	and	r24, r24
    3498:	31 f0       	breq	.+12     	; 0x34a6 <puts+0x44>
    349a:	19 95       	eicall
    349c:	89 2b       	or	r24, r25
    349e:	79 f3       	breq	.-34     	; 0x347e <puts+0x1c>
    34a0:	df ef       	ldi	r29, 0xFF	; 255
    34a2:	cf ef       	ldi	r28, 0xFF	; 255
    34a4:	ec cf       	rjmp	.-40     	; 0x347e <puts+0x1c>
    34a6:	8a e0       	ldi	r24, 0x0A	; 10
    34a8:	19 95       	eicall
    34aa:	89 2b       	or	r24, r25
    34ac:	19 f0       	breq	.+6      	; 0x34b4 <puts+0x52>
    34ae:	8f ef       	ldi	r24, 0xFF	; 255
    34b0:	9f ef       	ldi	r25, 0xFF	; 255
    34b2:	02 c0       	rjmp	.+4      	; 0x34b8 <puts+0x56>
    34b4:	8d 2f       	mov	r24, r29
    34b6:	9c 2f       	mov	r25, r28
    34b8:	df 91       	pop	r29
    34ba:	cf 91       	pop	r28
    34bc:	1f 91       	pop	r17
    34be:	0f 91       	pop	r16
    34c0:	08 95       	ret

000034c2 <vfprintf>:
    34c2:	2f 92       	push	r2
    34c4:	3f 92       	push	r3
    34c6:	4f 92       	push	r4
    34c8:	5f 92       	push	r5
    34ca:	6f 92       	push	r6
    34cc:	7f 92       	push	r7
    34ce:	8f 92       	push	r8
    34d0:	9f 92       	push	r9
    34d2:	af 92       	push	r10
    34d4:	bf 92       	push	r11
    34d6:	cf 92       	push	r12
    34d8:	df 92       	push	r13
    34da:	ef 92       	push	r14
    34dc:	ff 92       	push	r15
    34de:	0f 93       	push	r16
    34e0:	1f 93       	push	r17
    34e2:	cf 93       	push	r28
    34e4:	df 93       	push	r29
    34e6:	cd b7       	in	r28, 0x3d	; 61
    34e8:	de b7       	in	r29, 0x3e	; 62
    34ea:	2b 97       	sbiw	r28, 0x0b	; 11
    34ec:	0f b6       	in	r0, 0x3f	; 63
    34ee:	f8 94       	cli
    34f0:	de bf       	out	0x3e, r29	; 62
    34f2:	0f be       	out	0x3f, r0	; 63
    34f4:	cd bf       	out	0x3d, r28	; 61
    34f6:	6c 01       	movw	r12, r24
    34f8:	7b 01       	movw	r14, r22
    34fa:	8a 01       	movw	r16, r20
    34fc:	fc 01       	movw	r30, r24
    34fe:	17 82       	std	Z+7, r1	; 0x07
    3500:	16 82       	std	Z+6, r1	; 0x06
    3502:	83 81       	ldd	r24, Z+3	; 0x03
    3504:	81 ff       	sbrs	r24, 1
    3506:	bf c1       	rjmp	.+894    	; 0x3886 <vfprintf+0x3c4>
    3508:	ce 01       	movw	r24, r28
    350a:	01 96       	adiw	r24, 0x01	; 1
    350c:	3c 01       	movw	r6, r24
    350e:	f6 01       	movw	r30, r12
    3510:	93 81       	ldd	r25, Z+3	; 0x03
    3512:	f7 01       	movw	r30, r14
    3514:	93 fd       	sbrc	r25, 3
    3516:	85 91       	lpm	r24, Z+
    3518:	93 ff       	sbrs	r25, 3
    351a:	81 91       	ld	r24, Z+
    351c:	7f 01       	movw	r14, r30
    351e:	88 23       	and	r24, r24
    3520:	09 f4       	brne	.+2      	; 0x3524 <vfprintf+0x62>
    3522:	ad c1       	rjmp	.+858    	; 0x387e <vfprintf+0x3bc>
    3524:	85 32       	cpi	r24, 0x25	; 37
    3526:	39 f4       	brne	.+14     	; 0x3536 <vfprintf+0x74>
    3528:	93 fd       	sbrc	r25, 3
    352a:	85 91       	lpm	r24, Z+
    352c:	93 ff       	sbrs	r25, 3
    352e:	81 91       	ld	r24, Z+
    3530:	7f 01       	movw	r14, r30
    3532:	85 32       	cpi	r24, 0x25	; 37
    3534:	21 f4       	brne	.+8      	; 0x353e <vfprintf+0x7c>
    3536:	b6 01       	movw	r22, r12
    3538:	90 e0       	ldi	r25, 0x00	; 0
    353a:	d6 d1       	rcall	.+940    	; 0x38e8 <fputc>
    353c:	e8 cf       	rjmp	.-48     	; 0x350e <vfprintf+0x4c>
    353e:	91 2c       	mov	r9, r1
    3540:	21 2c       	mov	r2, r1
    3542:	31 2c       	mov	r3, r1
    3544:	ff e1       	ldi	r31, 0x1F	; 31
    3546:	f3 15       	cp	r31, r3
    3548:	d8 f0       	brcs	.+54     	; 0x3580 <vfprintf+0xbe>
    354a:	8b 32       	cpi	r24, 0x2B	; 43
    354c:	79 f0       	breq	.+30     	; 0x356c <vfprintf+0xaa>
    354e:	38 f4       	brcc	.+14     	; 0x355e <vfprintf+0x9c>
    3550:	80 32       	cpi	r24, 0x20	; 32
    3552:	79 f0       	breq	.+30     	; 0x3572 <vfprintf+0xb0>
    3554:	83 32       	cpi	r24, 0x23	; 35
    3556:	a1 f4       	brne	.+40     	; 0x3580 <vfprintf+0xbe>
    3558:	23 2d       	mov	r18, r3
    355a:	20 61       	ori	r18, 0x10	; 16
    355c:	1d c0       	rjmp	.+58     	; 0x3598 <vfprintf+0xd6>
    355e:	8d 32       	cpi	r24, 0x2D	; 45
    3560:	61 f0       	breq	.+24     	; 0x357a <vfprintf+0xb8>
    3562:	80 33       	cpi	r24, 0x30	; 48
    3564:	69 f4       	brne	.+26     	; 0x3580 <vfprintf+0xbe>
    3566:	23 2d       	mov	r18, r3
    3568:	21 60       	ori	r18, 0x01	; 1
    356a:	16 c0       	rjmp	.+44     	; 0x3598 <vfprintf+0xd6>
    356c:	83 2d       	mov	r24, r3
    356e:	82 60       	ori	r24, 0x02	; 2
    3570:	38 2e       	mov	r3, r24
    3572:	e3 2d       	mov	r30, r3
    3574:	e4 60       	ori	r30, 0x04	; 4
    3576:	3e 2e       	mov	r3, r30
    3578:	2a c0       	rjmp	.+84     	; 0x35ce <vfprintf+0x10c>
    357a:	f3 2d       	mov	r31, r3
    357c:	f8 60       	ori	r31, 0x08	; 8
    357e:	1d c0       	rjmp	.+58     	; 0x35ba <vfprintf+0xf8>
    3580:	37 fc       	sbrc	r3, 7
    3582:	2d c0       	rjmp	.+90     	; 0x35de <vfprintf+0x11c>
    3584:	20 ed       	ldi	r18, 0xD0	; 208
    3586:	28 0f       	add	r18, r24
    3588:	2a 30       	cpi	r18, 0x0A	; 10
    358a:	40 f0       	brcs	.+16     	; 0x359c <vfprintf+0xda>
    358c:	8e 32       	cpi	r24, 0x2E	; 46
    358e:	b9 f4       	brne	.+46     	; 0x35be <vfprintf+0xfc>
    3590:	36 fc       	sbrc	r3, 6
    3592:	75 c1       	rjmp	.+746    	; 0x387e <vfprintf+0x3bc>
    3594:	23 2d       	mov	r18, r3
    3596:	20 64       	ori	r18, 0x40	; 64
    3598:	32 2e       	mov	r3, r18
    359a:	19 c0       	rjmp	.+50     	; 0x35ce <vfprintf+0x10c>
    359c:	36 fe       	sbrs	r3, 6
    359e:	06 c0       	rjmp	.+12     	; 0x35ac <vfprintf+0xea>
    35a0:	8a e0       	ldi	r24, 0x0A	; 10
    35a2:	98 9e       	mul	r9, r24
    35a4:	20 0d       	add	r18, r0
    35a6:	11 24       	eor	r1, r1
    35a8:	92 2e       	mov	r9, r18
    35aa:	11 c0       	rjmp	.+34     	; 0x35ce <vfprintf+0x10c>
    35ac:	ea e0       	ldi	r30, 0x0A	; 10
    35ae:	2e 9e       	mul	r2, r30
    35b0:	20 0d       	add	r18, r0
    35b2:	11 24       	eor	r1, r1
    35b4:	22 2e       	mov	r2, r18
    35b6:	f3 2d       	mov	r31, r3
    35b8:	f0 62       	ori	r31, 0x20	; 32
    35ba:	3f 2e       	mov	r3, r31
    35bc:	08 c0       	rjmp	.+16     	; 0x35ce <vfprintf+0x10c>
    35be:	8c 36       	cpi	r24, 0x6C	; 108
    35c0:	21 f4       	brne	.+8      	; 0x35ca <vfprintf+0x108>
    35c2:	83 2d       	mov	r24, r3
    35c4:	80 68       	ori	r24, 0x80	; 128
    35c6:	38 2e       	mov	r3, r24
    35c8:	02 c0       	rjmp	.+4      	; 0x35ce <vfprintf+0x10c>
    35ca:	88 36       	cpi	r24, 0x68	; 104
    35cc:	41 f4       	brne	.+16     	; 0x35de <vfprintf+0x11c>
    35ce:	f7 01       	movw	r30, r14
    35d0:	93 fd       	sbrc	r25, 3
    35d2:	85 91       	lpm	r24, Z+
    35d4:	93 ff       	sbrs	r25, 3
    35d6:	81 91       	ld	r24, Z+
    35d8:	7f 01       	movw	r14, r30
    35da:	81 11       	cpse	r24, r1
    35dc:	b3 cf       	rjmp	.-154    	; 0x3544 <vfprintf+0x82>
    35de:	98 2f       	mov	r25, r24
    35e0:	9f 7d       	andi	r25, 0xDF	; 223
    35e2:	95 54       	subi	r25, 0x45	; 69
    35e4:	93 30       	cpi	r25, 0x03	; 3
    35e6:	28 f4       	brcc	.+10     	; 0x35f2 <vfprintf+0x130>
    35e8:	0c 5f       	subi	r16, 0xFC	; 252
    35ea:	1f 4f       	sbci	r17, 0xFF	; 255
    35ec:	9f e3       	ldi	r25, 0x3F	; 63
    35ee:	99 83       	std	Y+1, r25	; 0x01
    35f0:	0d c0       	rjmp	.+26     	; 0x360c <vfprintf+0x14a>
    35f2:	83 36       	cpi	r24, 0x63	; 99
    35f4:	31 f0       	breq	.+12     	; 0x3602 <vfprintf+0x140>
    35f6:	83 37       	cpi	r24, 0x73	; 115
    35f8:	71 f0       	breq	.+28     	; 0x3616 <vfprintf+0x154>
    35fa:	83 35       	cpi	r24, 0x53	; 83
    35fc:	09 f0       	breq	.+2      	; 0x3600 <vfprintf+0x13e>
    35fe:	55 c0       	rjmp	.+170    	; 0x36aa <vfprintf+0x1e8>
    3600:	20 c0       	rjmp	.+64     	; 0x3642 <vfprintf+0x180>
    3602:	f8 01       	movw	r30, r16
    3604:	80 81       	ld	r24, Z
    3606:	89 83       	std	Y+1, r24	; 0x01
    3608:	0e 5f       	subi	r16, 0xFE	; 254
    360a:	1f 4f       	sbci	r17, 0xFF	; 255
    360c:	88 24       	eor	r8, r8
    360e:	83 94       	inc	r8
    3610:	91 2c       	mov	r9, r1
    3612:	53 01       	movw	r10, r6
    3614:	12 c0       	rjmp	.+36     	; 0x363a <vfprintf+0x178>
    3616:	28 01       	movw	r4, r16
    3618:	f2 e0       	ldi	r31, 0x02	; 2
    361a:	4f 0e       	add	r4, r31
    361c:	51 1c       	adc	r5, r1
    361e:	f8 01       	movw	r30, r16
    3620:	a0 80       	ld	r10, Z
    3622:	b1 80       	ldd	r11, Z+1	; 0x01
    3624:	36 fe       	sbrs	r3, 6
    3626:	03 c0       	rjmp	.+6      	; 0x362e <vfprintf+0x16c>
    3628:	69 2d       	mov	r22, r9
    362a:	70 e0       	ldi	r23, 0x00	; 0
    362c:	02 c0       	rjmp	.+4      	; 0x3632 <vfprintf+0x170>
    362e:	6f ef       	ldi	r22, 0xFF	; 255
    3630:	7f ef       	ldi	r23, 0xFF	; 255
    3632:	c5 01       	movw	r24, r10
    3634:	4e d1       	rcall	.+668    	; 0x38d2 <strnlen>
    3636:	4c 01       	movw	r8, r24
    3638:	82 01       	movw	r16, r4
    363a:	f3 2d       	mov	r31, r3
    363c:	ff 77       	andi	r31, 0x7F	; 127
    363e:	3f 2e       	mov	r3, r31
    3640:	15 c0       	rjmp	.+42     	; 0x366c <vfprintf+0x1aa>
    3642:	28 01       	movw	r4, r16
    3644:	22 e0       	ldi	r18, 0x02	; 2
    3646:	42 0e       	add	r4, r18
    3648:	51 1c       	adc	r5, r1
    364a:	f8 01       	movw	r30, r16
    364c:	a0 80       	ld	r10, Z
    364e:	b1 80       	ldd	r11, Z+1	; 0x01
    3650:	36 fe       	sbrs	r3, 6
    3652:	03 c0       	rjmp	.+6      	; 0x365a <vfprintf+0x198>
    3654:	69 2d       	mov	r22, r9
    3656:	70 e0       	ldi	r23, 0x00	; 0
    3658:	02 c0       	rjmp	.+4      	; 0x365e <vfprintf+0x19c>
    365a:	6f ef       	ldi	r22, 0xFF	; 255
    365c:	7f ef       	ldi	r23, 0xFF	; 255
    365e:	c5 01       	movw	r24, r10
    3660:	2d d1       	rcall	.+602    	; 0x38bc <strnlen_P>
    3662:	4c 01       	movw	r8, r24
    3664:	f3 2d       	mov	r31, r3
    3666:	f0 68       	ori	r31, 0x80	; 128
    3668:	3f 2e       	mov	r3, r31
    366a:	82 01       	movw	r16, r4
    366c:	33 fc       	sbrc	r3, 3
    366e:	19 c0       	rjmp	.+50     	; 0x36a2 <vfprintf+0x1e0>
    3670:	82 2d       	mov	r24, r2
    3672:	90 e0       	ldi	r25, 0x00	; 0
    3674:	88 16       	cp	r8, r24
    3676:	99 06       	cpc	r9, r25
    3678:	a0 f4       	brcc	.+40     	; 0x36a2 <vfprintf+0x1e0>
    367a:	b6 01       	movw	r22, r12
    367c:	80 e2       	ldi	r24, 0x20	; 32
    367e:	90 e0       	ldi	r25, 0x00	; 0
    3680:	33 d1       	rcall	.+614    	; 0x38e8 <fputc>
    3682:	2a 94       	dec	r2
    3684:	f5 cf       	rjmp	.-22     	; 0x3670 <vfprintf+0x1ae>
    3686:	f5 01       	movw	r30, r10
    3688:	37 fc       	sbrc	r3, 7
    368a:	85 91       	lpm	r24, Z+
    368c:	37 fe       	sbrs	r3, 7
    368e:	81 91       	ld	r24, Z+
    3690:	5f 01       	movw	r10, r30
    3692:	b6 01       	movw	r22, r12
    3694:	90 e0       	ldi	r25, 0x00	; 0
    3696:	28 d1       	rcall	.+592    	; 0x38e8 <fputc>
    3698:	21 10       	cpse	r2, r1
    369a:	2a 94       	dec	r2
    369c:	21 e0       	ldi	r18, 0x01	; 1
    369e:	82 1a       	sub	r8, r18
    36a0:	91 08       	sbc	r9, r1
    36a2:	81 14       	cp	r8, r1
    36a4:	91 04       	cpc	r9, r1
    36a6:	79 f7       	brne	.-34     	; 0x3686 <vfprintf+0x1c4>
    36a8:	e1 c0       	rjmp	.+450    	; 0x386c <vfprintf+0x3aa>
    36aa:	84 36       	cpi	r24, 0x64	; 100
    36ac:	11 f0       	breq	.+4      	; 0x36b2 <vfprintf+0x1f0>
    36ae:	89 36       	cpi	r24, 0x69	; 105
    36b0:	39 f5       	brne	.+78     	; 0x3700 <vfprintf+0x23e>
    36b2:	f8 01       	movw	r30, r16
    36b4:	37 fe       	sbrs	r3, 7
    36b6:	07 c0       	rjmp	.+14     	; 0x36c6 <vfprintf+0x204>
    36b8:	60 81       	ld	r22, Z
    36ba:	71 81       	ldd	r23, Z+1	; 0x01
    36bc:	82 81       	ldd	r24, Z+2	; 0x02
    36be:	93 81       	ldd	r25, Z+3	; 0x03
    36c0:	0c 5f       	subi	r16, 0xFC	; 252
    36c2:	1f 4f       	sbci	r17, 0xFF	; 255
    36c4:	08 c0       	rjmp	.+16     	; 0x36d6 <vfprintf+0x214>
    36c6:	60 81       	ld	r22, Z
    36c8:	71 81       	ldd	r23, Z+1	; 0x01
    36ca:	07 2e       	mov	r0, r23
    36cc:	00 0c       	add	r0, r0
    36ce:	88 0b       	sbc	r24, r24
    36d0:	99 0b       	sbc	r25, r25
    36d2:	0e 5f       	subi	r16, 0xFE	; 254
    36d4:	1f 4f       	sbci	r17, 0xFF	; 255
    36d6:	f3 2d       	mov	r31, r3
    36d8:	ff 76       	andi	r31, 0x6F	; 111
    36da:	3f 2e       	mov	r3, r31
    36dc:	97 ff       	sbrs	r25, 7
    36de:	09 c0       	rjmp	.+18     	; 0x36f2 <vfprintf+0x230>
    36e0:	90 95       	com	r25
    36e2:	80 95       	com	r24
    36e4:	70 95       	com	r23
    36e6:	61 95       	neg	r22
    36e8:	7f 4f       	sbci	r23, 0xFF	; 255
    36ea:	8f 4f       	sbci	r24, 0xFF	; 255
    36ec:	9f 4f       	sbci	r25, 0xFF	; 255
    36ee:	f0 68       	ori	r31, 0x80	; 128
    36f0:	3f 2e       	mov	r3, r31
    36f2:	2a e0       	ldi	r18, 0x0A	; 10
    36f4:	30 e0       	ldi	r19, 0x00	; 0
    36f6:	a3 01       	movw	r20, r6
    36f8:	33 d1       	rcall	.+614    	; 0x3960 <__ultoa_invert>
    36fa:	88 2e       	mov	r8, r24
    36fc:	86 18       	sub	r8, r6
    36fe:	44 c0       	rjmp	.+136    	; 0x3788 <vfprintf+0x2c6>
    3700:	85 37       	cpi	r24, 0x75	; 117
    3702:	31 f4       	brne	.+12     	; 0x3710 <vfprintf+0x24e>
    3704:	23 2d       	mov	r18, r3
    3706:	2f 7e       	andi	r18, 0xEF	; 239
    3708:	b2 2e       	mov	r11, r18
    370a:	2a e0       	ldi	r18, 0x0A	; 10
    370c:	30 e0       	ldi	r19, 0x00	; 0
    370e:	25 c0       	rjmp	.+74     	; 0x375a <vfprintf+0x298>
    3710:	93 2d       	mov	r25, r3
    3712:	99 7f       	andi	r25, 0xF9	; 249
    3714:	b9 2e       	mov	r11, r25
    3716:	8f 36       	cpi	r24, 0x6F	; 111
    3718:	c1 f0       	breq	.+48     	; 0x374a <vfprintf+0x288>
    371a:	18 f4       	brcc	.+6      	; 0x3722 <vfprintf+0x260>
    371c:	88 35       	cpi	r24, 0x58	; 88
    371e:	79 f0       	breq	.+30     	; 0x373e <vfprintf+0x27c>
    3720:	ae c0       	rjmp	.+348    	; 0x387e <vfprintf+0x3bc>
    3722:	80 37       	cpi	r24, 0x70	; 112
    3724:	19 f0       	breq	.+6      	; 0x372c <vfprintf+0x26a>
    3726:	88 37       	cpi	r24, 0x78	; 120
    3728:	21 f0       	breq	.+8      	; 0x3732 <vfprintf+0x270>
    372a:	a9 c0       	rjmp	.+338    	; 0x387e <vfprintf+0x3bc>
    372c:	e9 2f       	mov	r30, r25
    372e:	e0 61       	ori	r30, 0x10	; 16
    3730:	be 2e       	mov	r11, r30
    3732:	b4 fe       	sbrs	r11, 4
    3734:	0d c0       	rjmp	.+26     	; 0x3750 <vfprintf+0x28e>
    3736:	fb 2d       	mov	r31, r11
    3738:	f4 60       	ori	r31, 0x04	; 4
    373a:	bf 2e       	mov	r11, r31
    373c:	09 c0       	rjmp	.+18     	; 0x3750 <vfprintf+0x28e>
    373e:	34 fe       	sbrs	r3, 4
    3740:	0a c0       	rjmp	.+20     	; 0x3756 <vfprintf+0x294>
    3742:	29 2f       	mov	r18, r25
    3744:	26 60       	ori	r18, 0x06	; 6
    3746:	b2 2e       	mov	r11, r18
    3748:	06 c0       	rjmp	.+12     	; 0x3756 <vfprintf+0x294>
    374a:	28 e0       	ldi	r18, 0x08	; 8
    374c:	30 e0       	ldi	r19, 0x00	; 0
    374e:	05 c0       	rjmp	.+10     	; 0x375a <vfprintf+0x298>
    3750:	20 e1       	ldi	r18, 0x10	; 16
    3752:	30 e0       	ldi	r19, 0x00	; 0
    3754:	02 c0       	rjmp	.+4      	; 0x375a <vfprintf+0x298>
    3756:	20 e1       	ldi	r18, 0x10	; 16
    3758:	32 e0       	ldi	r19, 0x02	; 2
    375a:	f8 01       	movw	r30, r16
    375c:	b7 fe       	sbrs	r11, 7
    375e:	07 c0       	rjmp	.+14     	; 0x376e <vfprintf+0x2ac>
    3760:	60 81       	ld	r22, Z
    3762:	71 81       	ldd	r23, Z+1	; 0x01
    3764:	82 81       	ldd	r24, Z+2	; 0x02
    3766:	93 81       	ldd	r25, Z+3	; 0x03
    3768:	0c 5f       	subi	r16, 0xFC	; 252
    376a:	1f 4f       	sbci	r17, 0xFF	; 255
    376c:	06 c0       	rjmp	.+12     	; 0x377a <vfprintf+0x2b8>
    376e:	60 81       	ld	r22, Z
    3770:	71 81       	ldd	r23, Z+1	; 0x01
    3772:	80 e0       	ldi	r24, 0x00	; 0
    3774:	90 e0       	ldi	r25, 0x00	; 0
    3776:	0e 5f       	subi	r16, 0xFE	; 254
    3778:	1f 4f       	sbci	r17, 0xFF	; 255
    377a:	a3 01       	movw	r20, r6
    377c:	f1 d0       	rcall	.+482    	; 0x3960 <__ultoa_invert>
    377e:	88 2e       	mov	r8, r24
    3780:	86 18       	sub	r8, r6
    3782:	fb 2d       	mov	r31, r11
    3784:	ff 77       	andi	r31, 0x7F	; 127
    3786:	3f 2e       	mov	r3, r31
    3788:	36 fe       	sbrs	r3, 6
    378a:	0d c0       	rjmp	.+26     	; 0x37a6 <vfprintf+0x2e4>
    378c:	23 2d       	mov	r18, r3
    378e:	2e 7f       	andi	r18, 0xFE	; 254
    3790:	a2 2e       	mov	r10, r18
    3792:	89 14       	cp	r8, r9
    3794:	58 f4       	brcc	.+22     	; 0x37ac <vfprintf+0x2ea>
    3796:	34 fe       	sbrs	r3, 4
    3798:	0b c0       	rjmp	.+22     	; 0x37b0 <vfprintf+0x2ee>
    379a:	32 fc       	sbrc	r3, 2
    379c:	09 c0       	rjmp	.+18     	; 0x37b0 <vfprintf+0x2ee>
    379e:	83 2d       	mov	r24, r3
    37a0:	8e 7e       	andi	r24, 0xEE	; 238
    37a2:	a8 2e       	mov	r10, r24
    37a4:	05 c0       	rjmp	.+10     	; 0x37b0 <vfprintf+0x2ee>
    37a6:	b8 2c       	mov	r11, r8
    37a8:	a3 2c       	mov	r10, r3
    37aa:	03 c0       	rjmp	.+6      	; 0x37b2 <vfprintf+0x2f0>
    37ac:	b8 2c       	mov	r11, r8
    37ae:	01 c0       	rjmp	.+2      	; 0x37b2 <vfprintf+0x2f0>
    37b0:	b9 2c       	mov	r11, r9
    37b2:	a4 fe       	sbrs	r10, 4
    37b4:	0f c0       	rjmp	.+30     	; 0x37d4 <vfprintf+0x312>
    37b6:	fe 01       	movw	r30, r28
    37b8:	e8 0d       	add	r30, r8
    37ba:	f1 1d       	adc	r31, r1
    37bc:	80 81       	ld	r24, Z
    37be:	80 33       	cpi	r24, 0x30	; 48
    37c0:	21 f4       	brne	.+8      	; 0x37ca <vfprintf+0x308>
    37c2:	9a 2d       	mov	r25, r10
    37c4:	99 7e       	andi	r25, 0xE9	; 233
    37c6:	a9 2e       	mov	r10, r25
    37c8:	09 c0       	rjmp	.+18     	; 0x37dc <vfprintf+0x31a>
    37ca:	a2 fe       	sbrs	r10, 2
    37cc:	06 c0       	rjmp	.+12     	; 0x37da <vfprintf+0x318>
    37ce:	b3 94       	inc	r11
    37d0:	b3 94       	inc	r11
    37d2:	04 c0       	rjmp	.+8      	; 0x37dc <vfprintf+0x31a>
    37d4:	8a 2d       	mov	r24, r10
    37d6:	86 78       	andi	r24, 0x86	; 134
    37d8:	09 f0       	breq	.+2      	; 0x37dc <vfprintf+0x31a>
    37da:	b3 94       	inc	r11
    37dc:	a3 fc       	sbrc	r10, 3
    37de:	10 c0       	rjmp	.+32     	; 0x3800 <vfprintf+0x33e>
    37e0:	a0 fe       	sbrs	r10, 0
    37e2:	06 c0       	rjmp	.+12     	; 0x37f0 <vfprintf+0x32e>
    37e4:	b2 14       	cp	r11, r2
    37e6:	80 f4       	brcc	.+32     	; 0x3808 <vfprintf+0x346>
    37e8:	28 0c       	add	r2, r8
    37ea:	92 2c       	mov	r9, r2
    37ec:	9b 18       	sub	r9, r11
    37ee:	0d c0       	rjmp	.+26     	; 0x380a <vfprintf+0x348>
    37f0:	b2 14       	cp	r11, r2
    37f2:	58 f4       	brcc	.+22     	; 0x380a <vfprintf+0x348>
    37f4:	b6 01       	movw	r22, r12
    37f6:	80 e2       	ldi	r24, 0x20	; 32
    37f8:	90 e0       	ldi	r25, 0x00	; 0
    37fa:	76 d0       	rcall	.+236    	; 0x38e8 <fputc>
    37fc:	b3 94       	inc	r11
    37fe:	f8 cf       	rjmp	.-16     	; 0x37f0 <vfprintf+0x32e>
    3800:	b2 14       	cp	r11, r2
    3802:	18 f4       	brcc	.+6      	; 0x380a <vfprintf+0x348>
    3804:	2b 18       	sub	r2, r11
    3806:	02 c0       	rjmp	.+4      	; 0x380c <vfprintf+0x34a>
    3808:	98 2c       	mov	r9, r8
    380a:	21 2c       	mov	r2, r1
    380c:	a4 fe       	sbrs	r10, 4
    380e:	0f c0       	rjmp	.+30     	; 0x382e <vfprintf+0x36c>
    3810:	b6 01       	movw	r22, r12
    3812:	80 e3       	ldi	r24, 0x30	; 48
    3814:	90 e0       	ldi	r25, 0x00	; 0
    3816:	68 d0       	rcall	.+208    	; 0x38e8 <fputc>
    3818:	a2 fe       	sbrs	r10, 2
    381a:	16 c0       	rjmp	.+44     	; 0x3848 <vfprintf+0x386>
    381c:	a1 fc       	sbrc	r10, 1
    381e:	03 c0       	rjmp	.+6      	; 0x3826 <vfprintf+0x364>
    3820:	88 e7       	ldi	r24, 0x78	; 120
    3822:	90 e0       	ldi	r25, 0x00	; 0
    3824:	02 c0       	rjmp	.+4      	; 0x382a <vfprintf+0x368>
    3826:	88 e5       	ldi	r24, 0x58	; 88
    3828:	90 e0       	ldi	r25, 0x00	; 0
    382a:	b6 01       	movw	r22, r12
    382c:	0c c0       	rjmp	.+24     	; 0x3846 <vfprintf+0x384>
    382e:	8a 2d       	mov	r24, r10
    3830:	86 78       	andi	r24, 0x86	; 134
    3832:	51 f0       	breq	.+20     	; 0x3848 <vfprintf+0x386>
    3834:	a1 fe       	sbrs	r10, 1
    3836:	02 c0       	rjmp	.+4      	; 0x383c <vfprintf+0x37a>
    3838:	8b e2       	ldi	r24, 0x2B	; 43
    383a:	01 c0       	rjmp	.+2      	; 0x383e <vfprintf+0x37c>
    383c:	80 e2       	ldi	r24, 0x20	; 32
    383e:	a7 fc       	sbrc	r10, 7
    3840:	8d e2       	ldi	r24, 0x2D	; 45
    3842:	b6 01       	movw	r22, r12
    3844:	90 e0       	ldi	r25, 0x00	; 0
    3846:	50 d0       	rcall	.+160    	; 0x38e8 <fputc>
    3848:	89 14       	cp	r8, r9
    384a:	30 f4       	brcc	.+12     	; 0x3858 <vfprintf+0x396>
    384c:	b6 01       	movw	r22, r12
    384e:	80 e3       	ldi	r24, 0x30	; 48
    3850:	90 e0       	ldi	r25, 0x00	; 0
    3852:	4a d0       	rcall	.+148    	; 0x38e8 <fputc>
    3854:	9a 94       	dec	r9
    3856:	f8 cf       	rjmp	.-16     	; 0x3848 <vfprintf+0x386>
    3858:	8a 94       	dec	r8
    385a:	f3 01       	movw	r30, r6
    385c:	e8 0d       	add	r30, r8
    385e:	f1 1d       	adc	r31, r1
    3860:	80 81       	ld	r24, Z
    3862:	b6 01       	movw	r22, r12
    3864:	90 e0       	ldi	r25, 0x00	; 0
    3866:	40 d0       	rcall	.+128    	; 0x38e8 <fputc>
    3868:	81 10       	cpse	r8, r1
    386a:	f6 cf       	rjmp	.-20     	; 0x3858 <vfprintf+0x396>
    386c:	22 20       	and	r2, r2
    386e:	09 f4       	brne	.+2      	; 0x3872 <vfprintf+0x3b0>
    3870:	4e ce       	rjmp	.-868    	; 0x350e <vfprintf+0x4c>
    3872:	b6 01       	movw	r22, r12
    3874:	80 e2       	ldi	r24, 0x20	; 32
    3876:	90 e0       	ldi	r25, 0x00	; 0
    3878:	37 d0       	rcall	.+110    	; 0x38e8 <fputc>
    387a:	2a 94       	dec	r2
    387c:	f7 cf       	rjmp	.-18     	; 0x386c <vfprintf+0x3aa>
    387e:	f6 01       	movw	r30, r12
    3880:	86 81       	ldd	r24, Z+6	; 0x06
    3882:	97 81       	ldd	r25, Z+7	; 0x07
    3884:	02 c0       	rjmp	.+4      	; 0x388a <vfprintf+0x3c8>
    3886:	8f ef       	ldi	r24, 0xFF	; 255
    3888:	9f ef       	ldi	r25, 0xFF	; 255
    388a:	2b 96       	adiw	r28, 0x0b	; 11
    388c:	0f b6       	in	r0, 0x3f	; 63
    388e:	f8 94       	cli
    3890:	de bf       	out	0x3e, r29	; 62
    3892:	0f be       	out	0x3f, r0	; 63
    3894:	cd bf       	out	0x3d, r28	; 61
    3896:	df 91       	pop	r29
    3898:	cf 91       	pop	r28
    389a:	1f 91       	pop	r17
    389c:	0f 91       	pop	r16
    389e:	ff 90       	pop	r15
    38a0:	ef 90       	pop	r14
    38a2:	df 90       	pop	r13
    38a4:	cf 90       	pop	r12
    38a6:	bf 90       	pop	r11
    38a8:	af 90       	pop	r10
    38aa:	9f 90       	pop	r9
    38ac:	8f 90       	pop	r8
    38ae:	7f 90       	pop	r7
    38b0:	6f 90       	pop	r6
    38b2:	5f 90       	pop	r5
    38b4:	4f 90       	pop	r4
    38b6:	3f 90       	pop	r3
    38b8:	2f 90       	pop	r2
    38ba:	08 95       	ret

000038bc <strnlen_P>:
    38bc:	fc 01       	movw	r30, r24
    38be:	05 90       	lpm	r0, Z+
    38c0:	61 50       	subi	r22, 0x01	; 1
    38c2:	70 40       	sbci	r23, 0x00	; 0
    38c4:	01 10       	cpse	r0, r1
    38c6:	d8 f7       	brcc	.-10     	; 0x38be <strnlen_P+0x2>
    38c8:	80 95       	com	r24
    38ca:	90 95       	com	r25
    38cc:	8e 0f       	add	r24, r30
    38ce:	9f 1f       	adc	r25, r31
    38d0:	08 95       	ret

000038d2 <strnlen>:
    38d2:	fc 01       	movw	r30, r24
    38d4:	61 50       	subi	r22, 0x01	; 1
    38d6:	70 40       	sbci	r23, 0x00	; 0
    38d8:	01 90       	ld	r0, Z+
    38da:	01 10       	cpse	r0, r1
    38dc:	d8 f7       	brcc	.-10     	; 0x38d4 <strnlen+0x2>
    38de:	80 95       	com	r24
    38e0:	90 95       	com	r25
    38e2:	8e 0f       	add	r24, r30
    38e4:	9f 1f       	adc	r25, r31
    38e6:	08 95       	ret

000038e8 <fputc>:
    38e8:	0f 93       	push	r16
    38ea:	1f 93       	push	r17
    38ec:	cf 93       	push	r28
    38ee:	df 93       	push	r29
    38f0:	fb 01       	movw	r30, r22
    38f2:	23 81       	ldd	r18, Z+3	; 0x03
    38f4:	21 fd       	sbrc	r18, 1
    38f6:	03 c0       	rjmp	.+6      	; 0x38fe <fputc+0x16>
    38f8:	8f ef       	ldi	r24, 0xFF	; 255
    38fa:	9f ef       	ldi	r25, 0xFF	; 255
    38fc:	2c c0       	rjmp	.+88     	; 0x3956 <fputc+0x6e>
    38fe:	22 ff       	sbrs	r18, 2
    3900:	16 c0       	rjmp	.+44     	; 0x392e <fputc+0x46>
    3902:	46 81       	ldd	r20, Z+6	; 0x06
    3904:	57 81       	ldd	r21, Z+7	; 0x07
    3906:	24 81       	ldd	r18, Z+4	; 0x04
    3908:	35 81       	ldd	r19, Z+5	; 0x05
    390a:	42 17       	cp	r20, r18
    390c:	53 07       	cpc	r21, r19
    390e:	44 f4       	brge	.+16     	; 0x3920 <fputc+0x38>
    3910:	a0 81       	ld	r26, Z
    3912:	b1 81       	ldd	r27, Z+1	; 0x01
    3914:	9d 01       	movw	r18, r26
    3916:	2f 5f       	subi	r18, 0xFF	; 255
    3918:	3f 4f       	sbci	r19, 0xFF	; 255
    391a:	31 83       	std	Z+1, r19	; 0x01
    391c:	20 83       	st	Z, r18
    391e:	8c 93       	st	X, r24
    3920:	26 81       	ldd	r18, Z+6	; 0x06
    3922:	37 81       	ldd	r19, Z+7	; 0x07
    3924:	2f 5f       	subi	r18, 0xFF	; 255
    3926:	3f 4f       	sbci	r19, 0xFF	; 255
    3928:	37 83       	std	Z+7, r19	; 0x07
    392a:	26 83       	std	Z+6, r18	; 0x06
    392c:	14 c0       	rjmp	.+40     	; 0x3956 <fputc+0x6e>
    392e:	8b 01       	movw	r16, r22
    3930:	ec 01       	movw	r28, r24
    3932:	fb 01       	movw	r30, r22
    3934:	00 84       	ldd	r0, Z+8	; 0x08
    3936:	f1 85       	ldd	r31, Z+9	; 0x09
    3938:	e0 2d       	mov	r30, r0
    393a:	19 95       	eicall
    393c:	89 2b       	or	r24, r25
    393e:	e1 f6       	brne	.-72     	; 0x38f8 <fputc+0x10>
    3940:	d8 01       	movw	r26, r16
    3942:	16 96       	adiw	r26, 0x06	; 6
    3944:	8d 91       	ld	r24, X+
    3946:	9c 91       	ld	r25, X
    3948:	17 97       	sbiw	r26, 0x07	; 7
    394a:	01 96       	adiw	r24, 0x01	; 1
    394c:	17 96       	adiw	r26, 0x07	; 7
    394e:	9c 93       	st	X, r25
    3950:	8e 93       	st	-X, r24
    3952:	16 97       	sbiw	r26, 0x06	; 6
    3954:	ce 01       	movw	r24, r28
    3956:	df 91       	pop	r29
    3958:	cf 91       	pop	r28
    395a:	1f 91       	pop	r17
    395c:	0f 91       	pop	r16
    395e:	08 95       	ret

00003960 <__ultoa_invert>:
    3960:	fa 01       	movw	r30, r20
    3962:	aa 27       	eor	r26, r26
    3964:	28 30       	cpi	r18, 0x08	; 8
    3966:	51 f1       	breq	.+84     	; 0x39bc <__ultoa_invert+0x5c>
    3968:	20 31       	cpi	r18, 0x10	; 16
    396a:	81 f1       	breq	.+96     	; 0x39cc <__ultoa_invert+0x6c>
    396c:	e8 94       	clt
    396e:	6f 93       	push	r22
    3970:	6e 7f       	andi	r22, 0xFE	; 254
    3972:	6e 5f       	subi	r22, 0xFE	; 254
    3974:	7f 4f       	sbci	r23, 0xFF	; 255
    3976:	8f 4f       	sbci	r24, 0xFF	; 255
    3978:	9f 4f       	sbci	r25, 0xFF	; 255
    397a:	af 4f       	sbci	r26, 0xFF	; 255
    397c:	b1 e0       	ldi	r27, 0x01	; 1
    397e:	3e d0       	rcall	.+124    	; 0x39fc <__ultoa_invert+0x9c>
    3980:	b4 e0       	ldi	r27, 0x04	; 4
    3982:	3c d0       	rcall	.+120    	; 0x39fc <__ultoa_invert+0x9c>
    3984:	67 0f       	add	r22, r23
    3986:	78 1f       	adc	r23, r24
    3988:	89 1f       	adc	r24, r25
    398a:	9a 1f       	adc	r25, r26
    398c:	a1 1d       	adc	r26, r1
    398e:	68 0f       	add	r22, r24
    3990:	79 1f       	adc	r23, r25
    3992:	8a 1f       	adc	r24, r26
    3994:	91 1d       	adc	r25, r1
    3996:	a1 1d       	adc	r26, r1
    3998:	6a 0f       	add	r22, r26
    399a:	71 1d       	adc	r23, r1
    399c:	81 1d       	adc	r24, r1
    399e:	91 1d       	adc	r25, r1
    39a0:	a1 1d       	adc	r26, r1
    39a2:	20 d0       	rcall	.+64     	; 0x39e4 <__ultoa_invert+0x84>
    39a4:	09 f4       	brne	.+2      	; 0x39a8 <__ultoa_invert+0x48>
    39a6:	68 94       	set
    39a8:	3f 91       	pop	r19
    39aa:	2a e0       	ldi	r18, 0x0A	; 10
    39ac:	26 9f       	mul	r18, r22
    39ae:	11 24       	eor	r1, r1
    39b0:	30 19       	sub	r19, r0
    39b2:	30 5d       	subi	r19, 0xD0	; 208
    39b4:	31 93       	st	Z+, r19
    39b6:	de f6       	brtc	.-74     	; 0x396e <__ultoa_invert+0xe>
    39b8:	cf 01       	movw	r24, r30
    39ba:	08 95       	ret
    39bc:	46 2f       	mov	r20, r22
    39be:	47 70       	andi	r20, 0x07	; 7
    39c0:	40 5d       	subi	r20, 0xD0	; 208
    39c2:	41 93       	st	Z+, r20
    39c4:	b3 e0       	ldi	r27, 0x03	; 3
    39c6:	0f d0       	rcall	.+30     	; 0x39e6 <__ultoa_invert+0x86>
    39c8:	c9 f7       	brne	.-14     	; 0x39bc <__ultoa_invert+0x5c>
    39ca:	f6 cf       	rjmp	.-20     	; 0x39b8 <__ultoa_invert+0x58>
    39cc:	46 2f       	mov	r20, r22
    39ce:	4f 70       	andi	r20, 0x0F	; 15
    39d0:	40 5d       	subi	r20, 0xD0	; 208
    39d2:	4a 33       	cpi	r20, 0x3A	; 58
    39d4:	18 f0       	brcs	.+6      	; 0x39dc <__ultoa_invert+0x7c>
    39d6:	49 5d       	subi	r20, 0xD9	; 217
    39d8:	31 fd       	sbrc	r19, 1
    39da:	40 52       	subi	r20, 0x20	; 32
    39dc:	41 93       	st	Z+, r20
    39de:	02 d0       	rcall	.+4      	; 0x39e4 <__ultoa_invert+0x84>
    39e0:	a9 f7       	brne	.-22     	; 0x39cc <__ultoa_invert+0x6c>
    39e2:	ea cf       	rjmp	.-44     	; 0x39b8 <__ultoa_invert+0x58>
    39e4:	b4 e0       	ldi	r27, 0x04	; 4
    39e6:	a6 95       	lsr	r26
    39e8:	97 95       	ror	r25
    39ea:	87 95       	ror	r24
    39ec:	77 95       	ror	r23
    39ee:	67 95       	ror	r22
    39f0:	ba 95       	dec	r27
    39f2:	c9 f7       	brne	.-14     	; 0x39e6 <__ultoa_invert+0x86>
    39f4:	00 97       	sbiw	r24, 0x00	; 0
    39f6:	61 05       	cpc	r22, r1
    39f8:	71 05       	cpc	r23, r1
    39fa:	08 95       	ret
    39fc:	9b 01       	movw	r18, r22
    39fe:	ac 01       	movw	r20, r24
    3a00:	0a 2e       	mov	r0, r26
    3a02:	06 94       	lsr	r0
    3a04:	57 95       	ror	r21
    3a06:	47 95       	ror	r20
    3a08:	37 95       	ror	r19
    3a0a:	27 95       	ror	r18
    3a0c:	ba 95       	dec	r27
    3a0e:	c9 f7       	brne	.-14     	; 0x3a02 <__ultoa_invert+0xa2>
    3a10:	62 0f       	add	r22, r18
    3a12:	73 1f       	adc	r23, r19
    3a14:	84 1f       	adc	r24, r20
    3a16:	95 1f       	adc	r25, r21
    3a18:	a0 1d       	adc	r26, r0
    3a1a:	08 95       	ret

00003a1c <_exit>:
    3a1c:	f8 94       	cli

00003a1e <__stop_program>:
    3a1e:	ff cf       	rjmp	.-2      	; 0x3a1e <__stop_program>

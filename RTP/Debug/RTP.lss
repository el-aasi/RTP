
RTP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800200  00003dc6  00003e5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003dc6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000b04  0080025a  0080025a  00003eb4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003eb4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003ee4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006f8  00000000  00000000  00003f24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008f00  00000000  00000000  0000461c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000269e  00000000  00000000  0000d51c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004b7e  00000000  00000000  0000fbba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001950  00000000  00000000  00014738  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002d0d  00000000  00000000  00016088  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000856c  00000000  00000000  00018d95  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006f0  00000000  00000000  00021301  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	d5 c0       	rjmp	.+426    	; 0x1ac <__ctors_end>
       2:	00 00       	nop
       4:	f3 c0       	rjmp	.+486    	; 0x1ec <__bad_interrupt>
       6:	00 00       	nop
       8:	f1 c0       	rjmp	.+482    	; 0x1ec <__bad_interrupt>
       a:	00 00       	nop
       c:	ef c0       	rjmp	.+478    	; 0x1ec <__bad_interrupt>
       e:	00 00       	nop
      10:	ed c0       	rjmp	.+474    	; 0x1ec <__bad_interrupt>
      12:	00 00       	nop
      14:	eb c0       	rjmp	.+470    	; 0x1ec <__bad_interrupt>
      16:	00 00       	nop
      18:	e9 c0       	rjmp	.+466    	; 0x1ec <__bad_interrupt>
      1a:	00 00       	nop
      1c:	e7 c0       	rjmp	.+462    	; 0x1ec <__bad_interrupt>
      1e:	00 00       	nop
      20:	e5 c0       	rjmp	.+458    	; 0x1ec <__bad_interrupt>
      22:	00 00       	nop
      24:	e3 c0       	rjmp	.+454    	; 0x1ec <__bad_interrupt>
      26:	00 00       	nop
      28:	e1 c0       	rjmp	.+450    	; 0x1ec <__bad_interrupt>
      2a:	00 00       	nop
      2c:	df c0       	rjmp	.+446    	; 0x1ec <__bad_interrupt>
      2e:	00 00       	nop
      30:	c4 c4       	rjmp	.+2440   	; 0x9ba <__vector_12>
      32:	00 00       	nop
      34:	db c0       	rjmp	.+438    	; 0x1ec <__bad_interrupt>
      36:	00 00       	nop
      38:	d9 c0       	rjmp	.+434    	; 0x1ec <__bad_interrupt>
      3a:	00 00       	nop
      3c:	d7 c0       	rjmp	.+430    	; 0x1ec <__bad_interrupt>
      3e:	00 00       	nop
      40:	d5 c0       	rjmp	.+426    	; 0x1ec <__bad_interrupt>
      42:	00 00       	nop
      44:	d3 c0       	rjmp	.+422    	; 0x1ec <__bad_interrupt>
      46:	00 00       	nop
      48:	d1 c0       	rjmp	.+418    	; 0x1ec <__bad_interrupt>
      4a:	00 00       	nop
      4c:	cf c0       	rjmp	.+414    	; 0x1ec <__bad_interrupt>
      4e:	00 00       	nop
      50:	cd c0       	rjmp	.+410    	; 0x1ec <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 6d 13 	jmp	0x26da	; 0x26da <__vector_21>
      58:	c9 c0       	rjmp	.+402    	; 0x1ec <__bad_interrupt>
      5a:	00 00       	nop
      5c:	c7 c0       	rjmp	.+398    	; 0x1ec <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 dd 15 	jmp	0x2bba	; 0x2bba <__vector_24>
      64:	0c 94 7e 17 	jmp	0x2efc	; 0x2efc <__vector_25>
      68:	0c 94 d0 17 	jmp	0x2fa0	; 0x2fa0 <__vector_26>
      6c:	bf c0       	rjmp	.+382    	; 0x1ec <__bad_interrupt>
      6e:	00 00       	nop
      70:	bd c0       	rjmp	.+378    	; 0x1ec <__bad_interrupt>
      72:	00 00       	nop
      74:	bb c0       	rjmp	.+374    	; 0x1ec <__bad_interrupt>
      76:	00 00       	nop
      78:	b9 c0       	rjmp	.+370    	; 0x1ec <__bad_interrupt>
      7a:	00 00       	nop
      7c:	b7 c0       	rjmp	.+366    	; 0x1ec <__bad_interrupt>
      7e:	00 00       	nop
      80:	b5 c0       	rjmp	.+362    	; 0x1ec <__bad_interrupt>
      82:	00 00       	nop
      84:	b3 c0       	rjmp	.+358    	; 0x1ec <__bad_interrupt>
      86:	00 00       	nop
      88:	b1 c0       	rjmp	.+354    	; 0x1ec <__bad_interrupt>
      8a:	00 00       	nop
      8c:	af c0       	rjmp	.+350    	; 0x1ec <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 14 18 	jmp	0x3028	; 0x3028 <__vector_36>
      94:	0c 94 66 18 	jmp	0x30cc	; 0x30cc <__vector_37>
      98:	a9 c0       	rjmp	.+338    	; 0x1ec <__bad_interrupt>
      9a:	00 00       	nop
      9c:	a7 c0       	rjmp	.+334    	; 0x1ec <__bad_interrupt>
      9e:	00 00       	nop
      a0:	a5 c0       	rjmp	.+330    	; 0x1ec <__bad_interrupt>
      a2:	00 00       	nop
      a4:	a3 c0       	rjmp	.+326    	; 0x1ec <__bad_interrupt>
      a6:	00 00       	nop
      a8:	a1 c0       	rjmp	.+322    	; 0x1ec <__bad_interrupt>
      aa:	00 00       	nop
      ac:	9f c0       	rjmp	.+318    	; 0x1ec <__bad_interrupt>
      ae:	00 00       	nop
      b0:	9d c0       	rjmp	.+314    	; 0x1ec <__bad_interrupt>
      b2:	00 00       	nop
      b4:	9b c0       	rjmp	.+310    	; 0x1ec <__bad_interrupt>
      b6:	00 00       	nop
      b8:	99 c0       	rjmp	.+306    	; 0x1ec <__bad_interrupt>
      ba:	00 00       	nop
      bc:	97 c0       	rjmp	.+302    	; 0x1ec <__bad_interrupt>
      be:	00 00       	nop
      c0:	95 c0       	rjmp	.+298    	; 0x1ec <__bad_interrupt>
      c2:	00 00       	nop
      c4:	93 c0       	rjmp	.+294    	; 0x1ec <__bad_interrupt>
      c6:	00 00       	nop
      c8:	91 c0       	rjmp	.+290    	; 0x1ec <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 aa 18 	jmp	0x3154	; 0x3154 <__vector_51>
      d0:	0c 94 fc 18 	jmp	0x31f8	; 0x31f8 <__vector_52>
      d4:	8b c0       	rjmp	.+278    	; 0x1ec <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 40 19 	jmp	0x3280	; 0x3280 <__vector_54>
      dc:	0c 94 92 19 	jmp	0x3324	; 0x3324 <__vector_55>
      e0:	85 c0       	rjmp	.+266    	; 0x1ec <__bad_interrupt>
      e2:	00 00       	nop
      e4:	7a 11       	cpse	r23, r10
      e6:	7a 11       	cpse	r23, r10
      e8:	7a 11       	cpse	r23, r10
      ea:	b1 11       	cpse	r27, r1
      ec:	b9 11       	cpse	r27, r9
      ee:	ce 11       	cpse	r28, r14
      f0:	7a 11       	cpse	r23, r10
      f2:	7a 11       	cpse	r23, r10
      f4:	b1 11       	cpse	r27, r1
      f6:	b9 11       	cpse	r27, r9
      f8:	07 63       	ori	r16, 0x37	; 55
      fa:	42 36       	cpi	r20, 0x62	; 98
      fc:	b7 9b       	sbis	0x16, 7	; 22
      fe:	d8 a7       	std	Y+40, r29	; 0x28
     100:	1a 39       	cpi	r17, 0x9A	; 154
     102:	68 56       	subi	r22, 0x68	; 104
     104:	18 ae       	std	Y+56, r1	; 0x38
     106:	ba ab       	std	Y+50, r27	; 0x32
     108:	55 8c       	ldd	r5, Z+29	; 0x1d
     10a:	1d 3c       	cpi	r17, 0xCD	; 205
     10c:	b7 cc       	rjmp	.-1682   	; 0xfffffa7c <__eeprom_end+0xff7efa7c>
     10e:	57 63       	ori	r21, 0x37	; 55
     110:	bd 6d       	ori	r27, 0xDD	; 221
     112:	ed fd       	.word	0xfded	; ????
     114:	75 3e       	cpi	r23, 0xE5	; 229
     116:	f6 17       	cp	r31, r22
     118:	72 31       	cpi	r23, 0x12	; 18
     11a:	bf 00       	.word	0x00bf	; ????
     11c:	00 00       	nop
     11e:	80 3f       	cpi	r24, 0xF0	; 240
     120:	08 00       	.word	0x0008	; ????
     122:	00 00       	nop
     124:	be 92       	st	-X, r11
     126:	24 49       	sbci	r18, 0x94	; 148
     128:	12 3e       	cpi	r17, 0xE2	; 226
     12a:	ab aa       	std	Y+51, r10	; 0x33
     12c:	aa 2a       	or	r10, r26
     12e:	be cd       	rjmp	.-1156   	; 0xfffffcac <__eeprom_end+0xff7efcac>
     130:	cc cc       	rjmp	.-1640   	; 0xfffffaca <__eeprom_end+0xff7efaca>
     132:	4c 3e       	cpi	r20, 0xEC	; 236
     134:	00 00       	nop
     136:	00 80       	ld	r0, Z
     138:	be ab       	std	Y+54, r27	; 0x36
     13a:	aa aa       	std	Y+50, r10	; 0x32
     13c:	aa 3e       	cpi	r26, 0xEA	; 234
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	bf 00       	.word	0x00bf	; ????
     144:	00 00       	nop
     146:	80 3f       	cpi	r24, 0xF0	; 240
     148:	00 00       	nop
     14a:	00 00       	nop
     14c:	00 08       	sbc	r0, r0
     14e:	41 78       	andi	r20, 0x81	; 129
     150:	d3 bb       	out	0x13, r29	; 19
     152:	43 87       	std	Z+11, r20	; 0x0b
     154:	d1 13       	cpse	r29, r17
     156:	3d 19       	sub	r19, r13
     158:	0e 3c       	cpi	r16, 0xCE	; 206
     15a:	c3 bd       	out	0x23, r28	; 35
     15c:	42 82       	std	Z+2, r4	; 0x02
     15e:	ad 2b       	or	r26, r29
     160:	3e 68       	ori	r19, 0x8E	; 142
     162:	ec 82       	std	Y+4, r14	; 0x04
     164:	76 be       	out	0x36, r7	; 54
     166:	d9 8f       	std	Y+25, r29	; 0x19
     168:	e1 a9       	ldd	r30, Z+49	; 0x31
     16a:	3e 4c       	sbci	r19, 0xCE	; 206
     16c:	80 ef       	ldi	r24, 0xF0	; 240
     16e:	ff be       	out	0x3f, r15	; 63
     170:	01 c4       	rjmp	.+2050   	; 0x974 <vPortYieldFromTick+0x80>
     172:	ff 7f       	andi	r31, 0xFF	; 255
     174:	3f 00       	.word	0x003f	; ????
     176:	00 00       	nop
	...

0000017a <prvIdleTask>:
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
     17a:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <prvCheckTasksWaitingTermination>
     17e:	80 91 7f 0c 	lds	r24, 0x0C7F	; 0x800c7f <pxReadyTasksLists>
     182:	82 30       	cpi	r24, 0x02	; 2
     184:	08 f0       	brcs	.+2      	; 0x188 <prvIdleTask+0xe>
     186:	55 d3       	rcall	.+1706   	; 0x832 <vPortYield>
     188:	0e 94 f7 11 	call	0x23ee	; 0x23ee <vApplicationIdleHook>
     18c:	f6 cf       	rjmp	.-20     	; 0x17a <prvIdleTask>

0000018e <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     18e:	cf 93       	push	r28
     190:	df 93       	push	r29
     192:	1f 92       	push	r1
     194:	cd b7       	in	r28, 0x3d	; 61
     196:	de b7       	in	r29, 0x3e	; 62
     198:	ce 01       	movw	r24, r28
     19a:	01 96       	adiw	r24, 0x01	; 1
     19c:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <prvGetNextExpireTime>
     1a0:	49 81       	ldd	r20, Y+1	; 0x01
     1a2:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <prvProcessTimerOrBlockTask>
     1a6:	0e 94 43 11 	call	0x2286	; 0x2286 <prvProcessReceivedCommands>
     1aa:	f6 cf       	rjmp	.-20     	; 0x198 <prvTimerTask+0xa>

000001ac <__ctors_end>:
     1ac:	11 24       	eor	r1, r1
     1ae:	1f be       	out	0x3f, r1	; 63
     1b0:	cf ef       	ldi	r28, 0xFF	; 255
     1b2:	d1 e2       	ldi	r29, 0x21	; 33
     1b4:	de bf       	out	0x3e, r29	; 62
     1b6:	cd bf       	out	0x3d, r28	; 61
     1b8:	00 e0       	ldi	r16, 0x00	; 0
     1ba:	0c bf       	out	0x3c, r16	; 60

000001bc <__do_copy_data>:
     1bc:	12 e0       	ldi	r17, 0x02	; 2
     1be:	a0 e0       	ldi	r26, 0x00	; 0
     1c0:	b2 e0       	ldi	r27, 0x02	; 2
     1c2:	e6 ec       	ldi	r30, 0xC6	; 198
     1c4:	fd e3       	ldi	r31, 0x3D	; 61
     1c6:	00 e0       	ldi	r16, 0x00	; 0
     1c8:	0b bf       	out	0x3b, r16	; 59
     1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <__do_copy_data+0x14>
     1cc:	07 90       	elpm	r0, Z+
     1ce:	0d 92       	st	X+, r0
     1d0:	aa 35       	cpi	r26, 0x5A	; 90
     1d2:	b1 07       	cpc	r27, r17
     1d4:	d9 f7       	brne	.-10     	; 0x1cc <__do_copy_data+0x10>

000001d6 <__do_clear_bss>:
     1d6:	2d e0       	ldi	r18, 0x0D	; 13
     1d8:	aa e5       	ldi	r26, 0x5A	; 90
     1da:	b2 e0       	ldi	r27, 0x02	; 2
     1dc:	01 c0       	rjmp	.+2      	; 0x1e0 <.do_clear_bss_start>

000001de <.do_clear_bss_loop>:
     1de:	1d 92       	st	X+, r1

000001e0 <.do_clear_bss_start>:
     1e0:	ae 35       	cpi	r26, 0x5E	; 94
     1e2:	b2 07       	cpc	r27, r18
     1e4:	e1 f7       	brne	.-8      	; 0x1de <.do_clear_bss_loop>
     1e6:	f8 d0       	rcall	.+496    	; 0x3d8 <main>
     1e8:	0c 94 e1 1e 	jmp	0x3dc2	; 0x3dc2 <_exit>

000001ec <__bad_interrupt>:
     1ec:	09 cf       	rjmp	.-494    	; 0x0 <__vectors>

000001ee <init_led>:
* Initialisation of the hardware led's.
* Sets the led port as output(logic 1), and turns them off at start (active low).
* @return void
*/
void init_led(){
	DDR_LED |= 0xFF;	
     1ee:	81 b1       	in	r24, 0x01	; 1
     1f0:	8f ef       	ldi	r24, 0xFF	; 255
     1f2:	81 b9       	out	0x01, r24	; 1
	PORT_LED |= 0xFF;	
     1f4:	92 b1       	in	r25, 0x02	; 2
     1f6:	82 b9       	out	0x02, r24	; 2
     1f8:	08 95       	ret

000001fa <set_led>:
* @param uint8_t led_no, The target led
* @param uint8_t led_state, the state to put the target led at
* @return void
*/
void set_led(uint8_t led_no, uint8_t led_state){
	if(led_state == 1){
     1fa:	61 30       	cpi	r22, 0x01	; 1
     1fc:	69 f4       	brne	.+26     	; 0x218 <set_led+0x1e>
		PORT_LED |= _BV(led_no);
     1fe:	42 b1       	in	r20, 0x02	; 2
     200:	21 e0       	ldi	r18, 0x01	; 1
     202:	30 e0       	ldi	r19, 0x00	; 0
     204:	b9 01       	movw	r22, r18
     206:	02 c0       	rjmp	.+4      	; 0x20c <set_led+0x12>
     208:	66 0f       	add	r22, r22
     20a:	77 1f       	adc	r23, r23
     20c:	8a 95       	dec	r24
     20e:	e2 f7       	brpl	.-8      	; 0x208 <set_led+0xe>
     210:	cb 01       	movw	r24, r22
     212:	84 2b       	or	r24, r20
     214:	82 b9       	out	0x02, r24	; 2
     216:	08 95       	ret
	}else{
		PORT_LED &= ~_BV(led_no);
     218:	42 b1       	in	r20, 0x02	; 2
     21a:	21 e0       	ldi	r18, 0x01	; 1
     21c:	30 e0       	ldi	r19, 0x00	; 0
     21e:	b9 01       	movw	r22, r18
     220:	02 c0       	rjmp	.+4      	; 0x226 <set_led+0x2c>
     222:	66 0f       	add	r22, r22
     224:	77 1f       	adc	r23, r23
     226:	8a 95       	dec	r24
     228:	e2 f7       	brpl	.-8      	; 0x222 <set_led+0x28>
     22a:	cb 01       	movw	r24, r22
     22c:	80 95       	com	r24
     22e:	84 23       	and	r24, r20
     230:	82 b9       	out	0x02, r24	; 2
     232:	08 95       	ret

00000234 <init_button>:
* Sets the button port as input(logic 0).
* @return void
*/
void init_button(){
	// set PortC as input with internal pull-ups on
	DDRC = 0x00;
     234:	17 b8       	out	0x07, r1	; 7
	PORTC = 0x3F;
     236:	8f e3       	ldi	r24, 0x3F	; 63
     238:	88 b9       	out	0x08, r24	; 8
	
	DDRD = 0x00;
     23a:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0x0C;
     23c:	8c e0       	ldi	r24, 0x0C	; 12
     23e:	8b b9       	out	0x0b, r24	; 11
     240:	08 95       	ret

00000242 <get_buttonState>:
* @param uint8_t button_no, the target button
* @return uint8_t, returns true if the button is pressed.
*/
uint8_t get_buttonState(uint8_t button_no){
	
	if(button_no <= 5)
     242:	86 30       	cpi	r24, 0x06	; 6
     244:	b0 f4       	brcc	.+44     	; 0x272 <get_buttonState+0x30>
	{
		return (PINC & (1 << button_no)) >> button_no;
     246:	96 b1       	in	r25, 0x06	; 6
     248:	21 e0       	ldi	r18, 0x01	; 1
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	a9 01       	movw	r20, r18
     24e:	08 2e       	mov	r0, r24
     250:	02 c0       	rjmp	.+4      	; 0x256 <get_buttonState+0x14>
     252:	44 0f       	add	r20, r20
     254:	55 1f       	adc	r21, r21
     256:	0a 94       	dec	r0
     258:	e2 f7       	brpl	.-8      	; 0x252 <get_buttonState+0x10>
     25a:	29 2f       	mov	r18, r25
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	24 23       	and	r18, r20
     260:	35 23       	and	r19, r21
     262:	a9 01       	movw	r20, r18
     264:	02 c0       	rjmp	.+4      	; 0x26a <get_buttonState+0x28>
     266:	55 95       	asr	r21
     268:	47 95       	ror	r20
     26a:	8a 95       	dec	r24
     26c:	e2 f7       	brpl	.-8      	; 0x266 <get_buttonState+0x24>
     26e:	ca 01       	movw	r24, r20
     270:	08 95       	ret
	}
	
	return ((PIND & (1 << (button_no - 4))) >> (button_no - 4));
     272:	69 b1       	in	r22, 0x09	; 9
     274:	48 2f       	mov	r20, r24
     276:	50 e0       	ldi	r21, 0x00	; 0
     278:	44 50       	subi	r20, 0x04	; 4
     27a:	51 09       	sbc	r21, r1
     27c:	81 e0       	ldi	r24, 0x01	; 1
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	9c 01       	movw	r18, r24
     282:	04 2e       	mov	r0, r20
     284:	02 c0       	rjmp	.+4      	; 0x28a <get_buttonState+0x48>
     286:	22 0f       	add	r18, r18
     288:	33 1f       	adc	r19, r19
     28a:	0a 94       	dec	r0
     28c:	e2 f7       	brpl	.-8      	; 0x286 <get_buttonState+0x44>
     28e:	86 2f       	mov	r24, r22
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	82 23       	and	r24, r18
     294:	93 23       	and	r25, r19
     296:	02 c0       	rjmp	.+4      	; 0x29c <get_buttonState+0x5a>
     298:	95 95       	asr	r25
     29a:	87 95       	ror	r24
     29c:	4a 95       	dec	r20
     29e:	e2 f7       	brpl	.-8      	; 0x298 <get_buttonState+0x56>
     2a0:	08 95       	ret

000002a2 <task1>:
	 ,  NULL );
 }

 /*-----------------------------------------------------------*/
 void task1( void *pvParameters )
 {
     2a2:	cf 93       	push	r28
     2a4:	df 93       	push	r29
     2a6:	cd b7       	in	r28, 0x3d	; 61
     2a8:	de b7       	in	r29, 0x3e	; 62
     2aa:	2c 97       	sbiw	r28, 0x0c	; 12
     2ac:	0f b6       	in	r0, 0x3f	; 63
     2ae:	f8 94       	cli
     2b0:	de bf       	out	0x3e, r29	; 62
     2b2:	0f be       	out	0x3f, r0	; 63
     2b4:	cd bf       	out	0x3d, r28	; 61

	 TickType_t xLastWakeTime;
	 const TickType_t xFrequency = 29; // 100 ms

	 // Initialize the xLastWakeTime variable with the current time.
	 xLastWakeTime = xTaskGetTickCount();
     2b6:	0e 94 32 0a 	call	0x1464	; 0x1464 <xTaskGetTickCount>
     2ba:	69 83       	std	Y+1, r22	; 0x01
     2bc:	7a 83       	std	Y+2, r23	; 0x02
     2be:	8b 83       	std	Y+3, r24	; 0x03
     2c0:	9c 83       	std	Y+4, r25	; 0x04
	 
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     2c2:	4d e1       	ldi	r20, 0x1D	; 29
     2c4:	50 e0       	ldi	r21, 0x00	; 0
     2c6:	60 e0       	ldi	r22, 0x00	; 0
     2c8:	70 e0       	ldi	r23, 0x00	; 0
     2ca:	ce 01       	movw	r24, r28
     2cc:	01 96       	adiw	r24, 0x01	; 1
     2ce:	0e 94 48 0c 	call	0x1890	; 0x1890 <xTaskDelayUntil>
		uint8_t buttonStates[8];
		uint8_t output = 0;
		uint8_t power = 1;
		uint8_t number_of_leds = 7;
		
		for(int8_t i = 0; i <= number_of_leds; i++)
     2d2:	10 e0       	ldi	r17, 0x00	; 0
     2d4:	0f c0       	rjmp	.+30     	; 0x2f4 <task1+0x52>
		{
			uint8_t temp = get_buttonState(i);
     2d6:	81 2f       	mov	r24, r17
     2d8:	b4 df       	rcall	.-152    	; 0x242 <get_buttonState>
			buttonStates[i] = temp;
     2da:	e5 e0       	ldi	r30, 0x05	; 5
     2dc:	f0 e0       	ldi	r31, 0x00	; 0
     2de:	ec 0f       	add	r30, r28
     2e0:	fd 1f       	adc	r31, r29
     2e2:	e1 0f       	add	r30, r17
     2e4:	f1 1d       	adc	r31, r1
     2e6:	17 fd       	sbrc	r17, 7
     2e8:	fa 95       	dec	r31
     2ea:	80 83       	st	Z, r24
			set_led(i, temp);
     2ec:	68 2f       	mov	r22, r24
     2ee:	81 2f       	mov	r24, r17
     2f0:	84 df       	rcall	.-248    	; 0x1fa <set_led>
		uint8_t buttonStates[8];
		uint8_t output = 0;
		uint8_t power = 1;
		uint8_t number_of_leds = 7;
		
		for(int8_t i = 0; i <= number_of_leds; i++)
     2f2:	1f 5f       	subi	r17, 0xFF	; 255
     2f4:	18 30       	cpi	r17, 0x08	; 8
     2f6:	7c f3       	brlt	.-34     	; 0x2d6 <task1+0x34>
     2f8:	87 e0       	ldi	r24, 0x07	; 7
     2fa:	21 e0       	ldi	r18, 0x01	; 1
     2fc:	10 e0       	ldi	r17, 0x00	; 0
     2fe:	14 c0       	rjmp	.+40     	; 0x328 <task1+0x86>
			set_led(i, temp);
		}
		
		for (int8_t i = number_of_leds; i>=0; i--)
		{
			uint8_t buttonValue = 1 - buttonStates[number_of_leds - i];
     300:	e7 e0       	ldi	r30, 0x07	; 7
     302:	f0 e0       	ldi	r31, 0x00	; 0
     304:	e8 1b       	sub	r30, r24
     306:	f1 09       	sbc	r31, r1
     308:	87 fd       	sbrc	r24, 7
     30a:	f3 95       	inc	r31
     30c:	45 e0       	ldi	r20, 0x05	; 5
     30e:	50 e0       	ldi	r21, 0x00	; 0
     310:	4c 0f       	add	r20, r28
     312:	5d 1f       	adc	r21, r29
     314:	e4 0f       	add	r30, r20
     316:	f5 1f       	adc	r31, r21
     318:	30 81       	ld	r19, Z
     31a:	91 e0       	ldi	r25, 0x01	; 1
     31c:	93 1b       	sub	r25, r19
			output +=  buttonValue * power;
     31e:	29 9f       	mul	r18, r25
     320:	10 0d       	add	r17, r0
     322:	11 24       	eor	r1, r1
			power *= 2;
     324:	22 0f       	add	r18, r18
			uint8_t temp = get_buttonState(i);
			buttonStates[i] = temp;
			set_led(i, temp);
		}
		
		for (int8_t i = number_of_leds; i>=0; i--)
     326:	81 50       	subi	r24, 0x01	; 1
     328:	88 23       	and	r24, r24
     32a:	54 f7       	brge	.-44     	; 0x300 <task1+0x5e>
			uint8_t buttonValue = 1 - buttonStates[number_of_leds - i];
			output +=  buttonValue * power;
			power *= 2;
		}
		
		display_7seg_display(output,0);
     32c:	61 2f       	mov	r22, r17
     32e:	70 e0       	ldi	r23, 0x00	; 0
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	0e 94 1b 12 	call	0x2436	; 0x2436 <__floatunsisf>
     338:	40 e0       	ldi	r20, 0x00	; 0
     33a:	0e 94 7e 12 	call	0x24fc	; 0x24fc <display_7seg_display>
		
		if(output == 128)
     33e:	10 38       	cpi	r17, 0x80	; 128
     340:	29 f4       	brne	.+10     	; 0x34c <task1+0xaa>
		{
			rc_servo_setPosition(0, 100);
     342:	64 e6       	ldi	r22, 0x64	; 100
     344:	80 e0       	ldi	r24, 0x00	; 0
     346:	0e 94 dd 13 	call	0x27ba	; 0x27ba <rc_servo_setPosition>
     34a:	bb cf       	rjmp	.-138    	; 0x2c2 <task1+0x20>
		}
		else if(output == 1)
     34c:	11 30       	cpi	r17, 0x01	; 1
     34e:	29 f4       	brne	.+10     	; 0x35a <task1+0xb8>
		{
			rc_servo_setPosition(0, -100);
     350:	6c e9       	ldi	r22, 0x9C	; 156
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	0e 94 dd 13 	call	0x27ba	; 0x27ba <rc_servo_setPosition>
     358:	b4 cf       	rjmp	.-152    	; 0x2c2 <task1+0x20>
		}
		else
		{
			rc_servo_setPosition(0, 0);
     35a:	60 e0       	ldi	r22, 0x00	; 0
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	0e 94 dd 13 	call	0x27ba	; 0x27ba <rc_servo_setPosition>
		}

	}
     362:	af cf       	rjmp	.-162    	; 0x2c2 <task1+0x20>

00000364 <create_tasks_and_semaphores>:
 SemaphoreHandle_t xTestSemaphore;


 /*-----------------------------------------------------------*/
 void create_tasks_and_semaphores(void)
 {
     364:	ef 92       	push	r14
     366:	ff 92       	push	r15
     368:	0f 93       	push	r16
	 // Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	 // because it is sharing a resource, such as the Serial port.
	 // Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	 if ( xTestSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
     36a:	80 91 52 0d 	lds	r24, 0x0D52	; 0x800d52 <xTestSemaphore>
     36e:	90 91 53 0d 	lds	r25, 0x0D53	; 0x800d53 <xTestSemaphore+0x1>
     372:	89 2b       	or	r24, r25
     374:	79 f4       	brne	.+30     	; 0x394 <create_tasks_and_semaphores+0x30>
	 {
		 xTestSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	fc d4       	rcall	.+2552   	; 0xd72 <xQueueCreateMutex>
     37a:	90 93 53 0d 	sts	0x0D53, r25	; 0x800d53 <xTestSemaphore+0x1>
     37e:	80 93 52 0d 	sts	0x0D52, r24	; 0x800d52 <xTestSemaphore>
		 if ( ( xTestSemaphore ) != NULL )
     382:	00 97       	sbiw	r24, 0x00	; 0
     384:	39 f0       	breq	.+14     	; 0x394 <create_tasks_and_semaphores+0x30>
		 {
			 xSemaphoreGive( ( xTestSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
     386:	00 e0       	ldi	r16, 0x00	; 0
     388:	20 e0       	ldi	r18, 0x00	; 0
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	a9 01       	movw	r20, r18
     38e:	60 e0       	ldi	r22, 0x00	; 0
     390:	70 e0       	ldi	r23, 0x00	; 0
     392:	52 d4       	rcall	.+2212   	; 0xc38 <xQueueGenericSend>
		 }
	 }

	 xTaskCreate(
     394:	e1 2c       	mov	r14, r1
     396:	f1 2c       	mov	r15, r1
     398:	01 e0       	ldi	r16, 0x01	; 1
     39a:	20 e0       	ldi	r18, 0x00	; 0
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	40 ec       	ldi	r20, 0xC0	; 192
     3a0:	50 e0       	ldi	r21, 0x00	; 0
     3a2:	6d e1       	ldi	r22, 0x1D	; 29
     3a4:	72 e0       	ldi	r23, 0x02	; 2
     3a6:	81 e5       	ldi	r24, 0x51	; 81
     3a8:	91 e0       	ldi	r25, 0x01	; 1
     3aa:	d7 d7       	rcall	.+4014   	; 0x135a <xTaskCreate>
	 ,  "Task1"  // A name just for humans
	 ,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	 ,  NULL
	 ,  1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	 ,  NULL );
 }
     3ac:	0f 91       	pop	r16
     3ae:	ff 90       	pop	r15
     3b0:	ef 90       	pop	r14
     3b2:	08 95       	ret

000003b4 <initialiseSystem>:
 }

 /*-----------------------------------------------------------*/
 void initialiseSystem()
 {
	 init_led();
     3b4:	1c df       	rcall	.-456    	; 0x1ee <init_led>
	 init_button();
     3b6:	3e df       	rcall	.-388    	; 0x234 <init_button>
     3b8:	1a b8       	out	0x0a, r1	; 10
	 
	DDRD = 0x00;
     3ba:	8c e0       	ldi	r24, 0x0C	; 12
	PORTD = 0x0C;
     3bc:	8b b9       	out	0x0b, r24	; 11
     3be:	80 e0       	ldi	r24, 0x00	; 0
	 
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
     3c0:	0e 94 2f 14 	call	0x285e	; 0x285e <stdio_initialise>
	 
	// Create some tasks
	create_tasks_and_semaphores();
     3c4:	cf df       	rcall	.-98     	; 0x364 <create_tasks_and_semaphores>
     3c6:	80 e0       	ldi	r24, 0x00	; 0
	 
	// Initialize drivers
	display_7seg_initialise(NULL);
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	0e 94 30 13 	call	0x2660	; 0x2660 <display_7seg_initialise>
     3ce:	0e 94 25 13 	call	0x264a	; 0x264a <display_7seg_powerUp>
	display_7seg_powerUp();
     3d2:	0c 94 f5 13 	jmp	0x27ea	; 0x27ea <rc_servo_initialise>
	 
	rc_servo_initialise ();
     3d6:	08 95       	ret

000003d8 <main>:
     3d8:	ed df       	rcall	.-38     	; 0x3b4 <initialiseSystem>

 /*-----------------------------------------------------------*/
 int main(void)
 {	
	 initialiseSystem(); // Must be done as the very first thing!!
	 printf("Program Started.\r\n");
     3da:	83 e2       	ldi	r24, 0x23	; 35
     3dc:	92 e0       	ldi	r25, 0x02	; 2
     3de:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <puts>
	 vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
     3e2:	0e 94 f6 09 	call	0x13ec	; 0x13ec <vTaskStartScheduler>
     3e6:	ff cf       	rjmp	.-2      	; 0x3e6 <main+0xe>

000003e8 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     3e8:	e6 e6       	ldi	r30, 0x66	; 102
     3ea:	f2 e0       	ldi	r31, 0x02	; 2
     3ec:	aa e6       	ldi	r26, 0x6A	; 106
     3ee:	b2 e0       	ldi	r27, 0x02	; 2
     3f0:	b1 83       	std	Z+1, r27	; 0x01
     3f2:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     3f4:	13 82       	std	Z+3, r1	; 0x03
     3f6:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     3f8:	ea e2       	ldi	r30, 0x2A	; 42
     3fa:	fc e0       	ldi	r31, 0x0C	; 12
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     3fc:	f0 93 65 02 	sts	0x0265, r31	; 0x800265 <pxEnd+0x1>
     400:	e0 93 64 02 	sts	0x0264, r30	; 0x800264 <pxEnd>
    pxEnd->xBlockSize = 0;
     404:	13 82       	std	Z+3, r1	; 0x03
     406:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     408:	11 82       	std	Z+1, r1	; 0x01
     40a:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     40c:	80 ec       	ldi	r24, 0xC0	; 192
     40e:	99 e0       	ldi	r25, 0x09	; 9
     410:	13 96       	adiw	r26, 0x03	; 3
     412:	9c 93       	st	X, r25
     414:	8e 93       	st	-X, r24
     416:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     418:	ed 93       	st	X+, r30
     41a:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     41c:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <xMinimumEverFreeBytesRemaining+0x1>
     420:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     424:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <xFreeBytesRemaining+0x1>
     428:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	90 e8       	ldi	r25, 0x80	; 128
     430:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <__data_end+0x1>
     434:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <__data_end>
     438:	08 95       	ret

0000043a <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     440:	a6 e6       	ldi	r26, 0x66	; 102
     442:	b2 e0       	ldi	r27, 0x02	; 2
     444:	01 c0       	rjmp	.+2      	; 0x448 <prvInsertBlockIntoFreeList+0xe>
     446:	df 01       	movw	r26, r30
     448:	ed 91       	ld	r30, X+
     44a:	fc 91       	ld	r31, X
     44c:	11 97       	sbiw	r26, 0x01	; 1
     44e:	ec 17       	cp	r30, r28
     450:	fd 07       	cpc	r31, r29
     452:	c8 f3       	brcs	.-14     	; 0x446 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     454:	12 96       	adiw	r26, 0x02	; 2
     456:	8d 91       	ld	r24, X+
     458:	9c 91       	ld	r25, X
     45a:	13 97       	sbiw	r26, 0x03	; 3
     45c:	9d 01       	movw	r18, r26
     45e:	28 0f       	add	r18, r24
     460:	39 1f       	adc	r19, r25
     462:	c2 17       	cp	r28, r18
     464:	d3 07       	cpc	r29, r19
     466:	49 f4       	brne	.+18     	; 0x47a <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     468:	2a 81       	ldd	r18, Y+2	; 0x02
     46a:	3b 81       	ldd	r19, Y+3	; 0x03
     46c:	82 0f       	add	r24, r18
     46e:	93 1f       	adc	r25, r19
     470:	13 96       	adiw	r26, 0x03	; 3
     472:	9c 93       	st	X, r25
     474:	8e 93       	st	-X, r24
     476:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     478:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     47a:	8a 81       	ldd	r24, Y+2	; 0x02
     47c:	9b 81       	ldd	r25, Y+3	; 0x03
     47e:	9e 01       	movw	r18, r28
     480:	28 0f       	add	r18, r24
     482:	39 1f       	adc	r19, r25
     484:	e2 17       	cp	r30, r18
     486:	f3 07       	cpc	r31, r19
     488:	c1 f4       	brne	.+48     	; 0x4ba <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     48a:	20 91 64 02 	lds	r18, 0x0264	; 0x800264 <pxEnd>
     48e:	30 91 65 02 	lds	r19, 0x0265	; 0x800265 <pxEnd+0x1>
     492:	e2 17       	cp	r30, r18
     494:	f3 07       	cpc	r31, r19
     496:	71 f0       	breq	.+28     	; 0x4b4 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     498:	22 81       	ldd	r18, Z+2	; 0x02
     49a:	33 81       	ldd	r19, Z+3	; 0x03
     49c:	82 0f       	add	r24, r18
     49e:	93 1f       	adc	r25, r19
     4a0:	9b 83       	std	Y+3, r25	; 0x03
     4a2:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     4a4:	ed 91       	ld	r30, X+
     4a6:	fc 91       	ld	r31, X
     4a8:	11 97       	sbiw	r26, 0x01	; 1
     4aa:	80 81       	ld	r24, Z
     4ac:	91 81       	ldd	r25, Z+1	; 0x01
     4ae:	99 83       	std	Y+1, r25	; 0x01
     4b0:	88 83       	st	Y, r24
     4b2:	05 c0       	rjmp	.+10     	; 0x4be <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     4b4:	39 83       	std	Y+1, r19	; 0x01
     4b6:	28 83       	st	Y, r18
     4b8:	02 c0       	rjmp	.+4      	; 0x4be <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     4ba:	f9 83       	std	Y+1, r31	; 0x01
     4bc:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     4be:	ca 17       	cp	r28, r26
     4c0:	db 07       	cpc	r29, r27
     4c2:	11 f0       	breq	.+4      	; 0x4c8 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     4c4:	cd 93       	st	X+, r28
     4c6:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     4c8:	df 91       	pop	r29
     4ca:	cf 91       	pop	r28
     4cc:	08 95       	ret

000004ce <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     4ce:	ef 92       	push	r14
     4d0:	ff 92       	push	r15
     4d2:	0f 93       	push	r16
     4d4:	1f 93       	push	r17
     4d6:	cf 93       	push	r28
     4d8:	df 93       	push	r29
     4da:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     4dc:	bd d7       	rcall	.+3962   	; 0x1458 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     4de:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <pxEnd>
     4e2:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <pxEnd+0x1>
     4e6:	89 2b       	or	r24, r25
     4e8:	09 f4       	brne	.+2      	; 0x4ec <pvPortMalloc+0x1e>
        {
            prvHeapInit();
     4ea:	7e df       	rcall	.-260    	; 0x3e8 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     4ec:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <__data_end>
     4f0:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <__data_end+0x1>
     4f4:	80 23       	and	r24, r16
     4f6:	91 23       	and	r25, r17
     4f8:	89 2b       	or	r24, r25
     4fa:	09 f0       	breq	.+2      	; 0x4fe <pvPortMalloc+0x30>
     4fc:	76 c0       	rjmp	.+236    	; 0x5ea <pvPortMalloc+0x11c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     4fe:	01 15       	cp	r16, r1
     500:	11 05       	cpc	r17, r1
     502:	49 f0       	breq	.+18     	; 0x516 <pvPortMalloc+0x48>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     504:	c8 01       	movw	r24, r16
     506:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     508:	08 17       	cp	r16, r24
     50a:	19 07       	cpc	r17, r25
     50c:	18 f0       	brcs	.+6      	; 0x514 <pvPortMalloc+0x46>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     50e:	00 e0       	ldi	r16, 0x00	; 0
     510:	10 e0       	ldi	r17, 0x00	; 0
     512:	01 c0       	rjmp	.+2      	; 0x516 <pvPortMalloc+0x48>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     514:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     516:	01 15       	cp	r16, r1
     518:	11 05       	cpc	r17, r1
     51a:	09 f4       	brne	.+2      	; 0x51e <pvPortMalloc+0x50>
     51c:	69 c0       	rjmp	.+210    	; 0x5f0 <pvPortMalloc+0x122>
     51e:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <xFreeBytesRemaining>
     522:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <xFreeBytesRemaining+0x1>
     526:	80 17       	cp	r24, r16
     528:	91 07       	cpc	r25, r17
     52a:	08 f4       	brcc	.+2      	; 0x52e <pvPortMalloc+0x60>
     52c:	64 c0       	rjmp	.+200    	; 0x5f6 <pvPortMalloc+0x128>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     52e:	c0 91 66 02 	lds	r28, 0x0266	; 0x800266 <xStart>
     532:	d0 91 67 02 	lds	r29, 0x0267	; 0x800267 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     536:	e6 e6       	ldi	r30, 0x66	; 102
     538:	f2 e0       	ldi	r31, 0x02	; 2
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     53a:	02 c0       	rjmp	.+4      	; 0x540 <pvPortMalloc+0x72>
                {
                    pxPreviousBlock = pxBlock;
     53c:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     53e:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     540:	8a 81       	ldd	r24, Y+2	; 0x02
     542:	9b 81       	ldd	r25, Y+3	; 0x03
     544:	80 17       	cp	r24, r16
     546:	91 07       	cpc	r25, r17
     548:	20 f4       	brcc	.+8      	; 0x552 <pvPortMalloc+0x84>
     54a:	88 81       	ld	r24, Y
     54c:	99 81       	ldd	r25, Y+1	; 0x01
     54e:	00 97       	sbiw	r24, 0x00	; 0
     550:	a9 f7       	brne	.-22     	; 0x53c <pvPortMalloc+0x6e>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     552:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <pxEnd>
     556:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <pxEnd+0x1>
     55a:	c8 17       	cp	r28, r24
     55c:	d9 07       	cpc	r29, r25
     55e:	09 f4       	brne	.+2      	; 0x562 <pvPortMalloc+0x94>
     560:	4d c0       	rjmp	.+154    	; 0x5fc <pvPortMalloc+0x12e>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     562:	e0 80       	ld	r14, Z
     564:	f1 80       	ldd	r15, Z+1	; 0x01
     566:	84 e0       	ldi	r24, 0x04	; 4
     568:	e8 0e       	add	r14, r24
     56a:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     56c:	88 81       	ld	r24, Y
     56e:	99 81       	ldd	r25, Y+1	; 0x01
     570:	91 83       	std	Z+1, r25	; 0x01
     572:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     574:	2a 81       	ldd	r18, Y+2	; 0x02
     576:	3b 81       	ldd	r19, Y+3	; 0x03
     578:	20 1b       	sub	r18, r16
     57a:	31 0b       	sbc	r19, r17
     57c:	29 30       	cpi	r18, 0x09	; 9
     57e:	31 05       	cpc	r19, r1
     580:	48 f0       	brcs	.+18     	; 0x594 <pvPortMalloc+0xc6>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     582:	ce 01       	movw	r24, r28
     584:	80 0f       	add	r24, r16
     586:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     588:	fc 01       	movw	r30, r24
     58a:	33 83       	std	Z+3, r19	; 0x03
     58c:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     58e:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     590:	0a 83       	std	Y+2, r16	; 0x02
     592:	53 df       	rcall	.-346    	; 0x43a <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     594:	2a 81       	ldd	r18, Y+2	; 0x02
     596:	3b 81       	ldd	r19, Y+3	; 0x03
     598:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <xFreeBytesRemaining>
     59c:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <xFreeBytesRemaining+0x1>
     5a0:	82 1b       	sub	r24, r18
     5a2:	93 0b       	sbc	r25, r19
     5a4:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <xFreeBytesRemaining+0x1>
     5a8:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     5ac:	40 91 60 02 	lds	r20, 0x0260	; 0x800260 <xMinimumEverFreeBytesRemaining>
     5b0:	50 91 61 02 	lds	r21, 0x0261	; 0x800261 <xMinimumEverFreeBytesRemaining+0x1>
     5b4:	84 17       	cp	r24, r20
     5b6:	95 07       	cpc	r25, r21
     5b8:	20 f4       	brcc	.+8      	; 0x5c2 <pvPortMalloc+0xf4>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     5ba:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <xMinimumEverFreeBytesRemaining+0x1>
     5be:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     5c2:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <__data_end>
     5c6:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <__data_end+0x1>
     5ca:	28 2b       	or	r18, r24
     5cc:	39 2b       	or	r19, r25
     5ce:	3b 83       	std	Y+3, r19	; 0x03
     5d0:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     5d2:	19 82       	std	Y+1, r1	; 0x01
     5d4:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     5d6:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <xNumberOfSuccessfulAllocations>
     5da:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <xNumberOfSuccessfulAllocations+0x1>
     5de:	01 96       	adiw	r24, 0x01	; 1
     5e0:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <xNumberOfSuccessfulAllocations+0x1>
     5e4:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <xNumberOfSuccessfulAllocations>
     5e8:	0b c0       	rjmp	.+22     	; 0x600 <pvPortMalloc+0x132>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     5ea:	e1 2c       	mov	r14, r1
     5ec:	f1 2c       	mov	r15, r1
     5ee:	08 c0       	rjmp	.+16     	; 0x600 <pvPortMalloc+0x132>
     5f0:	e1 2c       	mov	r14, r1
     5f2:	f1 2c       	mov	r15, r1
     5f4:	05 c0       	rjmp	.+10     	; 0x600 <pvPortMalloc+0x132>
     5f6:	e1 2c       	mov	r14, r1
     5f8:	f1 2c       	mov	r15, r1
     5fa:	02 c0       	rjmp	.+4      	; 0x600 <pvPortMalloc+0x132>
     5fc:	e1 2c       	mov	r14, r1
     5fe:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     600:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     604:	e1 14       	cp	r14, r1
     606:	f1 04       	cpc	r15, r1
     608:	11 f4       	brne	.+4      	; 0x60e <pvPortMalloc+0x140>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     60a:	0e 94 03 12 	call	0x2406	; 0x2406 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     60e:	c7 01       	movw	r24, r14
     610:	df 91       	pop	r29
     612:	cf 91       	pop	r28
     614:	1f 91       	pop	r17
     616:	0f 91       	pop	r16
     618:	ff 90       	pop	r15
     61a:	ef 90       	pop	r14
     61c:	08 95       	ret

0000061e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     61e:	0f 93       	push	r16
     620:	1f 93       	push	r17
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     626:	00 97       	sbiw	r24, 0x00	; 0
     628:	89 f1       	breq	.+98     	; 0x68c <vPortFree+0x6e>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     62a:	ec 01       	movw	r28, r24
     62c:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     62e:	4a 81       	ldd	r20, Y+2	; 0x02
     630:	5b 81       	ldd	r21, Y+3	; 0x03
     632:	20 91 5a 02 	lds	r18, 0x025A	; 0x80025a <__data_end>
     636:	30 91 5b 02 	lds	r19, 0x025B	; 0x80025b <__data_end+0x1>
     63a:	ba 01       	movw	r22, r20
     63c:	62 23       	and	r22, r18
     63e:	73 23       	and	r23, r19
     640:	67 2b       	or	r22, r23
     642:	21 f1       	breq	.+72     	; 0x68c <vPortFree+0x6e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     644:	68 81       	ld	r22, Y
     646:	79 81       	ldd	r23, Y+1	; 0x01
     648:	67 2b       	or	r22, r23
     64a:	01 f5       	brne	.+64     	; 0x68c <vPortFree+0x6e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     64c:	20 95       	com	r18
     64e:	30 95       	com	r19
     650:	24 23       	and	r18, r20
     652:	35 23       	and	r19, r21
     654:	3b 83       	std	Y+3, r19	; 0x03
     656:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     658:	ff d6       	rcall	.+3582   	; 0x1458 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     65a:	8a 81       	ldd	r24, Y+2	; 0x02
     65c:	9b 81       	ldd	r25, Y+3	; 0x03
     65e:	20 91 62 02 	lds	r18, 0x0262	; 0x800262 <xFreeBytesRemaining>
     662:	30 91 63 02 	lds	r19, 0x0263	; 0x800263 <xFreeBytesRemaining+0x1>
     666:	82 0f       	add	r24, r18
     668:	93 1f       	adc	r25, r19
     66a:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <xFreeBytesRemaining+0x1>
     66e:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     672:	ce 01       	movw	r24, r28
     674:	e2 de       	rcall	.-572    	; 0x43a <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     676:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <xNumberOfSuccessfulFrees>
     67a:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <xNumberOfSuccessfulFrees+0x1>
     67e:	01 96       	adiw	r24, 0x01	; 1
     680:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <xNumberOfSuccessfulFrees+0x1>
     684:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     688:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	1f 91       	pop	r17
     692:	0f 91       	pop	r16
     694:	08 95       	ret

00000696 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     696:	fc 01       	movw	r30, r24
     698:	03 96       	adiw	r24, 0x03	; 3
     69a:	92 83       	std	Z+2, r25	; 0x02
     69c:	81 83       	std	Z+1, r24	; 0x01
     69e:	4f ef       	ldi	r20, 0xFF	; 255
     6a0:	5f ef       	ldi	r21, 0xFF	; 255
     6a2:	ba 01       	movw	r22, r20
     6a4:	43 83       	std	Z+3, r20	; 0x03
     6a6:	54 83       	std	Z+4, r21	; 0x04
     6a8:	65 83       	std	Z+5, r22	; 0x05
     6aa:	76 83       	std	Z+6, r23	; 0x06
     6ac:	90 87       	std	Z+8, r25	; 0x08
     6ae:	87 83       	std	Z+7, r24	; 0x07
     6b0:	92 87       	std	Z+10, r25	; 0x0a
     6b2:	81 87       	std	Z+9, r24	; 0x09
     6b4:	10 82       	st	Z, r1
     6b6:	08 95       	ret

000006b8 <vListInitialiseItem>:
     6b8:	fc 01       	movw	r30, r24
     6ba:	13 86       	std	Z+11, r1	; 0x0b
     6bc:	12 86       	std	Z+10, r1	; 0x0a
     6be:	08 95       	ret

000006c0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     6c0:	0f 93       	push	r16
     6c2:	1f 93       	push	r17
     6c4:	cf 93       	push	r28
     6c6:	df 93       	push	r29
     6c8:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     6ca:	08 81       	ld	r16, Y
     6cc:	19 81       	ldd	r17, Y+1	; 0x01
     6ce:	2a 81       	ldd	r18, Y+2	; 0x02
     6d0:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     6d2:	0f 3f       	cpi	r16, 0xFF	; 255
     6d4:	4f ef       	ldi	r20, 0xFF	; 255
     6d6:	14 07       	cpc	r17, r20
     6d8:	24 07       	cpc	r18, r20
     6da:	34 07       	cpc	r19, r20
     6dc:	21 f4       	brne	.+8      	; 0x6e6 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     6de:	fc 01       	movw	r30, r24
     6e0:	a1 85       	ldd	r26, Z+9	; 0x09
     6e2:	b2 85       	ldd	r27, Z+10	; 0x0a
     6e4:	11 c0       	rjmp	.+34     	; 0x708 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     6e6:	dc 01       	movw	r26, r24
     6e8:	13 96       	adiw	r26, 0x03	; 3
     6ea:	01 c0       	rjmp	.+2      	; 0x6ee <vListInsert+0x2e>
     6ec:	df 01       	movw	r26, r30
     6ee:	14 96       	adiw	r26, 0x04	; 4
     6f0:	ed 91       	ld	r30, X+
     6f2:	fc 91       	ld	r31, X
     6f4:	15 97       	sbiw	r26, 0x05	; 5
     6f6:	40 81       	ld	r20, Z
     6f8:	51 81       	ldd	r21, Z+1	; 0x01
     6fa:	62 81       	ldd	r22, Z+2	; 0x02
     6fc:	73 81       	ldd	r23, Z+3	; 0x03
     6fe:	04 17       	cp	r16, r20
     700:	15 07       	cpc	r17, r21
     702:	26 07       	cpc	r18, r22
     704:	37 07       	cpc	r19, r23
     706:	90 f7       	brcc	.-28     	; 0x6ec <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     708:	14 96       	adiw	r26, 0x04	; 4
     70a:	ed 91       	ld	r30, X+
     70c:	fc 91       	ld	r31, X
     70e:	15 97       	sbiw	r26, 0x05	; 5
     710:	fd 83       	std	Y+5, r31	; 0x05
     712:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     714:	d7 83       	std	Z+7, r29	; 0x07
     716:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     718:	bf 83       	std	Y+7, r27	; 0x07
     71a:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     71c:	15 96       	adiw	r26, 0x05	; 5
     71e:	dc 93       	st	X, r29
     720:	ce 93       	st	-X, r28
     722:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     724:	9b 87       	std	Y+11, r25	; 0x0b
     726:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     728:	fc 01       	movw	r30, r24
     72a:	20 81       	ld	r18, Z
     72c:	2f 5f       	subi	r18, 0xFF	; 255
     72e:	20 83       	st	Z, r18
}
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	1f 91       	pop	r17
     736:	0f 91       	pop	r16
     738:	08 95       	ret

0000073a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     740:	a2 85       	ldd	r26, Z+10	; 0x0a
     742:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     744:	c4 81       	ldd	r28, Z+4	; 0x04
     746:	d5 81       	ldd	r29, Z+5	; 0x05
     748:	86 81       	ldd	r24, Z+6	; 0x06
     74a:	97 81       	ldd	r25, Z+7	; 0x07
     74c:	9f 83       	std	Y+7, r25	; 0x07
     74e:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     750:	c6 81       	ldd	r28, Z+6	; 0x06
     752:	d7 81       	ldd	r29, Z+7	; 0x07
     754:	84 81       	ldd	r24, Z+4	; 0x04
     756:	95 81       	ldd	r25, Z+5	; 0x05
     758:	9d 83       	std	Y+5, r25	; 0x05
     75a:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     75c:	11 96       	adiw	r26, 0x01	; 1
     75e:	8d 91       	ld	r24, X+
     760:	9c 91       	ld	r25, X
     762:	12 97       	sbiw	r26, 0x02	; 2
     764:	e8 17       	cp	r30, r24
     766:	f9 07       	cpc	r31, r25
     768:	31 f4       	brne	.+12     	; 0x776 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     76a:	86 81       	ldd	r24, Z+6	; 0x06
     76c:	97 81       	ldd	r25, Z+7	; 0x07
     76e:	12 96       	adiw	r26, 0x02	; 2
     770:	9c 93       	st	X, r25
     772:	8e 93       	st	-X, r24
     774:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     776:	13 86       	std	Z+11, r1	; 0x0b
     778:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     77a:	8c 91       	ld	r24, X
     77c:	81 50       	subi	r24, 0x01	; 1
     77e:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     780:	8c 91       	ld	r24, X
}
     782:	df 91       	pop	r29
     784:	cf 91       	pop	r28
     786:	08 95       	ret

00000788 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     788:	a8 95       	wdr
     78a:	90 ec       	ldi	r25, 0xC0	; 192
     78c:	88 e1       	ldi	r24, 0x18	; 24
     78e:	0f b6       	in	r0, 0x3f	; 63
     790:	f8 94       	cli
     792:	a8 95       	wdr
     794:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     798:	0f be       	out	0x3f, r0	; 63
     79a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     79e:	08 95       	ret

000007a0 <pxPortInitialiseStack>:
     7a0:	fc 01       	movw	r30, r24
     7a2:	60 83       	st	Z, r22
     7a4:	31 97       	sbiw	r30, 0x01	; 1
     7a6:	70 83       	st	Z, r23
     7a8:	31 97       	sbiw	r30, 0x01	; 1
     7aa:	10 82       	st	Z, r1
     7ac:	31 97       	sbiw	r30, 0x01	; 1
     7ae:	10 82       	st	Z, r1
     7b0:	31 97       	sbiw	r30, 0x01	; 1
     7b2:	20 e8       	ldi	r18, 0x80	; 128
     7b4:	20 83       	st	Z, r18
     7b6:	31 97       	sbiw	r30, 0x01	; 1
     7b8:	10 82       	st	Z, r1
     7ba:	31 97       	sbiw	r30, 0x01	; 1
     7bc:	10 82       	st	Z, r1
     7be:	31 97       	sbiw	r30, 0x01	; 1
     7c0:	10 82       	st	Z, r1
     7c2:	77 97       	sbiw	r30, 0x17	; 23
     7c4:	40 83       	st	Z, r20
     7c6:	31 97       	sbiw	r30, 0x01	; 1
     7c8:	50 83       	st	Z, r21
     7ca:	86 97       	sbiw	r24, 0x26	; 38
     7cc:	08 95       	ret

000007ce <xPortStartScheduler>:
     7ce:	dc df       	rcall	.-72     	; 0x788 <prvSetupTimerInterrupt>
     7d0:	a0 91 ed 0c 	lds	r26, 0x0CED	; 0x800ced <pxCurrentTCB>
     7d4:	b0 91 ee 0c 	lds	r27, 0x0CEE	; 0x800cee <pxCurrentTCB+0x1>
     7d8:	cd 91       	ld	r28, X+
     7da:	cd bf       	out	0x3d, r28	; 61
     7dc:	dd 91       	ld	r29, X+
     7de:	de bf       	out	0x3e, r29	; 62
     7e0:	ff 91       	pop	r31
     7e2:	ef 91       	pop	r30
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	bf 91       	pop	r27
     7ea:	af 91       	pop	r26
     7ec:	9f 91       	pop	r25
     7ee:	8f 91       	pop	r24
     7f0:	7f 91       	pop	r23
     7f2:	6f 91       	pop	r22
     7f4:	5f 91       	pop	r21
     7f6:	4f 91       	pop	r20
     7f8:	3f 91       	pop	r19
     7fa:	2f 91       	pop	r18
     7fc:	1f 91       	pop	r17
     7fe:	0f 91       	pop	r16
     800:	ff 90       	pop	r15
     802:	ef 90       	pop	r14
     804:	df 90       	pop	r13
     806:	cf 90       	pop	r12
     808:	bf 90       	pop	r11
     80a:	af 90       	pop	r10
     80c:	9f 90       	pop	r9
     80e:	8f 90       	pop	r8
     810:	7f 90       	pop	r7
     812:	6f 90       	pop	r6
     814:	5f 90       	pop	r5
     816:	4f 90       	pop	r4
     818:	3f 90       	pop	r3
     81a:	2f 90       	pop	r2
     81c:	1f 90       	pop	r1
     81e:	0f 90       	pop	r0
     820:	0c be       	out	0x3c, r0	; 60
     822:	0f 90       	pop	r0
     824:	0b be       	out	0x3b, r0	; 59
     826:	0f 90       	pop	r0
     828:	0f be       	out	0x3f, r0	; 63
     82a:	0f 90       	pop	r0
     82c:	08 95       	ret
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	08 95       	ret

00000832 <vPortYield>:
     832:	0f 92       	push	r0
     834:	0f b6       	in	r0, 0x3f	; 63
     836:	f8 94       	cli
     838:	0f 92       	push	r0
     83a:	0b b6       	in	r0, 0x3b	; 59
     83c:	0f 92       	push	r0
     83e:	0c b6       	in	r0, 0x3c	; 60
     840:	0f 92       	push	r0
     842:	1f 92       	push	r1
     844:	11 24       	eor	r1, r1
     846:	2f 92       	push	r2
     848:	3f 92       	push	r3
     84a:	4f 92       	push	r4
     84c:	5f 92       	push	r5
     84e:	6f 92       	push	r6
     850:	7f 92       	push	r7
     852:	8f 92       	push	r8
     854:	9f 92       	push	r9
     856:	af 92       	push	r10
     858:	bf 92       	push	r11
     85a:	cf 92       	push	r12
     85c:	df 92       	push	r13
     85e:	ef 92       	push	r14
     860:	ff 92       	push	r15
     862:	0f 93       	push	r16
     864:	1f 93       	push	r17
     866:	2f 93       	push	r18
     868:	3f 93       	push	r19
     86a:	4f 93       	push	r20
     86c:	5f 93       	push	r21
     86e:	6f 93       	push	r22
     870:	7f 93       	push	r23
     872:	8f 93       	push	r24
     874:	9f 93       	push	r25
     876:	af 93       	push	r26
     878:	bf 93       	push	r27
     87a:	cf 93       	push	r28
     87c:	df 93       	push	r29
     87e:	ef 93       	push	r30
     880:	ff 93       	push	r31
     882:	a0 91 ed 0c 	lds	r26, 0x0CED	; 0x800ced <pxCurrentTCB>
     886:	b0 91 ee 0c 	lds	r27, 0x0CEE	; 0x800cee <pxCurrentTCB+0x1>
     88a:	0d b6       	in	r0, 0x3d	; 61
     88c:	0d 92       	st	X+, r0
     88e:	0e b6       	in	r0, 0x3e	; 62
     890:	0d 92       	st	X+, r0
     892:	0e 94 ad 0c 	call	0x195a	; 0x195a <vTaskSwitchContext>
     896:	a0 91 ed 0c 	lds	r26, 0x0CED	; 0x800ced <pxCurrentTCB>
     89a:	b0 91 ee 0c 	lds	r27, 0x0CEE	; 0x800cee <pxCurrentTCB+0x1>
     89e:	cd 91       	ld	r28, X+
     8a0:	cd bf       	out	0x3d, r28	; 61
     8a2:	dd 91       	ld	r29, X+
     8a4:	de bf       	out	0x3e, r29	; 62
     8a6:	ff 91       	pop	r31
     8a8:	ef 91       	pop	r30
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	bf 91       	pop	r27
     8b0:	af 91       	pop	r26
     8b2:	9f 91       	pop	r25
     8b4:	8f 91       	pop	r24
     8b6:	7f 91       	pop	r23
     8b8:	6f 91       	pop	r22
     8ba:	5f 91       	pop	r21
     8bc:	4f 91       	pop	r20
     8be:	3f 91       	pop	r19
     8c0:	2f 91       	pop	r18
     8c2:	1f 91       	pop	r17
     8c4:	0f 91       	pop	r16
     8c6:	ff 90       	pop	r15
     8c8:	ef 90       	pop	r14
     8ca:	df 90       	pop	r13
     8cc:	cf 90       	pop	r12
     8ce:	bf 90       	pop	r11
     8d0:	af 90       	pop	r10
     8d2:	9f 90       	pop	r9
     8d4:	8f 90       	pop	r8
     8d6:	7f 90       	pop	r7
     8d8:	6f 90       	pop	r6
     8da:	5f 90       	pop	r5
     8dc:	4f 90       	pop	r4
     8de:	3f 90       	pop	r3
     8e0:	2f 90       	pop	r2
     8e2:	1f 90       	pop	r1
     8e4:	0f 90       	pop	r0
     8e6:	0c be       	out	0x3c, r0	; 60
     8e8:	0f 90       	pop	r0
     8ea:	0b be       	out	0x3b, r0	; 59
     8ec:	0f 90       	pop	r0
     8ee:	0f be       	out	0x3f, r0	; 63
     8f0:	0f 90       	pop	r0
     8f2:	08 95       	ret

000008f4 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     8f4:	0f 92       	push	r0
     8f6:	0f b6       	in	r0, 0x3f	; 63
     8f8:	f8 94       	cli
     8fa:	0f 92       	push	r0
     8fc:	0b b6       	in	r0, 0x3b	; 59
     8fe:	0f 92       	push	r0
     900:	0c b6       	in	r0, 0x3c	; 60
     902:	0f 92       	push	r0
     904:	1f 92       	push	r1
     906:	11 24       	eor	r1, r1
     908:	2f 92       	push	r2
     90a:	3f 92       	push	r3
     90c:	4f 92       	push	r4
     90e:	5f 92       	push	r5
     910:	6f 92       	push	r6
     912:	7f 92       	push	r7
     914:	8f 92       	push	r8
     916:	9f 92       	push	r9
     918:	af 92       	push	r10
     91a:	bf 92       	push	r11
     91c:	cf 92       	push	r12
     91e:	df 92       	push	r13
     920:	ef 92       	push	r14
     922:	ff 92       	push	r15
     924:	0f 93       	push	r16
     926:	1f 93       	push	r17
     928:	2f 93       	push	r18
     92a:	3f 93       	push	r19
     92c:	4f 93       	push	r20
     92e:	5f 93       	push	r21
     930:	6f 93       	push	r22
     932:	7f 93       	push	r23
     934:	8f 93       	push	r24
     936:	9f 93       	push	r25
     938:	af 93       	push	r26
     93a:	bf 93       	push	r27
     93c:	cf 93       	push	r28
     93e:	df 93       	push	r29
     940:	ef 93       	push	r30
     942:	ff 93       	push	r31
     944:	a0 91 ed 0c 	lds	r26, 0x0CED	; 0x800ced <pxCurrentTCB>
     948:	b0 91 ee 0c 	lds	r27, 0x0CEE	; 0x800cee <pxCurrentTCB+0x1>
     94c:	0d b6       	in	r0, 0x3d	; 61
     94e:	0d 92       	st	X+, r0
     950:	0e b6       	in	r0, 0x3e	; 62
     952:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     954:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     956:	94 d5       	rcall	.+2856   	; 0x1480 <xTaskIncrementTick>
     958:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     95a:	ff d7       	rcall	.+4094   	; 0x195a <vTaskSwitchContext>
     95c:	a0 91 ed 0c 	lds	r26, 0x0CED	; 0x800ced <pxCurrentTCB>
    }
    portRESTORE_CONTEXT();
     960:	b0 91 ee 0c 	lds	r27, 0x0CEE	; 0x800cee <pxCurrentTCB+0x1>
     964:	cd 91       	ld	r28, X+
     966:	cd bf       	out	0x3d, r28	; 61
     968:	dd 91       	ld	r29, X+
     96a:	de bf       	out	0x3e, r29	; 62
     96c:	ff 91       	pop	r31
     96e:	ef 91       	pop	r30
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	bf 91       	pop	r27
     976:	af 91       	pop	r26
     978:	9f 91       	pop	r25
     97a:	8f 91       	pop	r24
     97c:	7f 91       	pop	r23
     97e:	6f 91       	pop	r22
     980:	5f 91       	pop	r21
     982:	4f 91       	pop	r20
     984:	3f 91       	pop	r19
     986:	2f 91       	pop	r18
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	cf 90       	pop	r12
     994:	bf 90       	pop	r11
     996:	af 90       	pop	r10
     998:	9f 90       	pop	r9
     99a:	8f 90       	pop	r8
     99c:	7f 90       	pop	r7
     99e:	6f 90       	pop	r6
     9a0:	5f 90       	pop	r5
     9a2:	4f 90       	pop	r4
     9a4:	3f 90       	pop	r3
     9a6:	2f 90       	pop	r2
     9a8:	1f 90       	pop	r1
     9aa:	0f 90       	pop	r0
     9ac:	0c be       	out	0x3c, r0	; 60
     9ae:	0f 90       	pop	r0
     9b0:	0b be       	out	0x3b, r0	; 59
     9b2:	0f 90       	pop	r0
     9b4:	0f be       	out	0x3f, r0	; 63
     9b6:	0f 90       	pop	r0
     9b8:	08 95       	ret

000009ba <__vector_12>:

    __asm__ __volatile__ ( "ret" );
     9ba:	9c df       	rcall	.-200    	; 0x8f4 <vPortYieldFromTick>
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
        __asm__ __volatile__ ( "reti" );
     9bc:	18 95       	reti

000009be <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     9be:	0f b6       	in	r0, 0x3f	; 63
     9c0:	f8 94       	cli
     9c2:	0f 92       	push	r0
     9c4:	fc 01       	movw	r30, r24
     9c6:	86 8d       	ldd	r24, Z+30	; 0x1e
     9c8:	81 11       	cpse	r24, r1
     9ca:	02 c0       	rjmp	.+4      	; 0x9d0 <prvIsQueueEmpty+0x12>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	01 c0       	rjmp	.+2      	; 0x9d2 <prvIsQueueEmpty+0x14>
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	0f 90       	pop	r0
     9d4:	0f be       	out	0x3f, r0	; 63
     9d6:	08 95       	ret

000009d8 <prvIsQueueFull>:
     9d8:	0f b6       	in	r0, 0x3f	; 63
     9da:	f8 94       	cli
     9dc:	0f 92       	push	r0
     9de:	fc 01       	movw	r30, r24
     9e0:	26 8d       	ldd	r18, Z+30	; 0x1e
     9e2:	87 8d       	ldd	r24, Z+31	; 0x1f
     9e4:	28 13       	cpse	r18, r24
     9e6:	02 c0       	rjmp	.+4      	; 0x9ec <prvIsQueueFull+0x14>
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	01 c0       	rjmp	.+2      	; 0x9ee <prvIsQueueFull+0x16>
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	0f 90       	pop	r0
     9f0:	0f be       	out	0x3f, r0	; 63
     9f2:	08 95       	ret

000009f4 <prvCopyDataToQueue>:
     9f4:	0f 93       	push	r16
     9f6:	1f 93       	push	r17
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
     9fc:	ec 01       	movw	r28, r24
     9fe:	04 2f       	mov	r16, r20
     a00:	1e 8d       	ldd	r17, Y+30	; 0x1e
     a02:	48 a1       	ldd	r20, Y+32	; 0x20
     a04:	41 11       	cpse	r20, r1
     a06:	0c c0       	rjmp	.+24     	; 0xa20 <prvCopyDataToQueue+0x2c>
     a08:	88 81       	ld	r24, Y
     a0a:	99 81       	ldd	r25, Y+1	; 0x01
     a0c:	89 2b       	or	r24, r25
     a0e:	09 f0       	breq	.+2      	; 0xa12 <prvCopyDataToQueue+0x1e>
     a10:	42 c0       	rjmp	.+132    	; 0xa96 <prvCopyDataToQueue+0xa2>
     a12:	8c 81       	ldd	r24, Y+4	; 0x04
     a14:	9d 81       	ldd	r25, Y+5	; 0x05
     a16:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <xTaskPriorityDisinherit>
     a1a:	1d 82       	std	Y+5, r1	; 0x05
     a1c:	1c 82       	std	Y+4, r1	; 0x04
     a1e:	42 c0       	rjmp	.+132    	; 0xaa4 <prvCopyDataToQueue+0xb0>
     a20:	01 11       	cpse	r16, r1
     a22:	17 c0       	rjmp	.+46     	; 0xa52 <prvCopyDataToQueue+0x5e>
     a24:	50 e0       	ldi	r21, 0x00	; 0
     a26:	8a 81       	ldd	r24, Y+2	; 0x02
     a28:	9b 81       	ldd	r25, Y+3	; 0x03
     a2a:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <memcpy>
     a2e:	28 a1       	ldd	r18, Y+32	; 0x20
     a30:	8a 81       	ldd	r24, Y+2	; 0x02
     a32:	9b 81       	ldd	r25, Y+3	; 0x03
     a34:	82 0f       	add	r24, r18
     a36:	91 1d       	adc	r25, r1
     a38:	9b 83       	std	Y+3, r25	; 0x03
     a3a:	8a 83       	std	Y+2, r24	; 0x02
     a3c:	2c 81       	ldd	r18, Y+4	; 0x04
     a3e:	3d 81       	ldd	r19, Y+5	; 0x05
     a40:	82 17       	cp	r24, r18
     a42:	93 07       	cpc	r25, r19
     a44:	50 f1       	brcs	.+84     	; 0xa9a <prvCopyDataToQueue+0xa6>
     a46:	88 81       	ld	r24, Y
     a48:	99 81       	ldd	r25, Y+1	; 0x01
     a4a:	9b 83       	std	Y+3, r25	; 0x03
     a4c:	8a 83       	std	Y+2, r24	; 0x02
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	29 c0       	rjmp	.+82     	; 0xaa4 <prvCopyDataToQueue+0xb0>
     a52:	50 e0       	ldi	r21, 0x00	; 0
     a54:	8e 81       	ldd	r24, Y+6	; 0x06
     a56:	9f 81       	ldd	r25, Y+7	; 0x07
     a58:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <memcpy>
     a5c:	88 a1       	ldd	r24, Y+32	; 0x20
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	91 95       	neg	r25
     a62:	81 95       	neg	r24
     a64:	91 09       	sbc	r25, r1
     a66:	2e 81       	ldd	r18, Y+6	; 0x06
     a68:	3f 81       	ldd	r19, Y+7	; 0x07
     a6a:	28 0f       	add	r18, r24
     a6c:	39 1f       	adc	r19, r25
     a6e:	3f 83       	std	Y+7, r19	; 0x07
     a70:	2e 83       	std	Y+6, r18	; 0x06
     a72:	48 81       	ld	r20, Y
     a74:	59 81       	ldd	r21, Y+1	; 0x01
     a76:	24 17       	cp	r18, r20
     a78:	35 07       	cpc	r19, r21
     a7a:	30 f4       	brcc	.+12     	; 0xa88 <prvCopyDataToQueue+0x94>
     a7c:	2c 81       	ldd	r18, Y+4	; 0x04
     a7e:	3d 81       	ldd	r19, Y+5	; 0x05
     a80:	82 0f       	add	r24, r18
     a82:	93 1f       	adc	r25, r19
     a84:	9f 83       	std	Y+7, r25	; 0x07
     a86:	8e 83       	std	Y+6, r24	; 0x06
     a88:	02 30       	cpi	r16, 0x02	; 2
     a8a:	49 f4       	brne	.+18     	; 0xa9e <prvCopyDataToQueue+0xaa>
     a8c:	11 23       	and	r17, r17
     a8e:	49 f0       	breq	.+18     	; 0xaa2 <prvCopyDataToQueue+0xae>
     a90:	11 50       	subi	r17, 0x01	; 1
     a92:	80 e0       	ldi	r24, 0x00	; 0
     a94:	07 c0       	rjmp	.+14     	; 0xaa4 <prvCopyDataToQueue+0xb0>
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <prvCopyDataToQueue+0xb0>
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	03 c0       	rjmp	.+6      	; 0xaa4 <prvCopyDataToQueue+0xb0>
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	01 c0       	rjmp	.+2      	; 0xaa4 <prvCopyDataToQueue+0xb0>
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	1f 5f       	subi	r17, 0xFF	; 255
     aa6:	1e 8f       	std	Y+30, r17	; 0x1e
     aa8:	df 91       	pop	r29
     aaa:	cf 91       	pop	r28
     aac:	1f 91       	pop	r17
     aae:	0f 91       	pop	r16
     ab0:	08 95       	ret

00000ab2 <prvCopyDataFromQueue>:
     ab2:	fc 01       	movw	r30, r24
     ab4:	40 a1       	ldd	r20, Z+32	; 0x20
     ab6:	44 23       	and	r20, r20
     ab8:	a9 f0       	breq	.+42     	; 0xae4 <prvCopyDataFromQueue+0x32>
     aba:	50 e0       	ldi	r21, 0x00	; 0
     abc:	26 81       	ldd	r18, Z+6	; 0x06
     abe:	37 81       	ldd	r19, Z+7	; 0x07
     ac0:	24 0f       	add	r18, r20
     ac2:	35 1f       	adc	r19, r21
     ac4:	37 83       	std	Z+7, r19	; 0x07
     ac6:	26 83       	std	Z+6, r18	; 0x06
     ac8:	84 81       	ldd	r24, Z+4	; 0x04
     aca:	95 81       	ldd	r25, Z+5	; 0x05
     acc:	28 17       	cp	r18, r24
     ace:	39 07       	cpc	r19, r25
     ad0:	20 f0       	brcs	.+8      	; 0xada <prvCopyDataFromQueue+0x28>
     ad2:	80 81       	ld	r24, Z
     ad4:	91 81       	ldd	r25, Z+1	; 0x01
     ad6:	97 83       	std	Z+7, r25	; 0x07
     ad8:	86 83       	std	Z+6, r24	; 0x06
     ada:	cb 01       	movw	r24, r22
     adc:	66 81       	ldd	r22, Z+6	; 0x06
     ade:	77 81       	ldd	r23, Z+7	; 0x07
     ae0:	0c 94 a1 1e 	jmp	0x3d42	; 0x3d42 <memcpy>
     ae4:	08 95       	ret

00000ae6 <prvUnlockQueue>:
     ae6:	1f 93       	push	r17
     ae8:	cf 93       	push	r28
     aea:	df 93       	push	r29
     aec:	ec 01       	movw	r28, r24
     aee:	0f b6       	in	r0, 0x3f	; 63
     af0:	f8 94       	cli
     af2:	0f 92       	push	r0
     af4:	1a a1       	ldd	r17, Y+34	; 0x22
     af6:	0a c0       	rjmp	.+20     	; 0xb0c <prvUnlockQueue+0x26>
     af8:	8b 89       	ldd	r24, Y+19	; 0x13
     afa:	88 23       	and	r24, r24
     afc:	49 f0       	breq	.+18     	; 0xb10 <prvUnlockQueue+0x2a>
     afe:	ce 01       	movw	r24, r28
     b00:	43 96       	adiw	r24, 0x13	; 19
     b02:	e8 d7       	rcall	.+4048   	; 0x1ad4 <xTaskRemoveFromEventList>
     b04:	81 11       	cpse	r24, r1
     b06:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <vTaskMissedYield>
     b0a:	11 50       	subi	r17, 0x01	; 1
     b0c:	11 16       	cp	r1, r17
     b0e:	a4 f3       	brlt	.-24     	; 0xaf8 <prvUnlockQueue+0x12>
     b10:	8f ef       	ldi	r24, 0xFF	; 255
     b12:	8a a3       	std	Y+34, r24	; 0x22
     b14:	0f 90       	pop	r0
     b16:	0f be       	out	0x3f, r0	; 63
     b18:	0f b6       	in	r0, 0x3f	; 63
     b1a:	f8 94       	cli
     b1c:	0f 92       	push	r0
     b1e:	19 a1       	ldd	r17, Y+33	; 0x21
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <prvUnlockQueue+0x50>
     b22:	88 85       	ldd	r24, Y+8	; 0x08
     b24:	88 23       	and	r24, r24
     b26:	49 f0       	breq	.+18     	; 0xb3a <prvUnlockQueue+0x54>
     b28:	ce 01       	movw	r24, r28
     b2a:	08 96       	adiw	r24, 0x08	; 8
     b2c:	d3 d7       	rcall	.+4006   	; 0x1ad4 <xTaskRemoveFromEventList>
     b2e:	81 11       	cpse	r24, r1
     b30:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <vTaskMissedYield>
     b34:	11 50       	subi	r17, 0x01	; 1
     b36:	11 16       	cp	r1, r17
     b38:	a4 f3       	brlt	.-24     	; 0xb22 <prvUnlockQueue+0x3c>
     b3a:	8f ef       	ldi	r24, 0xFF	; 255
     b3c:	89 a3       	std	Y+33, r24	; 0x21
     b3e:	0f 90       	pop	r0
     b40:	0f be       	out	0x3f, r0	; 63
     b42:	df 91       	pop	r29
     b44:	cf 91       	pop	r28
     b46:	1f 91       	pop	r17
     b48:	08 95       	ret

00000b4a <xQueueGenericReset>:
     b4a:	cf 93       	push	r28
     b4c:	df 93       	push	r29
     b4e:	ec 01       	movw	r28, r24
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	0f 92       	push	r0
     b56:	e8 81       	ld	r30, Y
     b58:	f9 81       	ldd	r31, Y+1	; 0x01
     b5a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b5c:	28 a1       	ldd	r18, Y+32	; 0x20
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	82 9f       	mul	r24, r18
     b64:	a0 01       	movw	r20, r0
     b66:	83 9f       	mul	r24, r19
     b68:	50 0d       	add	r21, r0
     b6a:	92 9f       	mul	r25, r18
     b6c:	50 0d       	add	r21, r0
     b6e:	11 24       	eor	r1, r1
     b70:	4e 0f       	add	r20, r30
     b72:	5f 1f       	adc	r21, r31
     b74:	5d 83       	std	Y+5, r21	; 0x05
     b76:	4c 83       	std	Y+4, r20	; 0x04
     b78:	1e 8e       	std	Y+30, r1	; 0x1e
     b7a:	fb 83       	std	Y+3, r31	; 0x03
     b7c:	ea 83       	std	Y+2, r30	; 0x02
     b7e:	01 97       	sbiw	r24, 0x01	; 1
     b80:	28 9f       	mul	r18, r24
     b82:	a0 01       	movw	r20, r0
     b84:	29 9f       	mul	r18, r25
     b86:	50 0d       	add	r21, r0
     b88:	38 9f       	mul	r19, r24
     b8a:	50 0d       	add	r21, r0
     b8c:	11 24       	eor	r1, r1
     b8e:	cf 01       	movw	r24, r30
     b90:	84 0f       	add	r24, r20
     b92:	95 1f       	adc	r25, r21
     b94:	9f 83       	std	Y+7, r25	; 0x07
     b96:	8e 83       	std	Y+6, r24	; 0x06
     b98:	8f ef       	ldi	r24, 0xFF	; 255
     b9a:	89 a3       	std	Y+33, r24	; 0x21
     b9c:	8a a3       	std	Y+34, r24	; 0x22
     b9e:	61 11       	cpse	r22, r1
     ba0:	0a c0       	rjmp	.+20     	; 0xbb6 <xQueueGenericReset+0x6c>
     ba2:	88 85       	ldd	r24, Y+8	; 0x08
     ba4:	88 23       	and	r24, r24
     ba6:	69 f0       	breq	.+26     	; 0xbc2 <xQueueGenericReset+0x78>
     ba8:	ce 01       	movw	r24, r28
     baa:	08 96       	adiw	r24, 0x08	; 8
     bac:	93 d7       	rcall	.+3878   	; 0x1ad4 <xTaskRemoveFromEventList>
     bae:	88 23       	and	r24, r24
     bb0:	41 f0       	breq	.+16     	; 0xbc2 <xQueueGenericReset+0x78>
     bb2:	3f de       	rcall	.-898    	; 0x832 <vPortYield>
     bb4:	06 c0       	rjmp	.+12     	; 0xbc2 <xQueueGenericReset+0x78>
     bb6:	ce 01       	movw	r24, r28
     bb8:	08 96       	adiw	r24, 0x08	; 8
     bba:	6d dd       	rcall	.-1318   	; 0x696 <vListInitialise>
     bbc:	ce 01       	movw	r24, r28
     bbe:	43 96       	adiw	r24, 0x13	; 19
     bc0:	6a dd       	rcall	.-1324   	; 0x696 <vListInitialise>
     bc2:	0f 90       	pop	r0
     bc4:	0f be       	out	0x3f, r0	; 63
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	df 91       	pop	r29
     bca:	cf 91       	pop	r28
     bcc:	08 95       	ret

00000bce <prvInitialiseNewQueue>:
     bce:	0f 93       	push	r16
     bd0:	1f 93       	push	r17
     bd2:	f8 01       	movw	r30, r16
     bd4:	61 11       	cpse	r22, r1
     bd6:	03 c0       	rjmp	.+6      	; 0xbde <prvInitialiseNewQueue+0x10>
     bd8:	11 83       	std	Z+1, r17	; 0x01
     bda:	00 83       	st	Z, r16
     bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <prvInitialiseNewQueue+0x14>
     bde:	51 83       	std	Z+1, r21	; 0x01
     be0:	40 83       	st	Z, r20
     be2:	87 8f       	std	Z+31, r24	; 0x1f
     be4:	60 a3       	std	Z+32, r22	; 0x20
     be6:	61 e0       	ldi	r22, 0x01	; 1
     be8:	cf 01       	movw	r24, r30
     bea:	af df       	rcall	.-162    	; 0xb4a <xQueueGenericReset>
     bec:	1f 91       	pop	r17
     bee:	0f 91       	pop	r16
     bf0:	08 95       	ret

00000bf2 <xQueueGenericCreate>:
     bf2:	df 92       	push	r13
     bf4:	ef 92       	push	r14
     bf6:	ff 92       	push	r15
     bf8:	0f 93       	push	r16
     bfa:	1f 93       	push	r17
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	f8 2e       	mov	r15, r24
     c02:	e6 2e       	mov	r14, r22
     c04:	d4 2e       	mov	r13, r20
     c06:	86 9f       	mul	r24, r22
     c08:	c0 01       	movw	r24, r0
     c0a:	11 24       	eor	r1, r1
     c0c:	83 96       	adiw	r24, 0x23	; 35
     c0e:	5f dc       	rcall	.-1858   	; 0x4ce <pvPortMalloc>
     c10:	ec 01       	movw	r28, r24
     c12:	00 97       	sbiw	r24, 0x00	; 0
     c14:	41 f0       	breq	.+16     	; 0xc26 <xQueueGenericCreate+0x34>
     c16:	8c 01       	movw	r16, r24
     c18:	2d 2d       	mov	r18, r13
     c1a:	ac 01       	movw	r20, r24
     c1c:	4d 5d       	subi	r20, 0xDD	; 221
     c1e:	5f 4f       	sbci	r21, 0xFF	; 255
     c20:	6e 2d       	mov	r22, r14
     c22:	8f 2d       	mov	r24, r15
     c24:	d4 df       	rcall	.-88     	; 0xbce <prvInitialiseNewQueue>
     c26:	ce 01       	movw	r24, r28
     c28:	df 91       	pop	r29
     c2a:	cf 91       	pop	r28
     c2c:	1f 91       	pop	r17
     c2e:	0f 91       	pop	r16
     c30:	ff 90       	pop	r15
     c32:	ef 90       	pop	r14
     c34:	df 90       	pop	r13
     c36:	08 95       	ret

00000c38 <xQueueGenericSend>:
     c38:	cf 92       	push	r12
     c3a:	df 92       	push	r13
     c3c:	ef 92       	push	r14
     c3e:	ff 92       	push	r15
     c40:	0f 93       	push	r16
     c42:	1f 93       	push	r17
     c44:	cf 93       	push	r28
     c46:	df 93       	push	r29
     c48:	cd b7       	in	r28, 0x3d	; 61
     c4a:	de b7       	in	r29, 0x3e	; 62
     c4c:	29 97       	sbiw	r28, 0x09	; 9
     c4e:	0f b6       	in	r0, 0x3f	; 63
     c50:	f8 94       	cli
     c52:	de bf       	out	0x3e, r29	; 62
     c54:	0f be       	out	0x3f, r0	; 63
     c56:	cd bf       	out	0x3d, r28	; 61
     c58:	7c 01       	movw	r14, r24
     c5a:	6b 01       	movw	r12, r22
     c5c:	2e 83       	std	Y+6, r18	; 0x06
     c5e:	3f 83       	std	Y+7, r19	; 0x07
     c60:	48 87       	std	Y+8, r20	; 0x08
     c62:	59 87       	std	Y+9, r21	; 0x09
     c64:	10 e0       	ldi	r17, 0x00	; 0
     c66:	0f b6       	in	r0, 0x3f	; 63
     c68:	f8 94       	cli
     c6a:	0f 92       	push	r0
     c6c:	f7 01       	movw	r30, r14
     c6e:	96 8d       	ldd	r25, Z+30	; 0x1e
     c70:	87 8d       	ldd	r24, Z+31	; 0x1f
     c72:	98 17       	cp	r25, r24
     c74:	10 f0       	brcs	.+4      	; 0xc7a <xQueueGenericSend+0x42>
     c76:	02 30       	cpi	r16, 0x02	; 2
     c78:	a9 f4       	brne	.+42     	; 0xca4 <xQueueGenericSend+0x6c>
     c7a:	40 2f       	mov	r20, r16
     c7c:	b6 01       	movw	r22, r12
     c7e:	c7 01       	movw	r24, r14
     c80:	b9 de       	rcall	.-654    	; 0x9f4 <prvCopyDataToQueue>
     c82:	f7 01       	movw	r30, r14
     c84:	93 89       	ldd	r25, Z+19	; 0x13
     c86:	99 23       	and	r25, r25
     c88:	39 f0       	breq	.+14     	; 0xc98 <xQueueGenericSend+0x60>
     c8a:	c7 01       	movw	r24, r14
     c8c:	43 96       	adiw	r24, 0x13	; 19
     c8e:	22 d7       	rcall	.+3652   	; 0x1ad4 <xTaskRemoveFromEventList>
     c90:	88 23       	and	r24, r24
     c92:	21 f0       	breq	.+8      	; 0xc9c <xQueueGenericSend+0x64>
     c94:	ce dd       	rcall	.-1124   	; 0x832 <vPortYield>
     c96:	02 c0       	rjmp	.+4      	; 0xc9c <xQueueGenericSend+0x64>
     c98:	81 11       	cpse	r24, r1
     c9a:	cb dd       	rcall	.-1130   	; 0x832 <vPortYield>
     c9c:	0f 90       	pop	r0
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	46 c0       	rjmp	.+140    	; 0xd30 <xQueueGenericSend+0xf8>
     ca4:	8e 81       	ldd	r24, Y+6	; 0x06
     ca6:	9f 81       	ldd	r25, Y+7	; 0x07
     ca8:	a8 85       	ldd	r26, Y+8	; 0x08
     caa:	b9 85       	ldd	r27, Y+9	; 0x09
     cac:	89 2b       	or	r24, r25
     cae:	8a 2b       	or	r24, r26
     cb0:	8b 2b       	or	r24, r27
     cb2:	21 f4       	brne	.+8      	; 0xcbc <xQueueGenericSend+0x84>
     cb4:	0f 90       	pop	r0
     cb6:	0f be       	out	0x3f, r0	; 63
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	3a c0       	rjmp	.+116    	; 0xd30 <xQueueGenericSend+0xf8>
     cbc:	11 11       	cpse	r17, r1
     cbe:	04 c0       	rjmp	.+8      	; 0xcc8 <xQueueGenericSend+0x90>
     cc0:	ce 01       	movw	r24, r28
     cc2:	01 96       	adiw	r24, 0x01	; 1
     cc4:	b6 d7       	rcall	.+3948   	; 0x1c32 <vTaskInternalSetTimeOutState>
     cc6:	11 e0       	ldi	r17, 0x01	; 1
     cc8:	0f 90       	pop	r0
     cca:	0f be       	out	0x3f, r0	; 63
     ccc:	c5 d3       	rcall	.+1930   	; 0x1458 <vTaskSuspendAll>
     cce:	0f b6       	in	r0, 0x3f	; 63
     cd0:	f8 94       	cli
     cd2:	0f 92       	push	r0
     cd4:	f7 01       	movw	r30, r14
     cd6:	81 a1       	ldd	r24, Z+33	; 0x21
     cd8:	8f 3f       	cpi	r24, 0xFF	; 255
     cda:	09 f4       	brne	.+2      	; 0xcde <xQueueGenericSend+0xa6>
     cdc:	11 a2       	std	Z+33, r1	; 0x21
     cde:	f7 01       	movw	r30, r14
     ce0:	82 a1       	ldd	r24, Z+34	; 0x22
     ce2:	8f 3f       	cpi	r24, 0xFF	; 255
     ce4:	09 f4       	brne	.+2      	; 0xce8 <xQueueGenericSend+0xb0>
     ce6:	12 a2       	std	Z+34, r1	; 0x22
     ce8:	0f 90       	pop	r0
     cea:	0f be       	out	0x3f, r0	; 63
     cec:	be 01       	movw	r22, r28
     cee:	6a 5f       	subi	r22, 0xFA	; 250
     cf0:	7f 4f       	sbci	r23, 0xFF	; 255
     cf2:	ce 01       	movw	r24, r28
     cf4:	01 96       	adiw	r24, 0x01	; 1
     cf6:	ae d7       	rcall	.+3932   	; 0x1c54 <xTaskCheckForTimeOut>
     cf8:	81 11       	cpse	r24, r1
     cfa:	16 c0       	rjmp	.+44     	; 0xd28 <xQueueGenericSend+0xf0>
     cfc:	c7 01       	movw	r24, r14
     cfe:	6c de       	rcall	.-808    	; 0x9d8 <prvIsQueueFull>
     d00:	88 23       	and	r24, r24
     d02:	71 f0       	breq	.+28     	; 0xd20 <xQueueGenericSend+0xe8>
     d04:	4e 81       	ldd	r20, Y+6	; 0x06
     d06:	5f 81       	ldd	r21, Y+7	; 0x07
     d08:	68 85       	ldd	r22, Y+8	; 0x08
     d0a:	79 85       	ldd	r23, Y+9	; 0x09
     d0c:	c7 01       	movw	r24, r14
     d0e:	08 96       	adiw	r24, 0x08	; 8
     d10:	88 d6       	rcall	.+3344   	; 0x1a22 <vTaskPlaceOnEventList>
     d12:	c7 01       	movw	r24, r14
     d14:	e8 de       	rcall	.-560    	; 0xae6 <prvUnlockQueue>
     d16:	e0 d4       	rcall	.+2496   	; 0x16d8 <xTaskResumeAll>
     d18:	81 11       	cpse	r24, r1
     d1a:	a5 cf       	rjmp	.-182    	; 0xc66 <xQueueGenericSend+0x2e>
     d1c:	8a dd       	rcall	.-1260   	; 0x832 <vPortYield>
     d1e:	a3 cf       	rjmp	.-186    	; 0xc66 <xQueueGenericSend+0x2e>
     d20:	c7 01       	movw	r24, r14
     d22:	e1 de       	rcall	.-574    	; 0xae6 <prvUnlockQueue>
     d24:	d9 d4       	rcall	.+2482   	; 0x16d8 <xTaskResumeAll>
     d26:	9f cf       	rjmp	.-194    	; 0xc66 <xQueueGenericSend+0x2e>
     d28:	c7 01       	movw	r24, r14
     d2a:	dd de       	rcall	.-582    	; 0xae6 <prvUnlockQueue>
     d2c:	d5 d4       	rcall	.+2474   	; 0x16d8 <xTaskResumeAll>
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	29 96       	adiw	r28, 0x09	; 9
     d32:	0f b6       	in	r0, 0x3f	; 63
     d34:	f8 94       	cli
     d36:	de bf       	out	0x3e, r29	; 62
     d38:	0f be       	out	0x3f, r0	; 63
     d3a:	cd bf       	out	0x3d, r28	; 61
     d3c:	df 91       	pop	r29
     d3e:	cf 91       	pop	r28
     d40:	1f 91       	pop	r17
     d42:	0f 91       	pop	r16
     d44:	ff 90       	pop	r15
     d46:	ef 90       	pop	r14
     d48:	df 90       	pop	r13
     d4a:	cf 90       	pop	r12
     d4c:	08 95       	ret

00000d4e <prvInitialiseMutex>:
     d4e:	0f 93       	push	r16
     d50:	00 97       	sbiw	r24, 0x00	; 0
     d52:	69 f0       	breq	.+26     	; 0xd6e <prvInitialiseMutex+0x20>
     d54:	fc 01       	movw	r30, r24
     d56:	15 82       	std	Z+5, r1	; 0x05
     d58:	14 82       	std	Z+4, r1	; 0x04
     d5a:	11 82       	std	Z+1, r1	; 0x01
     d5c:	10 82       	st	Z, r1
     d5e:	16 82       	std	Z+6, r1	; 0x06
     d60:	00 e0       	ldi	r16, 0x00	; 0
     d62:	20 e0       	ldi	r18, 0x00	; 0
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	a9 01       	movw	r20, r18
     d68:	60 e0       	ldi	r22, 0x00	; 0
     d6a:	70 e0       	ldi	r23, 0x00	; 0
     d6c:	65 df       	rcall	.-310    	; 0xc38 <xQueueGenericSend>
     d6e:	0f 91       	pop	r16
     d70:	08 95       	ret

00000d72 <xQueueCreateMutex>:
     d72:	cf 93       	push	r28
     d74:	df 93       	push	r29
     d76:	48 2f       	mov	r20, r24
     d78:	60 e0       	ldi	r22, 0x00	; 0
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	3a df       	rcall	.-396    	; 0xbf2 <xQueueGenericCreate>
     d7e:	ec 01       	movw	r28, r24
     d80:	e6 df       	rcall	.-52     	; 0xd4e <prvInitialiseMutex>
     d82:	ce 01       	movw	r24, r28
     d84:	df 91       	pop	r29
     d86:	cf 91       	pop	r28
     d88:	08 95       	ret

00000d8a <xQueueGenericSendFromISR>:
     d8a:	ef 92       	push	r14
     d8c:	ff 92       	push	r15
     d8e:	0f 93       	push	r16
     d90:	1f 93       	push	r17
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
     d96:	8a 01       	movw	r16, r20
     d98:	fc 01       	movw	r30, r24
     d9a:	56 8d       	ldd	r21, Z+30	; 0x1e
     d9c:	37 8d       	ldd	r19, Z+31	; 0x1f
     d9e:	53 17       	cp	r21, r19
     da0:	10 f0       	brcs	.+4      	; 0xda6 <xQueueGenericSendFromISR+0x1c>
     da2:	22 30       	cpi	r18, 0x02	; 2
     da4:	f1 f4       	brne	.+60     	; 0xde2 <xQueueGenericSendFromISR+0x58>
     da6:	42 2f       	mov	r20, r18
     da8:	78 01       	movw	r14, r16
     daa:	ec 01       	movw	r28, r24
     dac:	1a a1       	ldd	r17, Y+34	; 0x22
     dae:	8e 8d       	ldd	r24, Y+30	; 0x1e
     db0:	ce 01       	movw	r24, r28
     db2:	20 de       	rcall	.-960    	; 0x9f4 <prvCopyDataToQueue>
     db4:	1f 3f       	cpi	r17, 0xFF	; 255
     db6:	79 f4       	brne	.+30     	; 0xdd6 <xQueueGenericSendFromISR+0x4c>
     db8:	8b 89       	ldd	r24, Y+19	; 0x13
     dba:	88 23       	and	r24, r24
     dbc:	a1 f0       	breq	.+40     	; 0xde6 <xQueueGenericSendFromISR+0x5c>
     dbe:	ce 01       	movw	r24, r28
     dc0:	43 96       	adiw	r24, 0x13	; 19
     dc2:	88 d6       	rcall	.+3344   	; 0x1ad4 <xTaskRemoveFromEventList>
     dc4:	88 23       	and	r24, r24
     dc6:	89 f0       	breq	.+34     	; 0xdea <xQueueGenericSendFromISR+0x60>
     dc8:	e1 14       	cp	r14, r1
     dca:	f1 04       	cpc	r15, r1
     dcc:	81 f0       	breq	.+32     	; 0xdee <xQueueGenericSendFromISR+0x64>
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	f7 01       	movw	r30, r14
     dd2:	80 83       	st	Z, r24
     dd4:	0d c0       	rjmp	.+26     	; 0xdf0 <xQueueGenericSendFromISR+0x66>
     dd6:	ff 24       	eor	r15, r15
     dd8:	f3 94       	inc	r15
     dda:	f1 0e       	add	r15, r17
     ddc:	fa a2       	std	Y+34, r15	; 0x22
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	07 c0       	rjmp	.+14     	; 0xdf0 <xQueueGenericSendFromISR+0x66>
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	05 c0       	rjmp	.+10     	; 0xdf0 <xQueueGenericSendFromISR+0x66>
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	03 c0       	rjmp	.+6      	; 0xdf0 <xQueueGenericSendFromISR+0x66>
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	01 c0       	rjmp	.+2      	; 0xdf0 <xQueueGenericSendFromISR+0x66>
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	df 91       	pop	r29
     df2:	cf 91       	pop	r28
     df4:	1f 91       	pop	r17
     df6:	0f 91       	pop	r16
     df8:	ff 90       	pop	r15
     dfa:	ef 90       	pop	r14
     dfc:	08 95       	ret

00000dfe <xQueueReceive>:
     dfe:	cf 92       	push	r12
     e00:	df 92       	push	r13
     e02:	ef 92       	push	r14
     e04:	ff 92       	push	r15
     e06:	0f 93       	push	r16
     e08:	1f 93       	push	r17
     e0a:	cf 93       	push	r28
     e0c:	df 93       	push	r29
     e0e:	cd b7       	in	r28, 0x3d	; 61
     e10:	de b7       	in	r29, 0x3e	; 62
     e12:	29 97       	sbiw	r28, 0x09	; 9
     e14:	0f b6       	in	r0, 0x3f	; 63
     e16:	f8 94       	cli
     e18:	de bf       	out	0x3e, r29	; 62
     e1a:	0f be       	out	0x3f, r0	; 63
     e1c:	cd bf       	out	0x3d, r28	; 61
     e1e:	8c 01       	movw	r16, r24
     e20:	6b 01       	movw	r12, r22
     e22:	2e 83       	std	Y+6, r18	; 0x06
     e24:	3f 83       	std	Y+7, r19	; 0x07
     e26:	48 87       	std	Y+8, r20	; 0x08
     e28:	59 87       	std	Y+9, r21	; 0x09
     e2a:	e1 2c       	mov	r14, r1
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	f8 94       	cli
     e30:	0f 92       	push	r0
     e32:	f8 01       	movw	r30, r16
     e34:	f6 8c       	ldd	r15, Z+30	; 0x1e
     e36:	ff 20       	and	r15, r15
     e38:	91 f0       	breq	.+36     	; 0xe5e <xQueueReceive+0x60>
     e3a:	b6 01       	movw	r22, r12
     e3c:	c8 01       	movw	r24, r16
     e3e:	39 de       	rcall	.-910    	; 0xab2 <prvCopyDataFromQueue>
     e40:	fa 94       	dec	r15
     e42:	f8 01       	movw	r30, r16
     e44:	f6 8e       	std	Z+30, r15	; 0x1e
     e46:	80 85       	ldd	r24, Z+8	; 0x08
     e48:	88 23       	and	r24, r24
     e4a:	29 f0       	breq	.+10     	; 0xe56 <xQueueReceive+0x58>
     e4c:	c8 01       	movw	r24, r16
     e4e:	08 96       	adiw	r24, 0x08	; 8
     e50:	41 d6       	rcall	.+3202   	; 0x1ad4 <xTaskRemoveFromEventList>
     e52:	81 11       	cpse	r24, r1
     e54:	ee dc       	rcall	.-1572   	; 0x832 <vPortYield>
     e56:	0f 90       	pop	r0
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	4c c0       	rjmp	.+152    	; 0xef6 <xQueueReceive+0xf8>
     e5e:	8e 81       	ldd	r24, Y+6	; 0x06
     e60:	9f 81       	ldd	r25, Y+7	; 0x07
     e62:	a8 85       	ldd	r26, Y+8	; 0x08
     e64:	b9 85       	ldd	r27, Y+9	; 0x09
     e66:	89 2b       	or	r24, r25
     e68:	8a 2b       	or	r24, r26
     e6a:	8b 2b       	or	r24, r27
     e6c:	21 f4       	brne	.+8      	; 0xe76 <xQueueReceive+0x78>
     e6e:	0f 90       	pop	r0
     e70:	0f be       	out	0x3f, r0	; 63
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	40 c0       	rjmp	.+128    	; 0xef6 <xQueueReceive+0xf8>
     e76:	e1 10       	cpse	r14, r1
     e78:	05 c0       	rjmp	.+10     	; 0xe84 <xQueueReceive+0x86>
     e7a:	ce 01       	movw	r24, r28
     e7c:	01 96       	adiw	r24, 0x01	; 1
     e7e:	d9 d6       	rcall	.+3506   	; 0x1c32 <vTaskInternalSetTimeOutState>
     e80:	ee 24       	eor	r14, r14
     e82:	e3 94       	inc	r14
     e84:	0f 90       	pop	r0
     e86:	0f be       	out	0x3f, r0	; 63
     e88:	e7 d2       	rcall	.+1486   	; 0x1458 <vTaskSuspendAll>
     e8a:	0f b6       	in	r0, 0x3f	; 63
     e8c:	f8 94       	cli
     e8e:	0f 92       	push	r0
     e90:	f8 01       	movw	r30, r16
     e92:	81 a1       	ldd	r24, Z+33	; 0x21
     e94:	8f 3f       	cpi	r24, 0xFF	; 255
     e96:	09 f4       	brne	.+2      	; 0xe9a <xQueueReceive+0x9c>
     e98:	11 a2       	std	Z+33, r1	; 0x21
     e9a:	f8 01       	movw	r30, r16
     e9c:	82 a1       	ldd	r24, Z+34	; 0x22
     e9e:	8f 3f       	cpi	r24, 0xFF	; 255
     ea0:	09 f4       	brne	.+2      	; 0xea4 <xQueueReceive+0xa6>
     ea2:	12 a2       	std	Z+34, r1	; 0x22
     ea4:	0f 90       	pop	r0
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	be 01       	movw	r22, r28
     eaa:	6a 5f       	subi	r22, 0xFA	; 250
     eac:	7f 4f       	sbci	r23, 0xFF	; 255
     eae:	ce 01       	movw	r24, r28
     eb0:	01 96       	adiw	r24, 0x01	; 1
     eb2:	d0 d6       	rcall	.+3488   	; 0x1c54 <xTaskCheckForTimeOut>
     eb4:	81 11       	cpse	r24, r1
     eb6:	16 c0       	rjmp	.+44     	; 0xee4 <xQueueReceive+0xe6>
     eb8:	c8 01       	movw	r24, r16
     eba:	81 dd       	rcall	.-1278   	; 0x9be <prvIsQueueEmpty>
     ebc:	88 23       	and	r24, r24
     ebe:	71 f0       	breq	.+28     	; 0xedc <xQueueReceive+0xde>
     ec0:	4e 81       	ldd	r20, Y+6	; 0x06
     ec2:	5f 81       	ldd	r21, Y+7	; 0x07
     ec4:	68 85       	ldd	r22, Y+8	; 0x08
     ec6:	79 85       	ldd	r23, Y+9	; 0x09
     ec8:	c8 01       	movw	r24, r16
     eca:	43 96       	adiw	r24, 0x13	; 19
     ecc:	aa d5       	rcall	.+2900   	; 0x1a22 <vTaskPlaceOnEventList>
     ece:	c8 01       	movw	r24, r16
     ed0:	0a de       	rcall	.-1004   	; 0xae6 <prvUnlockQueue>
     ed2:	02 d4       	rcall	.+2052   	; 0x16d8 <xTaskResumeAll>
     ed4:	81 11       	cpse	r24, r1
     ed6:	aa cf       	rjmp	.-172    	; 0xe2c <xQueueReceive+0x2e>
     ed8:	ac dc       	rcall	.-1704   	; 0x832 <vPortYield>
     eda:	a8 cf       	rjmp	.-176    	; 0xe2c <xQueueReceive+0x2e>
     edc:	c8 01       	movw	r24, r16
     ede:	03 de       	rcall	.-1018   	; 0xae6 <prvUnlockQueue>
     ee0:	fb d3       	rcall	.+2038   	; 0x16d8 <xTaskResumeAll>
     ee2:	a4 cf       	rjmp	.-184    	; 0xe2c <xQueueReceive+0x2e>
     ee4:	c8 01       	movw	r24, r16
     ee6:	ff dd       	rcall	.-1026   	; 0xae6 <prvUnlockQueue>
     ee8:	f7 d3       	rcall	.+2030   	; 0x16d8 <xTaskResumeAll>
     eea:	c8 01       	movw	r24, r16
     eec:	68 dd       	rcall	.-1328   	; 0x9be <prvIsQueueEmpty>
     eee:	88 23       	and	r24, r24
     ef0:	09 f4       	brne	.+2      	; 0xef4 <xQueueReceive+0xf6>
     ef2:	9c cf       	rjmp	.-200    	; 0xe2c <xQueueReceive+0x2e>
     ef4:	80 e0       	ldi	r24, 0x00	; 0
     ef6:	29 96       	adiw	r28, 0x09	; 9
     ef8:	0f b6       	in	r0, 0x3f	; 63
     efa:	f8 94       	cli
     efc:	de bf       	out	0x3e, r29	; 62
     efe:	0f be       	out	0x3f, r0	; 63
     f00:	cd bf       	out	0x3d, r28	; 61
     f02:	df 91       	pop	r29
     f04:	cf 91       	pop	r28
     f06:	1f 91       	pop	r17
     f08:	0f 91       	pop	r16
     f0a:	ff 90       	pop	r15
     f0c:	ef 90       	pop	r14
     f0e:	df 90       	pop	r13
     f10:	cf 90       	pop	r12
     f12:	08 95       	ret

00000f14 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     f14:	cf 93       	push	r28
     f16:	df 93       	push	r29
     f18:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	f8 94       	cli
     f1e:	0f 92       	push	r0
     f20:	89 a1       	ldd	r24, Y+33	; 0x21
     f22:	8f 3f       	cpi	r24, 0xFF	; 255
     f24:	09 f4       	brne	.+2      	; 0xf28 <vQueueWaitForMessageRestricted+0x14>
     f26:	19 a2       	std	Y+33, r1	; 0x21
     f28:	8a a1       	ldd	r24, Y+34	; 0x22
     f2a:	8f 3f       	cpi	r24, 0xFF	; 255
     f2c:	09 f4       	brne	.+2      	; 0xf30 <vQueueWaitForMessageRestricted+0x1c>
     f2e:	1a a2       	std	Y+34, r1	; 0x22
     f30:	0f 90       	pop	r0
     f32:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     f34:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f36:	81 11       	cpse	r24, r1
     f38:	03 c0       	rjmp	.+6      	; 0xf40 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     f3a:	ce 01       	movw	r24, r28
     f3c:	43 96       	adiw	r24, 0x13	; 19
     f3e:	88 d5       	rcall	.+2832   	; 0x1a50 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     f40:	ce 01       	movw	r24, r28
     f42:	d1 dd       	rcall	.-1118   	; 0xae6 <prvUnlockQueue>
    }
     f44:	df 91       	pop	r29
     f46:	cf 91       	pop	r28
     f48:	08 95       	ret

00000f4a <prvResetNextTaskUnblockTime>:
     f4a:	e0 91 67 0c 	lds	r30, 0x0C67	; 0x800c67 <pxDelayedTaskList>
     f4e:	f0 91 68 0c 	lds	r31, 0x0C68	; 0x800c68 <pxDelayedTaskList+0x1>
     f52:	80 81       	ld	r24, Z
     f54:	81 11       	cpse	r24, r1
     f56:	0c c0       	rjmp	.+24     	; 0xf70 <prvResetNextTaskUnblockTime+0x26>
     f58:	8f ef       	ldi	r24, 0xFF	; 255
     f5a:	9f ef       	ldi	r25, 0xFF	; 255
     f5c:	dc 01       	movw	r26, r24
     f5e:	80 93 31 0c 	sts	0x0C31, r24	; 0x800c31 <xNextTaskUnblockTime>
     f62:	90 93 32 0c 	sts	0x0C32, r25	; 0x800c32 <xNextTaskUnblockTime+0x1>
     f66:	a0 93 33 0c 	sts	0x0C33, r26	; 0x800c33 <xNextTaskUnblockTime+0x2>
     f6a:	b0 93 34 0c 	sts	0x0C34, r27	; 0x800c34 <xNextTaskUnblockTime+0x3>
     f6e:	08 95       	ret
     f70:	e0 91 67 0c 	lds	r30, 0x0C67	; 0x800c67 <pxDelayedTaskList>
     f74:	f0 91 68 0c 	lds	r31, 0x0C68	; 0x800c68 <pxDelayedTaskList+0x1>
     f78:	07 80       	ldd	r0, Z+7	; 0x07
     f7a:	f0 85       	ldd	r31, Z+8	; 0x08
     f7c:	e0 2d       	mov	r30, r0
     f7e:	80 81       	ld	r24, Z
     f80:	91 81       	ldd	r25, Z+1	; 0x01
     f82:	a2 81       	ldd	r26, Z+2	; 0x02
     f84:	b3 81       	ldd	r27, Z+3	; 0x03
     f86:	80 93 31 0c 	sts	0x0C31, r24	; 0x800c31 <xNextTaskUnblockTime>
     f8a:	90 93 32 0c 	sts	0x0C32, r25	; 0x800c32 <xNextTaskUnblockTime+0x1>
     f8e:	a0 93 33 0c 	sts	0x0C33, r26	; 0x800c33 <xNextTaskUnblockTime+0x2>
     f92:	b0 93 34 0c 	sts	0x0C34, r27	; 0x800c34 <xNextTaskUnblockTime+0x3>
     f96:	08 95       	ret

00000f98 <prvDeleteTCB>:
     f98:	cf 93       	push	r28
     f9a:	df 93       	push	r29
     f9c:	ec 01       	movw	r28, r24
     f9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fa0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fa2:	3d db       	rcall	.-2438   	; 0x61e <vPortFree>
     fa4:	ce 01       	movw	r24, r28
     fa6:	3b db       	rcall	.-2442   	; 0x61e <vPortFree>
     fa8:	df 91       	pop	r29
     faa:	cf 91       	pop	r28
     fac:	08 95       	ret

00000fae <prvInitialiseNewTask>:
     fae:	4f 92       	push	r4
     fb0:	5f 92       	push	r5
     fb2:	6f 92       	push	r6
     fb4:	7f 92       	push	r7
     fb6:	8f 92       	push	r8
     fb8:	9f 92       	push	r9
     fba:	af 92       	push	r10
     fbc:	bf 92       	push	r11
     fbe:	cf 92       	push	r12
     fc0:	df 92       	push	r13
     fc2:	ef 92       	push	r14
     fc4:	ff 92       	push	r15
     fc6:	0f 93       	push	r16
     fc8:	cf 93       	push	r28
     fca:	df 93       	push	r29
     fcc:	2c 01       	movw	r4, r24
     fce:	5b 01       	movw	r10, r22
     fd0:	4a 01       	movw	r8, r20
     fd2:	39 01       	movw	r6, r18
     fd4:	e6 01       	movw	r28, r12
     fd6:	65 ea       	ldi	r22, 0xA5	; 165
     fd8:	70 e0       	ldi	r23, 0x00	; 0
     fda:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fde:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <memset>
     fe2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fe4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fe6:	21 e0       	ldi	r18, 0x01	; 1
     fe8:	82 1a       	sub	r8, r18
     fea:	91 08       	sbc	r9, r1
     fec:	88 0e       	add	r8, r24
     fee:	99 1e       	adc	r9, r25
     ff0:	a1 14       	cp	r10, r1
     ff2:	b1 04       	cpc	r11, r1
     ff4:	89 f4       	brne	.+34     	; 0x1018 <__EEPROM_REGION_LENGTH__+0x18>
     ff6:	15 c0       	rjmp	.+42     	; 0x1022 <__EEPROM_REGION_LENGTH__+0x22>
     ff8:	82 2f       	mov	r24, r18
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	f5 01       	movw	r30, r10
     ffe:	e8 0f       	add	r30, r24
    1000:	f9 1f       	adc	r31, r25
    1002:	30 81       	ld	r19, Z
    1004:	de 01       	movw	r26, r28
    1006:	a8 0f       	add	r26, r24
    1008:	b9 1f       	adc	r27, r25
    100a:	5d 96       	adiw	r26, 0x1d	; 29
    100c:	3c 93       	st	X, r19
    100e:	80 81       	ld	r24, Z
    1010:	88 23       	and	r24, r24
    1012:	29 f0       	breq	.+10     	; 0x101e <__EEPROM_REGION_LENGTH__+0x1e>
    1014:	2f 5f       	subi	r18, 0xFF	; 255
    1016:	01 c0       	rjmp	.+2      	; 0x101a <__EEPROM_REGION_LENGTH__+0x1a>
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	20 31       	cpi	r18, 0x10	; 16
    101c:	68 f3       	brcs	.-38     	; 0xff8 <prvInitialiseNewTask+0x4a>
    101e:	1c a6       	std	Y+44, r1	; 0x2c
    1020:	01 c0       	rjmp	.+2      	; 0x1024 <__EEPROM_REGION_LENGTH__+0x24>
    1022:	1d 8e       	std	Y+29, r1	; 0x1d
    1024:	0a 30       	cpi	r16, 0x0A	; 10
    1026:	08 f0       	brcs	.+2      	; 0x102a <__EEPROM_REGION_LENGTH__+0x2a>
    1028:	09 e0       	ldi	r16, 0x09	; 9
    102a:	0a 8f       	std	Y+26, r16	; 0x1a
    102c:	0d a7       	std	Y+45, r16	; 0x2d
    102e:	1e a6       	std	Y+46, r1	; 0x2e
    1030:	ce 01       	movw	r24, r28
    1032:	02 96       	adiw	r24, 0x02	; 2
    1034:	41 db       	rcall	.-2430   	; 0x6b8 <vListInitialiseItem>
    1036:	ce 01       	movw	r24, r28
    1038:	0e 96       	adiw	r24, 0x0e	; 14
    103a:	3e db       	rcall	.-2436   	; 0x6b8 <vListInitialiseItem>
    103c:	db 87       	std	Y+11, r29	; 0x0b
    103e:	ca 87       	std	Y+10, r28	; 0x0a
    1040:	8a e0       	ldi	r24, 0x0A	; 10
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	a0 e0       	ldi	r26, 0x00	; 0
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	80 1b       	sub	r24, r16
    104a:	91 09       	sbc	r25, r1
    104c:	a1 09       	sbc	r26, r1
    104e:	b1 09       	sbc	r27, r1
    1050:	8e 87       	std	Y+14, r24	; 0x0e
    1052:	9f 87       	std	Y+15, r25	; 0x0f
    1054:	a8 8b       	std	Y+16, r26	; 0x10
    1056:	b9 8b       	std	Y+17, r27	; 0x11
    1058:	df 8b       	std	Y+23, r29	; 0x17
    105a:	ce 8b       	std	Y+22, r28	; 0x16
    105c:	84 e0       	ldi	r24, 0x04	; 4
    105e:	fe 01       	movw	r30, r28
    1060:	bf 96       	adiw	r30, 0x2f	; 47
    1062:	df 01       	movw	r26, r30
    1064:	1d 92       	st	X+, r1
    1066:	8a 95       	dec	r24
    1068:	e9 f7       	brne	.-6      	; 0x1064 <__EEPROM_REGION_LENGTH__+0x64>
    106a:	1b aa       	std	Y+51, r1	; 0x33
    106c:	a3 01       	movw	r20, r6
    106e:	b2 01       	movw	r22, r4
    1070:	c4 01       	movw	r24, r8
    1072:	96 db       	rcall	.-2260   	; 0x7a0 <pxPortInitialiseStack>
    1074:	99 83       	std	Y+1, r25	; 0x01
    1076:	88 83       	st	Y, r24
    1078:	e1 14       	cp	r14, r1
    107a:	f1 04       	cpc	r15, r1
    107c:	19 f0       	breq	.+6      	; 0x1084 <__EEPROM_REGION_LENGTH__+0x84>
    107e:	f7 01       	movw	r30, r14
    1080:	d1 83       	std	Z+1, r29	; 0x01
    1082:	c0 83       	st	Z, r28
    1084:	df 91       	pop	r29
    1086:	cf 91       	pop	r28
    1088:	0f 91       	pop	r16
    108a:	ff 90       	pop	r15
    108c:	ef 90       	pop	r14
    108e:	df 90       	pop	r13
    1090:	cf 90       	pop	r12
    1092:	bf 90       	pop	r11
    1094:	af 90       	pop	r10
    1096:	9f 90       	pop	r9
    1098:	8f 90       	pop	r8
    109a:	7f 90       	pop	r7
    109c:	6f 90       	pop	r6
    109e:	5f 90       	pop	r5
    10a0:	4f 90       	pop	r4
    10a2:	08 95       	ret

000010a4 <prvInitialiseTaskLists>:
    10a4:	cf 93       	push	r28
    10a6:	c0 e0       	ldi	r28, 0x00	; 0
    10a8:	08 c0       	rjmp	.+16     	; 0x10ba <prvInitialiseTaskLists+0x16>
    10aa:	2b e0       	ldi	r18, 0x0B	; 11
    10ac:	c2 9f       	mul	r28, r18
    10ae:	c0 01       	movw	r24, r0
    10b0:	11 24       	eor	r1, r1
    10b2:	81 58       	subi	r24, 0x81	; 129
    10b4:	93 4f       	sbci	r25, 0xF3	; 243
    10b6:	ef da       	rcall	.-2594   	; 0x696 <vListInitialise>
    10b8:	cf 5f       	subi	r28, 0xFF	; 255
    10ba:	ca 30       	cpi	r28, 0x0A	; 10
    10bc:	b0 f3       	brcs	.-20     	; 0x10aa <prvInitialiseTaskLists+0x6>
    10be:	84 e7       	ldi	r24, 0x74	; 116
    10c0:	9c e0       	ldi	r25, 0x0C	; 12
    10c2:	e9 da       	rcall	.-2606   	; 0x696 <vListInitialise>
    10c4:	89 e6       	ldi	r24, 0x69	; 105
    10c6:	9c e0       	ldi	r25, 0x0C	; 12
    10c8:	e6 da       	rcall	.-2612   	; 0x696 <vListInitialise>
    10ca:	8a e5       	ldi	r24, 0x5A	; 90
    10cc:	9c e0       	ldi	r25, 0x0C	; 12
    10ce:	e3 da       	rcall	.-2618   	; 0x696 <vListInitialise>
    10d0:	8f e4       	ldi	r24, 0x4F	; 79
    10d2:	9c e0       	ldi	r25, 0x0C	; 12
    10d4:	e0 da       	rcall	.-2624   	; 0x696 <vListInitialise>
    10d6:	83 e4       	ldi	r24, 0x43	; 67
    10d8:	9c e0       	ldi	r25, 0x0C	; 12
    10da:	dd da       	rcall	.-2630   	; 0x696 <vListInitialise>
    10dc:	84 e7       	ldi	r24, 0x74	; 116
    10de:	9c e0       	ldi	r25, 0x0C	; 12
    10e0:	90 93 68 0c 	sts	0x0C68, r25	; 0x800c68 <pxDelayedTaskList+0x1>
    10e4:	80 93 67 0c 	sts	0x0C67, r24	; 0x800c67 <pxDelayedTaskList>
    10e8:	89 e6       	ldi	r24, 0x69	; 105
    10ea:	9c e0       	ldi	r25, 0x0C	; 12
    10ec:	90 93 66 0c 	sts	0x0C66, r25	; 0x800c66 <pxOverflowDelayedTaskList+0x1>
    10f0:	80 93 65 0c 	sts	0x0C65, r24	; 0x800c65 <pxOverflowDelayedTaskList>
    10f4:	cf 91       	pop	r28
    10f6:	08 95       	ret

000010f8 <prvAddNewTaskToReadyList>:
    10f8:	cf 93       	push	r28
    10fa:	df 93       	push	r29
    10fc:	ec 01       	movw	r28, r24
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	f8 94       	cli
    1102:	0f 92       	push	r0
    1104:	80 91 42 0c 	lds	r24, 0x0C42	; 0x800c42 <uxCurrentNumberOfTasks>
    1108:	8f 5f       	subi	r24, 0xFF	; 255
    110a:	80 93 42 0c 	sts	0x0C42, r24	; 0x800c42 <uxCurrentNumberOfTasks>
    110e:	80 91 ed 0c 	lds	r24, 0x0CED	; 0x800ced <pxCurrentTCB>
    1112:	90 91 ee 0c 	lds	r25, 0x0CEE	; 0x800cee <pxCurrentTCB+0x1>
    1116:	89 2b       	or	r24, r25
    1118:	51 f4       	brne	.+20     	; 0x112e <prvAddNewTaskToReadyList+0x36>
    111a:	d0 93 ee 0c 	sts	0x0CEE, r29	; 0x800cee <pxCurrentTCB+0x1>
    111e:	c0 93 ed 0c 	sts	0x0CED, r28	; 0x800ced <pxCurrentTCB>
    1122:	80 91 42 0c 	lds	r24, 0x0C42	; 0x800c42 <uxCurrentNumberOfTasks>
    1126:	81 30       	cpi	r24, 0x01	; 1
    1128:	91 f4       	brne	.+36     	; 0x114e <prvAddNewTaskToReadyList+0x56>
    112a:	bc df       	rcall	.-136    	; 0x10a4 <prvInitialiseTaskLists>
    112c:	10 c0       	rjmp	.+32     	; 0x114e <prvAddNewTaskToReadyList+0x56>
    112e:	80 91 3c 0c 	lds	r24, 0x0C3C	; 0x800c3c <xSchedulerRunning>
    1132:	81 11       	cpse	r24, r1
    1134:	0c c0       	rjmp	.+24     	; 0x114e <prvAddNewTaskToReadyList+0x56>
    1136:	e0 91 ed 0c 	lds	r30, 0x0CED	; 0x800ced <pxCurrentTCB>
    113a:	f0 91 ee 0c 	lds	r31, 0x0CEE	; 0x800cee <pxCurrentTCB+0x1>
    113e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1140:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1142:	89 17       	cp	r24, r25
    1144:	20 f0       	brcs	.+8      	; 0x114e <prvAddNewTaskToReadyList+0x56>
    1146:	d0 93 ee 0c 	sts	0x0CEE, r29	; 0x800cee <pxCurrentTCB+0x1>
    114a:	c0 93 ed 0c 	sts	0x0CED, r28	; 0x800ced <pxCurrentTCB>
    114e:	80 91 35 0c 	lds	r24, 0x0C35	; 0x800c35 <uxTaskNumber>
    1152:	8f 5f       	subi	r24, 0xFF	; 255
    1154:	80 93 35 0c 	sts	0x0C35, r24	; 0x800c35 <uxTaskNumber>
    1158:	ea 8d       	ldd	r30, Y+26	; 0x1a
    115a:	80 91 3d 0c 	lds	r24, 0x0C3D	; 0x800c3d <uxTopReadyPriority>
    115e:	8e 17       	cp	r24, r30
    1160:	10 f4       	brcc	.+4      	; 0x1166 <prvAddNewTaskToReadyList+0x6e>
    1162:	e0 93 3d 0c 	sts	0x0C3D, r30	; 0x800c3d <uxTopReadyPriority>
    1166:	8b e0       	ldi	r24, 0x0B	; 11
    1168:	8e 9f       	mul	r24, r30
    116a:	f0 01       	movw	r30, r0
    116c:	11 24       	eor	r1, r1
    116e:	e1 58       	subi	r30, 0x81	; 129
    1170:	f3 4f       	sbci	r31, 0xF3	; 243
    1172:	01 80       	ldd	r0, Z+1	; 0x01
    1174:	f2 81       	ldd	r31, Z+2	; 0x02
    1176:	e0 2d       	mov	r30, r0
    1178:	ff 83       	std	Y+7, r31	; 0x07
    117a:	ee 83       	std	Y+6, r30	; 0x06
    117c:	26 81       	ldd	r18, Z+6	; 0x06
    117e:	37 81       	ldd	r19, Z+7	; 0x07
    1180:	39 87       	std	Y+9, r19	; 0x09
    1182:	28 87       	std	Y+8, r18	; 0x08
    1184:	a6 81       	ldd	r26, Z+6	; 0x06
    1186:	b7 81       	ldd	r27, Z+7	; 0x07
    1188:	9e 01       	movw	r18, r28
    118a:	2e 5f       	subi	r18, 0xFE	; 254
    118c:	3f 4f       	sbci	r19, 0xFF	; 255
    118e:	15 96       	adiw	r26, 0x05	; 5
    1190:	3c 93       	st	X, r19
    1192:	2e 93       	st	-X, r18
    1194:	14 97       	sbiw	r26, 0x04	; 4
    1196:	37 83       	std	Z+7, r19	; 0x07
    1198:	26 83       	std	Z+6, r18	; 0x06
    119a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    119c:	8e 9f       	mul	r24, r30
    119e:	f0 01       	movw	r30, r0
    11a0:	11 24       	eor	r1, r1
    11a2:	e1 58       	subi	r30, 0x81	; 129
    11a4:	f3 4f       	sbci	r31, 0xF3	; 243
    11a6:	fd 87       	std	Y+13, r31	; 0x0d
    11a8:	ec 87       	std	Y+12, r30	; 0x0c
    11aa:	80 81       	ld	r24, Z
    11ac:	8f 5f       	subi	r24, 0xFF	; 255
    11ae:	80 83       	st	Z, r24
    11b0:	0f 90       	pop	r0
    11b2:	0f be       	out	0x3f, r0	; 63
    11b4:	80 91 3c 0c 	lds	r24, 0x0C3C	; 0x800c3c <xSchedulerRunning>
    11b8:	88 23       	and	r24, r24
    11ba:	49 f0       	breq	.+18     	; 0x11ce <prvAddNewTaskToReadyList+0xd6>
    11bc:	e0 91 ed 0c 	lds	r30, 0x0CED	; 0x800ced <pxCurrentTCB>
    11c0:	f0 91 ee 0c 	lds	r31, 0x0CEE	; 0x800cee <pxCurrentTCB+0x1>
    11c4:	92 8d       	ldd	r25, Z+26	; 0x1a
    11c6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    11c8:	98 17       	cp	r25, r24
    11ca:	08 f4       	brcc	.+2      	; 0x11ce <prvAddNewTaskToReadyList+0xd6>
    11cc:	32 db       	rcall	.-2460   	; 0x832 <vPortYield>
    11ce:	df 91       	pop	r29
    11d0:	cf 91       	pop	r28
    11d2:	08 95       	ret

000011d4 <prvCheckTasksWaitingTermination>:
    11d4:	cf 93       	push	r28
    11d6:	df 93       	push	r29
    11d8:	1a c0       	rjmp	.+52     	; 0x120e <prvCheckTasksWaitingTermination+0x3a>
    11da:	0f b6       	in	r0, 0x3f	; 63
    11dc:	f8 94       	cli
    11de:	0f 92       	push	r0
    11e0:	e0 91 56 0c 	lds	r30, 0x0C56	; 0x800c56 <xTasksWaitingTermination+0x7>
    11e4:	f0 91 57 0c 	lds	r31, 0x0C57	; 0x800c57 <xTasksWaitingTermination+0x8>
    11e8:	c0 85       	ldd	r28, Z+8	; 0x08
    11ea:	d1 85       	ldd	r29, Z+9	; 0x09
    11ec:	ce 01       	movw	r24, r28
    11ee:	02 96       	adiw	r24, 0x02	; 2
    11f0:	a4 da       	rcall	.-2744   	; 0x73a <uxListRemove>
    11f2:	80 91 42 0c 	lds	r24, 0x0C42	; 0x800c42 <uxCurrentNumberOfTasks>
    11f6:	81 50       	subi	r24, 0x01	; 1
    11f8:	80 93 42 0c 	sts	0x0C42, r24	; 0x800c42 <uxCurrentNumberOfTasks>
    11fc:	80 91 4e 0c 	lds	r24, 0x0C4E	; 0x800c4e <uxDeletedTasksWaitingCleanUp>
    1200:	81 50       	subi	r24, 0x01	; 1
    1202:	80 93 4e 0c 	sts	0x0C4E, r24	; 0x800c4e <uxDeletedTasksWaitingCleanUp>
    1206:	0f 90       	pop	r0
    1208:	0f be       	out	0x3f, r0	; 63
    120a:	ce 01       	movw	r24, r28
    120c:	c5 de       	rcall	.-630    	; 0xf98 <prvDeleteTCB>
    120e:	80 91 4e 0c 	lds	r24, 0x0C4E	; 0x800c4e <uxDeletedTasksWaitingCleanUp>
    1212:	81 11       	cpse	r24, r1
    1214:	e2 cf       	rjmp	.-60     	; 0x11da <prvCheckTasksWaitingTermination+0x6>
    1216:	df 91       	pop	r29
    1218:	cf 91       	pop	r28
    121a:	08 95       	ret

0000121c <prvAddCurrentTaskToDelayedList>:
    121c:	8f 92       	push	r8
    121e:	9f 92       	push	r9
    1220:	af 92       	push	r10
    1222:	bf 92       	push	r11
    1224:	cf 92       	push	r12
    1226:	df 92       	push	r13
    1228:	ef 92       	push	r14
    122a:	ff 92       	push	r15
    122c:	cf 93       	push	r28
    122e:	df 93       	push	r29
    1230:	6b 01       	movw	r12, r22
    1232:	7c 01       	movw	r14, r24
    1234:	c4 2f       	mov	r28, r20
    1236:	80 90 3e 0c 	lds	r8, 0x0C3E	; 0x800c3e <xTickCount>
    123a:	90 90 3f 0c 	lds	r9, 0x0C3F	; 0x800c3f <xTickCount+0x1>
    123e:	a0 90 40 0c 	lds	r10, 0x0C40	; 0x800c40 <xTickCount+0x2>
    1242:	b0 90 41 0c 	lds	r11, 0x0C41	; 0x800c41 <xTickCount+0x3>
    1246:	80 91 ed 0c 	lds	r24, 0x0CED	; 0x800ced <pxCurrentTCB>
    124a:	90 91 ee 0c 	lds	r25, 0x0CEE	; 0x800cee <pxCurrentTCB+0x1>
    124e:	02 96       	adiw	r24, 0x02	; 2
    1250:	74 da       	rcall	.-2840   	; 0x73a <uxListRemove>
    1252:	8f ef       	ldi	r24, 0xFF	; 255
    1254:	c8 16       	cp	r12, r24
    1256:	d8 06       	cpc	r13, r24
    1258:	e8 06       	cpc	r14, r24
    125a:	f8 06       	cpc	r15, r24
    125c:	b1 f5       	brne	.+108    	; 0x12ca <prvAddCurrentTaskToDelayedList+0xae>
    125e:	cc 23       	and	r28, r28
    1260:	a1 f1       	breq	.+104    	; 0x12ca <prvAddCurrentTaskToDelayedList+0xae>
    1262:	e3 e4       	ldi	r30, 0x43	; 67
    1264:	fc e0       	ldi	r31, 0x0C	; 12
    1266:	a1 81       	ldd	r26, Z+1	; 0x01
    1268:	b2 81       	ldd	r27, Z+2	; 0x02
    126a:	c0 91 ed 0c 	lds	r28, 0x0CED	; 0x800ced <pxCurrentTCB>
    126e:	d0 91 ee 0c 	lds	r29, 0x0CEE	; 0x800cee <pxCurrentTCB+0x1>
    1272:	bf 83       	std	Y+7, r27	; 0x07
    1274:	ae 83       	std	Y+6, r26	; 0x06
    1276:	c0 91 ed 0c 	lds	r28, 0x0CED	; 0x800ced <pxCurrentTCB>
    127a:	d0 91 ee 0c 	lds	r29, 0x0CEE	; 0x800cee <pxCurrentTCB+0x1>
    127e:	16 96       	adiw	r26, 0x06	; 6
    1280:	8d 91       	ld	r24, X+
    1282:	9c 91       	ld	r25, X
    1284:	17 97       	sbiw	r26, 0x07	; 7
    1286:	99 87       	std	Y+9, r25	; 0x09
    1288:	88 87       	std	Y+8, r24	; 0x08
    128a:	16 96       	adiw	r26, 0x06	; 6
    128c:	cd 91       	ld	r28, X+
    128e:	dc 91       	ld	r29, X
    1290:	17 97       	sbiw	r26, 0x07	; 7
    1292:	80 91 ed 0c 	lds	r24, 0x0CED	; 0x800ced <pxCurrentTCB>
    1296:	90 91 ee 0c 	lds	r25, 0x0CEE	; 0x800cee <pxCurrentTCB+0x1>
    129a:	02 96       	adiw	r24, 0x02	; 2
    129c:	9d 83       	std	Y+5, r25	; 0x05
    129e:	8c 83       	std	Y+4, r24	; 0x04
    12a0:	80 91 ed 0c 	lds	r24, 0x0CED	; 0x800ced <pxCurrentTCB>
    12a4:	90 91 ee 0c 	lds	r25, 0x0CEE	; 0x800cee <pxCurrentTCB+0x1>
    12a8:	02 96       	adiw	r24, 0x02	; 2
    12aa:	17 96       	adiw	r26, 0x07	; 7
    12ac:	9c 93       	st	X, r25
    12ae:	8e 93       	st	-X, r24
    12b0:	16 97       	sbiw	r26, 0x06	; 6
    12b2:	a0 91 ed 0c 	lds	r26, 0x0CED	; 0x800ced <pxCurrentTCB>
    12b6:	b0 91 ee 0c 	lds	r27, 0x0CEE	; 0x800cee <pxCurrentTCB+0x1>
    12ba:	1d 96       	adiw	r26, 0x0d	; 13
    12bc:	fc 93       	st	X, r31
    12be:	ee 93       	st	-X, r30
    12c0:	1c 97       	sbiw	r26, 0x0c	; 12
    12c2:	80 81       	ld	r24, Z
    12c4:	8f 5f       	subi	r24, 0xFF	; 255
    12c6:	80 83       	st	Z, r24
    12c8:	3d c0       	rjmp	.+122    	; 0x1344 <prvAddCurrentTaskToDelayedList+0x128>
    12ca:	c8 0c       	add	r12, r8
    12cc:	d9 1c       	adc	r13, r9
    12ce:	ea 1c       	adc	r14, r10
    12d0:	fb 1c       	adc	r15, r11
    12d2:	e0 91 ed 0c 	lds	r30, 0x0CED	; 0x800ced <pxCurrentTCB>
    12d6:	f0 91 ee 0c 	lds	r31, 0x0CEE	; 0x800cee <pxCurrentTCB+0x1>
    12da:	c2 82       	std	Z+2, r12	; 0x02
    12dc:	d3 82       	std	Z+3, r13	; 0x03
    12de:	e4 82       	std	Z+4, r14	; 0x04
    12e0:	f5 82       	std	Z+5, r15	; 0x05
    12e2:	c8 14       	cp	r12, r8
    12e4:	d9 04       	cpc	r13, r9
    12e6:	ea 04       	cpc	r14, r10
    12e8:	fb 04       	cpc	r15, r11
    12ea:	60 f4       	brcc	.+24     	; 0x1304 <prvAddCurrentTaskToDelayedList+0xe8>
    12ec:	60 91 ed 0c 	lds	r22, 0x0CED	; 0x800ced <pxCurrentTCB>
    12f0:	70 91 ee 0c 	lds	r23, 0x0CEE	; 0x800cee <pxCurrentTCB+0x1>
    12f4:	80 91 65 0c 	lds	r24, 0x0C65	; 0x800c65 <pxOverflowDelayedTaskList>
    12f8:	90 91 66 0c 	lds	r25, 0x0C66	; 0x800c66 <pxOverflowDelayedTaskList+0x1>
    12fc:	6e 5f       	subi	r22, 0xFE	; 254
    12fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1300:	df d9       	rcall	.-3138   	; 0x6c0 <vListInsert>
    1302:	20 c0       	rjmp	.+64     	; 0x1344 <prvAddCurrentTaskToDelayedList+0x128>
    1304:	60 91 ed 0c 	lds	r22, 0x0CED	; 0x800ced <pxCurrentTCB>
    1308:	70 91 ee 0c 	lds	r23, 0x0CEE	; 0x800cee <pxCurrentTCB+0x1>
    130c:	80 91 67 0c 	lds	r24, 0x0C67	; 0x800c67 <pxDelayedTaskList>
    1310:	90 91 68 0c 	lds	r25, 0x0C68	; 0x800c68 <pxDelayedTaskList+0x1>
    1314:	6e 5f       	subi	r22, 0xFE	; 254
    1316:	7f 4f       	sbci	r23, 0xFF	; 255
    1318:	d3 d9       	rcall	.-3162   	; 0x6c0 <vListInsert>
    131a:	80 91 31 0c 	lds	r24, 0x0C31	; 0x800c31 <xNextTaskUnblockTime>
    131e:	90 91 32 0c 	lds	r25, 0x0C32	; 0x800c32 <xNextTaskUnblockTime+0x1>
    1322:	a0 91 33 0c 	lds	r26, 0x0C33	; 0x800c33 <xNextTaskUnblockTime+0x2>
    1326:	b0 91 34 0c 	lds	r27, 0x0C34	; 0x800c34 <xNextTaskUnblockTime+0x3>
    132a:	c8 16       	cp	r12, r24
    132c:	d9 06       	cpc	r13, r25
    132e:	ea 06       	cpc	r14, r26
    1330:	fb 06       	cpc	r15, r27
    1332:	40 f4       	brcc	.+16     	; 0x1344 <prvAddCurrentTaskToDelayedList+0x128>
    1334:	c0 92 31 0c 	sts	0x0C31, r12	; 0x800c31 <xNextTaskUnblockTime>
    1338:	d0 92 32 0c 	sts	0x0C32, r13	; 0x800c32 <xNextTaskUnblockTime+0x1>
    133c:	e0 92 33 0c 	sts	0x0C33, r14	; 0x800c33 <xNextTaskUnblockTime+0x2>
    1340:	f0 92 34 0c 	sts	0x0C34, r15	; 0x800c34 <xNextTaskUnblockTime+0x3>
    1344:	df 91       	pop	r29
    1346:	cf 91       	pop	r28
    1348:	ff 90       	pop	r15
    134a:	ef 90       	pop	r14
    134c:	df 90       	pop	r13
    134e:	cf 90       	pop	r12
    1350:	bf 90       	pop	r11
    1352:	af 90       	pop	r10
    1354:	9f 90       	pop	r9
    1356:	8f 90       	pop	r8
    1358:	08 95       	ret

0000135a <xTaskCreate>:
    135a:	2f 92       	push	r2
    135c:	3f 92       	push	r3
    135e:	4f 92       	push	r4
    1360:	5f 92       	push	r5
    1362:	6f 92       	push	r6
    1364:	7f 92       	push	r7
    1366:	8f 92       	push	r8
    1368:	9f 92       	push	r9
    136a:	af 92       	push	r10
    136c:	bf 92       	push	r11
    136e:	cf 92       	push	r12
    1370:	df 92       	push	r13
    1372:	ef 92       	push	r14
    1374:	ff 92       	push	r15
    1376:	0f 93       	push	r16
    1378:	cf 93       	push	r28
    137a:	df 93       	push	r29
    137c:	3c 01       	movw	r6, r24
    137e:	1b 01       	movw	r2, r22
    1380:	4a 01       	movw	r8, r20
    1382:	29 01       	movw	r4, r18
    1384:	ca 01       	movw	r24, r20
    1386:	a3 d8       	rcall	.-3770   	; 0x4ce <pvPortMalloc>
    1388:	6c 01       	movw	r12, r24
    138a:	89 2b       	or	r24, r25
    138c:	61 f0       	breq	.+24     	; 0x13a6 <xTaskCreate+0x4c>
    138e:	84 e3       	ldi	r24, 0x34	; 52
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	9d d8       	rcall	.-3782   	; 0x4ce <pvPortMalloc>
    1394:	ec 01       	movw	r28, r24
    1396:	89 2b       	or	r24, r25
    1398:	19 f0       	breq	.+6      	; 0x13a0 <xTaskCreate+0x46>
    139a:	dc 8e       	std	Y+28, r13	; 0x1c
    139c:	cb 8e       	std	Y+27, r12	; 0x1b
    139e:	05 c0       	rjmp	.+10     	; 0x13aa <xTaskCreate+0x50>
    13a0:	c6 01       	movw	r24, r12
    13a2:	3d d9       	rcall	.-3462   	; 0x61e <vPortFree>
    13a4:	02 c0       	rjmp	.+4      	; 0x13aa <xTaskCreate+0x50>
    13a6:	c0 e0       	ldi	r28, 0x00	; 0
    13a8:	d0 e0       	ldi	r29, 0x00	; 0
    13aa:	20 97       	sbiw	r28, 0x00	; 0
    13ac:	61 f0       	breq	.+24     	; 0x13c6 <xTaskCreate+0x6c>
    13ae:	a1 2c       	mov	r10, r1
    13b0:	b1 2c       	mov	r11, r1
    13b2:	6e 01       	movw	r12, r28
    13b4:	92 01       	movw	r18, r4
    13b6:	a4 01       	movw	r20, r8
    13b8:	b1 01       	movw	r22, r2
    13ba:	c3 01       	movw	r24, r6
    13bc:	f8 dd       	rcall	.-1040   	; 0xfae <prvInitialiseNewTask>
    13be:	ce 01       	movw	r24, r28
    13c0:	9b de       	rcall	.-714    	; 0x10f8 <prvAddNewTaskToReadyList>
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	01 c0       	rjmp	.+2      	; 0x13c8 <xTaskCreate+0x6e>
    13c6:	8f ef       	ldi	r24, 0xFF	; 255
    13c8:	df 91       	pop	r29
    13ca:	cf 91       	pop	r28
    13cc:	0f 91       	pop	r16
    13ce:	ff 90       	pop	r15
    13d0:	ef 90       	pop	r14
    13d2:	df 90       	pop	r13
    13d4:	cf 90       	pop	r12
    13d6:	bf 90       	pop	r11
    13d8:	af 90       	pop	r10
    13da:	9f 90       	pop	r9
    13dc:	8f 90       	pop	r8
    13de:	7f 90       	pop	r7
    13e0:	6f 90       	pop	r6
    13e2:	5f 90       	pop	r5
    13e4:	4f 90       	pop	r4
    13e6:	3f 90       	pop	r3
    13e8:	2f 90       	pop	r2
    13ea:	08 95       	ret

000013ec <vTaskStartScheduler>:
    13ec:	ef 92       	push	r14
    13ee:	ff 92       	push	r15
    13f0:	0f 93       	push	r16
    13f2:	0f 2e       	mov	r0, r31
    13f4:	ff e2       	ldi	r31, 0x2F	; 47
    13f6:	ef 2e       	mov	r14, r31
    13f8:	fc e0       	ldi	r31, 0x0C	; 12
    13fa:	ff 2e       	mov	r15, r31
    13fc:	f0 2d       	mov	r31, r0
    13fe:	00 e0       	ldi	r16, 0x00	; 0
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	40 ec       	ldi	r20, 0xC0	; 192
    1406:	50 e0       	ldi	r21, 0x00	; 0
    1408:	65 e3       	ldi	r22, 0x35	; 53
    140a:	72 e0       	ldi	r23, 0x02	; 2
    140c:	8d eb       	ldi	r24, 0xBD	; 189
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	a4 df       	rcall	.-184    	; 0x135a <xTaskCreate>
    1412:	81 30       	cpi	r24, 0x01	; 1
    1414:	09 f4       	brne	.+2      	; 0x1418 <vTaskStartScheduler+0x2c>
    1416:	7b d5       	rcall	.+2806   	; 0x1f0e <xTimerCreateTimerTask>
    1418:	81 30       	cpi	r24, 0x01	; 1
    141a:	c1 f4       	brne	.+48     	; 0x144c <vTaskStartScheduler+0x60>
    141c:	f8 94       	cli
    141e:	8f ef       	ldi	r24, 0xFF	; 255
    1420:	9f ef       	ldi	r25, 0xFF	; 255
    1422:	dc 01       	movw	r26, r24
    1424:	80 93 31 0c 	sts	0x0C31, r24	; 0x800c31 <xNextTaskUnblockTime>
    1428:	90 93 32 0c 	sts	0x0C32, r25	; 0x800c32 <xNextTaskUnblockTime+0x1>
    142c:	a0 93 33 0c 	sts	0x0C33, r26	; 0x800c33 <xNextTaskUnblockTime+0x2>
    1430:	b0 93 34 0c 	sts	0x0C34, r27	; 0x800c34 <xNextTaskUnblockTime+0x3>
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	80 93 3c 0c 	sts	0x0C3C, r24	; 0x800c3c <xSchedulerRunning>
    143a:	10 92 3e 0c 	sts	0x0C3E, r1	; 0x800c3e <xTickCount>
    143e:	10 92 3f 0c 	sts	0x0C3F, r1	; 0x800c3f <xTickCount+0x1>
    1442:	10 92 40 0c 	sts	0x0C40, r1	; 0x800c40 <xTickCount+0x2>
    1446:	10 92 41 0c 	sts	0x0C41, r1	; 0x800c41 <xTickCount+0x3>
    144a:	c1 d9       	rcall	.-3198   	; 0x7ce <xPortStartScheduler>
    144c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1450:	0f 91       	pop	r16
    1452:	ff 90       	pop	r15
    1454:	ef 90       	pop	r14
    1456:	08 95       	ret

00001458 <vTaskSuspendAll>:
    1458:	80 91 2e 0c 	lds	r24, 0x0C2E	; 0x800c2e <uxSchedulerSuspended>
    145c:	8f 5f       	subi	r24, 0xFF	; 255
    145e:	80 93 2e 0c 	sts	0x0C2E, r24	; 0x800c2e <uxSchedulerSuspended>
    1462:	08 95       	ret

00001464 <xTaskGetTickCount>:
    1464:	0f b6       	in	r0, 0x3f	; 63
    1466:	f8 94       	cli
    1468:	0f 92       	push	r0
    146a:	60 91 3e 0c 	lds	r22, 0x0C3E	; 0x800c3e <xTickCount>
    146e:	70 91 3f 0c 	lds	r23, 0x0C3F	; 0x800c3f <xTickCount+0x1>
    1472:	80 91 40 0c 	lds	r24, 0x0C40	; 0x800c40 <xTickCount+0x2>
    1476:	90 91 41 0c 	lds	r25, 0x0C41	; 0x800c41 <xTickCount+0x3>
    147a:	0f 90       	pop	r0
    147c:	0f be       	out	0x3f, r0	; 63
    147e:	08 95       	ret

00001480 <xTaskIncrementTick>:
    1480:	cf 92       	push	r12
    1482:	df 92       	push	r13
    1484:	ef 92       	push	r14
    1486:	ff 92       	push	r15
    1488:	cf 93       	push	r28
    148a:	df 93       	push	r29
    148c:	80 91 2e 0c 	lds	r24, 0x0C2E	; 0x800c2e <uxSchedulerSuspended>
    1490:	81 11       	cpse	r24, r1
    1492:	05 c1       	rjmp	.+522    	; 0x169e <xTaskIncrementTick+0x21e>
    1494:	c0 90 3e 0c 	lds	r12, 0x0C3E	; 0x800c3e <xTickCount>
    1498:	d0 90 3f 0c 	lds	r13, 0x0C3F	; 0x800c3f <xTickCount+0x1>
    149c:	e0 90 40 0c 	lds	r14, 0x0C40	; 0x800c40 <xTickCount+0x2>
    14a0:	f0 90 41 0c 	lds	r15, 0x0C41	; 0x800c41 <xTickCount+0x3>
    14a4:	8f ef       	ldi	r24, 0xFF	; 255
    14a6:	c8 1a       	sub	r12, r24
    14a8:	d8 0a       	sbc	r13, r24
    14aa:	e8 0a       	sbc	r14, r24
    14ac:	f8 0a       	sbc	r15, r24
    14ae:	c0 92 3e 0c 	sts	0x0C3E, r12	; 0x800c3e <xTickCount>
    14b2:	d0 92 3f 0c 	sts	0x0C3F, r13	; 0x800c3f <xTickCount+0x1>
    14b6:	e0 92 40 0c 	sts	0x0C40, r14	; 0x800c40 <xTickCount+0x2>
    14ba:	f0 92 41 0c 	sts	0x0C41, r15	; 0x800c41 <xTickCount+0x3>
    14be:	c1 14       	cp	r12, r1
    14c0:	d1 04       	cpc	r13, r1
    14c2:	e1 04       	cpc	r14, r1
    14c4:	f1 04       	cpc	r15, r1
    14c6:	b1 f4       	brne	.+44     	; 0x14f4 <xTaskIncrementTick+0x74>
    14c8:	80 91 67 0c 	lds	r24, 0x0C67	; 0x800c67 <pxDelayedTaskList>
    14cc:	90 91 68 0c 	lds	r25, 0x0C68	; 0x800c68 <pxDelayedTaskList+0x1>
    14d0:	20 91 65 0c 	lds	r18, 0x0C65	; 0x800c65 <pxOverflowDelayedTaskList>
    14d4:	30 91 66 0c 	lds	r19, 0x0C66	; 0x800c66 <pxOverflowDelayedTaskList+0x1>
    14d8:	30 93 68 0c 	sts	0x0C68, r19	; 0x800c68 <pxDelayedTaskList+0x1>
    14dc:	20 93 67 0c 	sts	0x0C67, r18	; 0x800c67 <pxDelayedTaskList>
    14e0:	90 93 66 0c 	sts	0x0C66, r25	; 0x800c66 <pxOverflowDelayedTaskList+0x1>
    14e4:	80 93 65 0c 	sts	0x0C65, r24	; 0x800c65 <pxOverflowDelayedTaskList>
    14e8:	80 91 36 0c 	lds	r24, 0x0C36	; 0x800c36 <xNumOfOverflows>
    14ec:	8f 5f       	subi	r24, 0xFF	; 255
    14ee:	80 93 36 0c 	sts	0x0C36, r24	; 0x800c36 <xNumOfOverflows>
    14f2:	2b dd       	rcall	.-1450   	; 0xf4a <prvResetNextTaskUnblockTime>
    14f4:	80 91 31 0c 	lds	r24, 0x0C31	; 0x800c31 <xNextTaskUnblockTime>
    14f8:	90 91 32 0c 	lds	r25, 0x0C32	; 0x800c32 <xNextTaskUnblockTime+0x1>
    14fc:	a0 91 33 0c 	lds	r26, 0x0C33	; 0x800c33 <xNextTaskUnblockTime+0x2>
    1500:	b0 91 34 0c 	lds	r27, 0x0C34	; 0x800c34 <xNextTaskUnblockTime+0x3>
    1504:	c8 16       	cp	r12, r24
    1506:	d9 06       	cpc	r13, r25
    1508:	ea 06       	cpc	r14, r26
    150a:	fb 06       	cpc	r15, r27
    150c:	20 f4       	brcc	.+8      	; 0x1516 <xTaskIncrementTick+0x96>
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	b2 c0       	rjmp	.+356    	; 0x1676 <xTaskIncrementTick+0x1f6>
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	01 c0       	rjmp	.+2      	; 0x1518 <xTaskIncrementTick+0x98>
    1516:	80 e0       	ldi	r24, 0x00	; 0
    1518:	e0 91 67 0c 	lds	r30, 0x0C67	; 0x800c67 <pxDelayedTaskList>
    151c:	f0 91 68 0c 	lds	r31, 0x0C68	; 0x800c68 <pxDelayedTaskList+0x1>
    1520:	90 81       	ld	r25, Z
    1522:	91 11       	cpse	r25, r1
    1524:	0c c0       	rjmp	.+24     	; 0x153e <xTaskIncrementTick+0xbe>
    1526:	4f ef       	ldi	r20, 0xFF	; 255
    1528:	5f ef       	ldi	r21, 0xFF	; 255
    152a:	ba 01       	movw	r22, r20
    152c:	40 93 31 0c 	sts	0x0C31, r20	; 0x800c31 <xNextTaskUnblockTime>
    1530:	50 93 32 0c 	sts	0x0C32, r21	; 0x800c32 <xNextTaskUnblockTime+0x1>
    1534:	60 93 33 0c 	sts	0x0C33, r22	; 0x800c33 <xNextTaskUnblockTime+0x2>
    1538:	70 93 34 0c 	sts	0x0C34, r23	; 0x800c34 <xNextTaskUnblockTime+0x3>
    153c:	9c c0       	rjmp	.+312    	; 0x1676 <xTaskIncrementTick+0x1f6>
    153e:	e0 91 67 0c 	lds	r30, 0x0C67	; 0x800c67 <pxDelayedTaskList>
    1542:	f0 91 68 0c 	lds	r31, 0x0C68	; 0x800c68 <pxDelayedTaskList+0x1>
    1546:	07 80       	ldd	r0, Z+7	; 0x07
    1548:	f0 85       	ldd	r31, Z+8	; 0x08
    154a:	e0 2d       	mov	r30, r0
    154c:	00 84       	ldd	r0, Z+8	; 0x08
    154e:	f1 85       	ldd	r31, Z+9	; 0x09
    1550:	e0 2d       	mov	r30, r0
    1552:	42 81       	ldd	r20, Z+2	; 0x02
    1554:	53 81       	ldd	r21, Z+3	; 0x03
    1556:	64 81       	ldd	r22, Z+4	; 0x04
    1558:	75 81       	ldd	r23, Z+5	; 0x05
    155a:	c4 16       	cp	r12, r20
    155c:	d5 06       	cpc	r13, r21
    155e:	e6 06       	cpc	r14, r22
    1560:	f7 06       	cpc	r15, r23
    1562:	48 f4       	brcc	.+18     	; 0x1576 <xTaskIncrementTick+0xf6>
    1564:	40 93 31 0c 	sts	0x0C31, r20	; 0x800c31 <xNextTaskUnblockTime>
    1568:	50 93 32 0c 	sts	0x0C32, r21	; 0x800c32 <xNextTaskUnblockTime+0x1>
    156c:	60 93 33 0c 	sts	0x0C33, r22	; 0x800c33 <xNextTaskUnblockTime+0x2>
    1570:	70 93 34 0c 	sts	0x0C34, r23	; 0x800c34 <xNextTaskUnblockTime+0x3>
    1574:	80 c0       	rjmp	.+256    	; 0x1676 <xTaskIncrementTick+0x1f6>
    1576:	a4 85       	ldd	r26, Z+12	; 0x0c
    1578:	b5 85       	ldd	r27, Z+13	; 0x0d
    157a:	c6 81       	ldd	r28, Z+6	; 0x06
    157c:	d7 81       	ldd	r29, Z+7	; 0x07
    157e:	20 85       	ldd	r18, Z+8	; 0x08
    1580:	31 85       	ldd	r19, Z+9	; 0x09
    1582:	3f 83       	std	Y+7, r19	; 0x07
    1584:	2e 83       	std	Y+6, r18	; 0x06
    1586:	c0 85       	ldd	r28, Z+8	; 0x08
    1588:	d1 85       	ldd	r29, Z+9	; 0x09
    158a:	26 81       	ldd	r18, Z+6	; 0x06
    158c:	37 81       	ldd	r19, Z+7	; 0x07
    158e:	3d 83       	std	Y+5, r19	; 0x05
    1590:	2c 83       	std	Y+4, r18	; 0x04
    1592:	11 96       	adiw	r26, 0x01	; 1
    1594:	4d 91       	ld	r20, X+
    1596:	5c 91       	ld	r21, X
    1598:	12 97       	sbiw	r26, 0x02	; 2
    159a:	9f 01       	movw	r18, r30
    159c:	2e 5f       	subi	r18, 0xFE	; 254
    159e:	3f 4f       	sbci	r19, 0xFF	; 255
    15a0:	42 17       	cp	r20, r18
    15a2:	53 07       	cpc	r21, r19
    15a4:	31 f4       	brne	.+12     	; 0x15b2 <xTaskIncrementTick+0x132>
    15a6:	40 85       	ldd	r20, Z+8	; 0x08
    15a8:	51 85       	ldd	r21, Z+9	; 0x09
    15aa:	12 96       	adiw	r26, 0x02	; 2
    15ac:	5c 93       	st	X, r21
    15ae:	4e 93       	st	-X, r20
    15b0:	11 97       	sbiw	r26, 0x01	; 1
    15b2:	15 86       	std	Z+13, r1	; 0x0d
    15b4:	14 86       	std	Z+12, r1	; 0x0c
    15b6:	9c 91       	ld	r25, X
    15b8:	91 50       	subi	r25, 0x01	; 1
    15ba:	9c 93       	st	X, r25
    15bc:	a0 8d       	ldd	r26, Z+24	; 0x18
    15be:	b1 8d       	ldd	r27, Z+25	; 0x19
    15c0:	10 97       	sbiw	r26, 0x00	; 0
    15c2:	09 f1       	breq	.+66     	; 0x1606 <xTaskIncrementTick+0x186>
    15c4:	c2 89       	ldd	r28, Z+18	; 0x12
    15c6:	d3 89       	ldd	r29, Z+19	; 0x13
    15c8:	44 89       	ldd	r20, Z+20	; 0x14
    15ca:	55 89       	ldd	r21, Z+21	; 0x15
    15cc:	5f 83       	std	Y+7, r21	; 0x07
    15ce:	4e 83       	std	Y+6, r20	; 0x06
    15d0:	c4 89       	ldd	r28, Z+20	; 0x14
    15d2:	d5 89       	ldd	r29, Z+21	; 0x15
    15d4:	42 89       	ldd	r20, Z+18	; 0x12
    15d6:	53 89       	ldd	r21, Z+19	; 0x13
    15d8:	5d 83       	std	Y+5, r21	; 0x05
    15da:	4c 83       	std	Y+4, r20	; 0x04
    15dc:	11 96       	adiw	r26, 0x01	; 1
    15de:	6d 91       	ld	r22, X+
    15e0:	7c 91       	ld	r23, X
    15e2:	12 97       	sbiw	r26, 0x02	; 2
    15e4:	af 01       	movw	r20, r30
    15e6:	42 5f       	subi	r20, 0xF2	; 242
    15e8:	5f 4f       	sbci	r21, 0xFF	; 255
    15ea:	64 17       	cp	r22, r20
    15ec:	75 07       	cpc	r23, r21
    15ee:	31 f4       	brne	.+12     	; 0x15fc <xTaskIncrementTick+0x17c>
    15f0:	44 89       	ldd	r20, Z+20	; 0x14
    15f2:	55 89       	ldd	r21, Z+21	; 0x15
    15f4:	12 96       	adiw	r26, 0x02	; 2
    15f6:	5c 93       	st	X, r21
    15f8:	4e 93       	st	-X, r20
    15fa:	11 97       	sbiw	r26, 0x01	; 1
    15fc:	11 8e       	std	Z+25, r1	; 0x19
    15fe:	10 8e       	std	Z+24, r1	; 0x18
    1600:	9c 91       	ld	r25, X
    1602:	91 50       	subi	r25, 0x01	; 1
    1604:	9c 93       	st	X, r25
    1606:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1608:	90 91 3d 0c 	lds	r25, 0x0C3D	; 0x800c3d <uxTopReadyPriority>
    160c:	9a 17       	cp	r25, r26
    160e:	10 f4       	brcc	.+4      	; 0x1614 <xTaskIncrementTick+0x194>
    1610:	a0 93 3d 0c 	sts	0x0C3D, r26	; 0x800c3d <uxTopReadyPriority>
    1614:	9b e0       	ldi	r25, 0x0B	; 11
    1616:	9a 9f       	mul	r25, r26
    1618:	d0 01       	movw	r26, r0
    161a:	11 24       	eor	r1, r1
    161c:	a1 58       	subi	r26, 0x81	; 129
    161e:	b3 4f       	sbci	r27, 0xF3	; 243
    1620:	11 96       	adiw	r26, 0x01	; 1
    1622:	0d 90       	ld	r0, X+
    1624:	bc 91       	ld	r27, X
    1626:	a0 2d       	mov	r26, r0
    1628:	b7 83       	std	Z+7, r27	; 0x07
    162a:	a6 83       	std	Z+6, r26	; 0x06
    162c:	16 96       	adiw	r26, 0x06	; 6
    162e:	4d 91       	ld	r20, X+
    1630:	5c 91       	ld	r21, X
    1632:	17 97       	sbiw	r26, 0x07	; 7
    1634:	51 87       	std	Z+9, r21	; 0x09
    1636:	40 87       	std	Z+8, r20	; 0x08
    1638:	16 96       	adiw	r26, 0x06	; 6
    163a:	cd 91       	ld	r28, X+
    163c:	dc 91       	ld	r29, X
    163e:	17 97       	sbiw	r26, 0x07	; 7
    1640:	3d 83       	std	Y+5, r19	; 0x05
    1642:	2c 83       	std	Y+4, r18	; 0x04
    1644:	17 96       	adiw	r26, 0x07	; 7
    1646:	3c 93       	st	X, r19
    1648:	2e 93       	st	-X, r18
    164a:	16 97       	sbiw	r26, 0x06	; 6
    164c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    164e:	9a 9f       	mul	r25, r26
    1650:	d0 01       	movw	r26, r0
    1652:	11 24       	eor	r1, r1
    1654:	a1 58       	subi	r26, 0x81	; 129
    1656:	b3 4f       	sbci	r27, 0xF3	; 243
    1658:	b5 87       	std	Z+13, r27	; 0x0d
    165a:	a4 87       	std	Z+12, r26	; 0x0c
    165c:	9c 91       	ld	r25, X
    165e:	9f 5f       	subi	r25, 0xFF	; 255
    1660:	9c 93       	st	X, r25
    1662:	22 8d       	ldd	r18, Z+26	; 0x1a
    1664:	e0 91 ed 0c 	lds	r30, 0x0CED	; 0x800ced <pxCurrentTCB>
    1668:	f0 91 ee 0c 	lds	r31, 0x0CEE	; 0x800cee <pxCurrentTCB+0x1>
    166c:	92 8d       	ldd	r25, Z+26	; 0x1a
    166e:	29 17       	cp	r18, r25
    1670:	08 f0       	brcs	.+2      	; 0x1674 <xTaskIncrementTick+0x1f4>
    1672:	4f cf       	rjmp	.-354    	; 0x1512 <xTaskIncrementTick+0x92>
    1674:	51 cf       	rjmp	.-350    	; 0x1518 <xTaskIncrementTick+0x98>
    1676:	e0 91 ed 0c 	lds	r30, 0x0CED	; 0x800ced <pxCurrentTCB>
    167a:	f0 91 ee 0c 	lds	r31, 0x0CEE	; 0x800cee <pxCurrentTCB+0x1>
    167e:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1680:	9b e0       	ldi	r25, 0x0B	; 11
    1682:	e9 9f       	mul	r30, r25
    1684:	f0 01       	movw	r30, r0
    1686:	11 24       	eor	r1, r1
    1688:	e1 58       	subi	r30, 0x81	; 129
    168a:	f3 4f       	sbci	r31, 0xF3	; 243
    168c:	90 81       	ld	r25, Z
    168e:	92 30       	cpi	r25, 0x02	; 2
    1690:	08 f0       	brcs	.+2      	; 0x1694 <xTaskIncrementTick+0x214>
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	90 91 37 0c 	lds	r25, 0x0C37	; 0x800c37 <xYieldPending>
    1698:	91 11       	cpse	r25, r1
    169a:	16 c0       	rjmp	.+44     	; 0x16c8 <xTaskIncrementTick+0x248>
    169c:	16 c0       	rjmp	.+44     	; 0x16ca <xTaskIncrementTick+0x24a>
    169e:	80 91 38 0c 	lds	r24, 0x0C38	; 0x800c38 <xPendedTicks>
    16a2:	90 91 39 0c 	lds	r25, 0x0C39	; 0x800c39 <xPendedTicks+0x1>
    16a6:	a0 91 3a 0c 	lds	r26, 0x0C3A	; 0x800c3a <xPendedTicks+0x2>
    16aa:	b0 91 3b 0c 	lds	r27, 0x0C3B	; 0x800c3b <xPendedTicks+0x3>
    16ae:	01 96       	adiw	r24, 0x01	; 1
    16b0:	a1 1d       	adc	r26, r1
    16b2:	b1 1d       	adc	r27, r1
    16b4:	80 93 38 0c 	sts	0x0C38, r24	; 0x800c38 <xPendedTicks>
    16b8:	90 93 39 0c 	sts	0x0C39, r25	; 0x800c39 <xPendedTicks+0x1>
    16bc:	a0 93 3a 0c 	sts	0x0C3A, r26	; 0x800c3a <xPendedTicks+0x2>
    16c0:	b0 93 3b 0c 	sts	0x0C3B, r27	; 0x800c3b <xPendedTicks+0x3>
    16c4:	80 e0       	ldi	r24, 0x00	; 0
    16c6:	01 c0       	rjmp	.+2      	; 0x16ca <xTaskIncrementTick+0x24a>
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	df 91       	pop	r29
    16cc:	cf 91       	pop	r28
    16ce:	ff 90       	pop	r15
    16d0:	ef 90       	pop	r14
    16d2:	df 90       	pop	r13
    16d4:	cf 90       	pop	r12
    16d6:	08 95       	ret

000016d8 <xTaskResumeAll>:
    16d8:	cf 92       	push	r12
    16da:	df 92       	push	r13
    16dc:	ef 92       	push	r14
    16de:	ff 92       	push	r15
    16e0:	cf 93       	push	r28
    16e2:	df 93       	push	r29
    16e4:	0f b6       	in	r0, 0x3f	; 63
    16e6:	f8 94       	cli
    16e8:	0f 92       	push	r0
    16ea:	80 91 2e 0c 	lds	r24, 0x0C2E	; 0x800c2e <uxSchedulerSuspended>
    16ee:	81 50       	subi	r24, 0x01	; 1
    16f0:	80 93 2e 0c 	sts	0x0C2E, r24	; 0x800c2e <uxSchedulerSuspended>
    16f4:	80 91 2e 0c 	lds	r24, 0x0C2E	; 0x800c2e <uxSchedulerSuspended>
    16f8:	81 11       	cpse	r24, r1
    16fa:	be c0       	rjmp	.+380    	; 0x1878 <xTaskResumeAll+0x1a0>
    16fc:	80 91 42 0c 	lds	r24, 0x0C42	; 0x800c42 <uxCurrentNumberOfTasks>
    1700:	81 11       	cpse	r24, r1
    1702:	88 c0       	rjmp	.+272    	; 0x1814 <xTaskResumeAll+0x13c>
    1704:	bc c0       	rjmp	.+376    	; 0x187e <xTaskResumeAll+0x1a6>
    1706:	e0 91 61 0c 	lds	r30, 0x0C61	; 0x800c61 <xPendingReadyList+0x7>
    170a:	f0 91 62 0c 	lds	r31, 0x0C62	; 0x800c62 <xPendingReadyList+0x8>
    170e:	00 84       	ldd	r0, Z+8	; 0x08
    1710:	f1 85       	ldd	r31, Z+9	; 0x09
    1712:	e0 2d       	mov	r30, r0
    1714:	a0 8d       	ldd	r26, Z+24	; 0x18
    1716:	b1 8d       	ldd	r27, Z+25	; 0x19
    1718:	c2 89       	ldd	r28, Z+18	; 0x12
    171a:	d3 89       	ldd	r29, Z+19	; 0x13
    171c:	84 89       	ldd	r24, Z+20	; 0x14
    171e:	95 89       	ldd	r25, Z+21	; 0x15
    1720:	9f 83       	std	Y+7, r25	; 0x07
    1722:	8e 83       	std	Y+6, r24	; 0x06
    1724:	c4 89       	ldd	r28, Z+20	; 0x14
    1726:	d5 89       	ldd	r29, Z+21	; 0x15
    1728:	82 89       	ldd	r24, Z+18	; 0x12
    172a:	93 89       	ldd	r25, Z+19	; 0x13
    172c:	9d 83       	std	Y+5, r25	; 0x05
    172e:	8c 83       	std	Y+4, r24	; 0x04
    1730:	11 96       	adiw	r26, 0x01	; 1
    1732:	2d 91       	ld	r18, X+
    1734:	3c 91       	ld	r19, X
    1736:	12 97       	sbiw	r26, 0x02	; 2
    1738:	cf 01       	movw	r24, r30
    173a:	0e 96       	adiw	r24, 0x0e	; 14
    173c:	28 17       	cp	r18, r24
    173e:	39 07       	cpc	r19, r25
    1740:	31 f4       	brne	.+12     	; 0x174e <xTaskResumeAll+0x76>
    1742:	84 89       	ldd	r24, Z+20	; 0x14
    1744:	95 89       	ldd	r25, Z+21	; 0x15
    1746:	12 96       	adiw	r26, 0x02	; 2
    1748:	9c 93       	st	X, r25
    174a:	8e 93       	st	-X, r24
    174c:	11 97       	sbiw	r26, 0x01	; 1
    174e:	11 8e       	std	Z+25, r1	; 0x19
    1750:	10 8e       	std	Z+24, r1	; 0x18
    1752:	8c 91       	ld	r24, X
    1754:	81 50       	subi	r24, 0x01	; 1
    1756:	8c 93       	st	X, r24
    1758:	a4 85       	ldd	r26, Z+12	; 0x0c
    175a:	b5 85       	ldd	r27, Z+13	; 0x0d
    175c:	c6 81       	ldd	r28, Z+6	; 0x06
    175e:	d7 81       	ldd	r29, Z+7	; 0x07
    1760:	80 85       	ldd	r24, Z+8	; 0x08
    1762:	91 85       	ldd	r25, Z+9	; 0x09
    1764:	9f 83       	std	Y+7, r25	; 0x07
    1766:	8e 83       	std	Y+6, r24	; 0x06
    1768:	c0 85       	ldd	r28, Z+8	; 0x08
    176a:	d1 85       	ldd	r29, Z+9	; 0x09
    176c:	86 81       	ldd	r24, Z+6	; 0x06
    176e:	97 81       	ldd	r25, Z+7	; 0x07
    1770:	9d 83       	std	Y+5, r25	; 0x05
    1772:	8c 83       	std	Y+4, r24	; 0x04
    1774:	11 96       	adiw	r26, 0x01	; 1
    1776:	8d 91       	ld	r24, X+
    1778:	9c 91       	ld	r25, X
    177a:	12 97       	sbiw	r26, 0x02	; 2
    177c:	9f 01       	movw	r18, r30
    177e:	2e 5f       	subi	r18, 0xFE	; 254
    1780:	3f 4f       	sbci	r19, 0xFF	; 255
    1782:	82 17       	cp	r24, r18
    1784:	93 07       	cpc	r25, r19
    1786:	31 f4       	brne	.+12     	; 0x1794 <xTaskResumeAll+0xbc>
    1788:	80 85       	ldd	r24, Z+8	; 0x08
    178a:	91 85       	ldd	r25, Z+9	; 0x09
    178c:	12 96       	adiw	r26, 0x02	; 2
    178e:	9c 93       	st	X, r25
    1790:	8e 93       	st	-X, r24
    1792:	11 97       	sbiw	r26, 0x01	; 1
    1794:	15 86       	std	Z+13, r1	; 0x0d
    1796:	14 86       	std	Z+12, r1	; 0x0c
    1798:	8c 91       	ld	r24, X
    179a:	81 50       	subi	r24, 0x01	; 1
    179c:	8c 93       	st	X, r24
    179e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    17a0:	80 91 3d 0c 	lds	r24, 0x0C3D	; 0x800c3d <uxTopReadyPriority>
    17a4:	8a 17       	cp	r24, r26
    17a6:	10 f4       	brcc	.+4      	; 0x17ac <xTaskResumeAll+0xd4>
    17a8:	a0 93 3d 0c 	sts	0x0C3D, r26	; 0x800c3d <uxTopReadyPriority>
    17ac:	8b e0       	ldi	r24, 0x0B	; 11
    17ae:	8a 9f       	mul	r24, r26
    17b0:	d0 01       	movw	r26, r0
    17b2:	11 24       	eor	r1, r1
    17b4:	a1 58       	subi	r26, 0x81	; 129
    17b6:	b3 4f       	sbci	r27, 0xF3	; 243
    17b8:	11 96       	adiw	r26, 0x01	; 1
    17ba:	0d 90       	ld	r0, X+
    17bc:	bc 91       	ld	r27, X
    17be:	a0 2d       	mov	r26, r0
    17c0:	b7 83       	std	Z+7, r27	; 0x07
    17c2:	a6 83       	std	Z+6, r26	; 0x06
    17c4:	16 96       	adiw	r26, 0x06	; 6
    17c6:	4d 91       	ld	r20, X+
    17c8:	5c 91       	ld	r21, X
    17ca:	17 97       	sbiw	r26, 0x07	; 7
    17cc:	51 87       	std	Z+9, r21	; 0x09
    17ce:	40 87       	std	Z+8, r20	; 0x08
    17d0:	16 96       	adiw	r26, 0x06	; 6
    17d2:	cd 91       	ld	r28, X+
    17d4:	dc 91       	ld	r29, X
    17d6:	17 97       	sbiw	r26, 0x07	; 7
    17d8:	3d 83       	std	Y+5, r19	; 0x05
    17da:	2c 83       	std	Y+4, r18	; 0x04
    17dc:	17 96       	adiw	r26, 0x07	; 7
    17de:	3c 93       	st	X, r19
    17e0:	2e 93       	st	-X, r18
    17e2:	16 97       	sbiw	r26, 0x06	; 6
    17e4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    17e6:	8a 9f       	mul	r24, r26
    17e8:	d0 01       	movw	r26, r0
    17ea:	11 24       	eor	r1, r1
    17ec:	a1 58       	subi	r26, 0x81	; 129
    17ee:	b3 4f       	sbci	r27, 0xF3	; 243
    17f0:	b5 87       	std	Z+13, r27	; 0x0d
    17f2:	a4 87       	std	Z+12, r26	; 0x0c
    17f4:	8c 91       	ld	r24, X
    17f6:	8f 5f       	subi	r24, 0xFF	; 255
    17f8:	8c 93       	st	X, r24
    17fa:	92 8d       	ldd	r25, Z+26	; 0x1a
    17fc:	a0 91 ed 0c 	lds	r26, 0x0CED	; 0x800ced <pxCurrentTCB>
    1800:	b0 91 ee 0c 	lds	r27, 0x0CEE	; 0x800cee <pxCurrentTCB+0x1>
    1804:	5a 96       	adiw	r26, 0x1a	; 26
    1806:	8c 91       	ld	r24, X
    1808:	98 17       	cp	r25, r24
    180a:	30 f0       	brcs	.+12     	; 0x1818 <xTaskResumeAll+0x140>
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	80 93 37 0c 	sts	0x0C37, r24	; 0x800c37 <xYieldPending>
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <xTaskResumeAll+0x140>
    1814:	e0 e0       	ldi	r30, 0x00	; 0
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 91 5a 0c 	lds	r24, 0x0C5A	; 0x800c5a <xPendingReadyList>
    181c:	81 11       	cpse	r24, r1
    181e:	73 cf       	rjmp	.-282    	; 0x1706 <xTaskResumeAll+0x2e>
    1820:	ef 2b       	or	r30, r31
    1822:	09 f0       	breq	.+2      	; 0x1826 <xTaskResumeAll+0x14e>
    1824:	92 db       	rcall	.-2268   	; 0xf4a <prvResetNextTaskUnblockTime>
    1826:	c0 90 38 0c 	lds	r12, 0x0C38	; 0x800c38 <xPendedTicks>
    182a:	d0 90 39 0c 	lds	r13, 0x0C39	; 0x800c39 <xPendedTicks+0x1>
    182e:	e0 90 3a 0c 	lds	r14, 0x0C3A	; 0x800c3a <xPendedTicks+0x2>
    1832:	f0 90 3b 0c 	lds	r15, 0x0C3B	; 0x800c3b <xPendedTicks+0x3>
    1836:	c1 14       	cp	r12, r1
    1838:	d1 04       	cpc	r13, r1
    183a:	e1 04       	cpc	r14, r1
    183c:	f1 04       	cpc	r15, r1
    183e:	a1 f0       	breq	.+40     	; 0x1868 <xTaskResumeAll+0x190>
    1840:	1f de       	rcall	.-962    	; 0x1480 <xTaskIncrementTick>
    1842:	88 23       	and	r24, r24
    1844:	19 f0       	breq	.+6      	; 0x184c <xTaskResumeAll+0x174>
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	80 93 37 0c 	sts	0x0C37, r24	; 0x800c37 <xYieldPending>
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	c8 1a       	sub	r12, r24
    1850:	d1 08       	sbc	r13, r1
    1852:	e1 08       	sbc	r14, r1
    1854:	f1 08       	sbc	r15, r1
    1856:	a1 f7       	brne	.-24     	; 0x1840 <xTaskResumeAll+0x168>
    1858:	10 92 38 0c 	sts	0x0C38, r1	; 0x800c38 <xPendedTicks>
    185c:	10 92 39 0c 	sts	0x0C39, r1	; 0x800c39 <xPendedTicks+0x1>
    1860:	10 92 3a 0c 	sts	0x0C3A, r1	; 0x800c3a <xPendedTicks+0x2>
    1864:	10 92 3b 0c 	sts	0x0C3B, r1	; 0x800c3b <xPendedTicks+0x3>
    1868:	80 91 37 0c 	lds	r24, 0x0C37	; 0x800c37 <xYieldPending>
    186c:	88 23       	and	r24, r24
    186e:	31 f0       	breq	.+12     	; 0x187c <xTaskResumeAll+0x1a4>
    1870:	0e 94 19 04 	call	0x832	; 0x832 <vPortYield>
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	03 c0       	rjmp	.+6      	; 0x187e <xTaskResumeAll+0x1a6>
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	01 c0       	rjmp	.+2      	; 0x187e <xTaskResumeAll+0x1a6>
    187c:	80 e0       	ldi	r24, 0x00	; 0
    187e:	0f 90       	pop	r0
    1880:	0f be       	out	0x3f, r0	; 63
    1882:	df 91       	pop	r29
    1884:	cf 91       	pop	r28
    1886:	ff 90       	pop	r15
    1888:	ef 90       	pop	r14
    188a:	df 90       	pop	r13
    188c:	cf 90       	pop	r12
    188e:	08 95       	ret

00001890 <xTaskDelayUntil>:
    1890:	8f 92       	push	r8
    1892:	9f 92       	push	r9
    1894:	af 92       	push	r10
    1896:	bf 92       	push	r11
    1898:	cf 92       	push	r12
    189a:	df 92       	push	r13
    189c:	ef 92       	push	r14
    189e:	ff 92       	push	r15
    18a0:	1f 93       	push	r17
    18a2:	cf 93       	push	r28
    18a4:	df 93       	push	r29
    18a6:	ec 01       	movw	r28, r24
    18a8:	6a 01       	movw	r12, r20
    18aa:	7b 01       	movw	r14, r22
    18ac:	d5 dd       	rcall	.-1110   	; 0x1458 <vTaskSuspendAll>
    18ae:	80 90 3e 0c 	lds	r8, 0x0C3E	; 0x800c3e <xTickCount>
    18b2:	90 90 3f 0c 	lds	r9, 0x0C3F	; 0x800c3f <xTickCount+0x1>
    18b6:	a0 90 40 0c 	lds	r10, 0x0C40	; 0x800c40 <xTickCount+0x2>
    18ba:	b0 90 41 0c 	lds	r11, 0x0C41	; 0x800c41 <xTickCount+0x3>
    18be:	88 81       	ld	r24, Y
    18c0:	99 81       	ldd	r25, Y+1	; 0x01
    18c2:	aa 81       	ldd	r26, Y+2	; 0x02
    18c4:	bb 81       	ldd	r27, Y+3	; 0x03
    18c6:	ac 01       	movw	r20, r24
    18c8:	bd 01       	movw	r22, r26
    18ca:	4c 0d       	add	r20, r12
    18cc:	5d 1d       	adc	r21, r13
    18ce:	6e 1d       	adc	r22, r14
    18d0:	7f 1d       	adc	r23, r15
    18d2:	88 16       	cp	r8, r24
    18d4:	99 06       	cpc	r9, r25
    18d6:	aa 06       	cpc	r10, r26
    18d8:	bb 06       	cpc	r11, r27
    18da:	60 f4       	brcc	.+24     	; 0x18f4 <xTaskDelayUntil+0x64>
    18dc:	48 17       	cp	r20, r24
    18de:	59 07       	cpc	r21, r25
    18e0:	6a 07       	cpc	r22, r26
    18e2:	7b 07       	cpc	r23, r27
    18e4:	98 f4       	brcc	.+38     	; 0x190c <xTaskDelayUntil+0x7c>
    18e6:	84 16       	cp	r8, r20
    18e8:	95 06       	cpc	r9, r21
    18ea:	a6 06       	cpc	r10, r22
    18ec:	b7 06       	cpc	r11, r23
    18ee:	80 f0       	brcs	.+32     	; 0x1910 <xTaskDelayUntil+0x80>
    18f0:	10 e0       	ldi	r17, 0x00	; 0
    18f2:	13 c0       	rjmp	.+38     	; 0x191a <xTaskDelayUntil+0x8a>
    18f4:	48 17       	cp	r20, r24
    18f6:	59 07       	cpc	r21, r25
    18f8:	6a 07       	cpc	r22, r26
    18fa:	7b 07       	cpc	r23, r27
    18fc:	58 f0       	brcs	.+22     	; 0x1914 <xTaskDelayUntil+0x84>
    18fe:	84 16       	cp	r8, r20
    1900:	95 06       	cpc	r9, r21
    1902:	a6 06       	cpc	r10, r22
    1904:	b7 06       	cpc	r11, r23
    1906:	40 f0       	brcs	.+16     	; 0x1918 <xTaskDelayUntil+0x88>
    1908:	10 e0       	ldi	r17, 0x00	; 0
    190a:	07 c0       	rjmp	.+14     	; 0x191a <xTaskDelayUntil+0x8a>
    190c:	10 e0       	ldi	r17, 0x00	; 0
    190e:	05 c0       	rjmp	.+10     	; 0x191a <xTaskDelayUntil+0x8a>
    1910:	11 e0       	ldi	r17, 0x01	; 1
    1912:	03 c0       	rjmp	.+6      	; 0x191a <xTaskDelayUntil+0x8a>
    1914:	11 e0       	ldi	r17, 0x01	; 1
    1916:	01 c0       	rjmp	.+2      	; 0x191a <xTaskDelayUntil+0x8a>
    1918:	11 e0       	ldi	r17, 0x01	; 1
    191a:	48 83       	st	Y, r20
    191c:	59 83       	std	Y+1, r21	; 0x01
    191e:	6a 83       	std	Y+2, r22	; 0x02
    1920:	7b 83       	std	Y+3, r23	; 0x03
    1922:	11 23       	and	r17, r17
    1924:	41 f0       	breq	.+16     	; 0x1936 <xTaskDelayUntil+0xa6>
    1926:	cb 01       	movw	r24, r22
    1928:	ba 01       	movw	r22, r20
    192a:	68 19       	sub	r22, r8
    192c:	79 09       	sbc	r23, r9
    192e:	8a 09       	sbc	r24, r10
    1930:	9b 09       	sbc	r25, r11
    1932:	40 e0       	ldi	r20, 0x00	; 0
    1934:	73 dc       	rcall	.-1818   	; 0x121c <prvAddCurrentTaskToDelayedList>
    1936:	d0 de       	rcall	.-608    	; 0x16d8 <xTaskResumeAll>
    1938:	81 11       	cpse	r24, r1
    193a:	02 c0       	rjmp	.+4      	; 0x1940 <xTaskDelayUntil+0xb0>
    193c:	0e 94 19 04 	call	0x832	; 0x832 <vPortYield>
    1940:	81 2f       	mov	r24, r17
    1942:	df 91       	pop	r29
    1944:	cf 91       	pop	r28
    1946:	1f 91       	pop	r17
    1948:	ff 90       	pop	r15
    194a:	ef 90       	pop	r14
    194c:	df 90       	pop	r13
    194e:	cf 90       	pop	r12
    1950:	bf 90       	pop	r11
    1952:	af 90       	pop	r10
    1954:	9f 90       	pop	r9
    1956:	8f 90       	pop	r8
    1958:	08 95       	ret

0000195a <vTaskSwitchContext>:
    195a:	80 91 2e 0c 	lds	r24, 0x0C2E	; 0x800c2e <uxSchedulerSuspended>
    195e:	88 23       	and	r24, r24
    1960:	21 f0       	breq	.+8      	; 0x196a <vTaskSwitchContext+0x10>
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	80 93 37 0c 	sts	0x0C37, r24	; 0x800c37 <xYieldPending>
    1968:	08 95       	ret
    196a:	10 92 37 0c 	sts	0x0C37, r1	; 0x800c37 <xYieldPending>
    196e:	e0 91 ed 0c 	lds	r30, 0x0CED	; 0x800ced <pxCurrentTCB>
    1972:	f0 91 ee 0c 	lds	r31, 0x0CEE	; 0x800cee <pxCurrentTCB+0x1>
    1976:	20 81       	ld	r18, Z
    1978:	31 81       	ldd	r19, Z+1	; 0x01
    197a:	e0 91 ed 0c 	lds	r30, 0x0CED	; 0x800ced <pxCurrentTCB>
    197e:	f0 91 ee 0c 	lds	r31, 0x0CEE	; 0x800cee <pxCurrentTCB+0x1>
    1982:	83 8d       	ldd	r24, Z+27	; 0x1b
    1984:	94 8d       	ldd	r25, Z+28	; 0x1c
    1986:	82 17       	cp	r24, r18
    1988:	93 07       	cpc	r25, r19
    198a:	58 f0       	brcs	.+22     	; 0x19a2 <vTaskSwitchContext+0x48>
    198c:	60 91 ed 0c 	lds	r22, 0x0CED	; 0x800ced <pxCurrentTCB>
    1990:	70 91 ee 0c 	lds	r23, 0x0CEE	; 0x800cee <pxCurrentTCB+0x1>
    1994:	63 5e       	subi	r22, 0xE3	; 227
    1996:	7f 4f       	sbci	r23, 0xFF	; 255
    1998:	80 91 ed 0c 	lds	r24, 0x0CED	; 0x800ced <pxCurrentTCB>
    199c:	90 91 ee 0c 	lds	r25, 0x0CEE	; 0x800cee <pxCurrentTCB+0x1>
    19a0:	3e d5       	rcall	.+2684   	; 0x241e <vApplicationStackOverflowHook>
    19a2:	80 91 3d 0c 	lds	r24, 0x0C3D	; 0x800c3d <uxTopReadyPriority>
    19a6:	01 c0       	rjmp	.+2      	; 0x19aa <vTaskSwitchContext+0x50>
    19a8:	81 50       	subi	r24, 0x01	; 1
    19aa:	28 2f       	mov	r18, r24
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	9b e0       	ldi	r25, 0x0B	; 11
    19b0:	92 9f       	mul	r25, r18
    19b2:	f0 01       	movw	r30, r0
    19b4:	93 9f       	mul	r25, r19
    19b6:	f0 0d       	add	r31, r0
    19b8:	11 24       	eor	r1, r1
    19ba:	e1 58       	subi	r30, 0x81	; 129
    19bc:	f3 4f       	sbci	r31, 0xF3	; 243
    19be:	90 81       	ld	r25, Z
    19c0:	99 23       	and	r25, r25
    19c2:	91 f3       	breq	.-28     	; 0x19a8 <vTaskSwitchContext+0x4e>
    19c4:	9b e0       	ldi	r25, 0x0B	; 11
    19c6:	92 9f       	mul	r25, r18
    19c8:	a0 01       	movw	r20, r0
    19ca:	93 9f       	mul	r25, r19
    19cc:	50 0d       	add	r21, r0
    19ce:	11 24       	eor	r1, r1
    19d0:	df 01       	movw	r26, r30
    19d2:	01 80       	ldd	r0, Z+1	; 0x01
    19d4:	f2 81       	ldd	r31, Z+2	; 0x02
    19d6:	e0 2d       	mov	r30, r0
    19d8:	04 80       	ldd	r0, Z+4	; 0x04
    19da:	f5 81       	ldd	r31, Z+5	; 0x05
    19dc:	e0 2d       	mov	r30, r0
    19de:	12 96       	adiw	r26, 0x02	; 2
    19e0:	fc 93       	st	X, r31
    19e2:	ee 93       	st	-X, r30
    19e4:	11 97       	sbiw	r26, 0x01	; 1
    19e6:	4e 57       	subi	r20, 0x7E	; 126
    19e8:	53 4f       	sbci	r21, 0xF3	; 243
    19ea:	e4 17       	cp	r30, r20
    19ec:	f5 07       	cpc	r31, r21
    19ee:	29 f4       	brne	.+10     	; 0x19fa <vTaskSwitchContext+0xa0>
    19f0:	44 81       	ldd	r20, Z+4	; 0x04
    19f2:	55 81       	ldd	r21, Z+5	; 0x05
    19f4:	fd 01       	movw	r30, r26
    19f6:	52 83       	std	Z+2, r21	; 0x02
    19f8:	41 83       	std	Z+1, r20	; 0x01
    19fa:	9b e0       	ldi	r25, 0x0B	; 11
    19fc:	92 9f       	mul	r25, r18
    19fe:	f0 01       	movw	r30, r0
    1a00:	93 9f       	mul	r25, r19
    1a02:	f0 0d       	add	r31, r0
    1a04:	11 24       	eor	r1, r1
    1a06:	e1 58       	subi	r30, 0x81	; 129
    1a08:	f3 4f       	sbci	r31, 0xF3	; 243
    1a0a:	01 80       	ldd	r0, Z+1	; 0x01
    1a0c:	f2 81       	ldd	r31, Z+2	; 0x02
    1a0e:	e0 2d       	mov	r30, r0
    1a10:	20 85       	ldd	r18, Z+8	; 0x08
    1a12:	31 85       	ldd	r19, Z+9	; 0x09
    1a14:	30 93 ee 0c 	sts	0x0CEE, r19	; 0x800cee <pxCurrentTCB+0x1>
    1a18:	20 93 ed 0c 	sts	0x0CED, r18	; 0x800ced <pxCurrentTCB>
    1a1c:	80 93 3d 0c 	sts	0x0C3D, r24	; 0x800c3d <uxTopReadyPriority>
    1a20:	08 95       	ret

00001a22 <vTaskPlaceOnEventList>:
    1a22:	cf 92       	push	r12
    1a24:	df 92       	push	r13
    1a26:	ef 92       	push	r14
    1a28:	ff 92       	push	r15
    1a2a:	6a 01       	movw	r12, r20
    1a2c:	7b 01       	movw	r14, r22
    1a2e:	60 91 ed 0c 	lds	r22, 0x0CED	; 0x800ced <pxCurrentTCB>
    1a32:	70 91 ee 0c 	lds	r23, 0x0CEE	; 0x800cee <pxCurrentTCB+0x1>
    1a36:	62 5f       	subi	r22, 0xF2	; 242
    1a38:	7f 4f       	sbci	r23, 0xFF	; 255
    1a3a:	0e 94 60 03 	call	0x6c0	; 0x6c0 <vListInsert>
    1a3e:	41 e0       	ldi	r20, 0x01	; 1
    1a40:	c7 01       	movw	r24, r14
    1a42:	b6 01       	movw	r22, r12
    1a44:	eb db       	rcall	.-2090   	; 0x121c <prvAddCurrentTaskToDelayedList>
    1a46:	ff 90       	pop	r15
    1a48:	ef 90       	pop	r14
    1a4a:	df 90       	pop	r13
    1a4c:	cf 90       	pop	r12
    1a4e:	08 95       	ret

00001a50 <vTaskPlaceOnEventListRestricted>:
    1a50:	cf 93       	push	r28
    1a52:	df 93       	push	r29
    1a54:	fc 01       	movw	r30, r24
    1a56:	cb 01       	movw	r24, r22
    1a58:	ba 01       	movw	r22, r20
    1a5a:	a1 81       	ldd	r26, Z+1	; 0x01
    1a5c:	b2 81       	ldd	r27, Z+2	; 0x02
    1a5e:	c0 91 ed 0c 	lds	r28, 0x0CED	; 0x800ced <pxCurrentTCB>
    1a62:	d0 91 ee 0c 	lds	r29, 0x0CEE	; 0x800cee <pxCurrentTCB+0x1>
    1a66:	bb 8b       	std	Y+19, r27	; 0x13
    1a68:	aa 8b       	std	Y+18, r26	; 0x12
    1a6a:	c0 91 ed 0c 	lds	r28, 0x0CED	; 0x800ced <pxCurrentTCB>
    1a6e:	d0 91 ee 0c 	lds	r29, 0x0CEE	; 0x800cee <pxCurrentTCB+0x1>
    1a72:	16 96       	adiw	r26, 0x06	; 6
    1a74:	4d 91       	ld	r20, X+
    1a76:	5c 91       	ld	r21, X
    1a78:	17 97       	sbiw	r26, 0x07	; 7
    1a7a:	5d 8b       	std	Y+21, r21	; 0x15
    1a7c:	4c 8b       	std	Y+20, r20	; 0x14
    1a7e:	16 96       	adiw	r26, 0x06	; 6
    1a80:	cd 91       	ld	r28, X+
    1a82:	dc 91       	ld	r29, X
    1a84:	17 97       	sbiw	r26, 0x07	; 7
    1a86:	40 91 ed 0c 	lds	r20, 0x0CED	; 0x800ced <pxCurrentTCB>
    1a8a:	50 91 ee 0c 	lds	r21, 0x0CEE	; 0x800cee <pxCurrentTCB+0x1>
    1a8e:	42 5f       	subi	r20, 0xF2	; 242
    1a90:	5f 4f       	sbci	r21, 0xFF	; 255
    1a92:	5d 83       	std	Y+5, r21	; 0x05
    1a94:	4c 83       	std	Y+4, r20	; 0x04
    1a96:	40 91 ed 0c 	lds	r20, 0x0CED	; 0x800ced <pxCurrentTCB>
    1a9a:	50 91 ee 0c 	lds	r21, 0x0CEE	; 0x800cee <pxCurrentTCB+0x1>
    1a9e:	42 5f       	subi	r20, 0xF2	; 242
    1aa0:	5f 4f       	sbci	r21, 0xFF	; 255
    1aa2:	17 96       	adiw	r26, 0x07	; 7
    1aa4:	5c 93       	st	X, r21
    1aa6:	4e 93       	st	-X, r20
    1aa8:	16 97       	sbiw	r26, 0x06	; 6
    1aaa:	a0 91 ed 0c 	lds	r26, 0x0CED	; 0x800ced <pxCurrentTCB>
    1aae:	b0 91 ee 0c 	lds	r27, 0x0CEE	; 0x800cee <pxCurrentTCB+0x1>
    1ab2:	59 96       	adiw	r26, 0x19	; 25
    1ab4:	fc 93       	st	X, r31
    1ab6:	ee 93       	st	-X, r30
    1ab8:	58 97       	sbiw	r26, 0x18	; 24
    1aba:	30 81       	ld	r19, Z
    1abc:	3f 5f       	subi	r19, 0xFF	; 255
    1abe:	30 83       	st	Z, r19
    1ac0:	22 23       	and	r18, r18
    1ac2:	19 f0       	breq	.+6      	; 0x1aca <vTaskPlaceOnEventListRestricted+0x7a>
    1ac4:	6f ef       	ldi	r22, 0xFF	; 255
    1ac6:	7f ef       	ldi	r23, 0xFF	; 255
    1ac8:	cb 01       	movw	r24, r22
    1aca:	42 2f       	mov	r20, r18
    1acc:	a7 db       	rcall	.-2226   	; 0x121c <prvAddCurrentTaskToDelayedList>
    1ace:	df 91       	pop	r29
    1ad0:	cf 91       	pop	r28
    1ad2:	08 95       	ret

00001ad4 <xTaskRemoveFromEventList>:
    1ad4:	cf 93       	push	r28
    1ad6:	df 93       	push	r29
    1ad8:	dc 01       	movw	r26, r24
    1ada:	17 96       	adiw	r26, 0x07	; 7
    1adc:	ed 91       	ld	r30, X+
    1ade:	fc 91       	ld	r31, X
    1ae0:	18 97       	sbiw	r26, 0x08	; 8
    1ae2:	00 84       	ldd	r0, Z+8	; 0x08
    1ae4:	f1 85       	ldd	r31, Z+9	; 0x09
    1ae6:	e0 2d       	mov	r30, r0
    1ae8:	a0 8d       	ldd	r26, Z+24	; 0x18
    1aea:	b1 8d       	ldd	r27, Z+25	; 0x19
    1aec:	c2 89       	ldd	r28, Z+18	; 0x12
    1aee:	d3 89       	ldd	r29, Z+19	; 0x13
    1af0:	84 89       	ldd	r24, Z+20	; 0x14
    1af2:	95 89       	ldd	r25, Z+21	; 0x15
    1af4:	9f 83       	std	Y+7, r25	; 0x07
    1af6:	8e 83       	std	Y+6, r24	; 0x06
    1af8:	c4 89       	ldd	r28, Z+20	; 0x14
    1afa:	d5 89       	ldd	r29, Z+21	; 0x15
    1afc:	82 89       	ldd	r24, Z+18	; 0x12
    1afe:	93 89       	ldd	r25, Z+19	; 0x13
    1b00:	9d 83       	std	Y+5, r25	; 0x05
    1b02:	8c 83       	std	Y+4, r24	; 0x04
    1b04:	11 96       	adiw	r26, 0x01	; 1
    1b06:	8d 91       	ld	r24, X+
    1b08:	9c 91       	ld	r25, X
    1b0a:	12 97       	sbiw	r26, 0x02	; 2
    1b0c:	9f 01       	movw	r18, r30
    1b0e:	22 5f       	subi	r18, 0xF2	; 242
    1b10:	3f 4f       	sbci	r19, 0xFF	; 255
    1b12:	82 17       	cp	r24, r18
    1b14:	93 07       	cpc	r25, r19
    1b16:	31 f4       	brne	.+12     	; 0x1b24 <xTaskRemoveFromEventList+0x50>
    1b18:	84 89       	ldd	r24, Z+20	; 0x14
    1b1a:	95 89       	ldd	r25, Z+21	; 0x15
    1b1c:	12 96       	adiw	r26, 0x02	; 2
    1b1e:	9c 93       	st	X, r25
    1b20:	8e 93       	st	-X, r24
    1b22:	11 97       	sbiw	r26, 0x01	; 1
    1b24:	11 8e       	std	Z+25, r1	; 0x19
    1b26:	10 8e       	std	Z+24, r1	; 0x18
    1b28:	8c 91       	ld	r24, X
    1b2a:	81 50       	subi	r24, 0x01	; 1
    1b2c:	8c 93       	st	X, r24
    1b2e:	80 91 2e 0c 	lds	r24, 0x0C2E	; 0x800c2e <uxSchedulerSuspended>
    1b32:	81 11       	cpse	r24, r1
    1b34:	52 c0       	rjmp	.+164    	; 0x1bda <xTaskRemoveFromEventList+0x106>
    1b36:	a4 85       	ldd	r26, Z+12	; 0x0c
    1b38:	b5 85       	ldd	r27, Z+13	; 0x0d
    1b3a:	c6 81       	ldd	r28, Z+6	; 0x06
    1b3c:	d7 81       	ldd	r29, Z+7	; 0x07
    1b3e:	80 85       	ldd	r24, Z+8	; 0x08
    1b40:	91 85       	ldd	r25, Z+9	; 0x09
    1b42:	9f 83       	std	Y+7, r25	; 0x07
    1b44:	8e 83       	std	Y+6, r24	; 0x06
    1b46:	c0 85       	ldd	r28, Z+8	; 0x08
    1b48:	d1 85       	ldd	r29, Z+9	; 0x09
    1b4a:	86 81       	ldd	r24, Z+6	; 0x06
    1b4c:	97 81       	ldd	r25, Z+7	; 0x07
    1b4e:	9d 83       	std	Y+5, r25	; 0x05
    1b50:	8c 83       	std	Y+4, r24	; 0x04
    1b52:	11 96       	adiw	r26, 0x01	; 1
    1b54:	8d 91       	ld	r24, X+
    1b56:	9c 91       	ld	r25, X
    1b58:	12 97       	sbiw	r26, 0x02	; 2
    1b5a:	9f 01       	movw	r18, r30
    1b5c:	2e 5f       	subi	r18, 0xFE	; 254
    1b5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b60:	82 17       	cp	r24, r18
    1b62:	93 07       	cpc	r25, r19
    1b64:	31 f4       	brne	.+12     	; 0x1b72 <xTaskRemoveFromEventList+0x9e>
    1b66:	80 85       	ldd	r24, Z+8	; 0x08
    1b68:	91 85       	ldd	r25, Z+9	; 0x09
    1b6a:	12 96       	adiw	r26, 0x02	; 2
    1b6c:	9c 93       	st	X, r25
    1b6e:	8e 93       	st	-X, r24
    1b70:	11 97       	sbiw	r26, 0x01	; 1
    1b72:	15 86       	std	Z+13, r1	; 0x0d
    1b74:	14 86       	std	Z+12, r1	; 0x0c
    1b76:	8c 91       	ld	r24, X
    1b78:	81 50       	subi	r24, 0x01	; 1
    1b7a:	8c 93       	st	X, r24
    1b7c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1b7e:	80 91 3d 0c 	lds	r24, 0x0C3D	; 0x800c3d <uxTopReadyPriority>
    1b82:	8a 17       	cp	r24, r26
    1b84:	10 f4       	brcc	.+4      	; 0x1b8a <xTaskRemoveFromEventList+0xb6>
    1b86:	a0 93 3d 0c 	sts	0x0C3D, r26	; 0x800c3d <uxTopReadyPriority>
    1b8a:	8b e0       	ldi	r24, 0x0B	; 11
    1b8c:	8a 9f       	mul	r24, r26
    1b8e:	d0 01       	movw	r26, r0
    1b90:	11 24       	eor	r1, r1
    1b92:	a1 58       	subi	r26, 0x81	; 129
    1b94:	b3 4f       	sbci	r27, 0xF3	; 243
    1b96:	11 96       	adiw	r26, 0x01	; 1
    1b98:	0d 90       	ld	r0, X+
    1b9a:	bc 91       	ld	r27, X
    1b9c:	a0 2d       	mov	r26, r0
    1b9e:	b7 83       	std	Z+7, r27	; 0x07
    1ba0:	a6 83       	std	Z+6, r26	; 0x06
    1ba2:	16 96       	adiw	r26, 0x06	; 6
    1ba4:	4d 91       	ld	r20, X+
    1ba6:	5c 91       	ld	r21, X
    1ba8:	17 97       	sbiw	r26, 0x07	; 7
    1baa:	51 87       	std	Z+9, r21	; 0x09
    1bac:	40 87       	std	Z+8, r20	; 0x08
    1bae:	16 96       	adiw	r26, 0x06	; 6
    1bb0:	cd 91       	ld	r28, X+
    1bb2:	dc 91       	ld	r29, X
    1bb4:	17 97       	sbiw	r26, 0x07	; 7
    1bb6:	3d 83       	std	Y+5, r19	; 0x05
    1bb8:	2c 83       	std	Y+4, r18	; 0x04
    1bba:	17 96       	adiw	r26, 0x07	; 7
    1bbc:	3c 93       	st	X, r19
    1bbe:	2e 93       	st	-X, r18
    1bc0:	16 97       	sbiw	r26, 0x06	; 6
    1bc2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1bc4:	8a 9f       	mul	r24, r26
    1bc6:	d0 01       	movw	r26, r0
    1bc8:	11 24       	eor	r1, r1
    1bca:	a1 58       	subi	r26, 0x81	; 129
    1bcc:	b3 4f       	sbci	r27, 0xF3	; 243
    1bce:	b5 87       	std	Z+13, r27	; 0x0d
    1bd0:	a4 87       	std	Z+12, r26	; 0x0c
    1bd2:	8c 91       	ld	r24, X
    1bd4:	8f 5f       	subi	r24, 0xFF	; 255
    1bd6:	8c 93       	st	X, r24
    1bd8:	1c c0       	rjmp	.+56     	; 0x1c12 <xTaskRemoveFromEventList+0x13e>
    1bda:	4a e5       	ldi	r20, 0x5A	; 90
    1bdc:	5c e0       	ldi	r21, 0x0C	; 12
    1bde:	da 01       	movw	r26, r20
    1be0:	11 96       	adiw	r26, 0x01	; 1
    1be2:	cd 91       	ld	r28, X+
    1be4:	dc 91       	ld	r29, X
    1be6:	12 97       	sbiw	r26, 0x02	; 2
    1be8:	d3 8b       	std	Z+19, r29	; 0x13
    1bea:	c2 8b       	std	Z+18, r28	; 0x12
    1bec:	8e 81       	ldd	r24, Y+6	; 0x06
    1bee:	9f 81       	ldd	r25, Y+7	; 0x07
    1bf0:	95 8b       	std	Z+21, r25	; 0x15
    1bf2:	84 8b       	std	Z+20, r24	; 0x14
    1bf4:	8e 81       	ldd	r24, Y+6	; 0x06
    1bf6:	9f 81       	ldd	r25, Y+7	; 0x07
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	15 96       	adiw	r26, 0x05	; 5
    1bfc:	3c 93       	st	X, r19
    1bfe:	2e 93       	st	-X, r18
    1c00:	14 97       	sbiw	r26, 0x04	; 4
    1c02:	3f 83       	std	Y+7, r19	; 0x07
    1c04:	2e 83       	std	Y+6, r18	; 0x06
    1c06:	51 8f       	std	Z+25, r21	; 0x19
    1c08:	40 8f       	std	Z+24, r20	; 0x18
    1c0a:	da 01       	movw	r26, r20
    1c0c:	8c 91       	ld	r24, X
    1c0e:	8f 5f       	subi	r24, 0xFF	; 255
    1c10:	8c 93       	st	X, r24
    1c12:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c14:	e0 91 ed 0c 	lds	r30, 0x0CED	; 0x800ced <pxCurrentTCB>
    1c18:	f0 91 ee 0c 	lds	r31, 0x0CEE	; 0x800cee <pxCurrentTCB+0x1>
    1c1c:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c1e:	89 17       	cp	r24, r25
    1c20:	20 f4       	brcc	.+8      	; 0x1c2a <xTaskRemoveFromEventList+0x156>
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	80 93 37 0c 	sts	0x0C37, r24	; 0x800c37 <xYieldPending>
    1c28:	01 c0       	rjmp	.+2      	; 0x1c2c <xTaskRemoveFromEventList+0x158>
    1c2a:	80 e0       	ldi	r24, 0x00	; 0
    1c2c:	df 91       	pop	r29
    1c2e:	cf 91       	pop	r28
    1c30:	08 95       	ret

00001c32 <vTaskInternalSetTimeOutState>:
    1c32:	20 91 36 0c 	lds	r18, 0x0C36	; 0x800c36 <xNumOfOverflows>
    1c36:	fc 01       	movw	r30, r24
    1c38:	20 83       	st	Z, r18
    1c3a:	40 91 3e 0c 	lds	r20, 0x0C3E	; 0x800c3e <xTickCount>
    1c3e:	50 91 3f 0c 	lds	r21, 0x0C3F	; 0x800c3f <xTickCount+0x1>
    1c42:	60 91 40 0c 	lds	r22, 0x0C40	; 0x800c40 <xTickCount+0x2>
    1c46:	70 91 41 0c 	lds	r23, 0x0C41	; 0x800c41 <xTickCount+0x3>
    1c4a:	41 83       	std	Z+1, r20	; 0x01
    1c4c:	52 83       	std	Z+2, r21	; 0x02
    1c4e:	63 83       	std	Z+3, r22	; 0x03
    1c50:	74 83       	std	Z+4, r23	; 0x04
    1c52:	08 95       	ret

00001c54 <xTaskCheckForTimeOut>:
    1c54:	8f 92       	push	r8
    1c56:	9f 92       	push	r9
    1c58:	af 92       	push	r10
    1c5a:	bf 92       	push	r11
    1c5c:	cf 92       	push	r12
    1c5e:	df 92       	push	r13
    1c60:	ef 92       	push	r14
    1c62:	ff 92       	push	r15
    1c64:	0f 93       	push	r16
    1c66:	1f 93       	push	r17
    1c68:	cf 93       	push	r28
    1c6a:	df 93       	push	r29
    1c6c:	fb 01       	movw	r30, r22
    1c6e:	0f b6       	in	r0, 0x3f	; 63
    1c70:	f8 94       	cli
    1c72:	0f 92       	push	r0
    1c74:	c0 90 3e 0c 	lds	r12, 0x0C3E	; 0x800c3e <xTickCount>
    1c78:	d0 90 3f 0c 	lds	r13, 0x0C3F	; 0x800c3f <xTickCount+0x1>
    1c7c:	e0 90 40 0c 	lds	r14, 0x0C40	; 0x800c40 <xTickCount+0x2>
    1c80:	f0 90 41 0c 	lds	r15, 0x0C41	; 0x800c41 <xTickCount+0x3>
    1c84:	dc 01       	movw	r26, r24
    1c86:	11 96       	adiw	r26, 0x01	; 1
    1c88:	0d 91       	ld	r16, X+
    1c8a:	1d 91       	ld	r17, X+
    1c8c:	2d 91       	ld	r18, X+
    1c8e:	3c 91       	ld	r19, X
    1c90:	14 97       	sbiw	r26, 0x04	; 4
    1c92:	46 01       	movw	r8, r12
    1c94:	57 01       	movw	r10, r14
    1c96:	80 1a       	sub	r8, r16
    1c98:	91 0a       	sbc	r9, r17
    1c9a:	a2 0a       	sbc	r10, r18
    1c9c:	b3 0a       	sbc	r11, r19
    1c9e:	40 81       	ld	r20, Z
    1ca0:	51 81       	ldd	r21, Z+1	; 0x01
    1ca2:	62 81       	ldd	r22, Z+2	; 0x02
    1ca4:	73 81       	ldd	r23, Z+3	; 0x03
    1ca6:	4f 3f       	cpi	r20, 0xFF	; 255
    1ca8:	bf ef       	ldi	r27, 0xFF	; 255
    1caa:	5b 07       	cpc	r21, r27
    1cac:	6b 07       	cpc	r22, r27
    1cae:	7b 07       	cpc	r23, r27
    1cb0:	39 f1       	breq	.+78     	; 0x1d00 <xTaskCheckForTimeOut+0xac>
    1cb2:	ec 01       	movw	r28, r24
    1cb4:	b8 81       	ld	r27, Y
    1cb6:	a0 91 36 0c 	lds	r26, 0x0C36	; 0x800c36 <xNumOfOverflows>
    1cba:	ba 17       	cp	r27, r26
    1cbc:	59 f0       	breq	.+22     	; 0x1cd4 <xTaskCheckForTimeOut+0x80>
    1cbe:	c0 16       	cp	r12, r16
    1cc0:	d1 06       	cpc	r13, r17
    1cc2:	e2 06       	cpc	r14, r18
    1cc4:	f3 06       	cpc	r15, r19
    1cc6:	30 f0       	brcs	.+12     	; 0x1cd4 <xTaskCheckForTimeOut+0x80>
    1cc8:	10 82       	st	Z, r1
    1cca:	11 82       	std	Z+1, r1	; 0x01
    1ccc:	12 82       	std	Z+2, r1	; 0x02
    1cce:	13 82       	std	Z+3, r1	; 0x03
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	17 c0       	rjmp	.+46     	; 0x1d02 <xTaskCheckForTimeOut+0xae>
    1cd4:	84 16       	cp	r8, r20
    1cd6:	95 06       	cpc	r9, r21
    1cd8:	a6 06       	cpc	r10, r22
    1cda:	b7 06       	cpc	r11, r23
    1cdc:	58 f4       	brcc	.+22     	; 0x1cf4 <xTaskCheckForTimeOut+0xa0>
    1cde:	48 19       	sub	r20, r8
    1ce0:	59 09       	sbc	r21, r9
    1ce2:	6a 09       	sbc	r22, r10
    1ce4:	7b 09       	sbc	r23, r11
    1ce6:	40 83       	st	Z, r20
    1ce8:	51 83       	std	Z+1, r21	; 0x01
    1cea:	62 83       	std	Z+2, r22	; 0x02
    1cec:	73 83       	std	Z+3, r23	; 0x03
    1cee:	a1 df       	rcall	.-190    	; 0x1c32 <vTaskInternalSetTimeOutState>
    1cf0:	80 e0       	ldi	r24, 0x00	; 0
    1cf2:	07 c0       	rjmp	.+14     	; 0x1d02 <xTaskCheckForTimeOut+0xae>
    1cf4:	10 82       	st	Z, r1
    1cf6:	11 82       	std	Z+1, r1	; 0x01
    1cf8:	12 82       	std	Z+2, r1	; 0x02
    1cfa:	13 82       	std	Z+3, r1	; 0x03
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	01 c0       	rjmp	.+2      	; 0x1d02 <xTaskCheckForTimeOut+0xae>
    1d00:	80 e0       	ldi	r24, 0x00	; 0
    1d02:	0f 90       	pop	r0
    1d04:	0f be       	out	0x3f, r0	; 63
    1d06:	df 91       	pop	r29
    1d08:	cf 91       	pop	r28
    1d0a:	1f 91       	pop	r17
    1d0c:	0f 91       	pop	r16
    1d0e:	ff 90       	pop	r15
    1d10:	ef 90       	pop	r14
    1d12:	df 90       	pop	r13
    1d14:	cf 90       	pop	r12
    1d16:	bf 90       	pop	r11
    1d18:	af 90       	pop	r10
    1d1a:	9f 90       	pop	r9
    1d1c:	8f 90       	pop	r8
    1d1e:	08 95       	ret

00001d20 <vTaskMissedYield>:
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	80 93 37 0c 	sts	0x0C37, r24	; 0x800c37 <xYieldPending>
    1d26:	08 95       	ret

00001d28 <xTaskGetSchedulerState>:
    1d28:	80 91 3c 0c 	lds	r24, 0x0C3C	; 0x800c3c <xSchedulerRunning>
    1d2c:	88 23       	and	r24, r24
    1d2e:	31 f0       	breq	.+12     	; 0x1d3c <xTaskGetSchedulerState+0x14>
    1d30:	80 91 2e 0c 	lds	r24, 0x0C2E	; 0x800c2e <uxSchedulerSuspended>
    1d34:	81 11       	cpse	r24, r1
    1d36:	04 c0       	rjmp	.+8      	; 0x1d40 <xTaskGetSchedulerState+0x18>
    1d38:	82 e0       	ldi	r24, 0x02	; 2
    1d3a:	08 95       	ret
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	08 95       	ret
    1d40:	80 e0       	ldi	r24, 0x00	; 0
    1d42:	08 95       	ret

00001d44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    1d44:	0f 93       	push	r16
    1d46:	1f 93       	push	r17
    1d48:	cf 93       	push	r28
    1d4a:	df 93       	push	r29
    1d4c:	fc 01       	movw	r30, r24
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;

        if( pxMutexHolder != NULL )
    1d4e:	89 2b       	or	r24, r25
    1d50:	09 f4       	brne	.+2      	; 0x1d54 <xTaskPriorityDisinherit+0x10>
    1d52:	49 c0       	rjmp	.+146    	; 0x1de6 <xTaskPriorityDisinherit+0xa2>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
    1d54:	86 a5       	ldd	r24, Z+46	; 0x2e
    1d56:	81 50       	subi	r24, 0x01	; 1
    1d58:	86 a7       	std	Z+46, r24	; 0x2e

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    1d5a:	22 8d       	ldd	r18, Z+26	; 0x1a
    1d5c:	95 a5       	ldd	r25, Z+45	; 0x2d
    1d5e:	29 17       	cp	r18, r25
    1d60:	09 f4       	brne	.+2      	; 0x1d64 <xTaskPriorityDisinherit+0x20>
    1d62:	43 c0       	rjmp	.+134    	; 0x1dea <xTaskPriorityDisinherit+0xa6>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    1d64:	81 11       	cpse	r24, r1
    1d66:	43 c0       	rjmp	.+134    	; 0x1dee <xTaskPriorityDisinherit+0xaa>
    1d68:	ef 01       	movw	r28, r30
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1d6a:	8f 01       	movw	r16, r30
    1d6c:	0e 5f       	subi	r16, 0xFE	; 254
    1d6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d70:	c8 01       	movw	r24, r16
    1d72:	0e 94 9d 03 	call	0x73a	; 0x73a <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
    1d76:	ed a5       	ldd	r30, Y+45	; 0x2d
    1d78:	ea 8f       	std	Y+26, r30	; 0x1a

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1d7a:	8a e0       	ldi	r24, 0x0A	; 10
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	a0 e0       	ldi	r26, 0x00	; 0
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	8e 1b       	sub	r24, r30
    1d84:	91 09       	sbc	r25, r1
    1d86:	a1 09       	sbc	r26, r1
    1d88:	b1 09       	sbc	r27, r1
    1d8a:	8e 87       	std	Y+14, r24	; 0x0e
    1d8c:	9f 87       	std	Y+15, r25	; 0x0f
    1d8e:	a8 8b       	std	Y+16, r26	; 0x10
    1d90:	b9 8b       	std	Y+17, r27	; 0x11
                    prvAddTaskToReadyList( pxTCB );
    1d92:	80 91 3d 0c 	lds	r24, 0x0C3D	; 0x800c3d <uxTopReadyPriority>
    1d96:	8e 17       	cp	r24, r30
    1d98:	10 f4       	brcc	.+4      	; 0x1d9e <xTaskPriorityDisinherit+0x5a>
    1d9a:	e0 93 3d 0c 	sts	0x0C3D, r30	; 0x800c3d <uxTopReadyPriority>
    1d9e:	8b e0       	ldi	r24, 0x0B	; 11
    1da0:	8e 9f       	mul	r24, r30
    1da2:	f0 01       	movw	r30, r0
    1da4:	11 24       	eor	r1, r1
    1da6:	e1 58       	subi	r30, 0x81	; 129
    1da8:	f3 4f       	sbci	r31, 0xF3	; 243
    1daa:	01 80       	ldd	r0, Z+1	; 0x01
    1dac:	f2 81       	ldd	r31, Z+2	; 0x02
    1dae:	e0 2d       	mov	r30, r0
    1db0:	ff 83       	std	Y+7, r31	; 0x07
    1db2:	ee 83       	std	Y+6, r30	; 0x06
    1db4:	26 81       	ldd	r18, Z+6	; 0x06
    1db6:	37 81       	ldd	r19, Z+7	; 0x07
    1db8:	39 87       	std	Y+9, r19	; 0x09
    1dba:	28 87       	std	Y+8, r18	; 0x08
    1dbc:	a6 81       	ldd	r26, Z+6	; 0x06
    1dbe:	b7 81       	ldd	r27, Z+7	; 0x07
    1dc0:	15 96       	adiw	r26, 0x05	; 5
    1dc2:	1c 93       	st	X, r17
    1dc4:	0e 93       	st	-X, r16
    1dc6:	14 97       	sbiw	r26, 0x04	; 4
    1dc8:	17 83       	std	Z+7, r17	; 0x07
    1dca:	06 83       	std	Z+6, r16	; 0x06
    1dcc:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1dce:	8e 9f       	mul	r24, r30
    1dd0:	f0 01       	movw	r30, r0
    1dd2:	11 24       	eor	r1, r1
    1dd4:	e1 58       	subi	r30, 0x81	; 129
    1dd6:	f3 4f       	sbci	r31, 0xF3	; 243
    1dd8:	fd 87       	std	Y+13, r31	; 0x0d
    1dda:	ec 87       	std	Y+12, r30	; 0x0c
    1ddc:	80 81       	ld	r24, Z
    1dde:	8f 5f       	subi	r24, 0xFF	; 255
    1de0:	80 83       	st	Z, r24
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	05 c0       	rjmp	.+10     	; 0x1df0 <xTaskPriorityDisinherit+0xac>
#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;
    1de6:	80 e0       	ldi	r24, 0x00	; 0
    1de8:	03 c0       	rjmp	.+6      	; 0x1df0 <xTaskPriorityDisinherit+0xac>
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	01 c0       	rjmp	.+2      	; 0x1df0 <xTaskPriorityDisinherit+0xac>
    1dee:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    1df0:	df 91       	pop	r29
    1df2:	cf 91       	pop	r28
    1df4:	1f 91       	pop	r17
    1df6:	0f 91       	pop	r16
    1df8:	08 95       	ret

00001dfa <prvGetNextExpireTime>:
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	e0 91 f9 0c 	lds	r30, 0x0CF9	; 0x800cf9 <pxCurrentTimerList>
    1e00:	f0 91 fa 0c 	lds	r31, 0x0CFA	; 0x800cfa <pxCurrentTimerList+0x1>
    1e04:	80 81       	ld	r24, Z
    1e06:	91 e0       	ldi	r25, 0x01	; 1
    1e08:	81 11       	cpse	r24, r1
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	9c 93       	st	X, r25
    1e0e:	91 11       	cpse	r25, r1
    1e10:	08 c0       	rjmp	.+16     	; 0x1e22 <prvGetNextExpireTime+0x28>
    1e12:	07 80       	ldd	r0, Z+7	; 0x07
    1e14:	f0 85       	ldd	r31, Z+8	; 0x08
    1e16:	e0 2d       	mov	r30, r0
    1e18:	60 81       	ld	r22, Z
    1e1a:	71 81       	ldd	r23, Z+1	; 0x01
    1e1c:	82 81       	ldd	r24, Z+2	; 0x02
    1e1e:	93 81       	ldd	r25, Z+3	; 0x03
    1e20:	08 95       	ret
    1e22:	60 e0       	ldi	r22, 0x00	; 0
    1e24:	70 e0       	ldi	r23, 0x00	; 0
    1e26:	cb 01       	movw	r24, r22
    1e28:	08 95       	ret

00001e2a <prvInsertTimerInActiveList>:
    1e2a:	cf 92       	push	r12
    1e2c:	df 92       	push	r13
    1e2e:	ef 92       	push	r14
    1e30:	ff 92       	push	r15
    1e32:	0f 93       	push	r16
    1e34:	1f 93       	push	r17
    1e36:	fc 01       	movw	r30, r24
    1e38:	42 83       	std	Z+2, r20	; 0x02
    1e3a:	53 83       	std	Z+3, r21	; 0x03
    1e3c:	64 83       	std	Z+4, r22	; 0x04
    1e3e:	75 83       	std	Z+5, r23	; 0x05
    1e40:	93 87       	std	Z+11, r25	; 0x0b
    1e42:	82 87       	std	Z+10, r24	; 0x0a
    1e44:	04 17       	cp	r16, r20
    1e46:	15 07       	cpc	r17, r21
    1e48:	26 07       	cpc	r18, r22
    1e4a:	37 07       	cpc	r19, r23
    1e4c:	c0 f0       	brcs	.+48     	; 0x1e7e <prvInsertTimerInActiveList+0x54>
    1e4e:	0c 19       	sub	r16, r12
    1e50:	1d 09       	sbc	r17, r13
    1e52:	2e 09       	sbc	r18, r14
    1e54:	3f 09       	sbc	r19, r15
    1e56:	86 85       	ldd	r24, Z+14	; 0x0e
    1e58:	97 85       	ldd	r25, Z+15	; 0x0f
    1e5a:	a0 89       	ldd	r26, Z+16	; 0x10
    1e5c:	b1 89       	ldd	r27, Z+17	; 0x11
    1e5e:	08 17       	cp	r16, r24
    1e60:	19 07       	cpc	r17, r25
    1e62:	2a 07       	cpc	r18, r26
    1e64:	3b 07       	cpc	r19, r27
    1e66:	00 f5       	brcc	.+64     	; 0x1ea8 <prvInsertTimerInActiveList+0x7e>
    1e68:	bf 01       	movw	r22, r30
    1e6a:	6e 5f       	subi	r22, 0xFE	; 254
    1e6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e6e:	80 91 f7 0c 	lds	r24, 0x0CF7	; 0x800cf7 <pxOverflowTimerList>
    1e72:	90 91 f8 0c 	lds	r25, 0x0CF8	; 0x800cf8 <pxOverflowTimerList+0x1>
    1e76:	0e 94 60 03 	call	0x6c0	; 0x6c0 <vListInsert>
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	18 c0       	rjmp	.+48     	; 0x1eae <prvInsertTimerInActiveList+0x84>
    1e7e:	0c 15       	cp	r16, r12
    1e80:	1d 05       	cpc	r17, r13
    1e82:	2e 05       	cpc	r18, r14
    1e84:	3f 05       	cpc	r19, r15
    1e86:	28 f4       	brcc	.+10     	; 0x1e92 <prvInsertTimerInActiveList+0x68>
    1e88:	4c 15       	cp	r20, r12
    1e8a:	5d 05       	cpc	r21, r13
    1e8c:	6e 05       	cpc	r22, r14
    1e8e:	7f 05       	cpc	r23, r15
    1e90:	68 f4       	brcc	.+26     	; 0x1eac <prvInsertTimerInActiveList+0x82>
    1e92:	bf 01       	movw	r22, r30
    1e94:	6e 5f       	subi	r22, 0xFE	; 254
    1e96:	7f 4f       	sbci	r23, 0xFF	; 255
    1e98:	80 91 f9 0c 	lds	r24, 0x0CF9	; 0x800cf9 <pxCurrentTimerList>
    1e9c:	90 91 fa 0c 	lds	r25, 0x0CFA	; 0x800cfa <pxCurrentTimerList+0x1>
    1ea0:	0e 94 60 03 	call	0x6c0	; 0x6c0 <vListInsert>
    1ea4:	80 e0       	ldi	r24, 0x00	; 0
    1ea6:	03 c0       	rjmp	.+6      	; 0x1eae <prvInsertTimerInActiveList+0x84>
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	01 c0       	rjmp	.+2      	; 0x1eae <prvInsertTimerInActiveList+0x84>
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	1f 91       	pop	r17
    1eb0:	0f 91       	pop	r16
    1eb2:	ff 90       	pop	r15
    1eb4:	ef 90       	pop	r14
    1eb6:	df 90       	pop	r13
    1eb8:	cf 90       	pop	r12
    1eba:	08 95       	ret

00001ebc <prvCheckForValidListAndQueue>:
    1ebc:	0f b6       	in	r0, 0x3f	; 63
    1ebe:	f8 94       	cli
    1ec0:	0f 92       	push	r0
    1ec2:	80 91 f5 0c 	lds	r24, 0x0CF5	; 0x800cf5 <xTimerQueue>
    1ec6:	90 91 f6 0c 	lds	r25, 0x0CF6	; 0x800cf6 <xTimerQueue+0x1>
    1eca:	89 2b       	or	r24, r25
    1ecc:	e9 f4       	brne	.+58     	; 0x1f08 <prvCheckForValidListAndQueue+0x4c>
    1ece:	86 e0       	ldi	r24, 0x06	; 6
    1ed0:	9d e0       	ldi	r25, 0x0D	; 13
    1ed2:	0e 94 4b 03 	call	0x696	; 0x696 <vListInitialise>
    1ed6:	8b ef       	ldi	r24, 0xFB	; 251
    1ed8:	9c e0       	ldi	r25, 0x0C	; 12
    1eda:	0e 94 4b 03 	call	0x696	; 0x696 <vListInitialise>
    1ede:	86 e0       	ldi	r24, 0x06	; 6
    1ee0:	9d e0       	ldi	r25, 0x0D	; 13
    1ee2:	90 93 fa 0c 	sts	0x0CFA, r25	; 0x800cfa <pxCurrentTimerList+0x1>
    1ee6:	80 93 f9 0c 	sts	0x0CF9, r24	; 0x800cf9 <pxCurrentTimerList>
    1eea:	8b ef       	ldi	r24, 0xFB	; 251
    1eec:	9c e0       	ldi	r25, 0x0C	; 12
    1eee:	90 93 f8 0c 	sts	0x0CF8, r25	; 0x800cf8 <pxOverflowTimerList+0x1>
    1ef2:	80 93 f7 0c 	sts	0x0CF7, r24	; 0x800cf7 <pxOverflowTimerList>
    1ef6:	40 e0       	ldi	r20, 0x00	; 0
    1ef8:	67 e0       	ldi	r22, 0x07	; 7
    1efa:	8a e0       	ldi	r24, 0x0A	; 10
    1efc:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <xQueueGenericCreate>
    1f00:	90 93 f6 0c 	sts	0x0CF6, r25	; 0x800cf6 <xTimerQueue+0x1>
    1f04:	80 93 f5 0c 	sts	0x0CF5, r24	; 0x800cf5 <xTimerQueue>
    1f08:	0f 90       	pop	r0
    1f0a:	0f be       	out	0x3f, r0	; 63
    1f0c:	08 95       	ret

00001f0e <xTimerCreateTimerTask>:
    1f0e:	ef 92       	push	r14
    1f10:	ff 92       	push	r15
    1f12:	0f 93       	push	r16
    1f14:	d3 df       	rcall	.-90     	; 0x1ebc <prvCheckForValidListAndQueue>
    1f16:	80 91 f5 0c 	lds	r24, 0x0CF5	; 0x800cf5 <xTimerQueue>
    1f1a:	90 91 f6 0c 	lds	r25, 0x0CF6	; 0x800cf6 <xTimerQueue+0x1>
    1f1e:	89 2b       	or	r24, r25
    1f20:	89 f0       	breq	.+34     	; 0x1f44 <xTimerCreateTimerTask+0x36>
    1f22:	0f 2e       	mov	r0, r31
    1f24:	f3 ef       	ldi	r31, 0xF3	; 243
    1f26:	ef 2e       	mov	r14, r31
    1f28:	fc e0       	ldi	r31, 0x0C	; 12
    1f2a:	ff 2e       	mov	r15, r31
    1f2c:	f0 2d       	mov	r31, r0
    1f2e:	03 e0       	ldi	r16, 0x03	; 3
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	40 ec       	ldi	r20, 0xC0	; 192
    1f36:	50 e0       	ldi	r21, 0x00	; 0
    1f38:	6a e3       	ldi	r22, 0x3A	; 58
    1f3a:	72 e0       	ldi	r23, 0x02	; 2
    1f3c:	87 ec       	ldi	r24, 0xC7	; 199
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	0c da       	rcall	.-3048   	; 0x135a <xTaskCreate>
    1f42:	01 c0       	rjmp	.+2      	; 0x1f46 <xTimerCreateTimerTask+0x38>
    1f44:	80 e0       	ldi	r24, 0x00	; 0
    1f46:	0f 91       	pop	r16
    1f48:	ff 90       	pop	r15
    1f4a:	ef 90       	pop	r14
    1f4c:	08 95       	ret

00001f4e <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    1f4e:	8f 92       	push	r8
    1f50:	9f 92       	push	r9
    1f52:	af 92       	push	r10
    1f54:	bf 92       	push	r11
    1f56:	cf 92       	push	r12
    1f58:	df 92       	push	r13
    1f5a:	ef 92       	push	r14
    1f5c:	ff 92       	push	r15
    1f5e:	0f 93       	push	r16
    1f60:	1f 93       	push	r17
    1f62:	cf 93       	push	r28
    1f64:	df 93       	push	r29
    1f66:	cd b7       	in	r28, 0x3d	; 61
    1f68:	de b7       	in	r29, 0x3e	; 62
    1f6a:	27 97       	sbiw	r28, 0x07	; 7
    1f6c:	0f b6       	in	r0, 0x3f	; 63
    1f6e:	f8 94       	cli
    1f70:	de bf       	out	0x3e, r29	; 62
    1f72:	0f be       	out	0x3f, r0	; 63
    1f74:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    1f76:	e0 91 f5 0c 	lds	r30, 0x0CF5	; 0x800cf5 <xTimerQueue>
    1f7a:	f0 91 f6 0c 	lds	r31, 0x0CF6	; 0x800cf6 <xTimerQueue+0x1>
    1f7e:	30 97       	sbiw	r30, 0x00	; 0
    1f80:	81 f1       	breq	.+96     	; 0x1fe2 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    1f82:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    1f84:	2a 83       	std	Y+2, r18	; 0x02
    1f86:	3b 83       	std	Y+3, r19	; 0x03
    1f88:	4c 83       	std	Y+4, r20	; 0x04
    1f8a:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    1f8c:	9f 83       	std	Y+7, r25	; 0x07
    1f8e:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    1f90:	66 30       	cpi	r22, 0x06	; 6
    1f92:	f4 f4       	brge	.+60     	; 0x1fd0 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    1f94:	c9 de       	rcall	.-622    	; 0x1d28 <xTaskGetSchedulerState>
    1f96:	82 30       	cpi	r24, 0x02	; 2
    1f98:	69 f4       	brne	.+26     	; 0x1fb4 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    1f9a:	00 e0       	ldi	r16, 0x00	; 0
    1f9c:	a7 01       	movw	r20, r14
    1f9e:	96 01       	movw	r18, r12
    1fa0:	be 01       	movw	r22, r28
    1fa2:	6f 5f       	subi	r22, 0xFF	; 255
    1fa4:	7f 4f       	sbci	r23, 0xFF	; 255
    1fa6:	80 91 f5 0c 	lds	r24, 0x0CF5	; 0x800cf5 <xTimerQueue>
    1faa:	90 91 f6 0c 	lds	r25, 0x0CF6	; 0x800cf6 <xTimerQueue+0x1>
    1fae:	0e 94 1c 06 	call	0xc38	; 0xc38 <xQueueGenericSend>
    1fb2:	18 c0       	rjmp	.+48     	; 0x1fe4 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    1fb4:	00 e0       	ldi	r16, 0x00	; 0
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	a9 01       	movw	r20, r18
    1fbc:	be 01       	movw	r22, r28
    1fbe:	6f 5f       	subi	r22, 0xFF	; 255
    1fc0:	7f 4f       	sbci	r23, 0xFF	; 255
    1fc2:	80 91 f5 0c 	lds	r24, 0x0CF5	; 0x800cf5 <xTimerQueue>
    1fc6:	90 91 f6 0c 	lds	r25, 0x0CF6	; 0x800cf6 <xTimerQueue+0x1>
    1fca:	0e 94 1c 06 	call	0xc38	; 0xc38 <xQueueGenericSend>
    1fce:	0a c0       	rjmp	.+20     	; 0x1fe4 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    1fd0:	20 e0       	ldi	r18, 0x00	; 0
    1fd2:	a8 01       	movw	r20, r16
    1fd4:	be 01       	movw	r22, r28
    1fd6:	6f 5f       	subi	r22, 0xFF	; 255
    1fd8:	7f 4f       	sbci	r23, 0xFF	; 255
    1fda:	cf 01       	movw	r24, r30
    1fdc:	0e 94 c5 06 	call	0xd8a	; 0xd8a <xQueueGenericSendFromISR>
    1fe0:	01 c0       	rjmp	.+2      	; 0x1fe4 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    1fe2:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    1fe4:	27 96       	adiw	r28, 0x07	; 7
    1fe6:	0f b6       	in	r0, 0x3f	; 63
    1fe8:	f8 94       	cli
    1fea:	de bf       	out	0x3e, r29	; 62
    1fec:	0f be       	out	0x3f, r0	; 63
    1fee:	cd bf       	out	0x3d, r28	; 61
    1ff0:	df 91       	pop	r29
    1ff2:	cf 91       	pop	r28
    1ff4:	1f 91       	pop	r17
    1ff6:	0f 91       	pop	r16
    1ff8:	ff 90       	pop	r15
    1ffa:	ef 90       	pop	r14
    1ffc:	df 90       	pop	r13
    1ffe:	cf 90       	pop	r12
    2000:	bf 90       	pop	r11
    2002:	af 90       	pop	r10
    2004:	9f 90       	pop	r9
    2006:	8f 90       	pop	r8
    2008:	08 95       	ret

0000200a <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    200a:	8f 92       	push	r8
    200c:	9f 92       	push	r9
    200e:	af 92       	push	r10
    2010:	bf 92       	push	r11
    2012:	cf 92       	push	r12
    2014:	df 92       	push	r13
    2016:	ef 92       	push	r14
    2018:	ff 92       	push	r15
    201a:	0f 93       	push	r16
    201c:	1f 93       	push	r17
    201e:	cf 93       	push	r28
    2020:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2022:	3b c0       	rjmp	.+118    	; 0x209a <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2024:	07 80       	ldd	r0, Z+7	; 0x07
    2026:	f0 85       	ldd	r31, Z+8	; 0x08
    2028:	e0 2d       	mov	r30, r0
    202a:	80 80       	ld	r8, Z
    202c:	91 80       	ldd	r9, Z+1	; 0x01
    202e:	a2 80       	ldd	r10, Z+2	; 0x02
    2030:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2032:	c0 85       	ldd	r28, Z+8	; 0x08
    2034:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2036:	8e 01       	movw	r16, r28
    2038:	0e 5f       	subi	r16, 0xFE	; 254
    203a:	1f 4f       	sbci	r17, 0xFF	; 255
    203c:	c8 01       	movw	r24, r16
    203e:	0e 94 9d 03 	call	0x73a	; 0x73a <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2042:	ec 89       	ldd	r30, Y+20	; 0x14
    2044:	fd 89       	ldd	r31, Y+21	; 0x15
    2046:	ce 01       	movw	r24, r28
    2048:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    204a:	8e 89       	ldd	r24, Y+22	; 0x16
    204c:	82 ff       	sbrs	r24, 2
    204e:	25 c0       	rjmp	.+74     	; 0x209a <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2050:	8e 85       	ldd	r24, Y+14	; 0x0e
    2052:	9f 85       	ldd	r25, Y+15	; 0x0f
    2054:	a8 89       	ldd	r26, Y+16	; 0x10
    2056:	b9 89       	ldd	r27, Y+17	; 0x11
    2058:	88 0d       	add	r24, r8
    205a:	99 1d       	adc	r25, r9
    205c:	aa 1d       	adc	r26, r10
    205e:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    2060:	88 16       	cp	r8, r24
    2062:	99 06       	cpc	r9, r25
    2064:	aa 06       	cpc	r10, r26
    2066:	bb 06       	cpc	r11, r27
    2068:	70 f4       	brcc	.+28     	; 0x2086 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    206a:	8a 83       	std	Y+2, r24	; 0x02
    206c:	9b 83       	std	Y+3, r25	; 0x03
    206e:	ac 83       	std	Y+4, r26	; 0x04
    2070:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2072:	db 87       	std	Y+11, r29	; 0x0b
    2074:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2076:	b8 01       	movw	r22, r16
    2078:	80 91 f9 0c 	lds	r24, 0x0CF9	; 0x800cf9 <pxCurrentTimerList>
    207c:	90 91 fa 0c 	lds	r25, 0x0CFA	; 0x800cfa <pxCurrentTimerList+0x1>
    2080:	0e 94 60 03 	call	0x6c0	; 0x6c0 <vListInsert>
    2084:	0a c0       	rjmp	.+20     	; 0x209a <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2086:	c1 2c       	mov	r12, r1
    2088:	d1 2c       	mov	r13, r1
    208a:	76 01       	movw	r14, r12
    208c:	00 e0       	ldi	r16, 0x00	; 0
    208e:	10 e0       	ldi	r17, 0x00	; 0
    2090:	a5 01       	movw	r20, r10
    2092:	94 01       	movw	r18, r8
    2094:	60 e0       	ldi	r22, 0x00	; 0
    2096:	ce 01       	movw	r24, r28
    2098:	5a df       	rcall	.-332    	; 0x1f4e <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    209a:	e0 91 f9 0c 	lds	r30, 0x0CF9	; 0x800cf9 <pxCurrentTimerList>
    209e:	f0 91 fa 0c 	lds	r31, 0x0CFA	; 0x800cfa <pxCurrentTimerList+0x1>
    20a2:	80 81       	ld	r24, Z
    20a4:	81 11       	cpse	r24, r1
    20a6:	be cf       	rjmp	.-132    	; 0x2024 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    20a8:	80 91 f7 0c 	lds	r24, 0x0CF7	; 0x800cf7 <pxOverflowTimerList>
    20ac:	90 91 f8 0c 	lds	r25, 0x0CF8	; 0x800cf8 <pxOverflowTimerList+0x1>
    20b0:	90 93 fa 0c 	sts	0x0CFA, r25	; 0x800cfa <pxCurrentTimerList+0x1>
    20b4:	80 93 f9 0c 	sts	0x0CF9, r24	; 0x800cf9 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    20b8:	f0 93 f8 0c 	sts	0x0CF8, r31	; 0x800cf8 <pxOverflowTimerList+0x1>
    20bc:	e0 93 f7 0c 	sts	0x0CF7, r30	; 0x800cf7 <pxOverflowTimerList>
    }
    20c0:	df 91       	pop	r29
    20c2:	cf 91       	pop	r28
    20c4:	1f 91       	pop	r17
    20c6:	0f 91       	pop	r16
    20c8:	ff 90       	pop	r15
    20ca:	ef 90       	pop	r14
    20cc:	df 90       	pop	r13
    20ce:	cf 90       	pop	r12
    20d0:	bf 90       	pop	r11
    20d2:	af 90       	pop	r10
    20d4:	9f 90       	pop	r9
    20d6:	8f 90       	pop	r8
    20d8:	08 95       	ret

000020da <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    20da:	cf 92       	push	r12
    20dc:	df 92       	push	r13
    20de:	ef 92       	push	r14
    20e0:	ff 92       	push	r15
    20e2:	cf 93       	push	r28
    20e4:	df 93       	push	r29
    20e6:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    20e8:	bd d9       	rcall	.-3206   	; 0x1464 <xTaskGetTickCount>
    20ea:	6b 01       	movw	r12, r22
    20ec:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    20ee:	80 91 ef 0c 	lds	r24, 0x0CEF	; 0x800cef <xLastTime.2436>
    20f2:	90 91 f0 0c 	lds	r25, 0x0CF0	; 0x800cf0 <xLastTime.2436+0x1>
    20f6:	a0 91 f1 0c 	lds	r26, 0x0CF1	; 0x800cf1 <xLastTime.2436+0x2>
    20fa:	b0 91 f2 0c 	lds	r27, 0x0CF2	; 0x800cf2 <xLastTime.2436+0x3>
    20fe:	c8 16       	cp	r12, r24
    2100:	d9 06       	cpc	r13, r25
    2102:	ea 06       	cpc	r14, r26
    2104:	fb 06       	cpc	r15, r27
        {
            prvSwitchTimerLists();
    2106:	20 f4       	brcc	.+8      	; 0x2110 <prvSampleTimeNow+0x36>
    2108:	80 df       	rcall	.-256    	; 0x200a <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	88 83       	st	Y, r24
    210e:	01 c0       	rjmp	.+2      	; 0x2112 <prvSampleTimeNow+0x38>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    2110:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    2112:	c0 92 ef 0c 	sts	0x0CEF, r12	; 0x800cef <xLastTime.2436>
    2116:	d0 92 f0 0c 	sts	0x0CF0, r13	; 0x800cf0 <xLastTime.2436+0x1>
    211a:	e0 92 f1 0c 	sts	0x0CF1, r14	; 0x800cf1 <xLastTime.2436+0x2>
    211e:	f0 92 f2 0c 	sts	0x0CF2, r15	; 0x800cf2 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    2122:	c7 01       	movw	r24, r14
    2124:	b6 01       	movw	r22, r12
    2126:	df 91       	pop	r29
    2128:	cf 91       	pop	r28
    212a:	ff 90       	pop	r15
    212c:	ef 90       	pop	r14
    212e:	df 90       	pop	r13
    2130:	cf 90       	pop	r12
    2132:	08 95       	ret

00002134 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    2134:	4f 92       	push	r4
    2136:	5f 92       	push	r5
    2138:	6f 92       	push	r6
    213a:	7f 92       	push	r7
    213c:	8f 92       	push	r8
    213e:	9f 92       	push	r9
    2140:	af 92       	push	r10
    2142:	bf 92       	push	r11
    2144:	cf 92       	push	r12
    2146:	df 92       	push	r13
    2148:	ef 92       	push	r14
    214a:	ff 92       	push	r15
    214c:	0f 93       	push	r16
    214e:	1f 93       	push	r17
    2150:	cf 93       	push	r28
    2152:	df 93       	push	r29
    2154:	4b 01       	movw	r8, r22
    2156:	5c 01       	movw	r10, r24
    2158:	29 01       	movw	r4, r18
    215a:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    215c:	e0 91 f9 0c 	lds	r30, 0x0CF9	; 0x800cf9 <pxCurrentTimerList>
    2160:	f0 91 fa 0c 	lds	r31, 0x0CFA	; 0x800cfa <pxCurrentTimerList+0x1>
    2164:	07 80       	ldd	r0, Z+7	; 0x07
    2166:	f0 85       	ldd	r31, Z+8	; 0x08
    2168:	e0 2d       	mov	r30, r0
    216a:	c0 85       	ldd	r28, Z+8	; 0x08
    216c:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    216e:	ce 01       	movw	r24, r28
    2170:	02 96       	adiw	r24, 0x02	; 2
    2172:	0e 94 9d 03 	call	0x73a	; 0x73a <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2176:	8e 89       	ldd	r24, Y+22	; 0x16
    2178:	82 ff       	sbrs	r24, 2
    217a:	1b c0       	rjmp	.+54     	; 0x21b2 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    217c:	4e 85       	ldd	r20, Y+14	; 0x0e
    217e:	5f 85       	ldd	r21, Y+15	; 0x0f
    2180:	68 89       	ldd	r22, Y+16	; 0x10
    2182:	79 89       	ldd	r23, Y+17	; 0x11
    2184:	48 0d       	add	r20, r8
    2186:	59 1d       	adc	r21, r9
    2188:	6a 1d       	adc	r22, r10
    218a:	7b 1d       	adc	r23, r11
    218c:	75 01       	movw	r14, r10
    218e:	64 01       	movw	r12, r8
    2190:	93 01       	movw	r18, r6
    2192:	82 01       	movw	r16, r4
    2194:	ce 01       	movw	r24, r28
    2196:	49 de       	rcall	.-878    	; 0x1e2a <prvInsertTimerInActiveList>
    2198:	88 23       	and	r24, r24
    219a:	69 f0       	breq	.+26     	; 0x21b6 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    219c:	c1 2c       	mov	r12, r1
    219e:	d1 2c       	mov	r13, r1
    21a0:	76 01       	movw	r14, r12
    21a2:	00 e0       	ldi	r16, 0x00	; 0
    21a4:	10 e0       	ldi	r17, 0x00	; 0
    21a6:	a5 01       	movw	r20, r10
    21a8:	94 01       	movw	r18, r8
    21aa:	60 e0       	ldi	r22, 0x00	; 0
    21ac:	ce 01       	movw	r24, r28
    21ae:	cf de       	rcall	.-610    	; 0x1f4e <xTimerGenericCommand>
    21b0:	02 c0       	rjmp	.+4      	; 0x21b6 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    21b2:	8e 7f       	andi	r24, 0xFE	; 254
    21b4:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    21b6:	ec 89       	ldd	r30, Y+20	; 0x14
    21b8:	fd 89       	ldd	r31, Y+21	; 0x15
    21ba:	ce 01       	movw	r24, r28
    21bc:	19 95       	eicall
    }
    21be:	df 91       	pop	r29
    21c0:	cf 91       	pop	r28
    21c2:	1f 91       	pop	r17
    21c4:	0f 91       	pop	r16
    21c6:	ff 90       	pop	r15
    21c8:	ef 90       	pop	r14
    21ca:	df 90       	pop	r13
    21cc:	cf 90       	pop	r12
    21ce:	bf 90       	pop	r11
    21d0:	af 90       	pop	r10
    21d2:	9f 90       	pop	r9
    21d4:	8f 90       	pop	r8
    21d6:	7f 90       	pop	r7
    21d8:	6f 90       	pop	r6
    21da:	5f 90       	pop	r5
    21dc:	4f 90       	pop	r4
    21de:	08 95       	ret

000021e0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    21e0:	8f 92       	push	r8
    21e2:	9f 92       	push	r9
    21e4:	af 92       	push	r10
    21e6:	bf 92       	push	r11
    21e8:	cf 92       	push	r12
    21ea:	df 92       	push	r13
    21ec:	ef 92       	push	r14
    21ee:	ff 92       	push	r15
    21f0:	1f 93       	push	r17
    21f2:	cf 93       	push	r28
    21f4:	df 93       	push	r29
    21f6:	1f 92       	push	r1
    21f8:	cd b7       	in	r28, 0x3d	; 61
    21fa:	de b7       	in	r29, 0x3e	; 62
    21fc:	6b 01       	movw	r12, r22
    21fe:	7c 01       	movw	r14, r24
    2200:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    2202:	2a d9       	rcall	.-3500   	; 0x1458 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2204:	ce 01       	movw	r24, r28
    2206:	01 96       	adiw	r24, 0x01	; 1
    2208:	68 df       	rcall	.-304    	; 0x20da <prvSampleTimeNow>
    220a:	4b 01       	movw	r8, r22
    220c:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    220e:	89 81       	ldd	r24, Y+1	; 0x01
    2210:	81 11       	cpse	r24, r1
    2212:	2b c0       	rjmp	.+86     	; 0x226a <__stack+0x6b>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2214:	11 11       	cpse	r17, r1
    2216:	0c c0       	rjmp	.+24     	; 0x2230 <__stack+0x31>
    2218:	8c 14       	cp	r8, r12
    221a:	9d 04       	cpc	r9, r13
    221c:	ae 04       	cpc	r10, r14
    221e:	bf 04       	cpc	r11, r15
                {
                    ( void ) xTaskResumeAll();
    2220:	38 f0       	brcs	.+14     	; 0x2230 <__stack+0x31>
    2222:	5a da       	rcall	.-2892   	; 0x16d8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    2224:	a5 01       	movw	r20, r10
    2226:	94 01       	movw	r18, r8
    2228:	c7 01       	movw	r24, r14
    222a:	b6 01       	movw	r22, r12
    222c:	83 df       	rcall	.-250    	; 0x2134 <prvProcessExpiredTimer>
    222e:	1e c0       	rjmp	.+60     	; 0x226c <__stack+0x6d>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    2230:	11 23       	and	r17, r17
    2232:	41 f0       	breq	.+16     	; 0x2244 <__stack+0x45>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2234:	e0 91 f7 0c 	lds	r30, 0x0CF7	; 0x800cf7 <pxOverflowTimerList>
    2238:	f0 91 f8 0c 	lds	r31, 0x0CF8	; 0x800cf8 <pxOverflowTimerList+0x1>
    223c:	80 81       	ld	r24, Z
    223e:	11 e0       	ldi	r17, 0x01	; 1
    2240:	81 11       	cpse	r24, r1
    2242:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2244:	b7 01       	movw	r22, r14
    2246:	a6 01       	movw	r20, r12
    2248:	48 19       	sub	r20, r8
    224a:	59 09       	sbc	r21, r9
    224c:	6a 09       	sbc	r22, r10
    224e:	7b 09       	sbc	r23, r11
    2250:	21 2f       	mov	r18, r17
    2252:	80 91 f5 0c 	lds	r24, 0x0CF5	; 0x800cf5 <xTimerQueue>
    2256:	90 91 f6 0c 	lds	r25, 0x0CF6	; 0x800cf6 <xTimerQueue+0x1>
    225a:	0e 94 8a 07 	call	0xf14	; 0xf14 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    225e:	3c da       	rcall	.-2952   	; 0x16d8 <xTaskResumeAll>
    2260:	81 11       	cpse	r24, r1
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    2262:	04 c0       	rjmp	.+8      	; 0x226c <__stack+0x6d>
    2264:	0e 94 19 04 	call	0x832	; 0x832 <vPortYield>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    2268:	01 c0       	rjmp	.+2      	; 0x226c <__stack+0x6d>
    226a:	36 da       	rcall	.-2964   	; 0x16d8 <xTaskResumeAll>
            }
        }
    }
    226c:	0f 90       	pop	r0
    226e:	df 91       	pop	r29
    2270:	cf 91       	pop	r28
    2272:	1f 91       	pop	r17
    2274:	ff 90       	pop	r15
    2276:	ef 90       	pop	r14
    2278:	df 90       	pop	r13
    227a:	cf 90       	pop	r12
    227c:	bf 90       	pop	r11
    227e:	af 90       	pop	r10
    2280:	9f 90       	pop	r9
    2282:	8f 90       	pop	r8
    2284:	08 95       	ret

00002286 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    2286:	af 92       	push	r10
    2288:	bf 92       	push	r11
    228a:	cf 92       	push	r12
    228c:	df 92       	push	r13
    228e:	ef 92       	push	r14
    2290:	ff 92       	push	r15
    2292:	0f 93       	push	r16
    2294:	1f 93       	push	r17
    2296:	cf 93       	push	r28
    2298:	df 93       	push	r29
    229a:	cd b7       	in	r28, 0x3d	; 61
    229c:	de b7       	in	r29, 0x3e	; 62
    229e:	28 97       	sbiw	r28, 0x08	; 8
    22a0:	0f b6       	in	r0, 0x3f	; 63
    22a2:	f8 94       	cli
    22a4:	de bf       	out	0x3e, r29	; 62
    22a6:	0f be       	out	0x3f, r0	; 63
    22a8:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    22aa:	82 c0       	rjmp	.+260    	; 0x23b0 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    22ac:	89 81       	ldd	r24, Y+1	; 0x01
    22ae:	88 23       	and	r24, r24
    22b0:	0c f4       	brge	.+2      	; 0x22b4 <prvProcessReceivedCommands+0x2e>
    22b2:	7e c0       	rjmp	.+252    	; 0x23b0 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    22b4:	ae 80       	ldd	r10, Y+6	; 0x06
    22b6:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    22b8:	d5 01       	movw	r26, r10
    22ba:	1c 96       	adiw	r26, 0x0c	; 12
    22bc:	8d 91       	ld	r24, X+
    22be:	9c 91       	ld	r25, X
    22c0:	1d 97       	sbiw	r26, 0x0d	; 13
    22c2:	89 2b       	or	r24, r25
    22c4:	21 f0       	breq	.+8      	; 0x22ce <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    22c6:	c5 01       	movw	r24, r10
    22c8:	02 96       	adiw	r24, 0x02	; 2
    22ca:	0e 94 9d 03 	call	0x73a	; 0x73a <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    22ce:	ce 01       	movw	r24, r28
    22d0:	08 96       	adiw	r24, 0x08	; 8
    22d2:	03 df       	rcall	.-506    	; 0x20da <prvSampleTimeNow>
    22d4:	8b 01       	movw	r16, r22
    22d6:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    22d8:	e9 81       	ldd	r30, Y+1	; 0x01
    22da:	0e 2e       	mov	r0, r30
    22dc:	00 0c       	add	r0, r0
    22de:	ff 0b       	sbc	r31, r31
    22e0:	ea 30       	cpi	r30, 0x0A	; 10
    22e2:	f1 05       	cpc	r31, r1
    22e4:	08 f0       	brcs	.+2      	; 0x22e8 <prvProcessReceivedCommands+0x62>
    22e6:	64 c0       	rjmp	.+200    	; 0x23b0 <prvProcessReceivedCommands+0x12a>
    22e8:	88 27       	eor	r24, r24
    22ea:	ee 58       	subi	r30, 0x8E	; 142
    22ec:	ff 4f       	sbci	r31, 0xFF	; 255
    22ee:	8f 4f       	sbci	r24, 0xFF	; 255
    22f0:	0c 94 46 1d 	jmp	0x3a8c	; 0x3a8c <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    22f4:	f5 01       	movw	r30, r10
    22f6:	86 89       	ldd	r24, Z+22	; 0x16
    22f8:	81 60       	ori	r24, 0x01	; 1
    22fa:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    22fc:	ca 80       	ldd	r12, Y+2	; 0x02
    22fe:	db 80       	ldd	r13, Y+3	; 0x03
    2300:	ec 80       	ldd	r14, Y+4	; 0x04
    2302:	fd 80       	ldd	r15, Y+5	; 0x05
    2304:	46 85       	ldd	r20, Z+14	; 0x0e
    2306:	57 85       	ldd	r21, Z+15	; 0x0f
    2308:	60 89       	ldd	r22, Z+16	; 0x10
    230a:	71 89       	ldd	r23, Z+17	; 0x11
    230c:	4c 0d       	add	r20, r12
    230e:	5d 1d       	adc	r21, r13
    2310:	6e 1d       	adc	r22, r14
    2312:	7f 1d       	adc	r23, r15
    2314:	c5 01       	movw	r24, r10
    2316:	89 dd       	rcall	.-1262   	; 0x1e2a <prvInsertTimerInActiveList>
    2318:	88 23       	and	r24, r24
    231a:	09 f4       	brne	.+2      	; 0x231e <prvProcessReceivedCommands+0x98>
    231c:	49 c0       	rjmp	.+146    	; 0x23b0 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    231e:	d5 01       	movw	r26, r10
    2320:	54 96       	adiw	r26, 0x14	; 20
    2322:	ed 91       	ld	r30, X+
    2324:	fc 91       	ld	r31, X
    2326:	55 97       	sbiw	r26, 0x15	; 21
    2328:	c5 01       	movw	r24, r10
    232a:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    232c:	f5 01       	movw	r30, r10
    232e:	86 89       	ldd	r24, Z+22	; 0x16
    2330:	82 ff       	sbrs	r24, 2
    2332:	3e c0       	rjmp	.+124    	; 0x23b0 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2334:	4a 81       	ldd	r20, Y+2	; 0x02
    2336:	5b 81       	ldd	r21, Y+3	; 0x03
    2338:	6c 81       	ldd	r22, Y+4	; 0x04
    233a:	7d 81       	ldd	r23, Y+5	; 0x05
    233c:	86 85       	ldd	r24, Z+14	; 0x0e
    233e:	97 85       	ldd	r25, Z+15	; 0x0f
    2340:	a0 89       	ldd	r26, Z+16	; 0x10
    2342:	b1 89       	ldd	r27, Z+17	; 0x11
    2344:	9a 01       	movw	r18, r20
    2346:	ab 01       	movw	r20, r22
    2348:	28 0f       	add	r18, r24
    234a:	39 1f       	adc	r19, r25
    234c:	4a 1f       	adc	r20, r26
    234e:	5b 1f       	adc	r21, r27
    2350:	c1 2c       	mov	r12, r1
    2352:	d1 2c       	mov	r13, r1
    2354:	76 01       	movw	r14, r12
    2356:	00 e0       	ldi	r16, 0x00	; 0
    2358:	10 e0       	ldi	r17, 0x00	; 0
    235a:	60 e0       	ldi	r22, 0x00	; 0
    235c:	c5 01       	movw	r24, r10
    235e:	f7 dd       	rcall	.-1042   	; 0x1f4e <xTimerGenericCommand>
    2360:	27 c0       	rjmp	.+78     	; 0x23b0 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2362:	d5 01       	movw	r26, r10
    2364:	56 96       	adiw	r26, 0x16	; 22
    2366:	8c 91       	ld	r24, X
    2368:	56 97       	sbiw	r26, 0x16	; 22
    236a:	8e 7f       	andi	r24, 0xFE	; 254
    236c:	56 96       	adiw	r26, 0x16	; 22
    236e:	8c 93       	st	X, r24
                        break;
    2370:	1f c0       	rjmp	.+62     	; 0x23b0 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2372:	f5 01       	movw	r30, r10
    2374:	86 89       	ldd	r24, Z+22	; 0x16
    2376:	81 60       	ori	r24, 0x01	; 1
    2378:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    237a:	4a 81       	ldd	r20, Y+2	; 0x02
    237c:	5b 81       	ldd	r21, Y+3	; 0x03
    237e:	6c 81       	ldd	r22, Y+4	; 0x04
    2380:	7d 81       	ldd	r23, Y+5	; 0x05
    2382:	46 87       	std	Z+14, r20	; 0x0e
    2384:	57 87       	std	Z+15, r21	; 0x0f
    2386:	60 8b       	std	Z+16, r22	; 0x10
    2388:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    238a:	40 0f       	add	r20, r16
    238c:	51 1f       	adc	r21, r17
    238e:	62 1f       	adc	r22, r18
    2390:	73 1f       	adc	r23, r19
    2392:	68 01       	movw	r12, r16
    2394:	79 01       	movw	r14, r18
    2396:	c5 01       	movw	r24, r10
    2398:	48 dd       	rcall	.-1392   	; 0x1e2a <prvInsertTimerInActiveList>
                        break;
    239a:	0a c0       	rjmp	.+20     	; 0x23b0 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    239c:	f5 01       	movw	r30, r10
    239e:	86 89       	ldd	r24, Z+22	; 0x16
    23a0:	81 fd       	sbrc	r24, 1
    23a2:	04 c0       	rjmp	.+8      	; 0x23ac <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    23a4:	c5 01       	movw	r24, r10
    23a6:	0e 94 0f 03 	call	0x61e	; 0x61e <vPortFree>
    23aa:	02 c0       	rjmp	.+4      	; 0x23b0 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    23ac:	8e 7f       	andi	r24, 0xFE	; 254
    23ae:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    23b0:	20 e0       	ldi	r18, 0x00	; 0
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	a9 01       	movw	r20, r18
    23b6:	be 01       	movw	r22, r28
    23b8:	6f 5f       	subi	r22, 0xFF	; 255
    23ba:	7f 4f       	sbci	r23, 0xFF	; 255
    23bc:	80 91 f5 0c 	lds	r24, 0x0CF5	; 0x800cf5 <xTimerQueue>
    23c0:	90 91 f6 0c 	lds	r25, 0x0CF6	; 0x800cf6 <xTimerQueue+0x1>
    23c4:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xQueueReceive>
    23c8:	81 11       	cpse	r24, r1
    23ca:	70 cf       	rjmp	.-288    	; 0x22ac <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    23cc:	28 96       	adiw	r28, 0x08	; 8
    23ce:	0f b6       	in	r0, 0x3f	; 63
    23d0:	f8 94       	cli
    23d2:	de bf       	out	0x3e, r29	; 62
    23d4:	0f be       	out	0x3f, r0	; 63
    23d6:	cd bf       	out	0x3d, r28	; 61
    23d8:	df 91       	pop	r29
    23da:	cf 91       	pop	r28
    23dc:	1f 91       	pop	r17
    23de:	0f 91       	pop	r16
    23e0:	ff 90       	pop	r15
    23e2:	ef 90       	pop	r14
    23e4:	df 90       	pop	r13
    23e6:	cf 90       	pop	r12
    23e8:	bf 90       	pop	r11
    23ea:	af 90       	pop	r10
    23ec:	08 95       	ret

000023ee <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    23ee:	08 95       	ret

000023f0 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    23f0:	84 b1       	in	r24, 0x04	; 4
    23f2:	80 68       	ori	r24, 0x80	; 128
    23f4:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    23f6:	85 b1       	in	r24, 0x05	; 5
    23f8:	80 68       	ori	r24, 0x80	; 128
    23fa:	85 b9       	out	0x05, r24	; 5
    23fc:	08 95       	ret

000023fe <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    23fe:	83 b1       	in	r24, 0x03	; 3
    2400:	80 68       	ori	r24, 0x80	; 128
    2402:	83 b9       	out	0x03, r24	; 3
    2404:	08 95       	ret

00002406 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    2406:	f4 df       	rcall	.-24     	; 0x23f0 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2408:	2f ef       	ldi	r18, 0xFF	; 255
    240a:	80 e7       	ldi	r24, 0x70	; 112
    240c:	92 e0       	ldi	r25, 0x02	; 2
    240e:	21 50       	subi	r18, 0x01	; 1
    2410:	80 40       	sbci	r24, 0x00	; 0
    2412:	90 40       	sbci	r25, 0x00	; 0
    2414:	e1 f7       	brne	.-8      	; 0x240e <vApplicationMallocFailedHook+0x8>
    2416:	00 c0       	rjmp	.+0      	; 0x2418 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    2418:	00 00       	nop
    241a:	f1 df       	rcall	.-30     	; 0x23fe <prvBlinkMainLed>
    241c:	f5 cf       	rjmp	.-22     	; 0x2408 <vApplicationMallocFailedHook+0x2>

0000241e <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    241e:	e8 df       	rcall	.-48     	; 0x23f0 <prvSetMainLedOn>
    2420:	2f ef       	ldi	r18, 0xFF	; 255
    2422:	87 ea       	ldi	r24, 0xA7	; 167
    2424:	91 e6       	ldi	r25, 0x61	; 97
    2426:	21 50       	subi	r18, 0x01	; 1
    2428:	80 40       	sbci	r24, 0x00	; 0
    242a:	90 40       	sbci	r25, 0x00	; 0
    242c:	e1 f7       	brne	.-8      	; 0x2426 <vApplicationStackOverflowHook+0x8>
    242e:	00 c0       	rjmp	.+0      	; 0x2430 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    2430:	00 00       	nop
    2432:	e5 df       	rcall	.-54     	; 0x23fe <prvBlinkMainLed>
    2434:	f5 cf       	rjmp	.-22     	; 0x2420 <vApplicationStackOverflowHook+0x2>

00002436 <__floatunsisf>:
    2436:	e8 94       	clt
    2438:	09 c0       	rjmp	.+18     	; 0x244c <__floatsisf+0x12>

0000243a <__floatsisf>:
    243a:	97 fb       	bst	r25, 7
    243c:	3e f4       	brtc	.+14     	; 0x244c <__floatsisf+0x12>
    243e:	90 95       	com	r25
    2440:	80 95       	com	r24
    2442:	70 95       	com	r23
    2444:	61 95       	neg	r22
    2446:	7f 4f       	sbci	r23, 0xFF	; 255
    2448:	8f 4f       	sbci	r24, 0xFF	; 255
    244a:	9f 4f       	sbci	r25, 0xFF	; 255
    244c:	99 23       	and	r25, r25
    244e:	a9 f0       	breq	.+42     	; 0x247a <__floatsisf+0x40>
    2450:	f9 2f       	mov	r31, r25
    2452:	96 e9       	ldi	r25, 0x96	; 150
    2454:	bb 27       	eor	r27, r27
    2456:	93 95       	inc	r25
    2458:	f6 95       	lsr	r31
    245a:	87 95       	ror	r24
    245c:	77 95       	ror	r23
    245e:	67 95       	ror	r22
    2460:	b7 95       	ror	r27
    2462:	f1 11       	cpse	r31, r1
    2464:	f8 cf       	rjmp	.-16     	; 0x2456 <__floatsisf+0x1c>
    2466:	fa f4       	brpl	.+62     	; 0x24a6 <__floatsisf+0x6c>
    2468:	bb 0f       	add	r27, r27
    246a:	11 f4       	brne	.+4      	; 0x2470 <__floatsisf+0x36>
    246c:	60 ff       	sbrs	r22, 0
    246e:	1b c0       	rjmp	.+54     	; 0x24a6 <__floatsisf+0x6c>
    2470:	6f 5f       	subi	r22, 0xFF	; 255
    2472:	7f 4f       	sbci	r23, 0xFF	; 255
    2474:	8f 4f       	sbci	r24, 0xFF	; 255
    2476:	9f 4f       	sbci	r25, 0xFF	; 255
    2478:	16 c0       	rjmp	.+44     	; 0x24a6 <__floatsisf+0x6c>
    247a:	88 23       	and	r24, r24
    247c:	11 f0       	breq	.+4      	; 0x2482 <__floatsisf+0x48>
    247e:	96 e9       	ldi	r25, 0x96	; 150
    2480:	11 c0       	rjmp	.+34     	; 0x24a4 <__floatsisf+0x6a>
    2482:	77 23       	and	r23, r23
    2484:	21 f0       	breq	.+8      	; 0x248e <__floatsisf+0x54>
    2486:	9e e8       	ldi	r25, 0x8E	; 142
    2488:	87 2f       	mov	r24, r23
    248a:	76 2f       	mov	r23, r22
    248c:	05 c0       	rjmp	.+10     	; 0x2498 <__floatsisf+0x5e>
    248e:	66 23       	and	r22, r22
    2490:	71 f0       	breq	.+28     	; 0x24ae <__floatsisf+0x74>
    2492:	96 e8       	ldi	r25, 0x86	; 134
    2494:	86 2f       	mov	r24, r22
    2496:	70 e0       	ldi	r23, 0x00	; 0
    2498:	60 e0       	ldi	r22, 0x00	; 0
    249a:	2a f0       	brmi	.+10     	; 0x24a6 <__floatsisf+0x6c>
    249c:	9a 95       	dec	r25
    249e:	66 0f       	add	r22, r22
    24a0:	77 1f       	adc	r23, r23
    24a2:	88 1f       	adc	r24, r24
    24a4:	da f7       	brpl	.-10     	; 0x249c <__floatsisf+0x62>
    24a6:	88 0f       	add	r24, r24
    24a8:	96 95       	lsr	r25
    24aa:	87 95       	ror	r24
    24ac:	97 f9       	bld	r25, 7
    24ae:	08 95       	ret

000024b0 <_spiCallBack>:
    24b0:	81 b3       	in	r24, 0x11	; 17
    24b2:	8f 60       	ori	r24, 0x0F	; 15
    24b4:	81 bb       	out	0x11, r24	; 17
    24b6:	28 98       	cbi	0x05, 0	; 5
    24b8:	28 9a       	sbi	0x05, 0	; 5
    24ba:	21 b3       	in	r18, 0x11	; 17
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	00 90 41 0d 	lds	r0, 0x0D41	; 0x800d41 <_digitNo>
    24c4:	02 c0       	rjmp	.+4      	; 0x24ca <_spiCallBack+0x1a>
    24c6:	88 0f       	add	r24, r24
    24c8:	99 1f       	adc	r25, r25
    24ca:	0a 94       	dec	r0
    24cc:	e2 f7       	brpl	.-8      	; 0x24c6 <_spiCallBack+0x16>
    24ce:	80 95       	com	r24
    24d0:	82 23       	and	r24, r18
    24d2:	81 bb       	out	0x11, r24	; 17
    24d4:	e0 91 11 0d 	lds	r30, 0x0D11	; 0x800d11 <_displayDoneCallBack>
    24d8:	f0 91 12 0d 	lds	r31, 0x0D12	; 0x800d12 <_displayDoneCallBack+0x1>
    24dc:	30 97       	sbiw	r30, 0x00	; 0
    24de:	09 f0       	breq	.+2      	; 0x24e2 <_spiCallBack+0x32>
    24e0:	19 95       	eicall
    24e2:	08 95       	ret

000024e4 <display_7seg_displayErr>:
    24e4:	9f b7       	in	r25, 0x3f	; 63
    24e6:	f8 94       	cli
    24e8:	ed e3       	ldi	r30, 0x3D	; 61
    24ea:	fd e0       	ldi	r31, 0x0D	; 13
    24ec:	10 82       	st	Z, r1
    24ee:	8e e9       	ldi	r24, 0x9E	; 158
    24f0:	81 83       	std	Z+1, r24	; 0x01
    24f2:	8a e0       	ldi	r24, 0x0A	; 10
    24f4:	82 83       	std	Z+2, r24	; 0x02
    24f6:	83 83       	std	Z+3, r24	; 0x03
    24f8:	9f bf       	out	0x3f, r25	; 63
    24fa:	08 95       	ret

000024fc <display_7seg_display>:
    24fc:	bf 92       	push	r11
    24fe:	cf 92       	push	r12
    2500:	df 92       	push	r13
    2502:	ef 92       	push	r14
    2504:	ff 92       	push	r15
    2506:	0f 93       	push	r16
    2508:	1f 93       	push	r17
    250a:	cf 93       	push	r28
    250c:	df 93       	push	r29
    250e:	6b 01       	movw	r12, r22
    2510:	7c 01       	movw	r14, r24
    2512:	b4 2e       	mov	r11, r20
    2514:	10 92 14 0d 	sts	0x0D14, r1	; 0x800d14 <_maxHexSegmentindex>
    2518:	83 e0       	ldi	r24, 0x03	; 3
    251a:	84 17       	cp	r24, r20
    251c:	80 f1       	brcs	.+96     	; 0x257e <display_7seg_display+0x82>
    251e:	64 2f       	mov	r22, r20
    2520:	70 e0       	ldi	r23, 0x00	; 0
    2522:	80 e0       	ldi	r24, 0x00	; 0
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	87 df       	rcall	.-242    	; 0x2436 <__floatunsisf>
    2528:	9b 01       	movw	r18, r22
    252a:	ac 01       	movw	r20, r24
    252c:	60 e0       	ldi	r22, 0x00	; 0
    252e:	70 e0       	ldi	r23, 0x00	; 0
    2530:	80 e2       	ldi	r24, 0x20	; 32
    2532:	91 e4       	ldi	r25, 0x41	; 65
    2534:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <pow>
    2538:	a7 01       	movw	r20, r14
    253a:	96 01       	movw	r18, r12
    253c:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__mulsf3>
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	40 e0       	ldi	r20, 0x00	; 0
    2546:	5f e3       	ldi	r21, 0x3F	; 63
    2548:	32 d7       	rcall	.+3684   	; 0x33ae <__addsf3>
    254a:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <floor>
    254e:	fb d7       	rcall	.+4086   	; 0x3546 <__fixsfsi>
    2550:	ab 01       	movw	r20, r22
    2552:	77 23       	and	r23, r23
    2554:	64 f4       	brge	.+24     	; 0x256e <display_7seg_display+0x72>
    2556:	44 27       	eor	r20, r20
    2558:	55 27       	eor	r21, r21
    255a:	46 1b       	sub	r20, r22
    255c:	57 0b       	sbc	r21, r23
    255e:	21 e0       	ldi	r18, 0x01	; 1
    2560:	48 3e       	cpi	r20, 0xE8	; 232
    2562:	83 e0       	ldi	r24, 0x03	; 3
    2564:	58 07       	cpc	r21, r24
    2566:	0c f4       	brge	.+2      	; 0x256a <display_7seg_display+0x6e>
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	11 e0       	ldi	r17, 0x01	; 1
    256c:	0c c0       	rjmp	.+24     	; 0x2586 <display_7seg_display+0x8a>
    256e:	21 e0       	ldi	r18, 0x01	; 1
    2570:	40 31       	cpi	r20, 0x10	; 16
    2572:	87 e2       	ldi	r24, 0x27	; 39
    2574:	58 07       	cpc	r21, r24
    2576:	0c f4       	brge	.+2      	; 0x257a <display_7seg_display+0x7e>
    2578:	20 e0       	ldi	r18, 0x00	; 0
    257a:	10 e0       	ldi	r17, 0x00	; 0
    257c:	04 c0       	rjmp	.+8      	; 0x2586 <display_7seg_display+0x8a>
    257e:	40 e0       	ldi	r20, 0x00	; 0
    2580:	50 e0       	ldi	r21, 0x00	; 0
    2582:	21 e0       	ldi	r18, 0x01	; 1
    2584:	10 e0       	ldi	r17, 0x00	; 0
    2586:	0f b7       	in	r16, 0x3f	; 63
    2588:	f8 94       	cli
    258a:	22 23       	and	r18, r18
    258c:	11 f0       	breq	.+4      	; 0x2592 <display_7seg_display+0x96>
    258e:	aa df       	rcall	.-172    	; 0x24e4 <display_7seg_displayErr>
    2590:	51 c0       	rjmp	.+162    	; 0x2634 <display_7seg_display+0x138>
    2592:	c1 e4       	ldi	r28, 0x41	; 65
    2594:	dd e0       	ldi	r29, 0x0D	; 13
    2596:	0f 2e       	mov	r0, r31
    2598:	fd e3       	ldi	r31, 0x3D	; 61
    259a:	cf 2e       	mov	r12, r31
    259c:	fd e0       	ldi	r31, 0x0D	; 13
    259e:	df 2e       	mov	r13, r31
    25a0:	f0 2d       	mov	r31, r0
    25a2:	0f 2e       	mov	r0, r31
    25a4:	fa e0       	ldi	r31, 0x0A	; 10
    25a6:	ef 2e       	mov	r14, r31
    25a8:	f1 2c       	mov	r15, r1
    25aa:	f0 2d       	mov	r31, r0
    25ac:	ca 01       	movw	r24, r20
    25ae:	b7 01       	movw	r22, r14
    25b0:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <__divmodhi4>
    25b4:	fc 01       	movw	r30, r24
    25b6:	ee 5b       	subi	r30, 0xBE	; 190
    25b8:	fd 4f       	sbci	r31, 0xFD	; 253
    25ba:	80 81       	ld	r24, Z
    25bc:	8a 93       	st	-Y, r24
    25be:	46 2f       	mov	r20, r22
    25c0:	57 2f       	mov	r21, r23
    25c2:	cc 15       	cp	r28, r12
    25c4:	dd 05       	cpc	r29, r13
    25c6:	91 f7       	brne	.-28     	; 0x25ac <display_7seg_display+0xb0>
    25c8:	43 e0       	ldi	r20, 0x03	; 3
    25ca:	50 e0       	ldi	r21, 0x00	; 0
    25cc:	4b 19       	sub	r20, r11
    25ce:	51 09       	sbc	r21, r1
    25d0:	14 16       	cp	r1, r20
    25d2:	15 06       	cpc	r1, r21
    25d4:	f4 f4       	brge	.+60     	; 0x2612 <display_7seg_display+0x116>
    25d6:	80 91 3d 0d 	lds	r24, 0x0D3D	; 0x800d3d <_digitSegments>
    25da:	8c 3f       	cpi	r24, 0xFC	; 252
    25dc:	49 f0       	breq	.+18     	; 0x25f0 <display_7seg_display+0xf4>
    25de:	60 e0       	ldi	r22, 0x00	; 0
    25e0:	19 c0       	rjmp	.+50     	; 0x2614 <display_7seg_display+0x118>
    25e2:	fc 01       	movw	r30, r24
    25e4:	e3 5c       	subi	r30, 0xC3	; 195
    25e6:	f2 4f       	sbci	r31, 0xF2	; 242
    25e8:	30 81       	ld	r19, Z
    25ea:	3c 3f       	cpi	r19, 0xFC	; 252
    25ec:	21 f0       	breq	.+8      	; 0x25f6 <display_7seg_display+0xfa>
    25ee:	12 c0       	rjmp	.+36     	; 0x2614 <display_7seg_display+0x118>
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	20 e0       	ldi	r18, 0x00	; 0
    25f6:	fc 01       	movw	r30, r24
    25f8:	e3 5c       	subi	r30, 0xC3	; 195
    25fa:	f2 4f       	sbci	r31, 0xF2	; 242
    25fc:	10 82       	st	Z, r1
    25fe:	62 2f       	mov	r22, r18
    2600:	2f 5f       	subi	r18, 0xFF	; 255
    2602:	82 2f       	mov	r24, r18
    2604:	02 2e       	mov	r0, r18
    2606:	00 0c       	add	r0, r0
    2608:	99 0b       	sbc	r25, r25
    260a:	84 17       	cp	r24, r20
    260c:	95 07       	cpc	r25, r21
    260e:	4c f3       	brlt	.-46     	; 0x25e2 <display_7seg_display+0xe6>
    2610:	01 c0       	rjmp	.+2      	; 0x2614 <display_7seg_display+0x118>
    2612:	60 e0       	ldi	r22, 0x00	; 0
    2614:	11 23       	and	r17, r17
    2616:	31 f0       	breq	.+12     	; 0x2624 <display_7seg_display+0x128>
    2618:	e6 2f       	mov	r30, r22
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	e3 5c       	subi	r30, 0xC3	; 195
    261e:	f2 4f       	sbci	r31, 0xF2	; 242
    2620:	82 e0       	ldi	r24, 0x02	; 2
    2622:	80 83       	st	Z, r24
    2624:	bb 20       	and	r11, r11
    2626:	31 f0       	breq	.+12     	; 0x2634 <display_7seg_display+0x138>
    2628:	fa 01       	movw	r30, r20
    262a:	e3 5c       	subi	r30, 0xC3	; 195
    262c:	f2 4f       	sbci	r31, 0xF2	; 242
    262e:	80 81       	ld	r24, Z
    2630:	81 60       	ori	r24, 0x01	; 1
    2632:	80 83       	st	Z, r24
    2634:	0f bf       	out	0x3f, r16	; 63
    2636:	df 91       	pop	r29
    2638:	cf 91       	pop	r28
    263a:	1f 91       	pop	r17
    263c:	0f 91       	pop	r16
    263e:	ff 90       	pop	r15
    2640:	ef 90       	pop	r14
    2642:	df 90       	pop	r13
    2644:	cf 90       	pop	r12
    2646:	bf 90       	pop	r11
    2648:	08 95       	ret

0000264a <display_7seg_powerUp>:
    264a:	85 b5       	in	r24, 0x25	; 37
    264c:	85 60       	ori	r24, 0x05	; 5
    264e:	85 bd       	out	0x25, r24	; 37
    2650:	08 95       	ret

00002652 <display_7seg_powerDown>:
    2652:	85 b5       	in	r24, 0x25	; 37
    2654:	88 7f       	andi	r24, 0xF8	; 248
    2656:	85 bd       	out	0x25, r24	; 37
    2658:	81 b3       	in	r24, 0x11	; 17
    265a:	8f 60       	ori	r24, 0x0F	; 15
    265c:	81 bb       	out	0x11, r24	; 17
    265e:	08 95       	ret

00002660 <display_7seg_initialise>:
    2660:	8f 92       	push	r8
    2662:	af 92       	push	r10
    2664:	cf 92       	push	r12
    2666:	ef 92       	push	r14
    2668:	0f 93       	push	r16
    266a:	1f 93       	push	r17
    266c:	cf 93       	push	r28
    266e:	df 93       	push	r29
    2670:	ec 01       	movw	r28, r24
    2672:	80 b3       	in	r24, 0x10	; 16
    2674:	8f 60       	ori	r24, 0x0F	; 15
    2676:	80 bb       	out	0x10, r24	; 16
    2678:	81 b3       	in	r24, 0x11	; 17
    267a:	8f 60       	ori	r24, 0x0F	; 15
    267c:	81 bb       	out	0x11, r24	; 17
    267e:	20 9a       	sbi	0x04, 0	; 4
    2680:	88 e5       	ldi	r24, 0x58	; 88
    2682:	92 e1       	ldi	r25, 0x12	; 18
    2684:	9f 93       	push	r25
    2686:	8f 93       	push	r24
    2688:	81 2c       	mov	r8, r1
    268a:	a1 2c       	mov	r10, r1
    268c:	c1 2c       	mov	r12, r1
    268e:	e1 2c       	mov	r14, r1
    2690:	00 e0       	ldi	r16, 0x00	; 0
    2692:	10 e0       	ldi	r17, 0x00	; 0
    2694:	20 e2       	ldi	r18, 0x20	; 32
    2696:	40 e0       	ldi	r20, 0x00	; 0
    2698:	63 e0       	ldi	r22, 0x03	; 3
    269a:	80 e1       	ldi	r24, 0x10	; 16
    269c:	42 d1       	rcall	.+644    	; 0x2922 <spi_create>
    269e:	90 93 43 0d 	sts	0x0D43, r25	; 0x800d43 <_spi+0x1>
    26a2:	80 93 42 0d 	sts	0x0D42, r24	; 0x800d42 <_spi>
    26a6:	89 e1       	ldi	r24, 0x19	; 25
    26a8:	87 bd       	out	0x27, r24	; 39
    26aa:	84 b5       	in	r24, 0x24	; 36
    26ac:	82 60       	ori	r24, 0x02	; 2
    26ae:	84 bd       	out	0x24, r24	; 36
    26b0:	ee e6       	ldi	r30, 0x6E	; 110
    26b2:	f0 e0       	ldi	r31, 0x00	; 0
    26b4:	80 81       	ld	r24, Z
    26b6:	82 60       	ori	r24, 0x02	; 2
    26b8:	80 83       	st	Z, r24
    26ba:	cb df       	rcall	.-106    	; 0x2652 <display_7seg_powerDown>
    26bc:	d0 93 12 0d 	sts	0x0D12, r29	; 0x800d12 <_displayDoneCallBack+0x1>
    26c0:	c0 93 11 0d 	sts	0x0D11, r28	; 0x800d11 <_displayDoneCallBack>
    26c4:	0f 90       	pop	r0
    26c6:	0f 90       	pop	r0
    26c8:	df 91       	pop	r29
    26ca:	cf 91       	pop	r28
    26cc:	1f 91       	pop	r17
    26ce:	0f 91       	pop	r16
    26d0:	ef 90       	pop	r14
    26d2:	cf 90       	pop	r12
    26d4:	af 90       	pop	r10
    26d6:	8f 90       	pop	r8
    26d8:	08 95       	ret

000026da <__vector_21>:
    26da:	1f 92       	push	r1
    26dc:	0f 92       	push	r0
    26de:	0f b6       	in	r0, 0x3f	; 63
    26e0:	0f 92       	push	r0
    26e2:	11 24       	eor	r1, r1
    26e4:	0b b6       	in	r0, 0x3b	; 59
    26e6:	0f 92       	push	r0
    26e8:	2f 93       	push	r18
    26ea:	3f 93       	push	r19
    26ec:	4f 93       	push	r20
    26ee:	5f 93       	push	r21
    26f0:	6f 93       	push	r22
    26f2:	7f 93       	push	r23
    26f4:	8f 93       	push	r24
    26f6:	9f 93       	push	r25
    26f8:	af 93       	push	r26
    26fa:	bf 93       	push	r27
    26fc:	ef 93       	push	r30
    26fe:	ff 93       	push	r31
    2700:	80 91 14 0d 	lds	r24, 0x0D14	; 0x800d14 <_maxHexSegmentindex>
    2704:	88 23       	and	r24, r24
    2706:	69 f1       	breq	.+90     	; 0x2762 <__vector_21+0x88>
    2708:	20 91 15 0d 	lds	r18, 0x0D15	; 0x800d15 <_intCounter>
    270c:	30 91 16 0d 	lds	r19, 0x0D16	; 0x800d16 <_intCounter+0x1>
    2710:	25 3f       	cpi	r18, 0xF5	; 245
    2712:	91 e0       	ldi	r25, 0x01	; 1
    2714:	39 07       	cpc	r19, r25
    2716:	38 f4       	brcc	.+14     	; 0x2726 <__vector_21+0x4c>
    2718:	2f 5f       	subi	r18, 0xFF	; 255
    271a:	3f 4f       	sbci	r19, 0xFF	; 255
    271c:	30 93 16 0d 	sts	0x0D16, r19	; 0x800d16 <_intCounter+0x1>
    2720:	20 93 15 0d 	sts	0x0D15, r18	; 0x800d15 <_intCounter>
    2724:	1e c0       	rjmp	.+60     	; 0x2762 <__vector_21+0x88>
    2726:	10 92 16 0d 	sts	0x0D16, r1	; 0x800d16 <_intCounter+0x1>
    272a:	10 92 15 0d 	sts	0x0D15, r1	; 0x800d15 <_intCounter>
    272e:	e0 91 13 0d 	lds	r30, 0x0D13	; 0x800d13 <_scrollIndex>
    2732:	2e 2f       	mov	r18, r30
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	04 97       	sbiw	r24, 0x04	; 4
    273a:	28 17       	cp	r18, r24
    273c:	39 07       	cpc	r19, r25
    273e:	14 f4       	brge	.+4      	; 0x2744 <__vector_21+0x6a>
    2740:	ef 5f       	subi	r30, 0xFF	; 255
    2742:	01 c0       	rjmp	.+2      	; 0x2746 <__vector_21+0x6c>
    2744:	e0 e0       	ldi	r30, 0x00	; 0
    2746:	e0 93 13 0d 	sts	0x0D13, r30	; 0x800d13 <_scrollIndex>
    274a:	f0 e0       	ldi	r31, 0x00	; 0
    274c:	e9 5e       	subi	r30, 0xE9	; 233
    274e:	f2 4f       	sbci	r31, 0xF2	; 242
    2750:	ad e3       	ldi	r26, 0x3D	; 61
    2752:	bd e0       	ldi	r27, 0x0D	; 13
    2754:	21 e4       	ldi	r18, 0x41	; 65
    2756:	3d e0       	ldi	r19, 0x0D	; 13
    2758:	81 91       	ld	r24, Z+
    275a:	8d 93       	st	X+, r24
    275c:	a2 17       	cp	r26, r18
    275e:	b3 07       	cpc	r27, r19
    2760:	d9 f7       	brne	.-10     	; 0x2758 <__vector_21+0x7e>
    2762:	80 91 41 0d 	lds	r24, 0x0D41	; 0x800d41 <_digitNo>
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	01 96       	adiw	r24, 0x01	; 1
    276a:	83 70       	andi	r24, 0x03	; 3
    276c:	90 78       	andi	r25, 0x80	; 128
    276e:	99 23       	and	r25, r25
    2770:	24 f4       	brge	.+8      	; 0x277a <__vector_21+0xa0>
    2772:	01 97       	sbiw	r24, 0x01	; 1
    2774:	8c 6f       	ori	r24, 0xFC	; 252
    2776:	9f 6f       	ori	r25, 0xFF	; 255
    2778:	01 96       	adiw	r24, 0x01	; 1
    277a:	80 93 41 0d 	sts	0x0D41, r24	; 0x800d41 <_digitNo>
    277e:	99 27       	eor	r25, r25
    2780:	fc 01       	movw	r30, r24
    2782:	e3 5c       	subi	r30, 0xC3	; 195
    2784:	f2 4f       	sbci	r31, 0xF2	; 242
    2786:	60 81       	ld	r22, Z
    2788:	60 95       	com	r22
    278a:	80 91 42 0d 	lds	r24, 0x0D42	; 0x800d42 <_spi>
    278e:	90 91 43 0d 	lds	r25, 0x0D43	; 0x800d43 <_spi+0x1>
    2792:	9e d1       	rcall	.+828    	; 0x2ad0 <spi_sendByte>
    2794:	ff 91       	pop	r31
    2796:	ef 91       	pop	r30
    2798:	bf 91       	pop	r27
    279a:	af 91       	pop	r26
    279c:	9f 91       	pop	r25
    279e:	8f 91       	pop	r24
    27a0:	7f 91       	pop	r23
    27a2:	6f 91       	pop	r22
    27a4:	5f 91       	pop	r21
    27a6:	4f 91       	pop	r20
    27a8:	3f 91       	pop	r19
    27aa:	2f 91       	pop	r18
    27ac:	0f 90       	pop	r0
    27ae:	0b be       	out	0x3b, r0	; 59
    27b0:	0f 90       	pop	r0
    27b2:	0f be       	out	0x3f, r0	; 63
    27b4:	0f 90       	pop	r0
    27b6:	1f 90       	pop	r1
    27b8:	18 95       	reti

000027ba <rc_servo_setPosition>:
    27ba:	65 36       	cpi	r22, 0x65	; 101
    27bc:	0c f0       	brlt	.+2      	; 0x27c0 <rc_servo_setPosition+0x6>
    27be:	64 e6       	ldi	r22, 0x64	; 100
    27c0:	6c 39       	cpi	r22, 0x9C	; 156
    27c2:	0c f4       	brge	.+2      	; 0x27c6 <rc_servo_setPosition+0xc>
    27c4:	6c e9       	ldi	r22, 0x9C	; 156
    27c6:	96 ef       	ldi	r25, 0xF6	; 246
    27c8:	69 02       	muls	r22, r25
    27ca:	b0 01       	movw	r22, r0
    27cc:	11 24       	eor	r1, r1
    27ce:	68 54       	subi	r22, 0x48	; 72
    27d0:	74 4f       	sbci	r23, 0xF4	; 244
    27d2:	81 11       	cpse	r24, r1
    27d4:	05 c0       	rjmp	.+10     	; 0x27e0 <rc_servo_setPosition+0x26>
    27d6:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    27da:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
    27de:	08 95       	ret
    27e0:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    27e4:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
    27e8:	08 95       	ret

000027ea <rc_servo_initialise>:
    27ea:	ea e0       	ldi	r30, 0x0A	; 10
    27ec:	f1 e0       	ldi	r31, 0x01	; 1
    27ee:	80 81       	ld	r24, Z
    27f0:	88 61       	ori	r24, 0x18	; 24
    27f2:	80 83       	st	Z, r24
    27f4:	8f e3       	ldi	r24, 0x3F	; 63
    27f6:	9c e9       	ldi	r25, 0x9C	; 156
    27f8:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
    27fc:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
    2800:	60 e0       	ldi	r22, 0x00	; 0
    2802:	80 e0       	ldi	r24, 0x00	; 0
    2804:	da df       	rcall	.-76     	; 0x27ba <rc_servo_setPosition>
    2806:	60 e0       	ldi	r22, 0x00	; 0
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	d7 df       	rcall	.-82     	; 0x27ba <rc_servo_setPosition>
    280c:	e0 e2       	ldi	r30, 0x20	; 32
    280e:	f1 e0       	ldi	r31, 0x01	; 1
    2810:	80 81       	ld	r24, Z
    2812:	82 6a       	ori	r24, 0xA2	; 162
    2814:	80 83       	st	Z, r24
    2816:	e1 e2       	ldi	r30, 0x21	; 33
    2818:	f1 e0       	ldi	r31, 0x01	; 1
    281a:	80 81       	ld	r24, Z
    281c:	8a 61       	ori	r24, 0x1A	; 26
    281e:	80 83       	st	Z, r24
    2820:	08 95       	ret

00002822 <usart_getchar>:
    2822:	cf 93       	push	r28
    2824:	df 93       	push	r29
    2826:	1f 92       	push	r1
    2828:	cd b7       	in	r28, 0x3d	; 61
    282a:	de b7       	in	r29, 0x3e	; 62
    282c:	be 01       	movw	r22, r28
    282e:	6f 5f       	subi	r22, 0xFF	; 255
    2830:	7f 4f       	sbci	r23, 0xFF	; 255
    2832:	80 91 44 0d 	lds	r24, 0x0D44	; 0x800d44 <_com_serial_instance>
    2836:	90 91 45 0d 	lds	r25, 0x0D45	; 0x800d45 <_com_serial_instance+0x1>
    283a:	40 d3       	rcall	.+1664   	; 0x2ebc <serial_getByte>
    283c:	81 11       	cpse	r24, r1
    283e:	f6 cf       	rjmp	.-20     	; 0x282c <usart_getchar+0xa>
    2840:	89 81       	ldd	r24, Y+1	; 0x01
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	0f 90       	pop	r0
    2846:	df 91       	pop	r29
    2848:	cf 91       	pop	r28
    284a:	08 95       	ret

0000284c <usart_putchar>:
    284c:	68 2f       	mov	r22, r24
    284e:	80 91 44 0d 	lds	r24, 0x0D44	; 0x800d44 <_com_serial_instance>
    2852:	90 91 45 0d 	lds	r25, 0x0D45	; 0x800d45 <_com_serial_instance+0x1>
    2856:	07 d3       	rcall	.+1550   	; 0x2e66 <serial_sendByte>
    2858:	80 e0       	ldi	r24, 0x00	; 0
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	08 95       	ret

0000285e <stdio_initialise>:
    285e:	8f 92       	push	r8
    2860:	9f 92       	push	r9
    2862:	af 92       	push	r10
    2864:	cf 92       	push	r12
    2866:	ef 92       	push	r14
    2868:	0f 93       	push	r16
    286a:	81 2c       	mov	r8, r1
    286c:	91 2c       	mov	r9, r1
    286e:	68 94       	set
    2870:	aa 24       	eor	r10, r10
    2872:	a7 f8       	bld	r10, 7
    2874:	68 94       	set
    2876:	cc 24       	eor	r12, r12
    2878:	c7 f8       	bld	r12, 7
    287a:	e1 2c       	mov	r14, r1
    287c:	00 e0       	ldi	r16, 0x00	; 0
    287e:	23 e0       	ldi	r18, 0x03	; 3
    2880:	40 e0       	ldi	r20, 0x00	; 0
    2882:	51 ee       	ldi	r21, 0xE1	; 225
    2884:	60 e0       	ldi	r22, 0x00	; 0
    2886:	70 e0       	ldi	r23, 0x00	; 0
    2888:	52 d2       	rcall	.+1188   	; 0x2d2e <serial_create>
    288a:	90 93 45 0d 	sts	0x0D45, r25	; 0x800d45 <_com_serial_instance+0x1>
    288e:	80 93 44 0d 	sts	0x0D44, r24	; 0x800d44 <_com_serial_instance>
    2892:	e8 e5       	ldi	r30, 0x58	; 88
    2894:	fd e0       	ldi	r31, 0x0D	; 13
    2896:	87 e0       	ldi	r24, 0x07	; 7
    2898:	92 e0       	ldi	r25, 0x02	; 2
    289a:	91 83       	std	Z+1, r25	; 0x01
    289c:	80 83       	st	Z, r24
    289e:	93 83       	std	Z+3, r25	; 0x03
    28a0:	82 83       	std	Z+2, r24	; 0x02
    28a2:	0f 91       	pop	r16
    28a4:	ef 90       	pop	r14
    28a6:	cf 90       	pop	r12
    28a8:	af 90       	pop	r10
    28aa:	9f 90       	pop	r9
    28ac:	8f 90       	pop	r8
    28ae:	08 95       	ret

000028b0 <_select_instance>:
    28b0:	e0 91 47 0d 	lds	r30, 0x0D47	; 0x800d47 <_this>
    28b4:	f0 91 48 0d 	lds	r31, 0x0D48	; 0x800d48 <_this+0x1>
    28b8:	30 97       	sbiw	r30, 0x00	; 0
    28ba:	f9 f0       	breq	.+62     	; 0x28fa <_select_instance+0x4a>
    28bc:	a0 81       	ld	r26, Z
    28be:	b1 81       	ldd	r27, Z+1	; 0x01
    28c0:	10 97       	sbiw	r26, 0x00	; 0
    28c2:	d9 f0       	breq	.+54     	; 0x28fa <_select_instance+0x4a>
    28c4:	23 81       	ldd	r18, Z+3	; 0x03
    28c6:	21 30       	cpi	r18, 0x01	; 1
    28c8:	69 f4       	brne	.+26     	; 0x28e4 <_select_instance+0x34>
    28ca:	4c 91       	ld	r20, X
    28cc:	21 e0       	ldi	r18, 0x01	; 1
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	02 80       	ldd	r0, Z+2	; 0x02
    28d2:	02 c0       	rjmp	.+4      	; 0x28d8 <_select_instance+0x28>
    28d4:	22 0f       	add	r18, r18
    28d6:	33 1f       	adc	r19, r19
    28d8:	0a 94       	dec	r0
    28da:	e2 f7       	brpl	.-8      	; 0x28d4 <_select_instance+0x24>
    28dc:	20 95       	com	r18
    28de:	24 23       	and	r18, r20
    28e0:	2c 93       	st	X, r18
    28e2:	0b c0       	rjmp	.+22     	; 0x28fa <_select_instance+0x4a>
    28e4:	4c 91       	ld	r20, X
    28e6:	21 e0       	ldi	r18, 0x01	; 1
    28e8:	30 e0       	ldi	r19, 0x00	; 0
    28ea:	02 80       	ldd	r0, Z+2	; 0x02
    28ec:	02 c0       	rjmp	.+4      	; 0x28f2 <_select_instance+0x42>
    28ee:	22 0f       	add	r18, r18
    28f0:	33 1f       	adc	r19, r19
    28f2:	0a 94       	dec	r0
    28f4:	e2 f7       	brpl	.-8      	; 0x28ee <_select_instance+0x3e>
    28f6:	24 2b       	or	r18, r20
    28f8:	2c 93       	st	X, r18
    28fa:	90 93 48 0d 	sts	0x0D48, r25	; 0x800d48 <_this+0x1>
    28fe:	80 93 47 0d 	sts	0x0D47, r24	; 0x800d47 <_this>
    2902:	00 97       	sbiw	r24, 0x00	; 0
    2904:	69 f0       	breq	.+26     	; 0x2920 <_select_instance+0x70>
    2906:	10 92 49 0d 	sts	0x0D49, r1	; 0x800d49 <_spi_active>
    290a:	2c b5       	in	r18, 0x2c	; 44
    290c:	2f 73       	andi	r18, 0x3F	; 63
    290e:	2c bd       	out	0x2c, r18	; 44
    2910:	fc 01       	movw	r30, r24
    2912:	24 81       	ldd	r18, Z+4	; 0x04
    2914:	2c bd       	out	0x2c, r18	; 44
    2916:	85 81       	ldd	r24, Z+5	; 0x05
    2918:	8d bd       	out	0x2d, r24	; 45
    291a:	8c b5       	in	r24, 0x2c	; 44
    291c:	80 64       	ori	r24, 0x40	; 64
    291e:	8c bd       	out	0x2c, r24	; 44
    2920:	08 95       	ret

00002922 <spi_create>:
    2922:	4f 92       	push	r4
    2924:	5f 92       	push	r5
    2926:	6f 92       	push	r6
    2928:	7f 92       	push	r7
    292a:	8f 92       	push	r8
    292c:	9f 92       	push	r9
    292e:	af 92       	push	r10
    2930:	bf 92       	push	r11
    2932:	cf 92       	push	r12
    2934:	df 92       	push	r13
    2936:	ef 92       	push	r14
    2938:	ff 92       	push	r15
    293a:	0f 93       	push	r16
    293c:	1f 93       	push	r17
    293e:	cf 93       	push	r28
    2940:	df 93       	push	r29
    2942:	cd b7       	in	r28, 0x3d	; 61
    2944:	de b7       	in	r29, 0x3e	; 62
    2946:	98 2e       	mov	r9, r24
    2948:	b6 2e       	mov	r11, r22
    294a:	d4 2e       	mov	r13, r20
    294c:	f2 2e       	mov	r15, r18
    294e:	80 91 46 0d 	lds	r24, 0x0D46	; 0x800d46 <_initialised>
    2952:	81 11       	cpse	r24, r1
    2954:	06 c0       	rjmp	.+12     	; 0x2962 <spi_create+0x40>
    2956:	84 b1       	in	r24, 0x04	; 4
    2958:	87 60       	ori	r24, 0x07	; 7
    295a:	84 b9       	out	0x04, r24	; 4
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	80 93 46 0d 	sts	0x0D46, r24	; 0x800d46 <_initialised>
    2962:	8c e0       	ldi	r24, 0x0C	; 12
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <malloc>
    296a:	3c 01       	movw	r6, r24
    296c:	dc 01       	movw	r26, r24
    296e:	11 96       	adiw	r26, 0x01	; 1
    2970:	1c 93       	st	X, r17
    2972:	0e 93       	st	-X, r16
    2974:	12 96       	adiw	r26, 0x02	; 2
    2976:	ec 92       	st	X, r14
    2978:	12 97       	sbiw	r26, 0x02	; 2
    297a:	13 96       	adiw	r26, 0x03	; 3
    297c:	cc 92       	st	X, r12
    297e:	13 97       	sbiw	r26, 0x03	; 3
    2980:	8d 2d       	mov	r24, r13
    2982:	88 0f       	add	r24, r24
    2984:	88 0f       	add	r24, r24
    2986:	f8 2a       	or	r15, r24
    2988:	eb 2d       	mov	r30, r11
    298a:	f0 e0       	ldi	r31, 0x00	; 0
    298c:	ee 5a       	subi	r30, 0xAE	; 174
    298e:	fd 4f       	sbci	r31, 0xFD	; 253
    2990:	80 81       	ld	r24, Z
    2992:	98 2a       	or	r9, r24
    2994:	8f 2d       	mov	r24, r15
    2996:	89 29       	or	r24, r9
    2998:	14 96       	adiw	r26, 0x04	; 4
    299a:	8c 93       	st	X, r24
    299c:	b3 e0       	ldi	r27, 0x03	; 3
    299e:	bb 15       	cp	r27, r11
    29a0:	18 f4       	brcc	.+6      	; 0x29a8 <spi_create+0x86>
    29a2:	81 e0       	ldi	r24, 0x01	; 1
    29a4:	f3 01       	movw	r30, r6
    29a6:	85 83       	std	Z+5, r24	; 0x05
    29a8:	a1 10       	cpse	r10, r1
    29aa:	06 c0       	rjmp	.+12     	; 0x29b8 <spi_create+0x96>
    29ac:	d3 01       	movw	r26, r6
    29ae:	19 96       	adiw	r26, 0x09	; 9
    29b0:	1c 92       	st	X, r1
    29b2:	1e 92       	st	-X, r1
    29b4:	18 97       	sbiw	r26, 0x08	; 8
    29b6:	14 c0       	rjmp	.+40     	; 0x29e0 <spi_create+0xbe>
    29b8:	6a 2d       	mov	r22, r10
    29ba:	70 e0       	ldi	r23, 0x00	; 0
    29bc:	84 e0       	ldi	r24, 0x04	; 4
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <calloc>
    29c4:	2c 01       	movw	r4, r24
    29c6:	61 e0       	ldi	r22, 0x01	; 1
    29c8:	70 e0       	ldi	r23, 0x00	; 0
    29ca:	86 e0       	ldi	r24, 0x06	; 6
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <calloc>
    29d2:	6c 01       	movw	r12, r24
    29d4:	4a 2d       	mov	r20, r10
    29d6:	b2 01       	movw	r22, r4
    29d8:	8b d1       	rcall	.+790    	; 0x2cf0 <fifo_init>
    29da:	f3 01       	movw	r30, r6
    29dc:	d1 86       	std	Z+9, r13	; 0x09
    29de:	c0 86       	std	Z+8, r12	; 0x08
    29e0:	81 10       	cpse	r8, r1
    29e2:	06 c0       	rjmp	.+12     	; 0x29f0 <spi_create+0xce>
    29e4:	d3 01       	movw	r26, r6
    29e6:	17 96       	adiw	r26, 0x07	; 7
    29e8:	1c 92       	st	X, r1
    29ea:	1e 92       	st	-X, r1
    29ec:	16 97       	sbiw	r26, 0x06	; 6
    29ee:	14 c0       	rjmp	.+40     	; 0x2a18 <spi_create+0xf6>
    29f0:	68 2d       	mov	r22, r8
    29f2:	70 e0       	ldi	r23, 0x00	; 0
    29f4:	84 e0       	ldi	r24, 0x04	; 4
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <calloc>
    29fc:	5c 01       	movw	r10, r24
    29fe:	61 e0       	ldi	r22, 0x01	; 1
    2a00:	70 e0       	ldi	r23, 0x00	; 0
    2a02:	86 e0       	ldi	r24, 0x06	; 6
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <calloc>
    2a0a:	6c 01       	movw	r12, r24
    2a0c:	48 2d       	mov	r20, r8
    2a0e:	b5 01       	movw	r22, r10
    2a10:	6f d1       	rcall	.+734    	; 0x2cf0 <fifo_init>
    2a12:	f3 01       	movw	r30, r6
    2a14:	d7 82       	std	Z+7, r13	; 0x07
    2a16:	c6 82       	std	Z+6, r12	; 0x06
    2a18:	8c 89       	ldd	r24, Y+20	; 0x14
    2a1a:	9d 89       	ldd	r25, Y+21	; 0x15
    2a1c:	d3 01       	movw	r26, r6
    2a1e:	1b 96       	adiw	r26, 0x0b	; 11
    2a20:	9c 93       	st	X, r25
    2a22:	8e 93       	st	-X, r24
    2a24:	1a 97       	sbiw	r26, 0x0a	; 10
    2a26:	01 15       	cp	r16, r1
    2a28:	11 05       	cpc	r17, r1
    2a2a:	59 f0       	breq	.+22     	; 0x2a42 <spi_create+0x120>
    2a2c:	f8 01       	movw	r30, r16
    2a2e:	22 91       	ld	r18, -Z
    2a30:	81 e0       	ldi	r24, 0x01	; 1
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	02 c0       	rjmp	.+4      	; 0x2a3a <spi_create+0x118>
    2a36:	88 0f       	add	r24, r24
    2a38:	99 1f       	adc	r25, r25
    2a3a:	ea 94       	dec	r14
    2a3c:	e2 f7       	brpl	.-8      	; 0x2a36 <spi_create+0x114>
    2a3e:	82 2b       	or	r24, r18
    2a40:	80 83       	st	Z, r24
    2a42:	2f b7       	in	r18, 0x3f	; 63
    2a44:	f8 94       	cli
    2a46:	40 91 47 0d 	lds	r20, 0x0D47	; 0x800d47 <_this>
    2a4a:	50 91 48 0d 	lds	r21, 0x0D48	; 0x800d48 <_this+0x1>
    2a4e:	70 92 48 0d 	sts	0x0D48, r7	; 0x800d48 <_this+0x1>
    2a52:	60 92 47 0d 	sts	0x0D47, r6	; 0x800d47 <_this>
    2a56:	d3 01       	movw	r26, r6
    2a58:	ed 91       	ld	r30, X+
    2a5a:	fc 91       	ld	r31, X
    2a5c:	11 97       	sbiw	r26, 0x01	; 1
    2a5e:	30 97       	sbiw	r30, 0x00	; 0
    2a60:	01 f1       	breq	.+64     	; 0x2aa2 <spi_create+0x180>
    2a62:	13 96       	adiw	r26, 0x03	; 3
    2a64:	8c 91       	ld	r24, X
    2a66:	13 97       	sbiw	r26, 0x03	; 3
    2a68:	81 30       	cpi	r24, 0x01	; 1
    2a6a:	71 f4       	brne	.+28     	; 0x2a88 <spi_create+0x166>
    2a6c:	30 81       	ld	r19, Z
    2a6e:	81 e0       	ldi	r24, 0x01	; 1
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	12 96       	adiw	r26, 0x02	; 2
    2a74:	0c 90       	ld	r0, X
    2a76:	02 c0       	rjmp	.+4      	; 0x2a7c <spi_create+0x15a>
    2a78:	88 0f       	add	r24, r24
    2a7a:	99 1f       	adc	r25, r25
    2a7c:	0a 94       	dec	r0
    2a7e:	e2 f7       	brpl	.-8      	; 0x2a78 <spi_create+0x156>
    2a80:	80 95       	com	r24
    2a82:	83 23       	and	r24, r19
    2a84:	80 83       	st	Z, r24
    2a86:	0d c0       	rjmp	.+26     	; 0x2aa2 <spi_create+0x180>
    2a88:	30 81       	ld	r19, Z
    2a8a:	81 e0       	ldi	r24, 0x01	; 1
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	d3 01       	movw	r26, r6
    2a90:	12 96       	adiw	r26, 0x02	; 2
    2a92:	0c 90       	ld	r0, X
    2a94:	02 c0       	rjmp	.+4      	; 0x2a9a <spi_create+0x178>
    2a96:	88 0f       	add	r24, r24
    2a98:	99 1f       	adc	r25, r25
    2a9a:	0a 94       	dec	r0
    2a9c:	e2 f7       	brpl	.-8      	; 0x2a96 <spi_create+0x174>
    2a9e:	83 2b       	or	r24, r19
    2aa0:	80 83       	st	Z, r24
    2aa2:	50 93 48 0d 	sts	0x0D48, r21	; 0x800d48 <_this+0x1>
    2aa6:	40 93 47 0d 	sts	0x0D47, r20	; 0x800d47 <_this>
    2aaa:	2f bf       	out	0x3f, r18	; 63
    2aac:	c3 01       	movw	r24, r6
    2aae:	df 91       	pop	r29
    2ab0:	cf 91       	pop	r28
    2ab2:	1f 91       	pop	r17
    2ab4:	0f 91       	pop	r16
    2ab6:	ff 90       	pop	r15
    2ab8:	ef 90       	pop	r14
    2aba:	df 90       	pop	r13
    2abc:	cf 90       	pop	r12
    2abe:	bf 90       	pop	r11
    2ac0:	af 90       	pop	r10
    2ac2:	9f 90       	pop	r9
    2ac4:	8f 90       	pop	r8
    2ac6:	7f 90       	pop	r7
    2ac8:	6f 90       	pop	r6
    2aca:	5f 90       	pop	r5
    2acc:	4f 90       	pop	r4
    2ace:	08 95       	ret

00002ad0 <spi_sendByte>:
    2ad0:	1f 93       	push	r17
    2ad2:	cf 93       	push	r28
    2ad4:	df 93       	push	r29
    2ad6:	00 97       	sbiw	r24, 0x00	; 0
    2ad8:	09 f4       	brne	.+2      	; 0x2adc <spi_sendByte+0xc>
    2ada:	6a c0       	rjmp	.+212    	; 0x2bb0 <spi_sendByte+0xe0>
    2adc:	16 2f       	mov	r17, r22
    2ade:	ec 01       	movw	r28, r24
    2ae0:	80 91 47 0d 	lds	r24, 0x0D47	; 0x800d47 <_this>
    2ae4:	90 91 48 0d 	lds	r25, 0x0D48	; 0x800d48 <_this+0x1>
    2ae8:	c8 17       	cp	r28, r24
    2aea:	d9 07       	cpc	r29, r25
    2aec:	11 f0       	breq	.+4      	; 0x2af2 <spi_sendByte+0x22>
    2aee:	ce 01       	movw	r24, r28
    2af0:	df de       	rcall	.-578    	; 0x28b0 <_select_instance>
    2af2:	8f b7       	in	r24, 0x3f	; 63
    2af4:	2f b7       	in	r18, 0x3f	; 63
    2af6:	f8 94       	cli
    2af8:	80 91 49 0d 	lds	r24, 0x0D49	; 0x800d49 <_spi_active>
    2afc:	81 11       	cpse	r24, r1
    2afe:	31 c0       	rjmp	.+98     	; 0x2b62 <spi_sendByte+0x92>
    2b00:	81 e0       	ldi	r24, 0x01	; 1
    2b02:	80 93 49 0d 	sts	0x0D49, r24	; 0x800d49 <_spi_active>
    2b06:	a0 91 47 0d 	lds	r26, 0x0D47	; 0x800d47 <_this>
    2b0a:	b0 91 48 0d 	lds	r27, 0x0D48	; 0x800d48 <_this+0x1>
    2b0e:	ed 91       	ld	r30, X+
    2b10:	fc 91       	ld	r31, X
    2b12:	11 97       	sbiw	r26, 0x01	; 1
    2b14:	30 97       	sbiw	r30, 0x00	; 0
    2b16:	f9 f0       	breq	.+62     	; 0x2b56 <spi_sendByte+0x86>
    2b18:	13 96       	adiw	r26, 0x03	; 3
    2b1a:	8c 91       	ld	r24, X
    2b1c:	13 97       	sbiw	r26, 0x03	; 3
    2b1e:	81 30       	cpi	r24, 0x01	; 1
    2b20:	69 f4       	brne	.+26     	; 0x2b3c <spi_sendByte+0x6c>
    2b22:	30 81       	ld	r19, Z
    2b24:	81 e0       	ldi	r24, 0x01	; 1
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	12 96       	adiw	r26, 0x02	; 2
    2b2a:	0c 90       	ld	r0, X
    2b2c:	02 c0       	rjmp	.+4      	; 0x2b32 <spi_sendByte+0x62>
    2b2e:	88 0f       	add	r24, r24
    2b30:	99 1f       	adc	r25, r25
    2b32:	0a 94       	dec	r0
    2b34:	e2 f7       	brpl	.-8      	; 0x2b2e <spi_sendByte+0x5e>
    2b36:	83 2b       	or	r24, r19
    2b38:	80 83       	st	Z, r24
    2b3a:	0d c0       	rjmp	.+26     	; 0x2b56 <spi_sendByte+0x86>
    2b3c:	30 81       	ld	r19, Z
    2b3e:	81 e0       	ldi	r24, 0x01	; 1
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	12 96       	adiw	r26, 0x02	; 2
    2b44:	0c 90       	ld	r0, X
    2b46:	02 c0       	rjmp	.+4      	; 0x2b4c <spi_sendByte+0x7c>
    2b48:	88 0f       	add	r24, r24
    2b4a:	99 1f       	adc	r25, r25
    2b4c:	0a 94       	dec	r0
    2b4e:	e2 f7       	brpl	.-8      	; 0x2b48 <spi_sendByte+0x78>
    2b50:	80 95       	com	r24
    2b52:	83 23       	and	r24, r19
    2b54:	80 83       	st	Z, r24
    2b56:	8c b5       	in	r24, 0x2c	; 44
    2b58:	80 68       	ori	r24, 0x80	; 128
    2b5a:	8c bd       	out	0x2c, r24	; 44
    2b5c:	1e bd       	out	0x2e, r17	; 46
    2b5e:	80 e0       	ldi	r24, 0x00	; 0
    2b60:	25 c0       	rjmp	.+74     	; 0x2bac <spi_sendByte+0xdc>
    2b62:	ee 81       	ldd	r30, Y+6	; 0x06
    2b64:	ff 81       	ldd	r31, Y+7	; 0x07
    2b66:	30 97       	sbiw	r30, 0x00	; 0
    2b68:	e1 f0       	breq	.+56     	; 0x2ba2 <spi_sendByte+0xd2>
    2b6a:	34 81       	ldd	r19, Z+4	; 0x04
    2b6c:	83 81       	ldd	r24, Z+3	; 0x03
    2b6e:	42 81       	ldd	r20, Z+2	; 0x02
    2b70:	95 81       	ldd	r25, Z+5	; 0x05
    2b72:	84 1b       	sub	r24, r20
    2b74:	89 23       	and	r24, r25
    2b76:	38 17       	cp	r19, r24
    2b78:	b1 f0       	breq	.+44     	; 0x2ba6 <spi_sendByte+0xd6>
    2b7a:	83 81       	ldd	r24, Z+3	; 0x03
    2b7c:	42 81       	ldd	r20, Z+2	; 0x02
    2b7e:	84 1b       	sub	r24, r20
    2b80:	89 23       	and	r24, r25
    2b82:	38 17       	cp	r19, r24
    2b84:	91 f0       	breq	.+36     	; 0x2baa <spi_sendByte+0xda>
    2b86:	83 81       	ldd	r24, Z+3	; 0x03
    2b88:	96 95       	lsr	r25
    2b8a:	98 23       	and	r25, r24
    2b8c:	a0 81       	ld	r26, Z
    2b8e:	b1 81       	ldd	r27, Z+1	; 0x01
    2b90:	a9 0f       	add	r26, r25
    2b92:	b1 1d       	adc	r27, r1
    2b94:	1c 93       	st	X, r17
    2b96:	8f 5f       	subi	r24, 0xFF	; 255
    2b98:	95 81       	ldd	r25, Z+5	; 0x05
    2b9a:	89 23       	and	r24, r25
    2b9c:	83 83       	std	Z+3, r24	; 0x03
    2b9e:	80 e0       	ldi	r24, 0x00	; 0
    2ba0:	05 c0       	rjmp	.+10     	; 0x2bac <spi_sendByte+0xdc>
    2ba2:	82 e0       	ldi	r24, 0x02	; 2
    2ba4:	03 c0       	rjmp	.+6      	; 0x2bac <spi_sendByte+0xdc>
    2ba6:	81 e0       	ldi	r24, 0x01	; 1
    2ba8:	01 c0       	rjmp	.+2      	; 0x2bac <spi_sendByte+0xdc>
    2baa:	80 e0       	ldi	r24, 0x00	; 0
    2bac:	2f bf       	out	0x3f, r18	; 63
    2bae:	01 c0       	rjmp	.+2      	; 0x2bb2 <spi_sendByte+0xe2>
    2bb0:	83 e0       	ldi	r24, 0x03	; 3
    2bb2:	df 91       	pop	r29
    2bb4:	cf 91       	pop	r28
    2bb6:	1f 91       	pop	r17
    2bb8:	08 95       	ret

00002bba <__vector_24>:
    2bba:	1f 92       	push	r1
    2bbc:	0f 92       	push	r0
    2bbe:	0f b6       	in	r0, 0x3f	; 63
    2bc0:	0f 92       	push	r0
    2bc2:	11 24       	eor	r1, r1
    2bc4:	0b b6       	in	r0, 0x3b	; 59
    2bc6:	0f 92       	push	r0
    2bc8:	2f 93       	push	r18
    2bca:	3f 93       	push	r19
    2bcc:	4f 93       	push	r20
    2bce:	5f 93       	push	r21
    2bd0:	6f 93       	push	r22
    2bd2:	7f 93       	push	r23
    2bd4:	8f 93       	push	r24
    2bd6:	9f 93       	push	r25
    2bd8:	af 93       	push	r26
    2bda:	bf 93       	push	r27
    2bdc:	cf 93       	push	r28
    2bde:	df 93       	push	r29
    2be0:	ef 93       	push	r30
    2be2:	ff 93       	push	r31
    2be4:	6e b5       	in	r22, 0x2e	; 46
    2be6:	a0 91 47 0d 	lds	r26, 0x0D47	; 0x800d47 <_this>
    2bea:	b0 91 48 0d 	lds	r27, 0x0D48	; 0x800d48 <_this+0x1>
    2bee:	18 96       	adiw	r26, 0x08	; 8
    2bf0:	ed 91       	ld	r30, X+
    2bf2:	fc 91       	ld	r31, X
    2bf4:	19 97       	sbiw	r26, 0x09	; 9
    2bf6:	30 97       	sbiw	r30, 0x00	; 0
    2bf8:	a1 f0       	breq	.+40     	; 0x2c22 <__vector_24+0x68>
    2bfa:	83 81       	ldd	r24, Z+3	; 0x03
    2bfc:	22 81       	ldd	r18, Z+2	; 0x02
    2bfe:	95 81       	ldd	r25, Z+5	; 0x05
    2c00:	82 1b       	sub	r24, r18
    2c02:	89 23       	and	r24, r25
    2c04:	24 81       	ldd	r18, Z+4	; 0x04
    2c06:	82 17       	cp	r24, r18
    2c08:	61 f0       	breq	.+24     	; 0x2c22 <__vector_24+0x68>
    2c0a:	83 81       	ldd	r24, Z+3	; 0x03
    2c0c:	96 95       	lsr	r25
    2c0e:	98 23       	and	r25, r24
    2c10:	c0 81       	ld	r28, Z
    2c12:	d1 81       	ldd	r29, Z+1	; 0x01
    2c14:	c9 0f       	add	r28, r25
    2c16:	d1 1d       	adc	r29, r1
    2c18:	68 83       	st	Y, r22
    2c1a:	8f 5f       	subi	r24, 0xFF	; 255
    2c1c:	95 81       	ldd	r25, Z+5	; 0x05
    2c1e:	89 23       	and	r24, r25
    2c20:	83 83       	std	Z+3, r24	; 0x03
    2c22:	16 96       	adiw	r26, 0x06	; 6
    2c24:	ed 91       	ld	r30, X+
    2c26:	fc 91       	ld	r31, X
    2c28:	17 97       	sbiw	r26, 0x07	; 7
    2c2a:	30 97       	sbiw	r30, 0x00	; 0
    2c2c:	99 f0       	breq	.+38     	; 0x2c54 <__vector_24+0x9a>
    2c2e:	93 81       	ldd	r25, Z+3	; 0x03
    2c30:	82 81       	ldd	r24, Z+2	; 0x02
    2c32:	98 17       	cp	r25, r24
    2c34:	79 f0       	breq	.+30     	; 0x2c54 <__vector_24+0x9a>
    2c36:	92 81       	ldd	r25, Z+2	; 0x02
    2c38:	85 81       	ldd	r24, Z+5	; 0x05
    2c3a:	28 2f       	mov	r18, r24
    2c3c:	26 95       	lsr	r18
    2c3e:	29 23       	and	r18, r25
    2c40:	a0 81       	ld	r26, Z
    2c42:	b1 81       	ldd	r27, Z+1	; 0x01
    2c44:	a2 0f       	add	r26, r18
    2c46:	b1 1d       	adc	r27, r1
    2c48:	2c 91       	ld	r18, X
    2c4a:	9f 5f       	subi	r25, 0xFF	; 255
    2c4c:	89 23       	and	r24, r25
    2c4e:	82 83       	std	Z+2, r24	; 0x02
    2c50:	2e bd       	out	0x2e, r18	; 46
    2c52:	2d c0       	rjmp	.+90     	; 0x2cae <__vector_24+0xf4>
    2c54:	8c b5       	in	r24, 0x2c	; 44
    2c56:	8f 77       	andi	r24, 0x7F	; 127
    2c58:	8c bd       	out	0x2c, r24	; 44
    2c5a:	10 92 49 0d 	sts	0x0D49, r1	; 0x800d49 <_spi_active>
    2c5e:	a0 91 47 0d 	lds	r26, 0x0D47	; 0x800d47 <_this>
    2c62:	b0 91 48 0d 	lds	r27, 0x0D48	; 0x800d48 <_this+0x1>
    2c66:	ed 91       	ld	r30, X+
    2c68:	fc 91       	ld	r31, X
    2c6a:	11 97       	sbiw	r26, 0x01	; 1
    2c6c:	30 97       	sbiw	r30, 0x00	; 0
    2c6e:	f9 f0       	breq	.+62     	; 0x2cae <__vector_24+0xf4>
    2c70:	13 96       	adiw	r26, 0x03	; 3
    2c72:	8c 91       	ld	r24, X
    2c74:	13 97       	sbiw	r26, 0x03	; 3
    2c76:	81 30       	cpi	r24, 0x01	; 1
    2c78:	71 f4       	brne	.+28     	; 0x2c96 <__vector_24+0xdc>
    2c7a:	20 81       	ld	r18, Z
    2c7c:	81 e0       	ldi	r24, 0x01	; 1
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	12 96       	adiw	r26, 0x02	; 2
    2c82:	0c 90       	ld	r0, X
    2c84:	02 c0       	rjmp	.+4      	; 0x2c8a <__vector_24+0xd0>
    2c86:	88 0f       	add	r24, r24
    2c88:	99 1f       	adc	r25, r25
    2c8a:	0a 94       	dec	r0
    2c8c:	e2 f7       	brpl	.-8      	; 0x2c86 <__vector_24+0xcc>
    2c8e:	80 95       	com	r24
    2c90:	82 23       	and	r24, r18
    2c92:	80 83       	st	Z, r24
    2c94:	0c c0       	rjmp	.+24     	; 0x2cae <__vector_24+0xf4>
    2c96:	20 81       	ld	r18, Z
    2c98:	81 e0       	ldi	r24, 0x01	; 1
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	12 96       	adiw	r26, 0x02	; 2
    2c9e:	0c 90       	ld	r0, X
    2ca0:	02 c0       	rjmp	.+4      	; 0x2ca6 <__vector_24+0xec>
    2ca2:	88 0f       	add	r24, r24
    2ca4:	99 1f       	adc	r25, r25
    2ca6:	0a 94       	dec	r0
    2ca8:	e2 f7       	brpl	.-8      	; 0x2ca2 <__vector_24+0xe8>
    2caa:	82 2b       	or	r24, r18
    2cac:	80 83       	st	Z, r24
    2cae:	80 91 47 0d 	lds	r24, 0x0D47	; 0x800d47 <_this>
    2cb2:	90 91 48 0d 	lds	r25, 0x0D48	; 0x800d48 <_this+0x1>
    2cb6:	dc 01       	movw	r26, r24
    2cb8:	1a 96       	adiw	r26, 0x0a	; 10
    2cba:	ed 91       	ld	r30, X+
    2cbc:	fc 91       	ld	r31, X
    2cbe:	1b 97       	sbiw	r26, 0x0b	; 11
    2cc0:	30 97       	sbiw	r30, 0x00	; 0
    2cc2:	09 f0       	breq	.+2      	; 0x2cc6 <__vector_24+0x10c>
    2cc4:	19 95       	eicall
    2cc6:	ff 91       	pop	r31
    2cc8:	ef 91       	pop	r30
    2cca:	df 91       	pop	r29
    2ccc:	cf 91       	pop	r28
    2cce:	bf 91       	pop	r27
    2cd0:	af 91       	pop	r26
    2cd2:	9f 91       	pop	r25
    2cd4:	8f 91       	pop	r24
    2cd6:	7f 91       	pop	r23
    2cd8:	6f 91       	pop	r22
    2cda:	5f 91       	pop	r21
    2cdc:	4f 91       	pop	r20
    2cde:	3f 91       	pop	r19
    2ce0:	2f 91       	pop	r18
    2ce2:	0f 90       	pop	r0
    2ce4:	0b be       	out	0x3b, r0	; 59
    2ce6:	0f 90       	pop	r0
    2ce8:	0f be       	out	0x3f, r0	; 63
    2cea:	0f 90       	pop	r0
    2cec:	1f 90       	pop	r1
    2cee:	18 95       	reti

00002cf0 <fifo_init>:
    2cf0:	fc 01       	movw	r30, r24
    2cf2:	41 11       	cpse	r20, r1
    2cf4:	02 c0       	rjmp	.+4      	; 0x2cfa <fifo_init+0xa>
    2cf6:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <abort>
    2cfa:	84 2f       	mov	r24, r20
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	9c 01       	movw	r18, r24
    2d00:	21 50       	subi	r18, 0x01	; 1
    2d02:	31 09       	sbc	r19, r1
    2d04:	82 23       	and	r24, r18
    2d06:	93 23       	and	r25, r19
    2d08:	89 2b       	or	r24, r25
    2d0a:	11 f0       	breq	.+4      	; 0x2d10 <fifo_init+0x20>
    2d0c:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <abort>
    2d10:	41 38       	cpi	r20, 0x81	; 129
    2d12:	10 f0       	brcs	.+4      	; 0x2d18 <fifo_init+0x28>
    2d14:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <abort>
    2d18:	12 82       	std	Z+2, r1	; 0x02
    2d1a:	13 82       	std	Z+3, r1	; 0x03
    2d1c:	44 83       	std	Z+4, r20	; 0x04
    2d1e:	44 0f       	add	r20, r20
    2d20:	41 50       	subi	r20, 0x01	; 1
    2d22:	45 83       	std	Z+5, r20	; 0x05
    2d24:	71 83       	std	Z+1, r23	; 0x01
    2d26:	60 83       	st	Z, r22
    2d28:	80 e0       	ldi	r24, 0x00	; 0
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	08 95       	ret

00002d2e <serial_create>:
    2d2e:	2f 92       	push	r2
    2d30:	3f 92       	push	r3
    2d32:	4f 92       	push	r4
    2d34:	5f 92       	push	r5
    2d36:	6f 92       	push	r6
    2d38:	7f 92       	push	r7
    2d3a:	8f 92       	push	r8
    2d3c:	9f 92       	push	r9
    2d3e:	af 92       	push	r10
    2d40:	cf 92       	push	r12
    2d42:	ef 92       	push	r14
    2d44:	ff 92       	push	r15
    2d46:	0f 93       	push	r16
    2d48:	1f 93       	push	r17
    2d4a:	cf 93       	push	r28
    2d4c:	df 93       	push	r29
    2d4e:	cd b7       	in	r28, 0x3d	; 61
    2d50:	de b7       	in	r29, 0x3e	; 62
    2d52:	f8 2e       	mov	r15, r24
    2d54:	2a 01       	movw	r4, r20
    2d56:	3b 01       	movw	r6, r22
    2d58:	88 e0       	ldi	r24, 0x08	; 8
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	cd d6       	rcall	.+3482   	; 0x3af8 <malloc>
    2d5e:	8c 01       	movw	r16, r24
    2d60:	8f 2d       	mov	r24, r15
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	fc 01       	movw	r30, r24
    2d66:	ee 0f       	add	r30, r30
    2d68:	ff 1f       	adc	r31, r31
    2d6a:	e6 5b       	subi	r30, 0xB6	; 182
    2d6c:	f2 4f       	sbci	r31, 0xF2	; 242
    2d6e:	11 83       	std	Z+1, r17	; 0x01
    2d70:	00 83       	st	Z, r16
    2d72:	01 15       	cp	r16, r1
    2d74:	11 05       	cpc	r17, r1
    2d76:	09 f4       	brne	.+2      	; 0x2d7a <serial_create+0x4c>
    2d78:	64 c0       	rjmp	.+200    	; 0x2e42 <serial_create+0x114>
    2d7a:	88 0f       	add	r24, r24
    2d7c:	99 1f       	adc	r25, r25
    2d7e:	fc 01       	movw	r30, r24
    2d80:	eb 5e       	subi	r30, 0xEB	; 235
    2d82:	fd 4f       	sbci	r31, 0xFD	; 253
    2d84:	80 81       	ld	r24, Z
    2d86:	91 81       	ldd	r25, Z+1	; 0x01
    2d88:	d8 01       	movw	r26, r16
    2d8a:	8d 93       	st	X+, r24
    2d8c:	9c 93       	st	X, r25
    2d8e:	8c 2d       	mov	r24, r12
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	88 0f       	add	r24, r24
    2d94:	99 1f       	adc	r25, r25
    2d96:	88 0f       	add	r24, r24
    2d98:	99 1f       	adc	r25, r25
    2d9a:	ae d6       	rcall	.+3420   	; 0x3af8 <malloc>
    2d9c:	1c 01       	movw	r2, r24
    2d9e:	86 e0       	ldi	r24, 0x06	; 6
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	aa d6       	rcall	.+3412   	; 0x3af8 <malloc>
    2da4:	7c 01       	movw	r14, r24
    2da6:	4c 2d       	mov	r20, r12
    2da8:	b1 01       	movw	r22, r2
    2daa:	a2 df       	rcall	.-188    	; 0x2cf0 <fifo_init>
    2dac:	f8 01       	movw	r30, r16
    2dae:	f5 82       	std	Z+5, r15	; 0x05
    2db0:	e4 82       	std	Z+4, r14	; 0x04
    2db2:	8a 2d       	mov	r24, r10
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	88 0f       	add	r24, r24
    2db8:	99 1f       	adc	r25, r25
    2dba:	88 0f       	add	r24, r24
    2dbc:	99 1f       	adc	r25, r25
    2dbe:	9c d6       	rcall	.+3384   	; 0x3af8 <malloc>
    2dc0:	1c 01       	movw	r2, r24
    2dc2:	86 e0       	ldi	r24, 0x06	; 6
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	98 d6       	rcall	.+3376   	; 0x3af8 <malloc>
    2dc8:	7c 01       	movw	r14, r24
    2dca:	4a 2d       	mov	r20, r10
    2dcc:	b1 01       	movw	r22, r2
    2dce:	90 df       	rcall	.-224    	; 0x2cf0 <fifo_init>
    2dd0:	d8 01       	movw	r26, r16
    2dd2:	13 96       	adiw	r26, 0x03	; 3
    2dd4:	fc 92       	st	X, r15
    2dd6:	ee 92       	st	-X, r14
    2dd8:	12 97       	sbiw	r26, 0x02	; 2
    2dda:	17 96       	adiw	r26, 0x07	; 7
    2ddc:	9c 92       	st	X, r9
    2dde:	8e 92       	st	-X, r8
    2de0:	16 97       	sbiw	r26, 0x06	; 6
    2de2:	ff b6       	in	r15, 0x3f	; 63
    2de4:	f8 94       	cli
    2de6:	ed 91       	ld	r30, X+
    2de8:	fc 91       	ld	r31, X
    2dea:	11 97       	sbiw	r26, 0x01	; 1
    2dec:	36 97       	sbiw	r30, 0x06	; 6
    2dee:	80 81       	ld	r24, Z
    2df0:	82 60       	ori	r24, 0x02	; 2
    2df2:	80 83       	st	Z, r24
    2df4:	8d 90       	ld	r8, X+
    2df6:	9c 90       	ld	r9, X
    2df8:	c3 01       	movw	r24, r6
    2dfa:	b2 01       	movw	r22, r4
    2dfc:	1c db       	rcall	.-2504   	; 0x2436 <__floatunsisf>
    2dfe:	20 e0       	ldi	r18, 0x00	; 0
    2e00:	30 e0       	ldi	r19, 0x00	; 0
    2e02:	40 e0       	ldi	r20, 0x00	; 0
    2e04:	51 e4       	ldi	r21, 0x41	; 65
    2e06:	74 d4       	rcall	.+2280   	; 0x36f0 <__mulsf3>
    2e08:	9b 01       	movw	r18, r22
    2e0a:	ac 01       	movw	r20, r24
    2e0c:	60 e0       	ldi	r22, 0x00	; 0
    2e0e:	74 e2       	ldi	r23, 0x24	; 36
    2e10:	84 e7       	ldi	r24, 0x74	; 116
    2e12:	9b e4       	ldi	r25, 0x4B	; 75
    2e14:	30 d3       	rcall	.+1632   	; 0x3476 <__divsf3>
    2e16:	20 e0       	ldi	r18, 0x00	; 0
    2e18:	30 e0       	ldi	r19, 0x00	; 0
    2e1a:	40 e8       	ldi	r20, 0x80	; 128
    2e1c:	5f e3       	ldi	r21, 0x3F	; 63
    2e1e:	c6 d2       	rcall	.+1420   	; 0x33ac <__subsf3>
    2e20:	97 d3       	rcall	.+1838   	; 0x3550 <__fixunssfsi>
    2e22:	f4 01       	movw	r30, r8
    2e24:	32 97       	sbiw	r30, 0x02	; 2
    2e26:	60 83       	st	Z, r22
    2e28:	d8 01       	movw	r26, r16
    2e2a:	ed 91       	ld	r30, X+
    2e2c:	fc 91       	ld	r31, X
    2e2e:	11 97       	sbiw	r26, 0x01	; 1
    2e30:	35 97       	sbiw	r30, 0x05	; 5
    2e32:	88 e9       	ldi	r24, 0x98	; 152
    2e34:	80 83       	st	Z, r24
    2e36:	ed 91       	ld	r30, X+
    2e38:	fc 91       	ld	r31, X
    2e3a:	34 97       	sbiw	r30, 0x04	; 4
    2e3c:	86 e0       	ldi	r24, 0x06	; 6
    2e3e:	80 83       	st	Z, r24
    2e40:	ff be       	out	0x3f, r15	; 63
    2e42:	c8 01       	movw	r24, r16
    2e44:	df 91       	pop	r29
    2e46:	cf 91       	pop	r28
    2e48:	1f 91       	pop	r17
    2e4a:	0f 91       	pop	r16
    2e4c:	ff 90       	pop	r15
    2e4e:	ef 90       	pop	r14
    2e50:	cf 90       	pop	r12
    2e52:	af 90       	pop	r10
    2e54:	9f 90       	pop	r9
    2e56:	8f 90       	pop	r8
    2e58:	7f 90       	pop	r7
    2e5a:	6f 90       	pop	r6
    2e5c:	5f 90       	pop	r5
    2e5e:	4f 90       	pop	r4
    2e60:	3f 90       	pop	r3
    2e62:	2f 90       	pop	r2
    2e64:	08 95       	ret

00002e66 <serial_sendByte>:
    2e66:	cf 93       	push	r28
    2e68:	df 93       	push	r29
    2e6a:	dc 01       	movw	r26, r24
    2e6c:	89 2b       	or	r24, r25
    2e6e:	01 f1       	breq	.+64     	; 0x2eb0 <serial_sendByte+0x4a>
    2e70:	12 96       	adiw	r26, 0x02	; 2
    2e72:	ed 91       	ld	r30, X+
    2e74:	fc 91       	ld	r31, X
    2e76:	13 97       	sbiw	r26, 0x03	; 3
    2e78:	93 81       	ldd	r25, Z+3	; 0x03
    2e7a:	82 81       	ldd	r24, Z+2	; 0x02
    2e7c:	25 81       	ldd	r18, Z+5	; 0x05
    2e7e:	98 1b       	sub	r25, r24
    2e80:	92 23       	and	r25, r18
    2e82:	84 81       	ldd	r24, Z+4	; 0x04
    2e84:	98 17       	cp	r25, r24
    2e86:	b1 f0       	breq	.+44     	; 0x2eb4 <serial_sendByte+0x4e>
    2e88:	83 81       	ldd	r24, Z+3	; 0x03
    2e8a:	26 95       	lsr	r18
    2e8c:	28 23       	and	r18, r24
    2e8e:	c0 81       	ld	r28, Z
    2e90:	d1 81       	ldd	r29, Z+1	; 0x01
    2e92:	c2 0f       	add	r28, r18
    2e94:	d1 1d       	adc	r29, r1
    2e96:	68 83       	st	Y, r22
    2e98:	8f 5f       	subi	r24, 0xFF	; 255
    2e9a:	95 81       	ldd	r25, Z+5	; 0x05
    2e9c:	89 23       	and	r24, r25
    2e9e:	83 83       	std	Z+3, r24	; 0x03
    2ea0:	ed 91       	ld	r30, X+
    2ea2:	fc 91       	ld	r31, X
    2ea4:	35 97       	sbiw	r30, 0x05	; 5
    2ea6:	80 81       	ld	r24, Z
    2ea8:	80 62       	ori	r24, 0x20	; 32
    2eaa:	80 83       	st	Z, r24
    2eac:	80 e0       	ldi	r24, 0x00	; 0
    2eae:	03 c0       	rjmp	.+6      	; 0x2eb6 <serial_sendByte+0x50>
    2eb0:	81 e0       	ldi	r24, 0x01	; 1
    2eb2:	01 c0       	rjmp	.+2      	; 0x2eb6 <serial_sendByte+0x50>
    2eb4:	82 e0       	ldi	r24, 0x02	; 2
    2eb6:	df 91       	pop	r29
    2eb8:	cf 91       	pop	r28
    2eba:	08 95       	ret

00002ebc <serial_getByte>:
    2ebc:	00 97       	sbiw	r24, 0x00	; 0
    2ebe:	d1 f0       	breq	.+52     	; 0x2ef4 <serial_getByte+0x38>
    2ec0:	dc 01       	movw	r26, r24
    2ec2:	14 96       	adiw	r26, 0x04	; 4
    2ec4:	ed 91       	ld	r30, X+
    2ec6:	fc 91       	ld	r31, X
    2ec8:	15 97       	sbiw	r26, 0x05	; 5
    2eca:	93 81       	ldd	r25, Z+3	; 0x03
    2ecc:	82 81       	ldd	r24, Z+2	; 0x02
    2ece:	98 17       	cp	r25, r24
    2ed0:	99 f0       	breq	.+38     	; 0x2ef8 <serial_getByte+0x3c>
    2ed2:	92 81       	ldd	r25, Z+2	; 0x02
    2ed4:	85 81       	ldd	r24, Z+5	; 0x05
    2ed6:	86 95       	lsr	r24
    2ed8:	89 23       	and	r24, r25
    2eda:	a0 81       	ld	r26, Z
    2edc:	b1 81       	ldd	r27, Z+1	; 0x01
    2ede:	a8 0f       	add	r26, r24
    2ee0:	b1 1d       	adc	r27, r1
    2ee2:	8c 91       	ld	r24, X
    2ee4:	db 01       	movw	r26, r22
    2ee6:	8c 93       	st	X, r24
    2ee8:	9f 5f       	subi	r25, 0xFF	; 255
    2eea:	85 81       	ldd	r24, Z+5	; 0x05
    2eec:	98 23       	and	r25, r24
    2eee:	92 83       	std	Z+2, r25	; 0x02
    2ef0:	80 e0       	ldi	r24, 0x00	; 0
    2ef2:	08 95       	ret
    2ef4:	81 e0       	ldi	r24, 0x01	; 1
    2ef6:	08 95       	ret
    2ef8:	83 e0       	ldi	r24, 0x03	; 3
    2efa:	08 95       	ret

00002efc <__vector_25>:
    2efc:	1f 92       	push	r1
    2efe:	0f 92       	push	r0
    2f00:	0f b6       	in	r0, 0x3f	; 63
    2f02:	0f 92       	push	r0
    2f04:	11 24       	eor	r1, r1
    2f06:	0b b6       	in	r0, 0x3b	; 59
    2f08:	0f 92       	push	r0
    2f0a:	2f 93       	push	r18
    2f0c:	3f 93       	push	r19
    2f0e:	4f 93       	push	r20
    2f10:	5f 93       	push	r21
    2f12:	6f 93       	push	r22
    2f14:	7f 93       	push	r23
    2f16:	8f 93       	push	r24
    2f18:	9f 93       	push	r25
    2f1a:	af 93       	push	r26
    2f1c:	bf 93       	push	r27
    2f1e:	cf 93       	push	r28
    2f20:	df 93       	push	r29
    2f22:	ef 93       	push	r30
    2f24:	ff 93       	push	r31
    2f26:	a0 91 4a 0d 	lds	r26, 0x0D4A	; 0x800d4a <_ser_handle>
    2f2a:	b0 91 4b 0d 	lds	r27, 0x0D4B	; 0x800d4b <_ser_handle+0x1>
    2f2e:	10 97       	sbiw	r26, 0x00	; 0
    2f30:	11 f1       	breq	.+68     	; 0x2f76 <__vector_25+0x7a>
    2f32:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    2f36:	14 96       	adiw	r26, 0x04	; 4
    2f38:	ed 91       	ld	r30, X+
    2f3a:	fc 91       	ld	r31, X
    2f3c:	15 97       	sbiw	r26, 0x05	; 5
    2f3e:	93 81       	ldd	r25, Z+3	; 0x03
    2f40:	82 81       	ldd	r24, Z+2	; 0x02
    2f42:	25 81       	ldd	r18, Z+5	; 0x05
    2f44:	98 1b       	sub	r25, r24
    2f46:	92 23       	and	r25, r18
    2f48:	84 81       	ldd	r24, Z+4	; 0x04
    2f4a:	98 17       	cp	r25, r24
    2f4c:	61 f0       	breq	.+24     	; 0x2f66 <__vector_25+0x6a>
    2f4e:	83 81       	ldd	r24, Z+3	; 0x03
    2f50:	26 95       	lsr	r18
    2f52:	28 23       	and	r18, r24
    2f54:	c0 81       	ld	r28, Z
    2f56:	d1 81       	ldd	r29, Z+1	; 0x01
    2f58:	c2 0f       	add	r28, r18
    2f5a:	d1 1d       	adc	r29, r1
    2f5c:	68 83       	st	Y, r22
    2f5e:	8f 5f       	subi	r24, 0xFF	; 255
    2f60:	95 81       	ldd	r25, Z+5	; 0x05
    2f62:	89 23       	and	r24, r25
    2f64:	83 83       	std	Z+3, r24	; 0x03
    2f66:	16 96       	adiw	r26, 0x06	; 6
    2f68:	ed 91       	ld	r30, X+
    2f6a:	fc 91       	ld	r31, X
    2f6c:	17 97       	sbiw	r26, 0x07	; 7
    2f6e:	30 97       	sbiw	r30, 0x00	; 0
    2f70:	11 f0       	breq	.+4      	; 0x2f76 <__vector_25+0x7a>
    2f72:	cd 01       	movw	r24, r26
    2f74:	19 95       	eicall
    2f76:	ff 91       	pop	r31
    2f78:	ef 91       	pop	r30
    2f7a:	df 91       	pop	r29
    2f7c:	cf 91       	pop	r28
    2f7e:	bf 91       	pop	r27
    2f80:	af 91       	pop	r26
    2f82:	9f 91       	pop	r25
    2f84:	8f 91       	pop	r24
    2f86:	7f 91       	pop	r23
    2f88:	6f 91       	pop	r22
    2f8a:	5f 91       	pop	r21
    2f8c:	4f 91       	pop	r20
    2f8e:	3f 91       	pop	r19
    2f90:	2f 91       	pop	r18
    2f92:	0f 90       	pop	r0
    2f94:	0b be       	out	0x3b, r0	; 59
    2f96:	0f 90       	pop	r0
    2f98:	0f be       	out	0x3f, r0	; 63
    2f9a:	0f 90       	pop	r0
    2f9c:	1f 90       	pop	r1
    2f9e:	18 95       	reti

00002fa0 <__vector_26>:
    2fa0:	1f 92       	push	r1
    2fa2:	0f 92       	push	r0
    2fa4:	0f b6       	in	r0, 0x3f	; 63
    2fa6:	0f 92       	push	r0
    2fa8:	11 24       	eor	r1, r1
    2faa:	0b b6       	in	r0, 0x3b	; 59
    2fac:	0f 92       	push	r0
    2fae:	2f 93       	push	r18
    2fb0:	8f 93       	push	r24
    2fb2:	9f 93       	push	r25
    2fb4:	af 93       	push	r26
    2fb6:	bf 93       	push	r27
    2fb8:	ef 93       	push	r30
    2fba:	ff 93       	push	r31
    2fbc:	e0 91 4a 0d 	lds	r30, 0x0D4A	; 0x800d4a <_ser_handle>
    2fc0:	f0 91 4b 0d 	lds	r31, 0x0D4B	; 0x800d4b <_ser_handle+0x1>
    2fc4:	30 97       	sbiw	r30, 0x00	; 0
    2fc6:	b9 f0       	breq	.+46     	; 0x2ff6 <__vector_26+0x56>
    2fc8:	02 80       	ldd	r0, Z+2	; 0x02
    2fca:	f3 81       	ldd	r31, Z+3	; 0x03
    2fcc:	e0 2d       	mov	r30, r0
    2fce:	93 81       	ldd	r25, Z+3	; 0x03
    2fd0:	82 81       	ldd	r24, Z+2	; 0x02
    2fd2:	98 17       	cp	r25, r24
    2fd4:	b1 f0       	breq	.+44     	; 0x3002 <__vector_26+0x62>
    2fd6:	92 81       	ldd	r25, Z+2	; 0x02
    2fd8:	85 81       	ldd	r24, Z+5	; 0x05
    2fda:	28 2f       	mov	r18, r24
    2fdc:	26 95       	lsr	r18
    2fde:	29 23       	and	r18, r25
    2fe0:	a0 81       	ld	r26, Z
    2fe2:	b1 81       	ldd	r27, Z+1	; 0x01
    2fe4:	a2 0f       	add	r26, r18
    2fe6:	b1 1d       	adc	r27, r1
    2fe8:	2c 91       	ld	r18, X
    2fea:	9f 5f       	subi	r25, 0xFF	; 255
    2fec:	89 23       	and	r24, r25
    2fee:	82 83       	std	Z+2, r24	; 0x02
    2ff0:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    2ff4:	0b c0       	rjmp	.+22     	; 0x300c <__vector_26+0x6c>
    2ff6:	e1 ec       	ldi	r30, 0xC1	; 193
    2ff8:	f0 e0       	ldi	r31, 0x00	; 0
    2ffa:	80 81       	ld	r24, Z
    2ffc:	8f 7d       	andi	r24, 0xDF	; 223
    2ffe:	80 83       	st	Z, r24
    3000:	05 c0       	rjmp	.+10     	; 0x300c <__vector_26+0x6c>
    3002:	e1 ec       	ldi	r30, 0xC1	; 193
    3004:	f0 e0       	ldi	r31, 0x00	; 0
    3006:	80 81       	ld	r24, Z
    3008:	8f 7d       	andi	r24, 0xDF	; 223
    300a:	80 83       	st	Z, r24
    300c:	ff 91       	pop	r31
    300e:	ef 91       	pop	r30
    3010:	bf 91       	pop	r27
    3012:	af 91       	pop	r26
    3014:	9f 91       	pop	r25
    3016:	8f 91       	pop	r24
    3018:	2f 91       	pop	r18
    301a:	0f 90       	pop	r0
    301c:	0b be       	out	0x3b, r0	; 59
    301e:	0f 90       	pop	r0
    3020:	0f be       	out	0x3f, r0	; 63
    3022:	0f 90       	pop	r0
    3024:	1f 90       	pop	r1
    3026:	18 95       	reti

00003028 <__vector_36>:
    3028:	1f 92       	push	r1
    302a:	0f 92       	push	r0
    302c:	0f b6       	in	r0, 0x3f	; 63
    302e:	0f 92       	push	r0
    3030:	11 24       	eor	r1, r1
    3032:	0b b6       	in	r0, 0x3b	; 59
    3034:	0f 92       	push	r0
    3036:	2f 93       	push	r18
    3038:	3f 93       	push	r19
    303a:	4f 93       	push	r20
    303c:	5f 93       	push	r21
    303e:	6f 93       	push	r22
    3040:	7f 93       	push	r23
    3042:	8f 93       	push	r24
    3044:	9f 93       	push	r25
    3046:	af 93       	push	r26
    3048:	bf 93       	push	r27
    304a:	cf 93       	push	r28
    304c:	df 93       	push	r29
    304e:	ef 93       	push	r30
    3050:	ff 93       	push	r31
    3052:	a0 91 4c 0d 	lds	r26, 0x0D4C	; 0x800d4c <_ser_handle+0x2>
    3056:	b0 91 4d 0d 	lds	r27, 0x0D4D	; 0x800d4d <_ser_handle+0x3>
    305a:	10 97       	sbiw	r26, 0x00	; 0
    305c:	11 f1       	breq	.+68     	; 0x30a2 <__vector_36+0x7a>
    305e:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    3062:	14 96       	adiw	r26, 0x04	; 4
    3064:	ed 91       	ld	r30, X+
    3066:	fc 91       	ld	r31, X
    3068:	15 97       	sbiw	r26, 0x05	; 5
    306a:	93 81       	ldd	r25, Z+3	; 0x03
    306c:	82 81       	ldd	r24, Z+2	; 0x02
    306e:	25 81       	ldd	r18, Z+5	; 0x05
    3070:	98 1b       	sub	r25, r24
    3072:	92 23       	and	r25, r18
    3074:	84 81       	ldd	r24, Z+4	; 0x04
    3076:	98 17       	cp	r25, r24
    3078:	61 f0       	breq	.+24     	; 0x3092 <__vector_36+0x6a>
    307a:	83 81       	ldd	r24, Z+3	; 0x03
    307c:	26 95       	lsr	r18
    307e:	28 23       	and	r18, r24
    3080:	c0 81       	ld	r28, Z
    3082:	d1 81       	ldd	r29, Z+1	; 0x01
    3084:	c2 0f       	add	r28, r18
    3086:	d1 1d       	adc	r29, r1
    3088:	68 83       	st	Y, r22
    308a:	8f 5f       	subi	r24, 0xFF	; 255
    308c:	95 81       	ldd	r25, Z+5	; 0x05
    308e:	89 23       	and	r24, r25
    3090:	83 83       	std	Z+3, r24	; 0x03
    3092:	16 96       	adiw	r26, 0x06	; 6
    3094:	ed 91       	ld	r30, X+
    3096:	fc 91       	ld	r31, X
    3098:	17 97       	sbiw	r26, 0x07	; 7
    309a:	30 97       	sbiw	r30, 0x00	; 0
    309c:	11 f0       	breq	.+4      	; 0x30a2 <__vector_36+0x7a>
    309e:	cd 01       	movw	r24, r26
    30a0:	19 95       	eicall
    30a2:	ff 91       	pop	r31
    30a4:	ef 91       	pop	r30
    30a6:	df 91       	pop	r29
    30a8:	cf 91       	pop	r28
    30aa:	bf 91       	pop	r27
    30ac:	af 91       	pop	r26
    30ae:	9f 91       	pop	r25
    30b0:	8f 91       	pop	r24
    30b2:	7f 91       	pop	r23
    30b4:	6f 91       	pop	r22
    30b6:	5f 91       	pop	r21
    30b8:	4f 91       	pop	r20
    30ba:	3f 91       	pop	r19
    30bc:	2f 91       	pop	r18
    30be:	0f 90       	pop	r0
    30c0:	0b be       	out	0x3b, r0	; 59
    30c2:	0f 90       	pop	r0
    30c4:	0f be       	out	0x3f, r0	; 63
    30c6:	0f 90       	pop	r0
    30c8:	1f 90       	pop	r1
    30ca:	18 95       	reti

000030cc <__vector_37>:
    30cc:	1f 92       	push	r1
    30ce:	0f 92       	push	r0
    30d0:	0f b6       	in	r0, 0x3f	; 63
    30d2:	0f 92       	push	r0
    30d4:	11 24       	eor	r1, r1
    30d6:	0b b6       	in	r0, 0x3b	; 59
    30d8:	0f 92       	push	r0
    30da:	2f 93       	push	r18
    30dc:	8f 93       	push	r24
    30de:	9f 93       	push	r25
    30e0:	af 93       	push	r26
    30e2:	bf 93       	push	r27
    30e4:	ef 93       	push	r30
    30e6:	ff 93       	push	r31
    30e8:	e0 91 4c 0d 	lds	r30, 0x0D4C	; 0x800d4c <_ser_handle+0x2>
    30ec:	f0 91 4d 0d 	lds	r31, 0x0D4D	; 0x800d4d <_ser_handle+0x3>
    30f0:	30 97       	sbiw	r30, 0x00	; 0
    30f2:	b9 f0       	breq	.+46     	; 0x3122 <__vector_37+0x56>
    30f4:	02 80       	ldd	r0, Z+2	; 0x02
    30f6:	f3 81       	ldd	r31, Z+3	; 0x03
    30f8:	e0 2d       	mov	r30, r0
    30fa:	93 81       	ldd	r25, Z+3	; 0x03
    30fc:	82 81       	ldd	r24, Z+2	; 0x02
    30fe:	98 17       	cp	r25, r24
    3100:	b1 f0       	breq	.+44     	; 0x312e <__vector_37+0x62>
    3102:	92 81       	ldd	r25, Z+2	; 0x02
    3104:	85 81       	ldd	r24, Z+5	; 0x05
    3106:	28 2f       	mov	r18, r24
    3108:	26 95       	lsr	r18
    310a:	29 23       	and	r18, r25
    310c:	a0 81       	ld	r26, Z
    310e:	b1 81       	ldd	r27, Z+1	; 0x01
    3110:	a2 0f       	add	r26, r18
    3112:	b1 1d       	adc	r27, r1
    3114:	2c 91       	ld	r18, X
    3116:	9f 5f       	subi	r25, 0xFF	; 255
    3118:	89 23       	and	r24, r25
    311a:	82 83       	std	Z+2, r24	; 0x02
    311c:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    3120:	0b c0       	rjmp	.+22     	; 0x3138 <__vector_37+0x6c>
    3122:	e9 ec       	ldi	r30, 0xC9	; 201
    3124:	f0 e0       	ldi	r31, 0x00	; 0
    3126:	80 81       	ld	r24, Z
    3128:	8f 7d       	andi	r24, 0xDF	; 223
    312a:	80 83       	st	Z, r24
    312c:	05 c0       	rjmp	.+10     	; 0x3138 <__vector_37+0x6c>
    312e:	e9 ec       	ldi	r30, 0xC9	; 201
    3130:	f0 e0       	ldi	r31, 0x00	; 0
    3132:	80 81       	ld	r24, Z
    3134:	8f 7d       	andi	r24, 0xDF	; 223
    3136:	80 83       	st	Z, r24
    3138:	ff 91       	pop	r31
    313a:	ef 91       	pop	r30
    313c:	bf 91       	pop	r27
    313e:	af 91       	pop	r26
    3140:	9f 91       	pop	r25
    3142:	8f 91       	pop	r24
    3144:	2f 91       	pop	r18
    3146:	0f 90       	pop	r0
    3148:	0b be       	out	0x3b, r0	; 59
    314a:	0f 90       	pop	r0
    314c:	0f be       	out	0x3f, r0	; 63
    314e:	0f 90       	pop	r0
    3150:	1f 90       	pop	r1
    3152:	18 95       	reti

00003154 <__vector_51>:
    3154:	1f 92       	push	r1
    3156:	0f 92       	push	r0
    3158:	0f b6       	in	r0, 0x3f	; 63
    315a:	0f 92       	push	r0
    315c:	11 24       	eor	r1, r1
    315e:	0b b6       	in	r0, 0x3b	; 59
    3160:	0f 92       	push	r0
    3162:	2f 93       	push	r18
    3164:	3f 93       	push	r19
    3166:	4f 93       	push	r20
    3168:	5f 93       	push	r21
    316a:	6f 93       	push	r22
    316c:	7f 93       	push	r23
    316e:	8f 93       	push	r24
    3170:	9f 93       	push	r25
    3172:	af 93       	push	r26
    3174:	bf 93       	push	r27
    3176:	cf 93       	push	r28
    3178:	df 93       	push	r29
    317a:	ef 93       	push	r30
    317c:	ff 93       	push	r31
    317e:	a0 91 4e 0d 	lds	r26, 0x0D4E	; 0x800d4e <_ser_handle+0x4>
    3182:	b0 91 4f 0d 	lds	r27, 0x0D4F	; 0x800d4f <_ser_handle+0x5>
    3186:	10 97       	sbiw	r26, 0x00	; 0
    3188:	11 f1       	breq	.+68     	; 0x31ce <__vector_51+0x7a>
    318a:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    318e:	14 96       	adiw	r26, 0x04	; 4
    3190:	ed 91       	ld	r30, X+
    3192:	fc 91       	ld	r31, X
    3194:	15 97       	sbiw	r26, 0x05	; 5
    3196:	93 81       	ldd	r25, Z+3	; 0x03
    3198:	82 81       	ldd	r24, Z+2	; 0x02
    319a:	25 81       	ldd	r18, Z+5	; 0x05
    319c:	98 1b       	sub	r25, r24
    319e:	92 23       	and	r25, r18
    31a0:	84 81       	ldd	r24, Z+4	; 0x04
    31a2:	98 17       	cp	r25, r24
    31a4:	61 f0       	breq	.+24     	; 0x31be <__vector_51+0x6a>
    31a6:	83 81       	ldd	r24, Z+3	; 0x03
    31a8:	26 95       	lsr	r18
    31aa:	28 23       	and	r18, r24
    31ac:	c0 81       	ld	r28, Z
    31ae:	d1 81       	ldd	r29, Z+1	; 0x01
    31b0:	c2 0f       	add	r28, r18
    31b2:	d1 1d       	adc	r29, r1
    31b4:	68 83       	st	Y, r22
    31b6:	8f 5f       	subi	r24, 0xFF	; 255
    31b8:	95 81       	ldd	r25, Z+5	; 0x05
    31ba:	89 23       	and	r24, r25
    31bc:	83 83       	std	Z+3, r24	; 0x03
    31be:	16 96       	adiw	r26, 0x06	; 6
    31c0:	ed 91       	ld	r30, X+
    31c2:	fc 91       	ld	r31, X
    31c4:	17 97       	sbiw	r26, 0x07	; 7
    31c6:	30 97       	sbiw	r30, 0x00	; 0
    31c8:	11 f0       	breq	.+4      	; 0x31ce <__vector_51+0x7a>
    31ca:	cd 01       	movw	r24, r26
    31cc:	19 95       	eicall
    31ce:	ff 91       	pop	r31
    31d0:	ef 91       	pop	r30
    31d2:	df 91       	pop	r29
    31d4:	cf 91       	pop	r28
    31d6:	bf 91       	pop	r27
    31d8:	af 91       	pop	r26
    31da:	9f 91       	pop	r25
    31dc:	8f 91       	pop	r24
    31de:	7f 91       	pop	r23
    31e0:	6f 91       	pop	r22
    31e2:	5f 91       	pop	r21
    31e4:	4f 91       	pop	r20
    31e6:	3f 91       	pop	r19
    31e8:	2f 91       	pop	r18
    31ea:	0f 90       	pop	r0
    31ec:	0b be       	out	0x3b, r0	; 59
    31ee:	0f 90       	pop	r0
    31f0:	0f be       	out	0x3f, r0	; 63
    31f2:	0f 90       	pop	r0
    31f4:	1f 90       	pop	r1
    31f6:	18 95       	reti

000031f8 <__vector_52>:
    31f8:	1f 92       	push	r1
    31fa:	0f 92       	push	r0
    31fc:	0f b6       	in	r0, 0x3f	; 63
    31fe:	0f 92       	push	r0
    3200:	11 24       	eor	r1, r1
    3202:	0b b6       	in	r0, 0x3b	; 59
    3204:	0f 92       	push	r0
    3206:	2f 93       	push	r18
    3208:	8f 93       	push	r24
    320a:	9f 93       	push	r25
    320c:	af 93       	push	r26
    320e:	bf 93       	push	r27
    3210:	ef 93       	push	r30
    3212:	ff 93       	push	r31
    3214:	e0 91 4e 0d 	lds	r30, 0x0D4E	; 0x800d4e <_ser_handle+0x4>
    3218:	f0 91 4f 0d 	lds	r31, 0x0D4F	; 0x800d4f <_ser_handle+0x5>
    321c:	30 97       	sbiw	r30, 0x00	; 0
    321e:	b9 f0       	breq	.+46     	; 0x324e <__vector_52+0x56>
    3220:	02 80       	ldd	r0, Z+2	; 0x02
    3222:	f3 81       	ldd	r31, Z+3	; 0x03
    3224:	e0 2d       	mov	r30, r0
    3226:	93 81       	ldd	r25, Z+3	; 0x03
    3228:	82 81       	ldd	r24, Z+2	; 0x02
    322a:	98 17       	cp	r25, r24
    322c:	b1 f0       	breq	.+44     	; 0x325a <__vector_52+0x62>
    322e:	92 81       	ldd	r25, Z+2	; 0x02
    3230:	85 81       	ldd	r24, Z+5	; 0x05
    3232:	28 2f       	mov	r18, r24
    3234:	26 95       	lsr	r18
    3236:	29 23       	and	r18, r25
    3238:	a0 81       	ld	r26, Z
    323a:	b1 81       	ldd	r27, Z+1	; 0x01
    323c:	a2 0f       	add	r26, r18
    323e:	b1 1d       	adc	r27, r1
    3240:	2c 91       	ld	r18, X
    3242:	9f 5f       	subi	r25, 0xFF	; 255
    3244:	89 23       	and	r24, r25
    3246:	82 83       	std	Z+2, r24	; 0x02
    3248:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    324c:	0b c0       	rjmp	.+22     	; 0x3264 <__vector_52+0x6c>
    324e:	e1 ed       	ldi	r30, 0xD1	; 209
    3250:	f0 e0       	ldi	r31, 0x00	; 0
    3252:	80 81       	ld	r24, Z
    3254:	8f 7d       	andi	r24, 0xDF	; 223
    3256:	80 83       	st	Z, r24
    3258:	05 c0       	rjmp	.+10     	; 0x3264 <__vector_52+0x6c>
    325a:	e1 ed       	ldi	r30, 0xD1	; 209
    325c:	f0 e0       	ldi	r31, 0x00	; 0
    325e:	80 81       	ld	r24, Z
    3260:	8f 7d       	andi	r24, 0xDF	; 223
    3262:	80 83       	st	Z, r24
    3264:	ff 91       	pop	r31
    3266:	ef 91       	pop	r30
    3268:	bf 91       	pop	r27
    326a:	af 91       	pop	r26
    326c:	9f 91       	pop	r25
    326e:	8f 91       	pop	r24
    3270:	2f 91       	pop	r18
    3272:	0f 90       	pop	r0
    3274:	0b be       	out	0x3b, r0	; 59
    3276:	0f 90       	pop	r0
    3278:	0f be       	out	0x3f, r0	; 63
    327a:	0f 90       	pop	r0
    327c:	1f 90       	pop	r1
    327e:	18 95       	reti

00003280 <__vector_54>:
    3280:	1f 92       	push	r1
    3282:	0f 92       	push	r0
    3284:	0f b6       	in	r0, 0x3f	; 63
    3286:	0f 92       	push	r0
    3288:	11 24       	eor	r1, r1
    328a:	0b b6       	in	r0, 0x3b	; 59
    328c:	0f 92       	push	r0
    328e:	2f 93       	push	r18
    3290:	3f 93       	push	r19
    3292:	4f 93       	push	r20
    3294:	5f 93       	push	r21
    3296:	6f 93       	push	r22
    3298:	7f 93       	push	r23
    329a:	8f 93       	push	r24
    329c:	9f 93       	push	r25
    329e:	af 93       	push	r26
    32a0:	bf 93       	push	r27
    32a2:	cf 93       	push	r28
    32a4:	df 93       	push	r29
    32a6:	ef 93       	push	r30
    32a8:	ff 93       	push	r31
    32aa:	a0 91 50 0d 	lds	r26, 0x0D50	; 0x800d50 <_ser_handle+0x6>
    32ae:	b0 91 51 0d 	lds	r27, 0x0D51	; 0x800d51 <_ser_handle+0x7>
    32b2:	10 97       	sbiw	r26, 0x00	; 0
    32b4:	11 f1       	breq	.+68     	; 0x32fa <__vector_54+0x7a>
    32b6:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    32ba:	14 96       	adiw	r26, 0x04	; 4
    32bc:	ed 91       	ld	r30, X+
    32be:	fc 91       	ld	r31, X
    32c0:	15 97       	sbiw	r26, 0x05	; 5
    32c2:	93 81       	ldd	r25, Z+3	; 0x03
    32c4:	82 81       	ldd	r24, Z+2	; 0x02
    32c6:	25 81       	ldd	r18, Z+5	; 0x05
    32c8:	98 1b       	sub	r25, r24
    32ca:	92 23       	and	r25, r18
    32cc:	84 81       	ldd	r24, Z+4	; 0x04
    32ce:	98 17       	cp	r25, r24
    32d0:	61 f0       	breq	.+24     	; 0x32ea <__vector_54+0x6a>
    32d2:	83 81       	ldd	r24, Z+3	; 0x03
    32d4:	26 95       	lsr	r18
    32d6:	28 23       	and	r18, r24
    32d8:	c0 81       	ld	r28, Z
    32da:	d1 81       	ldd	r29, Z+1	; 0x01
    32dc:	c2 0f       	add	r28, r18
    32de:	d1 1d       	adc	r29, r1
    32e0:	68 83       	st	Y, r22
    32e2:	8f 5f       	subi	r24, 0xFF	; 255
    32e4:	95 81       	ldd	r25, Z+5	; 0x05
    32e6:	89 23       	and	r24, r25
    32e8:	83 83       	std	Z+3, r24	; 0x03
    32ea:	16 96       	adiw	r26, 0x06	; 6
    32ec:	ed 91       	ld	r30, X+
    32ee:	fc 91       	ld	r31, X
    32f0:	17 97       	sbiw	r26, 0x07	; 7
    32f2:	30 97       	sbiw	r30, 0x00	; 0
    32f4:	11 f0       	breq	.+4      	; 0x32fa <__vector_54+0x7a>
    32f6:	cd 01       	movw	r24, r26
    32f8:	19 95       	eicall
    32fa:	ff 91       	pop	r31
    32fc:	ef 91       	pop	r30
    32fe:	df 91       	pop	r29
    3300:	cf 91       	pop	r28
    3302:	bf 91       	pop	r27
    3304:	af 91       	pop	r26
    3306:	9f 91       	pop	r25
    3308:	8f 91       	pop	r24
    330a:	7f 91       	pop	r23
    330c:	6f 91       	pop	r22
    330e:	5f 91       	pop	r21
    3310:	4f 91       	pop	r20
    3312:	3f 91       	pop	r19
    3314:	2f 91       	pop	r18
    3316:	0f 90       	pop	r0
    3318:	0b be       	out	0x3b, r0	; 59
    331a:	0f 90       	pop	r0
    331c:	0f be       	out	0x3f, r0	; 63
    331e:	0f 90       	pop	r0
    3320:	1f 90       	pop	r1
    3322:	18 95       	reti

00003324 <__vector_55>:
    3324:	1f 92       	push	r1
    3326:	0f 92       	push	r0
    3328:	0f b6       	in	r0, 0x3f	; 63
    332a:	0f 92       	push	r0
    332c:	11 24       	eor	r1, r1
    332e:	0b b6       	in	r0, 0x3b	; 59
    3330:	0f 92       	push	r0
    3332:	2f 93       	push	r18
    3334:	8f 93       	push	r24
    3336:	9f 93       	push	r25
    3338:	af 93       	push	r26
    333a:	bf 93       	push	r27
    333c:	ef 93       	push	r30
    333e:	ff 93       	push	r31
    3340:	e0 91 50 0d 	lds	r30, 0x0D50	; 0x800d50 <_ser_handle+0x6>
    3344:	f0 91 51 0d 	lds	r31, 0x0D51	; 0x800d51 <_ser_handle+0x7>
    3348:	30 97       	sbiw	r30, 0x00	; 0
    334a:	b9 f0       	breq	.+46     	; 0x337a <__vector_55+0x56>
    334c:	02 80       	ldd	r0, Z+2	; 0x02
    334e:	f3 81       	ldd	r31, Z+3	; 0x03
    3350:	e0 2d       	mov	r30, r0
    3352:	93 81       	ldd	r25, Z+3	; 0x03
    3354:	82 81       	ldd	r24, Z+2	; 0x02
    3356:	98 17       	cp	r25, r24
    3358:	b1 f0       	breq	.+44     	; 0x3386 <__vector_55+0x62>
    335a:	92 81       	ldd	r25, Z+2	; 0x02
    335c:	85 81       	ldd	r24, Z+5	; 0x05
    335e:	28 2f       	mov	r18, r24
    3360:	26 95       	lsr	r18
    3362:	29 23       	and	r18, r25
    3364:	a0 81       	ld	r26, Z
    3366:	b1 81       	ldd	r27, Z+1	; 0x01
    3368:	a2 0f       	add	r26, r18
    336a:	b1 1d       	adc	r27, r1
    336c:	2c 91       	ld	r18, X
    336e:	9f 5f       	subi	r25, 0xFF	; 255
    3370:	89 23       	and	r24, r25
    3372:	82 83       	std	Z+2, r24	; 0x02
    3374:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    3378:	0b c0       	rjmp	.+22     	; 0x3390 <__vector_55+0x6c>
    337a:	e1 e3       	ldi	r30, 0x31	; 49
    337c:	f1 e0       	ldi	r31, 0x01	; 1
    337e:	80 81       	ld	r24, Z
    3380:	8f 7d       	andi	r24, 0xDF	; 223
    3382:	80 83       	st	Z, r24
    3384:	05 c0       	rjmp	.+10     	; 0x3390 <__vector_55+0x6c>
    3386:	e1 e3       	ldi	r30, 0x31	; 49
    3388:	f1 e0       	ldi	r31, 0x01	; 1
    338a:	80 81       	ld	r24, Z
    338c:	8f 7d       	andi	r24, 0xDF	; 223
    338e:	80 83       	st	Z, r24
    3390:	ff 91       	pop	r31
    3392:	ef 91       	pop	r30
    3394:	bf 91       	pop	r27
    3396:	af 91       	pop	r26
    3398:	9f 91       	pop	r25
    339a:	8f 91       	pop	r24
    339c:	2f 91       	pop	r18
    339e:	0f 90       	pop	r0
    33a0:	0b be       	out	0x3b, r0	; 59
    33a2:	0f 90       	pop	r0
    33a4:	0f be       	out	0x3f, r0	; 63
    33a6:	0f 90       	pop	r0
    33a8:	1f 90       	pop	r1
    33aa:	18 95       	reti

000033ac <__subsf3>:
    33ac:	50 58       	subi	r21, 0x80	; 128

000033ae <__addsf3>:
    33ae:	bb 27       	eor	r27, r27
    33b0:	aa 27       	eor	r26, r26
    33b2:	0e d0       	rcall	.+28     	; 0x33d0 <__addsf3x>
    33b4:	4c c1       	rjmp	.+664    	; 0x364e <__fp_round>
    33b6:	3d d1       	rcall	.+634    	; 0x3632 <__fp_pscA>
    33b8:	30 f0       	brcs	.+12     	; 0x33c6 <__addsf3+0x18>
    33ba:	42 d1       	rcall	.+644    	; 0x3640 <__fp_pscB>
    33bc:	20 f0       	brcs	.+8      	; 0x33c6 <__addsf3+0x18>
    33be:	31 f4       	brne	.+12     	; 0x33cc <__addsf3+0x1e>
    33c0:	9f 3f       	cpi	r25, 0xFF	; 255
    33c2:	11 f4       	brne	.+4      	; 0x33c8 <__addsf3+0x1a>
    33c4:	1e f4       	brtc	.+6      	; 0x33cc <__addsf3+0x1e>
    33c6:	32 c1       	rjmp	.+612    	; 0x362c <__fp_nan>
    33c8:	0e f4       	brtc	.+2      	; 0x33cc <__addsf3+0x1e>
    33ca:	e0 95       	com	r30
    33cc:	e7 fb       	bst	r30, 7
    33ce:	ff c0       	rjmp	.+510    	; 0x35ce <__fp_inf>

000033d0 <__addsf3x>:
    33d0:	e9 2f       	mov	r30, r25
    33d2:	4e d1       	rcall	.+668    	; 0x3670 <__fp_split3>
    33d4:	80 f3       	brcs	.-32     	; 0x33b6 <__addsf3+0x8>
    33d6:	ba 17       	cp	r27, r26
    33d8:	62 07       	cpc	r22, r18
    33da:	73 07       	cpc	r23, r19
    33dc:	84 07       	cpc	r24, r20
    33de:	95 07       	cpc	r25, r21
    33e0:	18 f0       	brcs	.+6      	; 0x33e8 <__addsf3x+0x18>
    33e2:	71 f4       	brne	.+28     	; 0x3400 <__addsf3x+0x30>
    33e4:	9e f5       	brtc	.+102    	; 0x344c <__addsf3x+0x7c>
    33e6:	7d c1       	rjmp	.+762    	; 0x36e2 <__fp_zero>
    33e8:	0e f4       	brtc	.+2      	; 0x33ec <__addsf3x+0x1c>
    33ea:	e0 95       	com	r30
    33ec:	0b 2e       	mov	r0, r27
    33ee:	ba 2f       	mov	r27, r26
    33f0:	a0 2d       	mov	r26, r0
    33f2:	0b 01       	movw	r0, r22
    33f4:	b9 01       	movw	r22, r18
    33f6:	90 01       	movw	r18, r0
    33f8:	0c 01       	movw	r0, r24
    33fa:	ca 01       	movw	r24, r20
    33fc:	a0 01       	movw	r20, r0
    33fe:	11 24       	eor	r1, r1
    3400:	ff 27       	eor	r31, r31
    3402:	59 1b       	sub	r21, r25
    3404:	99 f0       	breq	.+38     	; 0x342c <__addsf3x+0x5c>
    3406:	59 3f       	cpi	r21, 0xF9	; 249
    3408:	50 f4       	brcc	.+20     	; 0x341e <__addsf3x+0x4e>
    340a:	50 3e       	cpi	r21, 0xE0	; 224
    340c:	68 f1       	brcs	.+90     	; 0x3468 <__addsf3x+0x98>
    340e:	1a 16       	cp	r1, r26
    3410:	f0 40       	sbci	r31, 0x00	; 0
    3412:	a2 2f       	mov	r26, r18
    3414:	23 2f       	mov	r18, r19
    3416:	34 2f       	mov	r19, r20
    3418:	44 27       	eor	r20, r20
    341a:	58 5f       	subi	r21, 0xF8	; 248
    341c:	f3 cf       	rjmp	.-26     	; 0x3404 <__addsf3x+0x34>
    341e:	46 95       	lsr	r20
    3420:	37 95       	ror	r19
    3422:	27 95       	ror	r18
    3424:	a7 95       	ror	r26
    3426:	f0 40       	sbci	r31, 0x00	; 0
    3428:	53 95       	inc	r21
    342a:	c9 f7       	brne	.-14     	; 0x341e <__addsf3x+0x4e>
    342c:	7e f4       	brtc	.+30     	; 0x344c <__addsf3x+0x7c>
    342e:	1f 16       	cp	r1, r31
    3430:	ba 0b       	sbc	r27, r26
    3432:	62 0b       	sbc	r22, r18
    3434:	73 0b       	sbc	r23, r19
    3436:	84 0b       	sbc	r24, r20
    3438:	ba f0       	brmi	.+46     	; 0x3468 <__addsf3x+0x98>
    343a:	91 50       	subi	r25, 0x01	; 1
    343c:	a1 f0       	breq	.+40     	; 0x3466 <__addsf3x+0x96>
    343e:	ff 0f       	add	r31, r31
    3440:	bb 1f       	adc	r27, r27
    3442:	66 1f       	adc	r22, r22
    3444:	77 1f       	adc	r23, r23
    3446:	88 1f       	adc	r24, r24
    3448:	c2 f7       	brpl	.-16     	; 0x343a <__addsf3x+0x6a>
    344a:	0e c0       	rjmp	.+28     	; 0x3468 <__addsf3x+0x98>
    344c:	ba 0f       	add	r27, r26
    344e:	62 1f       	adc	r22, r18
    3450:	73 1f       	adc	r23, r19
    3452:	84 1f       	adc	r24, r20
    3454:	48 f4       	brcc	.+18     	; 0x3468 <__addsf3x+0x98>
    3456:	87 95       	ror	r24
    3458:	77 95       	ror	r23
    345a:	67 95       	ror	r22
    345c:	b7 95       	ror	r27
    345e:	f7 95       	ror	r31
    3460:	9e 3f       	cpi	r25, 0xFE	; 254
    3462:	08 f0       	brcs	.+2      	; 0x3466 <__addsf3x+0x96>
    3464:	b3 cf       	rjmp	.-154    	; 0x33cc <__addsf3+0x1e>
    3466:	93 95       	inc	r25
    3468:	88 0f       	add	r24, r24
    346a:	08 f0       	brcs	.+2      	; 0x346e <__addsf3x+0x9e>
    346c:	99 27       	eor	r25, r25
    346e:	ee 0f       	add	r30, r30
    3470:	97 95       	ror	r25
    3472:	87 95       	ror	r24
    3474:	08 95       	ret

00003476 <__divsf3>:
    3476:	0c d0       	rcall	.+24     	; 0x3490 <__divsf3x>
    3478:	ea c0       	rjmp	.+468    	; 0x364e <__fp_round>
    347a:	e2 d0       	rcall	.+452    	; 0x3640 <__fp_pscB>
    347c:	40 f0       	brcs	.+16     	; 0x348e <__divsf3+0x18>
    347e:	d9 d0       	rcall	.+434    	; 0x3632 <__fp_pscA>
    3480:	30 f0       	brcs	.+12     	; 0x348e <__divsf3+0x18>
    3482:	21 f4       	brne	.+8      	; 0x348c <__divsf3+0x16>
    3484:	5f 3f       	cpi	r21, 0xFF	; 255
    3486:	19 f0       	breq	.+6      	; 0x348e <__divsf3+0x18>
    3488:	a2 c0       	rjmp	.+324    	; 0x35ce <__fp_inf>
    348a:	51 11       	cpse	r21, r1
    348c:	2b c1       	rjmp	.+598    	; 0x36e4 <__fp_szero>
    348e:	ce c0       	rjmp	.+412    	; 0x362c <__fp_nan>

00003490 <__divsf3x>:
    3490:	ef d0       	rcall	.+478    	; 0x3670 <__fp_split3>
    3492:	98 f3       	brcs	.-26     	; 0x347a <__divsf3+0x4>

00003494 <__divsf3_pse>:
    3494:	99 23       	and	r25, r25
    3496:	c9 f3       	breq	.-14     	; 0x348a <__divsf3+0x14>
    3498:	55 23       	and	r21, r21
    349a:	b1 f3       	breq	.-20     	; 0x3488 <__divsf3+0x12>
    349c:	95 1b       	sub	r25, r21
    349e:	55 0b       	sbc	r21, r21
    34a0:	bb 27       	eor	r27, r27
    34a2:	aa 27       	eor	r26, r26
    34a4:	62 17       	cp	r22, r18
    34a6:	73 07       	cpc	r23, r19
    34a8:	84 07       	cpc	r24, r20
    34aa:	38 f0       	brcs	.+14     	; 0x34ba <__divsf3_pse+0x26>
    34ac:	9f 5f       	subi	r25, 0xFF	; 255
    34ae:	5f 4f       	sbci	r21, 0xFF	; 255
    34b0:	22 0f       	add	r18, r18
    34b2:	33 1f       	adc	r19, r19
    34b4:	44 1f       	adc	r20, r20
    34b6:	aa 1f       	adc	r26, r26
    34b8:	a9 f3       	breq	.-22     	; 0x34a4 <__divsf3_pse+0x10>
    34ba:	33 d0       	rcall	.+102    	; 0x3522 <__divsf3_pse+0x8e>
    34bc:	0e 2e       	mov	r0, r30
    34be:	3a f0       	brmi	.+14     	; 0x34ce <__divsf3_pse+0x3a>
    34c0:	e0 e8       	ldi	r30, 0x80	; 128
    34c2:	30 d0       	rcall	.+96     	; 0x3524 <__divsf3_pse+0x90>
    34c4:	91 50       	subi	r25, 0x01	; 1
    34c6:	50 40       	sbci	r21, 0x00	; 0
    34c8:	e6 95       	lsr	r30
    34ca:	00 1c       	adc	r0, r0
    34cc:	ca f7       	brpl	.-14     	; 0x34c0 <__divsf3_pse+0x2c>
    34ce:	29 d0       	rcall	.+82     	; 0x3522 <__divsf3_pse+0x8e>
    34d0:	fe 2f       	mov	r31, r30
    34d2:	27 d0       	rcall	.+78     	; 0x3522 <__divsf3_pse+0x8e>
    34d4:	66 0f       	add	r22, r22
    34d6:	77 1f       	adc	r23, r23
    34d8:	88 1f       	adc	r24, r24
    34da:	bb 1f       	adc	r27, r27
    34dc:	26 17       	cp	r18, r22
    34de:	37 07       	cpc	r19, r23
    34e0:	48 07       	cpc	r20, r24
    34e2:	ab 07       	cpc	r26, r27
    34e4:	b0 e8       	ldi	r27, 0x80	; 128
    34e6:	09 f0       	breq	.+2      	; 0x34ea <__divsf3_pse+0x56>
    34e8:	bb 0b       	sbc	r27, r27
    34ea:	80 2d       	mov	r24, r0
    34ec:	bf 01       	movw	r22, r30
    34ee:	ff 27       	eor	r31, r31
    34f0:	93 58       	subi	r25, 0x83	; 131
    34f2:	5f 4f       	sbci	r21, 0xFF	; 255
    34f4:	2a f0       	brmi	.+10     	; 0x3500 <__divsf3_pse+0x6c>
    34f6:	9e 3f       	cpi	r25, 0xFE	; 254
    34f8:	51 05       	cpc	r21, r1
    34fa:	68 f0       	brcs	.+26     	; 0x3516 <__divsf3_pse+0x82>
    34fc:	68 c0       	rjmp	.+208    	; 0x35ce <__fp_inf>
    34fe:	f2 c0       	rjmp	.+484    	; 0x36e4 <__fp_szero>
    3500:	5f 3f       	cpi	r21, 0xFF	; 255
    3502:	ec f3       	brlt	.-6      	; 0x34fe <__divsf3_pse+0x6a>
    3504:	98 3e       	cpi	r25, 0xE8	; 232
    3506:	dc f3       	brlt	.-10     	; 0x34fe <__divsf3_pse+0x6a>
    3508:	86 95       	lsr	r24
    350a:	77 95       	ror	r23
    350c:	67 95       	ror	r22
    350e:	b7 95       	ror	r27
    3510:	f7 95       	ror	r31
    3512:	9f 5f       	subi	r25, 0xFF	; 255
    3514:	c9 f7       	brne	.-14     	; 0x3508 <__divsf3_pse+0x74>
    3516:	88 0f       	add	r24, r24
    3518:	91 1d       	adc	r25, r1
    351a:	96 95       	lsr	r25
    351c:	87 95       	ror	r24
    351e:	97 f9       	bld	r25, 7
    3520:	08 95       	ret
    3522:	e1 e0       	ldi	r30, 0x01	; 1
    3524:	66 0f       	add	r22, r22
    3526:	77 1f       	adc	r23, r23
    3528:	88 1f       	adc	r24, r24
    352a:	bb 1f       	adc	r27, r27
    352c:	62 17       	cp	r22, r18
    352e:	73 07       	cpc	r23, r19
    3530:	84 07       	cpc	r24, r20
    3532:	ba 07       	cpc	r27, r26
    3534:	20 f0       	brcs	.+8      	; 0x353e <__divsf3_pse+0xaa>
    3536:	62 1b       	sub	r22, r18
    3538:	73 0b       	sbc	r23, r19
    353a:	84 0b       	sbc	r24, r20
    353c:	ba 0b       	sbc	r27, r26
    353e:	ee 1f       	adc	r30, r30
    3540:	88 f7       	brcc	.-30     	; 0x3524 <__divsf3_pse+0x90>
    3542:	e0 95       	com	r30
    3544:	08 95       	ret

00003546 <__fixsfsi>:
    3546:	04 d0       	rcall	.+8      	; 0x3550 <__fixunssfsi>
    3548:	68 94       	set
    354a:	b1 11       	cpse	r27, r1
    354c:	cb c0       	rjmp	.+406    	; 0x36e4 <__fp_szero>
    354e:	08 95       	ret

00003550 <__fixunssfsi>:
    3550:	97 d0       	rcall	.+302    	; 0x3680 <__fp_splitA>
    3552:	88 f0       	brcs	.+34     	; 0x3576 <__fixunssfsi+0x26>
    3554:	9f 57       	subi	r25, 0x7F	; 127
    3556:	90 f0       	brcs	.+36     	; 0x357c <__fixunssfsi+0x2c>
    3558:	b9 2f       	mov	r27, r25
    355a:	99 27       	eor	r25, r25
    355c:	b7 51       	subi	r27, 0x17	; 23
    355e:	a0 f0       	brcs	.+40     	; 0x3588 <__fixunssfsi+0x38>
    3560:	d1 f0       	breq	.+52     	; 0x3596 <__fixunssfsi+0x46>
    3562:	66 0f       	add	r22, r22
    3564:	77 1f       	adc	r23, r23
    3566:	88 1f       	adc	r24, r24
    3568:	99 1f       	adc	r25, r25
    356a:	1a f0       	brmi	.+6      	; 0x3572 <__fixunssfsi+0x22>
    356c:	ba 95       	dec	r27
    356e:	c9 f7       	brne	.-14     	; 0x3562 <__fixunssfsi+0x12>
    3570:	12 c0       	rjmp	.+36     	; 0x3596 <__fixunssfsi+0x46>
    3572:	b1 30       	cpi	r27, 0x01	; 1
    3574:	81 f0       	breq	.+32     	; 0x3596 <__fixunssfsi+0x46>
    3576:	b5 d0       	rcall	.+362    	; 0x36e2 <__fp_zero>
    3578:	b1 e0       	ldi	r27, 0x01	; 1
    357a:	08 95       	ret
    357c:	b2 c0       	rjmp	.+356    	; 0x36e2 <__fp_zero>
    357e:	67 2f       	mov	r22, r23
    3580:	78 2f       	mov	r23, r24
    3582:	88 27       	eor	r24, r24
    3584:	b8 5f       	subi	r27, 0xF8	; 248
    3586:	39 f0       	breq	.+14     	; 0x3596 <__fixunssfsi+0x46>
    3588:	b9 3f       	cpi	r27, 0xF9	; 249
    358a:	cc f3       	brlt	.-14     	; 0x357e <__fixunssfsi+0x2e>
    358c:	86 95       	lsr	r24
    358e:	77 95       	ror	r23
    3590:	67 95       	ror	r22
    3592:	b3 95       	inc	r27
    3594:	d9 f7       	brne	.-10     	; 0x358c <__fixunssfsi+0x3c>
    3596:	3e f4       	brtc	.+14     	; 0x35a6 <__fixunssfsi+0x56>
    3598:	90 95       	com	r25
    359a:	80 95       	com	r24
    359c:	70 95       	com	r23
    359e:	61 95       	neg	r22
    35a0:	7f 4f       	sbci	r23, 0xFF	; 255
    35a2:	8f 4f       	sbci	r24, 0xFF	; 255
    35a4:	9f 4f       	sbci	r25, 0xFF	; 255
    35a6:	08 95       	ret

000035a8 <floor>:
    35a8:	85 d0       	rcall	.+266    	; 0x36b4 <__fp_trunc>
    35aa:	80 f0       	brcs	.+32     	; 0x35cc <floor+0x24>
    35ac:	9f 37       	cpi	r25, 0x7F	; 127
    35ae:	40 f4       	brcc	.+16     	; 0x35c0 <floor+0x18>
    35b0:	91 11       	cpse	r25, r1
    35b2:	0e f0       	brts	.+2      	; 0x35b6 <floor+0xe>
    35b4:	97 c0       	rjmp	.+302    	; 0x36e4 <__fp_szero>
    35b6:	60 e0       	ldi	r22, 0x00	; 0
    35b8:	70 e0       	ldi	r23, 0x00	; 0
    35ba:	80 e8       	ldi	r24, 0x80	; 128
    35bc:	9f eb       	ldi	r25, 0xBF	; 191
    35be:	08 95       	ret
    35c0:	26 f4       	brtc	.+8      	; 0x35ca <floor+0x22>
    35c2:	1b 16       	cp	r1, r27
    35c4:	61 1d       	adc	r22, r1
    35c6:	71 1d       	adc	r23, r1
    35c8:	81 1d       	adc	r24, r1
    35ca:	07 c0       	rjmp	.+14     	; 0x35da <__fp_mintl>
    35cc:	21 c0       	rjmp	.+66     	; 0x3610 <__fp_mpack>

000035ce <__fp_inf>:
    35ce:	97 f9       	bld	r25, 7
    35d0:	9f 67       	ori	r25, 0x7F	; 127
    35d2:	80 e8       	ldi	r24, 0x80	; 128
    35d4:	70 e0       	ldi	r23, 0x00	; 0
    35d6:	60 e0       	ldi	r22, 0x00	; 0
    35d8:	08 95       	ret

000035da <__fp_mintl>:
    35da:	88 23       	and	r24, r24
    35dc:	71 f4       	brne	.+28     	; 0x35fa <__fp_mintl+0x20>
    35de:	77 23       	and	r23, r23
    35e0:	21 f0       	breq	.+8      	; 0x35ea <__fp_mintl+0x10>
    35e2:	98 50       	subi	r25, 0x08	; 8
    35e4:	87 2b       	or	r24, r23
    35e6:	76 2f       	mov	r23, r22
    35e8:	07 c0       	rjmp	.+14     	; 0x35f8 <__fp_mintl+0x1e>
    35ea:	66 23       	and	r22, r22
    35ec:	11 f4       	brne	.+4      	; 0x35f2 <__fp_mintl+0x18>
    35ee:	99 27       	eor	r25, r25
    35f0:	0d c0       	rjmp	.+26     	; 0x360c <__fp_mintl+0x32>
    35f2:	90 51       	subi	r25, 0x10	; 16
    35f4:	86 2b       	or	r24, r22
    35f6:	70 e0       	ldi	r23, 0x00	; 0
    35f8:	60 e0       	ldi	r22, 0x00	; 0
    35fa:	2a f0       	brmi	.+10     	; 0x3606 <__fp_mintl+0x2c>
    35fc:	9a 95       	dec	r25
    35fe:	66 0f       	add	r22, r22
    3600:	77 1f       	adc	r23, r23
    3602:	88 1f       	adc	r24, r24
    3604:	da f7       	brpl	.-10     	; 0x35fc <__fp_mintl+0x22>
    3606:	88 0f       	add	r24, r24
    3608:	96 95       	lsr	r25
    360a:	87 95       	ror	r24
    360c:	97 f9       	bld	r25, 7
    360e:	08 95       	ret

00003610 <__fp_mpack>:
    3610:	9f 3f       	cpi	r25, 0xFF	; 255
    3612:	31 f0       	breq	.+12     	; 0x3620 <__fp_mpack_finite+0xc>

00003614 <__fp_mpack_finite>:
    3614:	91 50       	subi	r25, 0x01	; 1
    3616:	20 f4       	brcc	.+8      	; 0x3620 <__fp_mpack_finite+0xc>
    3618:	87 95       	ror	r24
    361a:	77 95       	ror	r23
    361c:	67 95       	ror	r22
    361e:	b7 95       	ror	r27
    3620:	88 0f       	add	r24, r24
    3622:	91 1d       	adc	r25, r1
    3624:	96 95       	lsr	r25
    3626:	87 95       	ror	r24
    3628:	97 f9       	bld	r25, 7
    362a:	08 95       	ret

0000362c <__fp_nan>:
    362c:	9f ef       	ldi	r25, 0xFF	; 255
    362e:	80 ec       	ldi	r24, 0xC0	; 192
    3630:	08 95       	ret

00003632 <__fp_pscA>:
    3632:	00 24       	eor	r0, r0
    3634:	0a 94       	dec	r0
    3636:	16 16       	cp	r1, r22
    3638:	17 06       	cpc	r1, r23
    363a:	18 06       	cpc	r1, r24
    363c:	09 06       	cpc	r0, r25
    363e:	08 95       	ret

00003640 <__fp_pscB>:
    3640:	00 24       	eor	r0, r0
    3642:	0a 94       	dec	r0
    3644:	12 16       	cp	r1, r18
    3646:	13 06       	cpc	r1, r19
    3648:	14 06       	cpc	r1, r20
    364a:	05 06       	cpc	r0, r21
    364c:	08 95       	ret

0000364e <__fp_round>:
    364e:	09 2e       	mov	r0, r25
    3650:	03 94       	inc	r0
    3652:	00 0c       	add	r0, r0
    3654:	11 f4       	brne	.+4      	; 0x365a <__fp_round+0xc>
    3656:	88 23       	and	r24, r24
    3658:	52 f0       	brmi	.+20     	; 0x366e <__fp_round+0x20>
    365a:	bb 0f       	add	r27, r27
    365c:	40 f4       	brcc	.+16     	; 0x366e <__fp_round+0x20>
    365e:	bf 2b       	or	r27, r31
    3660:	11 f4       	brne	.+4      	; 0x3666 <__fp_round+0x18>
    3662:	60 ff       	sbrs	r22, 0
    3664:	04 c0       	rjmp	.+8      	; 0x366e <__fp_round+0x20>
    3666:	6f 5f       	subi	r22, 0xFF	; 255
    3668:	7f 4f       	sbci	r23, 0xFF	; 255
    366a:	8f 4f       	sbci	r24, 0xFF	; 255
    366c:	9f 4f       	sbci	r25, 0xFF	; 255
    366e:	08 95       	ret

00003670 <__fp_split3>:
    3670:	57 fd       	sbrc	r21, 7
    3672:	90 58       	subi	r25, 0x80	; 128
    3674:	44 0f       	add	r20, r20
    3676:	55 1f       	adc	r21, r21
    3678:	59 f0       	breq	.+22     	; 0x3690 <__fp_splitA+0x10>
    367a:	5f 3f       	cpi	r21, 0xFF	; 255
    367c:	71 f0       	breq	.+28     	; 0x369a <__fp_splitA+0x1a>
    367e:	47 95       	ror	r20

00003680 <__fp_splitA>:
    3680:	88 0f       	add	r24, r24
    3682:	97 fb       	bst	r25, 7
    3684:	99 1f       	adc	r25, r25
    3686:	61 f0       	breq	.+24     	; 0x36a0 <__fp_splitA+0x20>
    3688:	9f 3f       	cpi	r25, 0xFF	; 255
    368a:	79 f0       	breq	.+30     	; 0x36aa <__fp_splitA+0x2a>
    368c:	87 95       	ror	r24
    368e:	08 95       	ret
    3690:	12 16       	cp	r1, r18
    3692:	13 06       	cpc	r1, r19
    3694:	14 06       	cpc	r1, r20
    3696:	55 1f       	adc	r21, r21
    3698:	f2 cf       	rjmp	.-28     	; 0x367e <__fp_split3+0xe>
    369a:	46 95       	lsr	r20
    369c:	f1 df       	rcall	.-30     	; 0x3680 <__fp_splitA>
    369e:	08 c0       	rjmp	.+16     	; 0x36b0 <__fp_splitA+0x30>
    36a0:	16 16       	cp	r1, r22
    36a2:	17 06       	cpc	r1, r23
    36a4:	18 06       	cpc	r1, r24
    36a6:	99 1f       	adc	r25, r25
    36a8:	f1 cf       	rjmp	.-30     	; 0x368c <__fp_splitA+0xc>
    36aa:	86 95       	lsr	r24
    36ac:	71 05       	cpc	r23, r1
    36ae:	61 05       	cpc	r22, r1
    36b0:	08 94       	sec
    36b2:	08 95       	ret

000036b4 <__fp_trunc>:
    36b4:	e5 df       	rcall	.-54     	; 0x3680 <__fp_splitA>
    36b6:	a0 f0       	brcs	.+40     	; 0x36e0 <__fp_trunc+0x2c>
    36b8:	be e7       	ldi	r27, 0x7E	; 126
    36ba:	b9 17       	cp	r27, r25
    36bc:	88 f4       	brcc	.+34     	; 0x36e0 <__fp_trunc+0x2c>
    36be:	bb 27       	eor	r27, r27
    36c0:	9f 38       	cpi	r25, 0x8F	; 143
    36c2:	60 f4       	brcc	.+24     	; 0x36dc <__fp_trunc+0x28>
    36c4:	16 16       	cp	r1, r22
    36c6:	b1 1d       	adc	r27, r1
    36c8:	67 2f       	mov	r22, r23
    36ca:	78 2f       	mov	r23, r24
    36cc:	88 27       	eor	r24, r24
    36ce:	98 5f       	subi	r25, 0xF8	; 248
    36d0:	f7 cf       	rjmp	.-18     	; 0x36c0 <__fp_trunc+0xc>
    36d2:	86 95       	lsr	r24
    36d4:	77 95       	ror	r23
    36d6:	67 95       	ror	r22
    36d8:	b1 1d       	adc	r27, r1
    36da:	93 95       	inc	r25
    36dc:	96 39       	cpi	r25, 0x96	; 150
    36de:	c8 f3       	brcs	.-14     	; 0x36d2 <__fp_trunc+0x1e>
    36e0:	08 95       	ret

000036e2 <__fp_zero>:
    36e2:	e8 94       	clt

000036e4 <__fp_szero>:
    36e4:	bb 27       	eor	r27, r27
    36e6:	66 27       	eor	r22, r22
    36e8:	77 27       	eor	r23, r23
    36ea:	cb 01       	movw	r24, r22
    36ec:	97 f9       	bld	r25, 7
    36ee:	08 95       	ret

000036f0 <__mulsf3>:
    36f0:	0b d0       	rcall	.+22     	; 0x3708 <__mulsf3x>
    36f2:	ad cf       	rjmp	.-166    	; 0x364e <__fp_round>
    36f4:	9e df       	rcall	.-196    	; 0x3632 <__fp_pscA>
    36f6:	28 f0       	brcs	.+10     	; 0x3702 <__mulsf3+0x12>
    36f8:	a3 df       	rcall	.-186    	; 0x3640 <__fp_pscB>
    36fa:	18 f0       	brcs	.+6      	; 0x3702 <__mulsf3+0x12>
    36fc:	95 23       	and	r25, r21
    36fe:	09 f0       	breq	.+2      	; 0x3702 <__mulsf3+0x12>
    3700:	66 cf       	rjmp	.-308    	; 0x35ce <__fp_inf>
    3702:	94 cf       	rjmp	.-216    	; 0x362c <__fp_nan>
    3704:	11 24       	eor	r1, r1
    3706:	ee cf       	rjmp	.-36     	; 0x36e4 <__fp_szero>

00003708 <__mulsf3x>:
    3708:	b3 df       	rcall	.-154    	; 0x3670 <__fp_split3>
    370a:	a0 f3       	brcs	.-24     	; 0x36f4 <__mulsf3+0x4>

0000370c <__mulsf3_pse>:
    370c:	95 9f       	mul	r25, r21
    370e:	d1 f3       	breq	.-12     	; 0x3704 <__mulsf3+0x14>
    3710:	95 0f       	add	r25, r21
    3712:	50 e0       	ldi	r21, 0x00	; 0
    3714:	55 1f       	adc	r21, r21
    3716:	62 9f       	mul	r22, r18
    3718:	f0 01       	movw	r30, r0
    371a:	72 9f       	mul	r23, r18
    371c:	bb 27       	eor	r27, r27
    371e:	f0 0d       	add	r31, r0
    3720:	b1 1d       	adc	r27, r1
    3722:	63 9f       	mul	r22, r19
    3724:	aa 27       	eor	r26, r26
    3726:	f0 0d       	add	r31, r0
    3728:	b1 1d       	adc	r27, r1
    372a:	aa 1f       	adc	r26, r26
    372c:	64 9f       	mul	r22, r20
    372e:	66 27       	eor	r22, r22
    3730:	b0 0d       	add	r27, r0
    3732:	a1 1d       	adc	r26, r1
    3734:	66 1f       	adc	r22, r22
    3736:	82 9f       	mul	r24, r18
    3738:	22 27       	eor	r18, r18
    373a:	b0 0d       	add	r27, r0
    373c:	a1 1d       	adc	r26, r1
    373e:	62 1f       	adc	r22, r18
    3740:	73 9f       	mul	r23, r19
    3742:	b0 0d       	add	r27, r0
    3744:	a1 1d       	adc	r26, r1
    3746:	62 1f       	adc	r22, r18
    3748:	83 9f       	mul	r24, r19
    374a:	a0 0d       	add	r26, r0
    374c:	61 1d       	adc	r22, r1
    374e:	22 1f       	adc	r18, r18
    3750:	74 9f       	mul	r23, r20
    3752:	33 27       	eor	r19, r19
    3754:	a0 0d       	add	r26, r0
    3756:	61 1d       	adc	r22, r1
    3758:	23 1f       	adc	r18, r19
    375a:	84 9f       	mul	r24, r20
    375c:	60 0d       	add	r22, r0
    375e:	21 1d       	adc	r18, r1
    3760:	82 2f       	mov	r24, r18
    3762:	76 2f       	mov	r23, r22
    3764:	6a 2f       	mov	r22, r26
    3766:	11 24       	eor	r1, r1
    3768:	9f 57       	subi	r25, 0x7F	; 127
    376a:	50 40       	sbci	r21, 0x00	; 0
    376c:	8a f0       	brmi	.+34     	; 0x3790 <__mulsf3_pse+0x84>
    376e:	e1 f0       	breq	.+56     	; 0x37a8 <__mulsf3_pse+0x9c>
    3770:	88 23       	and	r24, r24
    3772:	4a f0       	brmi	.+18     	; 0x3786 <__mulsf3_pse+0x7a>
    3774:	ee 0f       	add	r30, r30
    3776:	ff 1f       	adc	r31, r31
    3778:	bb 1f       	adc	r27, r27
    377a:	66 1f       	adc	r22, r22
    377c:	77 1f       	adc	r23, r23
    377e:	88 1f       	adc	r24, r24
    3780:	91 50       	subi	r25, 0x01	; 1
    3782:	50 40       	sbci	r21, 0x00	; 0
    3784:	a9 f7       	brne	.-22     	; 0x3770 <__mulsf3_pse+0x64>
    3786:	9e 3f       	cpi	r25, 0xFE	; 254
    3788:	51 05       	cpc	r21, r1
    378a:	70 f0       	brcs	.+28     	; 0x37a8 <__mulsf3_pse+0x9c>
    378c:	20 cf       	rjmp	.-448    	; 0x35ce <__fp_inf>
    378e:	aa cf       	rjmp	.-172    	; 0x36e4 <__fp_szero>
    3790:	5f 3f       	cpi	r21, 0xFF	; 255
    3792:	ec f3       	brlt	.-6      	; 0x378e <__mulsf3_pse+0x82>
    3794:	98 3e       	cpi	r25, 0xE8	; 232
    3796:	dc f3       	brlt	.-10     	; 0x378e <__mulsf3_pse+0x82>
    3798:	86 95       	lsr	r24
    379a:	77 95       	ror	r23
    379c:	67 95       	ror	r22
    379e:	b7 95       	ror	r27
    37a0:	f7 95       	ror	r31
    37a2:	e7 95       	ror	r30
    37a4:	9f 5f       	subi	r25, 0xFF	; 255
    37a6:	c1 f7       	brne	.-16     	; 0x3798 <__mulsf3_pse+0x8c>
    37a8:	fe 2b       	or	r31, r30
    37aa:	88 0f       	add	r24, r24
    37ac:	91 1d       	adc	r25, r1
    37ae:	96 95       	lsr	r25
    37b0:	87 95       	ror	r24
    37b2:	97 f9       	bld	r25, 7
    37b4:	08 95       	ret

000037b6 <pow>:
    37b6:	fa 01       	movw	r30, r20
    37b8:	ee 0f       	add	r30, r30
    37ba:	ff 1f       	adc	r31, r31
    37bc:	30 96       	adiw	r30, 0x00	; 0
    37be:	21 05       	cpc	r18, r1
    37c0:	31 05       	cpc	r19, r1
    37c2:	99 f1       	breq	.+102    	; 0x382a <pow+0x74>
    37c4:	61 15       	cp	r22, r1
    37c6:	71 05       	cpc	r23, r1
    37c8:	61 f4       	brne	.+24     	; 0x37e2 <pow+0x2c>
    37ca:	80 38       	cpi	r24, 0x80	; 128
    37cc:	bf e3       	ldi	r27, 0x3F	; 63
    37ce:	9b 07       	cpc	r25, r27
    37d0:	49 f1       	breq	.+82     	; 0x3824 <pow+0x6e>
    37d2:	68 94       	set
    37d4:	90 38       	cpi	r25, 0x80	; 128
    37d6:	81 05       	cpc	r24, r1
    37d8:	61 f0       	breq	.+24     	; 0x37f2 <pow+0x3c>
    37da:	80 38       	cpi	r24, 0x80	; 128
    37dc:	bf ef       	ldi	r27, 0xFF	; 255
    37de:	9b 07       	cpc	r25, r27
    37e0:	41 f0       	breq	.+16     	; 0x37f2 <pow+0x3c>
    37e2:	99 23       	and	r25, r25
    37e4:	42 f5       	brpl	.+80     	; 0x3836 <pow+0x80>
    37e6:	ff 3f       	cpi	r31, 0xFF	; 255
    37e8:	e1 05       	cpc	r30, r1
    37ea:	31 05       	cpc	r19, r1
    37ec:	21 05       	cpc	r18, r1
    37ee:	11 f1       	breq	.+68     	; 0x3834 <pow+0x7e>
    37f0:	e8 94       	clt
    37f2:	08 94       	sec
    37f4:	e7 95       	ror	r30
    37f6:	d9 01       	movw	r26, r18
    37f8:	aa 23       	and	r26, r26
    37fa:	29 f4       	brne	.+10     	; 0x3806 <pow+0x50>
    37fc:	ab 2f       	mov	r26, r27
    37fe:	be 2f       	mov	r27, r30
    3800:	f8 5f       	subi	r31, 0xF8	; 248
    3802:	d0 f3       	brcs	.-12     	; 0x37f8 <pow+0x42>
    3804:	10 c0       	rjmp	.+32     	; 0x3826 <pow+0x70>
    3806:	ff 5f       	subi	r31, 0xFF	; 255
    3808:	70 f4       	brcc	.+28     	; 0x3826 <pow+0x70>
    380a:	a6 95       	lsr	r26
    380c:	e0 f7       	brcc	.-8      	; 0x3806 <pow+0x50>
    380e:	f7 39       	cpi	r31, 0x97	; 151
    3810:	50 f0       	brcs	.+20     	; 0x3826 <pow+0x70>
    3812:	19 f0       	breq	.+6      	; 0x381a <pow+0x64>
    3814:	ff 3a       	cpi	r31, 0xAF	; 175
    3816:	38 f4       	brcc	.+14     	; 0x3826 <pow+0x70>
    3818:	9f 77       	andi	r25, 0x7F	; 127
    381a:	9f 93       	push	r25
    381c:	0c d0       	rcall	.+24     	; 0x3836 <pow+0x80>
    381e:	0f 90       	pop	r0
    3820:	07 fc       	sbrc	r0, 7
    3822:	90 58       	subi	r25, 0x80	; 128
    3824:	08 95       	ret
    3826:	3e f0       	brts	.+14     	; 0x3836 <pow+0x80>
    3828:	01 cf       	rjmp	.-510    	; 0x362c <__fp_nan>
    382a:	60 e0       	ldi	r22, 0x00	; 0
    382c:	70 e0       	ldi	r23, 0x00	; 0
    382e:	80 e8       	ldi	r24, 0x80	; 128
    3830:	9f e3       	ldi	r25, 0x3F	; 63
    3832:	08 95       	ret
    3834:	4f e7       	ldi	r20, 0x7F	; 127
    3836:	9f 77       	andi	r25, 0x7F	; 127
    3838:	5f 93       	push	r21
    383a:	4f 93       	push	r20
    383c:	3f 93       	push	r19
    383e:	2f 93       	push	r18
    3840:	9e d0       	rcall	.+316    	; 0x397e <log>
    3842:	2f 91       	pop	r18
    3844:	3f 91       	pop	r19
    3846:	4f 91       	pop	r20
    3848:	5f 91       	pop	r21
    384a:	52 df       	rcall	.-348    	; 0x36f0 <__mulsf3>
    384c:	05 c0       	rjmp	.+10     	; 0x3858 <exp>
    384e:	19 f4       	brne	.+6      	; 0x3856 <pow+0xa0>
    3850:	0e f0       	brts	.+2      	; 0x3854 <pow+0x9e>
    3852:	bd ce       	rjmp	.-646    	; 0x35ce <__fp_inf>
    3854:	46 cf       	rjmp	.-372    	; 0x36e2 <__fp_zero>
    3856:	ea ce       	rjmp	.-556    	; 0x362c <__fp_nan>

00003858 <exp>:
    3858:	13 df       	rcall	.-474    	; 0x3680 <__fp_splitA>
    385a:	c8 f3       	brcs	.-14     	; 0x384e <pow+0x98>
    385c:	96 38       	cpi	r25, 0x86	; 134
    385e:	c0 f7       	brcc	.-16     	; 0x3850 <pow+0x9a>
    3860:	07 f8       	bld	r0, 7
    3862:	0f 92       	push	r0
    3864:	e8 94       	clt
    3866:	2b e3       	ldi	r18, 0x3B	; 59
    3868:	3a ea       	ldi	r19, 0xAA	; 170
    386a:	48 eb       	ldi	r20, 0xB8	; 184
    386c:	5f e7       	ldi	r21, 0x7F	; 127
    386e:	4e df       	rcall	.-356    	; 0x370c <__mulsf3_pse>
    3870:	0f 92       	push	r0
    3872:	0f 92       	push	r0
    3874:	0f 92       	push	r0
    3876:	4d b7       	in	r20, 0x3d	; 61
    3878:	5e b7       	in	r21, 0x3e	; 62
    387a:	0f 92       	push	r0
    387c:	c1 d0       	rcall	.+386    	; 0x3a00 <modf>
    387e:	e8 ef       	ldi	r30, 0xF8	; 248
    3880:	f0 e0       	ldi	r31, 0x00	; 0
    3882:	16 d0       	rcall	.+44     	; 0x38b0 <__fp_powser>
    3884:	4f 91       	pop	r20
    3886:	5f 91       	pop	r21
    3888:	ef 91       	pop	r30
    388a:	ff 91       	pop	r31
    388c:	e5 95       	asr	r30
    388e:	ee 1f       	adc	r30, r30
    3890:	ff 1f       	adc	r31, r31
    3892:	49 f0       	breq	.+18     	; 0x38a6 <exp+0x4e>
    3894:	fe 57       	subi	r31, 0x7E	; 126
    3896:	e0 68       	ori	r30, 0x80	; 128
    3898:	44 27       	eor	r20, r20
    389a:	ee 0f       	add	r30, r30
    389c:	44 1f       	adc	r20, r20
    389e:	fa 95       	dec	r31
    38a0:	e1 f7       	brne	.-8      	; 0x389a <exp+0x42>
    38a2:	41 95       	neg	r20
    38a4:	55 0b       	sbc	r21, r21
    38a6:	32 d0       	rcall	.+100    	; 0x390c <ldexp>
    38a8:	0f 90       	pop	r0
    38aa:	07 fe       	sbrs	r0, 7
    38ac:	26 c0       	rjmp	.+76     	; 0x38fa <inverse>
    38ae:	08 95       	ret

000038b0 <__fp_powser>:
    38b0:	df 93       	push	r29
    38b2:	cf 93       	push	r28
    38b4:	1f 93       	push	r17
    38b6:	0f 93       	push	r16
    38b8:	ff 92       	push	r15
    38ba:	ef 92       	push	r14
    38bc:	df 92       	push	r13
    38be:	7b 01       	movw	r14, r22
    38c0:	8c 01       	movw	r16, r24
    38c2:	68 94       	set
    38c4:	05 c0       	rjmp	.+10     	; 0x38d0 <__fp_powser+0x20>
    38c6:	da 2e       	mov	r13, r26
    38c8:	ef 01       	movw	r28, r30
    38ca:	1e df       	rcall	.-452    	; 0x3708 <__mulsf3x>
    38cc:	fe 01       	movw	r30, r28
    38ce:	e8 94       	clt
    38d0:	a5 91       	lpm	r26, Z+
    38d2:	25 91       	lpm	r18, Z+
    38d4:	35 91       	lpm	r19, Z+
    38d6:	45 91       	lpm	r20, Z+
    38d8:	55 91       	lpm	r21, Z+
    38da:	ae f3       	brts	.-22     	; 0x38c6 <__fp_powser+0x16>
    38dc:	ef 01       	movw	r28, r30
    38de:	78 dd       	rcall	.-1296   	; 0x33d0 <__addsf3x>
    38e0:	fe 01       	movw	r30, r28
    38e2:	97 01       	movw	r18, r14
    38e4:	a8 01       	movw	r20, r16
    38e6:	da 94       	dec	r13
    38e8:	79 f7       	brne	.-34     	; 0x38c8 <__fp_powser+0x18>
    38ea:	df 90       	pop	r13
    38ec:	ef 90       	pop	r14
    38ee:	ff 90       	pop	r15
    38f0:	0f 91       	pop	r16
    38f2:	1f 91       	pop	r17
    38f4:	cf 91       	pop	r28
    38f6:	df 91       	pop	r29
    38f8:	08 95       	ret

000038fa <inverse>:
    38fa:	9b 01       	movw	r18, r22
    38fc:	ac 01       	movw	r20, r24
    38fe:	60 e0       	ldi	r22, 0x00	; 0
    3900:	70 e0       	ldi	r23, 0x00	; 0
    3902:	80 e8       	ldi	r24, 0x80	; 128
    3904:	9f e3       	ldi	r25, 0x3F	; 63
    3906:	b7 cd       	rjmp	.-1170   	; 0x3476 <__divsf3>
    3908:	62 ce       	rjmp	.-828    	; 0x35ce <__fp_inf>
    390a:	82 ce       	rjmp	.-764    	; 0x3610 <__fp_mpack>

0000390c <ldexp>:
    390c:	b9 de       	rcall	.-654    	; 0x3680 <__fp_splitA>
    390e:	e8 f3       	brcs	.-6      	; 0x390a <inverse+0x10>
    3910:	99 23       	and	r25, r25
    3912:	d9 f3       	breq	.-10     	; 0x390a <inverse+0x10>
    3914:	94 0f       	add	r25, r20
    3916:	51 1d       	adc	r21, r1
    3918:	bb f3       	brvs	.-18     	; 0x3908 <inverse+0xe>
    391a:	91 50       	subi	r25, 0x01	; 1
    391c:	50 40       	sbci	r21, 0x00	; 0
    391e:	94 f0       	brlt	.+36     	; 0x3944 <ldexp+0x38>
    3920:	59 f0       	breq	.+22     	; 0x3938 <ldexp+0x2c>
    3922:	88 23       	and	r24, r24
    3924:	32 f0       	brmi	.+12     	; 0x3932 <ldexp+0x26>
    3926:	66 0f       	add	r22, r22
    3928:	77 1f       	adc	r23, r23
    392a:	88 1f       	adc	r24, r24
    392c:	91 50       	subi	r25, 0x01	; 1
    392e:	50 40       	sbci	r21, 0x00	; 0
    3930:	c1 f7       	brne	.-16     	; 0x3922 <ldexp+0x16>
    3932:	9e 3f       	cpi	r25, 0xFE	; 254
    3934:	51 05       	cpc	r21, r1
    3936:	44 f7       	brge	.-48     	; 0x3908 <inverse+0xe>
    3938:	88 0f       	add	r24, r24
    393a:	91 1d       	adc	r25, r1
    393c:	96 95       	lsr	r25
    393e:	87 95       	ror	r24
    3940:	97 f9       	bld	r25, 7
    3942:	08 95       	ret
    3944:	5f 3f       	cpi	r21, 0xFF	; 255
    3946:	ac f0       	brlt	.+42     	; 0x3972 <ldexp+0x66>
    3948:	98 3e       	cpi	r25, 0xE8	; 232
    394a:	9c f0       	brlt	.+38     	; 0x3972 <ldexp+0x66>
    394c:	bb 27       	eor	r27, r27
    394e:	86 95       	lsr	r24
    3950:	77 95       	ror	r23
    3952:	67 95       	ror	r22
    3954:	b7 95       	ror	r27
    3956:	08 f4       	brcc	.+2      	; 0x395a <ldexp+0x4e>
    3958:	b1 60       	ori	r27, 0x01	; 1
    395a:	93 95       	inc	r25
    395c:	c1 f7       	brne	.-16     	; 0x394e <ldexp+0x42>
    395e:	bb 0f       	add	r27, r27
    3960:	58 f7       	brcc	.-42     	; 0x3938 <ldexp+0x2c>
    3962:	11 f4       	brne	.+4      	; 0x3968 <ldexp+0x5c>
    3964:	60 ff       	sbrs	r22, 0
    3966:	e8 cf       	rjmp	.-48     	; 0x3938 <ldexp+0x2c>
    3968:	6f 5f       	subi	r22, 0xFF	; 255
    396a:	7f 4f       	sbci	r23, 0xFF	; 255
    396c:	8f 4f       	sbci	r24, 0xFF	; 255
    396e:	9f 4f       	sbci	r25, 0xFF	; 255
    3970:	e3 cf       	rjmp	.-58     	; 0x3938 <ldexp+0x2c>
    3972:	b8 ce       	rjmp	.-656    	; 0x36e4 <__fp_szero>
    3974:	0e f0       	brts	.+2      	; 0x3978 <ldexp+0x6c>
    3976:	4c ce       	rjmp	.-872    	; 0x3610 <__fp_mpack>
    3978:	59 ce       	rjmp	.-846    	; 0x362c <__fp_nan>
    397a:	68 94       	set
    397c:	28 ce       	rjmp	.-944    	; 0x35ce <__fp_inf>

0000397e <log>:
    397e:	80 de       	rcall	.-768    	; 0x3680 <__fp_splitA>
    3980:	c8 f3       	brcs	.-14     	; 0x3974 <ldexp+0x68>
    3982:	99 23       	and	r25, r25
    3984:	d1 f3       	breq	.-12     	; 0x397a <ldexp+0x6e>
    3986:	c6 f3       	brts	.-16     	; 0x3978 <ldexp+0x6c>
    3988:	df 93       	push	r29
    398a:	cf 93       	push	r28
    398c:	1f 93       	push	r17
    398e:	0f 93       	push	r16
    3990:	ff 92       	push	r15
    3992:	c9 2f       	mov	r28, r25
    3994:	dd 27       	eor	r29, r29
    3996:	88 23       	and	r24, r24
    3998:	2a f0       	brmi	.+10     	; 0x39a4 <log+0x26>
    399a:	21 97       	sbiw	r28, 0x01	; 1
    399c:	66 0f       	add	r22, r22
    399e:	77 1f       	adc	r23, r23
    39a0:	88 1f       	adc	r24, r24
    39a2:	da f7       	brpl	.-10     	; 0x399a <log+0x1c>
    39a4:	20 e0       	ldi	r18, 0x00	; 0
    39a6:	30 e0       	ldi	r19, 0x00	; 0
    39a8:	40 e8       	ldi	r20, 0x80	; 128
    39aa:	5f eb       	ldi	r21, 0xBF	; 191
    39ac:	9f e3       	ldi	r25, 0x3F	; 63
    39ae:	88 39       	cpi	r24, 0x98	; 152
    39b0:	20 f0       	brcs	.+8      	; 0x39ba <log+0x3c>
    39b2:	80 3e       	cpi	r24, 0xE0	; 224
    39b4:	30 f0       	brcs	.+12     	; 0x39c2 <log+0x44>
    39b6:	21 96       	adiw	r28, 0x01	; 1
    39b8:	8f 77       	andi	r24, 0x7F	; 127
    39ba:	f9 dc       	rcall	.-1550   	; 0x33ae <__addsf3>
    39bc:	e0 e2       	ldi	r30, 0x20	; 32
    39be:	f1 e0       	ldi	r31, 0x01	; 1
    39c0:	03 c0       	rjmp	.+6      	; 0x39c8 <log+0x4a>
    39c2:	f5 dc       	rcall	.-1558   	; 0x33ae <__addsf3>
    39c4:	ed e4       	ldi	r30, 0x4D	; 77
    39c6:	f1 e0       	ldi	r31, 0x01	; 1
    39c8:	73 df       	rcall	.-282    	; 0x38b0 <__fp_powser>
    39ca:	8b 01       	movw	r16, r22
    39cc:	be 01       	movw	r22, r28
    39ce:	ec 01       	movw	r28, r24
    39d0:	fb 2e       	mov	r15, r27
    39d2:	6f 57       	subi	r22, 0x7F	; 127
    39d4:	71 09       	sbc	r23, r1
    39d6:	75 95       	asr	r23
    39d8:	77 1f       	adc	r23, r23
    39da:	88 0b       	sbc	r24, r24
    39dc:	99 0b       	sbc	r25, r25
    39de:	0e 94 1d 12 	call	0x243a	; 0x243a <__floatsisf>
    39e2:	28 e1       	ldi	r18, 0x18	; 24
    39e4:	32 e7       	ldi	r19, 0x72	; 114
    39e6:	41 e3       	ldi	r20, 0x31	; 49
    39e8:	5f e3       	ldi	r21, 0x3F	; 63
    39ea:	8e de       	rcall	.-740    	; 0x3708 <__mulsf3x>
    39ec:	af 2d       	mov	r26, r15
    39ee:	98 01       	movw	r18, r16
    39f0:	ae 01       	movw	r20, r28
    39f2:	ff 90       	pop	r15
    39f4:	0f 91       	pop	r16
    39f6:	1f 91       	pop	r17
    39f8:	cf 91       	pop	r28
    39fa:	df 91       	pop	r29
    39fc:	e9 dc       	rcall	.-1582   	; 0x33d0 <__addsf3x>
    39fe:	27 ce       	rjmp	.-946    	; 0x364e <__fp_round>

00003a00 <modf>:
    3a00:	fa 01       	movw	r30, r20
    3a02:	dc 01       	movw	r26, r24
    3a04:	aa 0f       	add	r26, r26
    3a06:	bb 1f       	adc	r27, r27
    3a08:	9b 01       	movw	r18, r22
    3a0a:	ac 01       	movw	r20, r24
    3a0c:	bf 57       	subi	r27, 0x7F	; 127
    3a0e:	28 f4       	brcc	.+10     	; 0x3a1a <modf+0x1a>
    3a10:	22 27       	eor	r18, r18
    3a12:	33 27       	eor	r19, r19
    3a14:	44 27       	eor	r20, r20
    3a16:	50 78       	andi	r21, 0x80	; 128
    3a18:	1f c0       	rjmp	.+62     	; 0x3a58 <modf+0x58>
    3a1a:	b7 51       	subi	r27, 0x17	; 23
    3a1c:	88 f4       	brcc	.+34     	; 0x3a40 <modf+0x40>
    3a1e:	ab 2f       	mov	r26, r27
    3a20:	00 24       	eor	r0, r0
    3a22:	46 95       	lsr	r20
    3a24:	37 95       	ror	r19
    3a26:	27 95       	ror	r18
    3a28:	01 1c       	adc	r0, r1
    3a2a:	a3 95       	inc	r26
    3a2c:	d2 f3       	brmi	.-12     	; 0x3a22 <modf+0x22>
    3a2e:	00 20       	and	r0, r0
    3a30:	69 f0       	breq	.+26     	; 0x3a4c <modf+0x4c>
    3a32:	22 0f       	add	r18, r18
    3a34:	33 1f       	adc	r19, r19
    3a36:	44 1f       	adc	r20, r20
    3a38:	b3 95       	inc	r27
    3a3a:	da f3       	brmi	.-10     	; 0x3a32 <modf+0x32>
    3a3c:	0d d0       	rcall	.+26     	; 0x3a58 <modf+0x58>
    3a3e:	b6 cc       	rjmp	.-1684   	; 0x33ac <__subsf3>
    3a40:	61 30       	cpi	r22, 0x01	; 1
    3a42:	71 05       	cpc	r23, r1
    3a44:	a0 e8       	ldi	r26, 0x80	; 128
    3a46:	8a 07       	cpc	r24, r26
    3a48:	b9 46       	sbci	r27, 0x69	; 105
    3a4a:	30 f4       	brcc	.+12     	; 0x3a58 <modf+0x58>
    3a4c:	9b 01       	movw	r18, r22
    3a4e:	ac 01       	movw	r20, r24
    3a50:	66 27       	eor	r22, r22
    3a52:	77 27       	eor	r23, r23
    3a54:	88 27       	eor	r24, r24
    3a56:	90 78       	andi	r25, 0x80	; 128
    3a58:	30 96       	adiw	r30, 0x00	; 0
    3a5a:	21 f0       	breq	.+8      	; 0x3a64 <modf+0x64>
    3a5c:	20 83       	st	Z, r18
    3a5e:	31 83       	std	Z+1, r19	; 0x01
    3a60:	42 83       	std	Z+2, r20	; 0x02
    3a62:	53 83       	std	Z+3, r21	; 0x03
    3a64:	08 95       	ret

00003a66 <__divmodhi4>:
    3a66:	97 fb       	bst	r25, 7
    3a68:	07 2e       	mov	r0, r23
    3a6a:	16 f4       	brtc	.+4      	; 0x3a70 <__divmodhi4+0xa>
    3a6c:	00 94       	com	r0
    3a6e:	06 d0       	rcall	.+12     	; 0x3a7c <__divmodhi4_neg1>
    3a70:	77 fd       	sbrc	r23, 7
    3a72:	08 d0       	rcall	.+16     	; 0x3a84 <__divmodhi4_neg2>
    3a74:	13 d0       	rcall	.+38     	; 0x3a9c <__udivmodhi4>
    3a76:	07 fc       	sbrc	r0, 7
    3a78:	05 d0       	rcall	.+10     	; 0x3a84 <__divmodhi4_neg2>
    3a7a:	3e f4       	brtc	.+14     	; 0x3a8a <__divmodhi4_exit>

00003a7c <__divmodhi4_neg1>:
    3a7c:	90 95       	com	r25
    3a7e:	81 95       	neg	r24
    3a80:	9f 4f       	sbci	r25, 0xFF	; 255
    3a82:	08 95       	ret

00003a84 <__divmodhi4_neg2>:
    3a84:	70 95       	com	r23
    3a86:	61 95       	neg	r22
    3a88:	7f 4f       	sbci	r23, 0xFF	; 255

00003a8a <__divmodhi4_exit>:
    3a8a:	08 95       	ret

00003a8c <__tablejump2__>:
    3a8c:	ee 0f       	add	r30, r30
    3a8e:	ff 1f       	adc	r31, r31
    3a90:	88 1f       	adc	r24, r24
    3a92:	8b bf       	out	0x3b, r24	; 59
    3a94:	07 90       	elpm	r0, Z+
    3a96:	f6 91       	elpm	r31, Z
    3a98:	e0 2d       	mov	r30, r0
    3a9a:	19 94       	eijmp

00003a9c <__udivmodhi4>:
    3a9c:	aa 1b       	sub	r26, r26
    3a9e:	bb 1b       	sub	r27, r27
    3aa0:	51 e1       	ldi	r21, 0x11	; 17
    3aa2:	07 c0       	rjmp	.+14     	; 0x3ab2 <__udivmodhi4_ep>

00003aa4 <__udivmodhi4_loop>:
    3aa4:	aa 1f       	adc	r26, r26
    3aa6:	bb 1f       	adc	r27, r27
    3aa8:	a6 17       	cp	r26, r22
    3aaa:	b7 07       	cpc	r27, r23
    3aac:	10 f0       	brcs	.+4      	; 0x3ab2 <__udivmodhi4_ep>
    3aae:	a6 1b       	sub	r26, r22
    3ab0:	b7 0b       	sbc	r27, r23

00003ab2 <__udivmodhi4_ep>:
    3ab2:	88 1f       	adc	r24, r24
    3ab4:	99 1f       	adc	r25, r25
    3ab6:	5a 95       	dec	r21
    3ab8:	a9 f7       	brne	.-22     	; 0x3aa4 <__udivmodhi4_loop>
    3aba:	80 95       	com	r24
    3abc:	90 95       	com	r25
    3abe:	bc 01       	movw	r22, r24
    3ac0:	cd 01       	movw	r24, r26
    3ac2:	08 95       	ret

00003ac4 <calloc>:
    3ac4:	0f 93       	push	r16
    3ac6:	1f 93       	push	r17
    3ac8:	cf 93       	push	r28
    3aca:	df 93       	push	r29
    3acc:	86 9f       	mul	r24, r22
    3ace:	80 01       	movw	r16, r0
    3ad0:	87 9f       	mul	r24, r23
    3ad2:	10 0d       	add	r17, r0
    3ad4:	96 9f       	mul	r25, r22
    3ad6:	10 0d       	add	r17, r0
    3ad8:	11 24       	eor	r1, r1
    3ada:	c8 01       	movw	r24, r16
    3adc:	0d d0       	rcall	.+26     	; 0x3af8 <malloc>
    3ade:	ec 01       	movw	r28, r24
    3ae0:	00 97       	sbiw	r24, 0x00	; 0
    3ae2:	21 f0       	breq	.+8      	; 0x3aec <calloc+0x28>
    3ae4:	a8 01       	movw	r20, r16
    3ae6:	60 e0       	ldi	r22, 0x00	; 0
    3ae8:	70 e0       	ldi	r23, 0x00	; 0
    3aea:	34 d1       	rcall	.+616    	; 0x3d54 <memset>
    3aec:	ce 01       	movw	r24, r28
    3aee:	df 91       	pop	r29
    3af0:	cf 91       	pop	r28
    3af2:	1f 91       	pop	r17
    3af4:	0f 91       	pop	r16
    3af6:	08 95       	ret

00003af8 <malloc>:
    3af8:	0f 93       	push	r16
    3afa:	1f 93       	push	r17
    3afc:	cf 93       	push	r28
    3afe:	df 93       	push	r29
    3b00:	82 30       	cpi	r24, 0x02	; 2
    3b02:	91 05       	cpc	r25, r1
    3b04:	10 f4       	brcc	.+4      	; 0x3b0a <malloc+0x12>
    3b06:	82 e0       	ldi	r24, 0x02	; 2
    3b08:	90 e0       	ldi	r25, 0x00	; 0
    3b0a:	e0 91 56 0d 	lds	r30, 0x0D56	; 0x800d56 <__flp>
    3b0e:	f0 91 57 0d 	lds	r31, 0x0D57	; 0x800d57 <__flp+0x1>
    3b12:	20 e0       	ldi	r18, 0x00	; 0
    3b14:	30 e0       	ldi	r19, 0x00	; 0
    3b16:	a0 e0       	ldi	r26, 0x00	; 0
    3b18:	b0 e0       	ldi	r27, 0x00	; 0
    3b1a:	30 97       	sbiw	r30, 0x00	; 0
    3b1c:	19 f1       	breq	.+70     	; 0x3b64 <malloc+0x6c>
    3b1e:	40 81       	ld	r20, Z
    3b20:	51 81       	ldd	r21, Z+1	; 0x01
    3b22:	02 81       	ldd	r16, Z+2	; 0x02
    3b24:	13 81       	ldd	r17, Z+3	; 0x03
    3b26:	48 17       	cp	r20, r24
    3b28:	59 07       	cpc	r21, r25
    3b2a:	c8 f0       	brcs	.+50     	; 0x3b5e <malloc+0x66>
    3b2c:	84 17       	cp	r24, r20
    3b2e:	95 07       	cpc	r25, r21
    3b30:	69 f4       	brne	.+26     	; 0x3b4c <malloc+0x54>
    3b32:	10 97       	sbiw	r26, 0x00	; 0
    3b34:	31 f0       	breq	.+12     	; 0x3b42 <malloc+0x4a>
    3b36:	12 96       	adiw	r26, 0x02	; 2
    3b38:	0c 93       	st	X, r16
    3b3a:	12 97       	sbiw	r26, 0x02	; 2
    3b3c:	13 96       	adiw	r26, 0x03	; 3
    3b3e:	1c 93       	st	X, r17
    3b40:	27 c0       	rjmp	.+78     	; 0x3b90 <malloc+0x98>
    3b42:	00 93 56 0d 	sts	0x0D56, r16	; 0x800d56 <__flp>
    3b46:	10 93 57 0d 	sts	0x0D57, r17	; 0x800d57 <__flp+0x1>
    3b4a:	22 c0       	rjmp	.+68     	; 0x3b90 <malloc+0x98>
    3b4c:	21 15       	cp	r18, r1
    3b4e:	31 05       	cpc	r19, r1
    3b50:	19 f0       	breq	.+6      	; 0x3b58 <malloc+0x60>
    3b52:	42 17       	cp	r20, r18
    3b54:	53 07       	cpc	r21, r19
    3b56:	18 f4       	brcc	.+6      	; 0x3b5e <malloc+0x66>
    3b58:	9a 01       	movw	r18, r20
    3b5a:	bd 01       	movw	r22, r26
    3b5c:	ef 01       	movw	r28, r30
    3b5e:	df 01       	movw	r26, r30
    3b60:	f8 01       	movw	r30, r16
    3b62:	db cf       	rjmp	.-74     	; 0x3b1a <malloc+0x22>
    3b64:	21 15       	cp	r18, r1
    3b66:	31 05       	cpc	r19, r1
    3b68:	f9 f0       	breq	.+62     	; 0x3ba8 <malloc+0xb0>
    3b6a:	28 1b       	sub	r18, r24
    3b6c:	39 0b       	sbc	r19, r25
    3b6e:	24 30       	cpi	r18, 0x04	; 4
    3b70:	31 05       	cpc	r19, r1
    3b72:	80 f4       	brcc	.+32     	; 0x3b94 <malloc+0x9c>
    3b74:	8a 81       	ldd	r24, Y+2	; 0x02
    3b76:	9b 81       	ldd	r25, Y+3	; 0x03
    3b78:	61 15       	cp	r22, r1
    3b7a:	71 05       	cpc	r23, r1
    3b7c:	21 f0       	breq	.+8      	; 0x3b86 <malloc+0x8e>
    3b7e:	fb 01       	movw	r30, r22
    3b80:	93 83       	std	Z+3, r25	; 0x03
    3b82:	82 83       	std	Z+2, r24	; 0x02
    3b84:	04 c0       	rjmp	.+8      	; 0x3b8e <malloc+0x96>
    3b86:	90 93 57 0d 	sts	0x0D57, r25	; 0x800d57 <__flp+0x1>
    3b8a:	80 93 56 0d 	sts	0x0D56, r24	; 0x800d56 <__flp>
    3b8e:	fe 01       	movw	r30, r28
    3b90:	32 96       	adiw	r30, 0x02	; 2
    3b92:	44 c0       	rjmp	.+136    	; 0x3c1c <malloc+0x124>
    3b94:	fe 01       	movw	r30, r28
    3b96:	e2 0f       	add	r30, r18
    3b98:	f3 1f       	adc	r31, r19
    3b9a:	81 93       	st	Z+, r24
    3b9c:	91 93       	st	Z+, r25
    3b9e:	22 50       	subi	r18, 0x02	; 2
    3ba0:	31 09       	sbc	r19, r1
    3ba2:	39 83       	std	Y+1, r19	; 0x01
    3ba4:	28 83       	st	Y, r18
    3ba6:	3a c0       	rjmp	.+116    	; 0x3c1c <malloc+0x124>
    3ba8:	20 91 54 0d 	lds	r18, 0x0D54	; 0x800d54 <__brkval>
    3bac:	30 91 55 0d 	lds	r19, 0x0D55	; 0x800d55 <__brkval+0x1>
    3bb0:	23 2b       	or	r18, r19
    3bb2:	41 f4       	brne	.+16     	; 0x3bc4 <malloc+0xcc>
    3bb4:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    3bb8:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    3bbc:	30 93 55 0d 	sts	0x0D55, r19	; 0x800d55 <__brkval+0x1>
    3bc0:	20 93 54 0d 	sts	0x0D54, r18	; 0x800d54 <__brkval>
    3bc4:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    3bc8:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    3bcc:	21 15       	cp	r18, r1
    3bce:	31 05       	cpc	r19, r1
    3bd0:	41 f4       	brne	.+16     	; 0x3be2 <malloc+0xea>
    3bd2:	2d b7       	in	r18, 0x3d	; 61
    3bd4:	3e b7       	in	r19, 0x3e	; 62
    3bd6:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    3bda:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    3bde:	24 1b       	sub	r18, r20
    3be0:	35 0b       	sbc	r19, r21
    3be2:	e0 91 54 0d 	lds	r30, 0x0D54	; 0x800d54 <__brkval>
    3be6:	f0 91 55 0d 	lds	r31, 0x0D55	; 0x800d55 <__brkval+0x1>
    3bea:	e2 17       	cp	r30, r18
    3bec:	f3 07       	cpc	r31, r19
    3bee:	a0 f4       	brcc	.+40     	; 0x3c18 <malloc+0x120>
    3bf0:	2e 1b       	sub	r18, r30
    3bf2:	3f 0b       	sbc	r19, r31
    3bf4:	28 17       	cp	r18, r24
    3bf6:	39 07       	cpc	r19, r25
    3bf8:	78 f0       	brcs	.+30     	; 0x3c18 <malloc+0x120>
    3bfa:	ac 01       	movw	r20, r24
    3bfc:	4e 5f       	subi	r20, 0xFE	; 254
    3bfe:	5f 4f       	sbci	r21, 0xFF	; 255
    3c00:	24 17       	cp	r18, r20
    3c02:	35 07       	cpc	r19, r21
    3c04:	48 f0       	brcs	.+18     	; 0x3c18 <malloc+0x120>
    3c06:	4e 0f       	add	r20, r30
    3c08:	5f 1f       	adc	r21, r31
    3c0a:	50 93 55 0d 	sts	0x0D55, r21	; 0x800d55 <__brkval+0x1>
    3c0e:	40 93 54 0d 	sts	0x0D54, r20	; 0x800d54 <__brkval>
    3c12:	81 93       	st	Z+, r24
    3c14:	91 93       	st	Z+, r25
    3c16:	02 c0       	rjmp	.+4      	; 0x3c1c <malloc+0x124>
    3c18:	e0 e0       	ldi	r30, 0x00	; 0
    3c1a:	f0 e0       	ldi	r31, 0x00	; 0
    3c1c:	cf 01       	movw	r24, r30
    3c1e:	df 91       	pop	r29
    3c20:	cf 91       	pop	r28
    3c22:	1f 91       	pop	r17
    3c24:	0f 91       	pop	r16
    3c26:	08 95       	ret

00003c28 <free>:
    3c28:	cf 93       	push	r28
    3c2a:	df 93       	push	r29
    3c2c:	00 97       	sbiw	r24, 0x00	; 0
    3c2e:	09 f4       	brne	.+2      	; 0x3c32 <free+0xa>
    3c30:	81 c0       	rjmp	.+258    	; 0x3d34 <free+0x10c>
    3c32:	fc 01       	movw	r30, r24
    3c34:	32 97       	sbiw	r30, 0x02	; 2
    3c36:	13 82       	std	Z+3, r1	; 0x03
    3c38:	12 82       	std	Z+2, r1	; 0x02
    3c3a:	a0 91 56 0d 	lds	r26, 0x0D56	; 0x800d56 <__flp>
    3c3e:	b0 91 57 0d 	lds	r27, 0x0D57	; 0x800d57 <__flp+0x1>
    3c42:	10 97       	sbiw	r26, 0x00	; 0
    3c44:	81 f4       	brne	.+32     	; 0x3c66 <free+0x3e>
    3c46:	20 81       	ld	r18, Z
    3c48:	31 81       	ldd	r19, Z+1	; 0x01
    3c4a:	82 0f       	add	r24, r18
    3c4c:	93 1f       	adc	r25, r19
    3c4e:	20 91 54 0d 	lds	r18, 0x0D54	; 0x800d54 <__brkval>
    3c52:	30 91 55 0d 	lds	r19, 0x0D55	; 0x800d55 <__brkval+0x1>
    3c56:	28 17       	cp	r18, r24
    3c58:	39 07       	cpc	r19, r25
    3c5a:	51 f5       	brne	.+84     	; 0x3cb0 <free+0x88>
    3c5c:	f0 93 55 0d 	sts	0x0D55, r31	; 0x800d55 <__brkval+0x1>
    3c60:	e0 93 54 0d 	sts	0x0D54, r30	; 0x800d54 <__brkval>
    3c64:	67 c0       	rjmp	.+206    	; 0x3d34 <free+0x10c>
    3c66:	ed 01       	movw	r28, r26
    3c68:	20 e0       	ldi	r18, 0x00	; 0
    3c6a:	30 e0       	ldi	r19, 0x00	; 0
    3c6c:	ce 17       	cp	r28, r30
    3c6e:	df 07       	cpc	r29, r31
    3c70:	40 f4       	brcc	.+16     	; 0x3c82 <free+0x5a>
    3c72:	4a 81       	ldd	r20, Y+2	; 0x02
    3c74:	5b 81       	ldd	r21, Y+3	; 0x03
    3c76:	9e 01       	movw	r18, r28
    3c78:	41 15       	cp	r20, r1
    3c7a:	51 05       	cpc	r21, r1
    3c7c:	f1 f0       	breq	.+60     	; 0x3cba <free+0x92>
    3c7e:	ea 01       	movw	r28, r20
    3c80:	f5 cf       	rjmp	.-22     	; 0x3c6c <free+0x44>
    3c82:	d3 83       	std	Z+3, r29	; 0x03
    3c84:	c2 83       	std	Z+2, r28	; 0x02
    3c86:	40 81       	ld	r20, Z
    3c88:	51 81       	ldd	r21, Z+1	; 0x01
    3c8a:	84 0f       	add	r24, r20
    3c8c:	95 1f       	adc	r25, r21
    3c8e:	c8 17       	cp	r28, r24
    3c90:	d9 07       	cpc	r29, r25
    3c92:	59 f4       	brne	.+22     	; 0x3caa <free+0x82>
    3c94:	88 81       	ld	r24, Y
    3c96:	99 81       	ldd	r25, Y+1	; 0x01
    3c98:	84 0f       	add	r24, r20
    3c9a:	95 1f       	adc	r25, r21
    3c9c:	02 96       	adiw	r24, 0x02	; 2
    3c9e:	91 83       	std	Z+1, r25	; 0x01
    3ca0:	80 83       	st	Z, r24
    3ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ca4:	9b 81       	ldd	r25, Y+3	; 0x03
    3ca6:	93 83       	std	Z+3, r25	; 0x03
    3ca8:	82 83       	std	Z+2, r24	; 0x02
    3caa:	21 15       	cp	r18, r1
    3cac:	31 05       	cpc	r19, r1
    3cae:	29 f4       	brne	.+10     	; 0x3cba <free+0x92>
    3cb0:	f0 93 57 0d 	sts	0x0D57, r31	; 0x800d57 <__flp+0x1>
    3cb4:	e0 93 56 0d 	sts	0x0D56, r30	; 0x800d56 <__flp>
    3cb8:	3d c0       	rjmp	.+122    	; 0x3d34 <free+0x10c>
    3cba:	e9 01       	movw	r28, r18
    3cbc:	fb 83       	std	Y+3, r31	; 0x03
    3cbe:	ea 83       	std	Y+2, r30	; 0x02
    3cc0:	49 91       	ld	r20, Y+
    3cc2:	59 91       	ld	r21, Y+
    3cc4:	c4 0f       	add	r28, r20
    3cc6:	d5 1f       	adc	r29, r21
    3cc8:	ec 17       	cp	r30, r28
    3cca:	fd 07       	cpc	r31, r29
    3ccc:	61 f4       	brne	.+24     	; 0x3ce6 <free+0xbe>
    3cce:	80 81       	ld	r24, Z
    3cd0:	91 81       	ldd	r25, Z+1	; 0x01
    3cd2:	84 0f       	add	r24, r20
    3cd4:	95 1f       	adc	r25, r21
    3cd6:	02 96       	adiw	r24, 0x02	; 2
    3cd8:	e9 01       	movw	r28, r18
    3cda:	99 83       	std	Y+1, r25	; 0x01
    3cdc:	88 83       	st	Y, r24
    3cde:	82 81       	ldd	r24, Z+2	; 0x02
    3ce0:	93 81       	ldd	r25, Z+3	; 0x03
    3ce2:	9b 83       	std	Y+3, r25	; 0x03
    3ce4:	8a 83       	std	Y+2, r24	; 0x02
    3ce6:	e0 e0       	ldi	r30, 0x00	; 0
    3ce8:	f0 e0       	ldi	r31, 0x00	; 0
    3cea:	12 96       	adiw	r26, 0x02	; 2
    3cec:	8d 91       	ld	r24, X+
    3cee:	9c 91       	ld	r25, X
    3cf0:	13 97       	sbiw	r26, 0x03	; 3
    3cf2:	00 97       	sbiw	r24, 0x00	; 0
    3cf4:	19 f0       	breq	.+6      	; 0x3cfc <free+0xd4>
    3cf6:	fd 01       	movw	r30, r26
    3cf8:	dc 01       	movw	r26, r24
    3cfa:	f7 cf       	rjmp	.-18     	; 0x3cea <free+0xc2>
    3cfc:	8d 91       	ld	r24, X+
    3cfe:	9c 91       	ld	r25, X
    3d00:	11 97       	sbiw	r26, 0x01	; 1
    3d02:	9d 01       	movw	r18, r26
    3d04:	2e 5f       	subi	r18, 0xFE	; 254
    3d06:	3f 4f       	sbci	r19, 0xFF	; 255
    3d08:	82 0f       	add	r24, r18
    3d0a:	93 1f       	adc	r25, r19
    3d0c:	20 91 54 0d 	lds	r18, 0x0D54	; 0x800d54 <__brkval>
    3d10:	30 91 55 0d 	lds	r19, 0x0D55	; 0x800d55 <__brkval+0x1>
    3d14:	28 17       	cp	r18, r24
    3d16:	39 07       	cpc	r19, r25
    3d18:	69 f4       	brne	.+26     	; 0x3d34 <free+0x10c>
    3d1a:	30 97       	sbiw	r30, 0x00	; 0
    3d1c:	29 f4       	brne	.+10     	; 0x3d28 <free+0x100>
    3d1e:	10 92 57 0d 	sts	0x0D57, r1	; 0x800d57 <__flp+0x1>
    3d22:	10 92 56 0d 	sts	0x0D56, r1	; 0x800d56 <__flp>
    3d26:	02 c0       	rjmp	.+4      	; 0x3d2c <free+0x104>
    3d28:	13 82       	std	Z+3, r1	; 0x03
    3d2a:	12 82       	std	Z+2, r1	; 0x02
    3d2c:	b0 93 55 0d 	sts	0x0D55, r27	; 0x800d55 <__brkval+0x1>
    3d30:	a0 93 54 0d 	sts	0x0D54, r26	; 0x800d54 <__brkval>
    3d34:	df 91       	pop	r29
    3d36:	cf 91       	pop	r28
    3d38:	08 95       	ret

00003d3a <abort>:
    3d3a:	81 e0       	ldi	r24, 0x01	; 1
    3d3c:	90 e0       	ldi	r25, 0x00	; 0
    3d3e:	f8 94       	cli
    3d40:	40 c0       	rjmp	.+128    	; 0x3dc2 <_exit>

00003d42 <memcpy>:
    3d42:	fb 01       	movw	r30, r22
    3d44:	dc 01       	movw	r26, r24
    3d46:	02 c0       	rjmp	.+4      	; 0x3d4c <memcpy+0xa>
    3d48:	01 90       	ld	r0, Z+
    3d4a:	0d 92       	st	X+, r0
    3d4c:	41 50       	subi	r20, 0x01	; 1
    3d4e:	50 40       	sbci	r21, 0x00	; 0
    3d50:	d8 f7       	brcc	.-10     	; 0x3d48 <memcpy+0x6>
    3d52:	08 95       	ret

00003d54 <memset>:
    3d54:	dc 01       	movw	r26, r24
    3d56:	01 c0       	rjmp	.+2      	; 0x3d5a <memset+0x6>
    3d58:	6d 93       	st	X+, r22
    3d5a:	41 50       	subi	r20, 0x01	; 1
    3d5c:	50 40       	sbci	r21, 0x00	; 0
    3d5e:	e0 f7       	brcc	.-8      	; 0x3d58 <memset+0x4>
    3d60:	08 95       	ret

00003d62 <puts>:
    3d62:	0f 93       	push	r16
    3d64:	1f 93       	push	r17
    3d66:	cf 93       	push	r28
    3d68:	df 93       	push	r29
    3d6a:	e0 91 5a 0d 	lds	r30, 0x0D5A	; 0x800d5a <__iob+0x2>
    3d6e:	f0 91 5b 0d 	lds	r31, 0x0D5B	; 0x800d5b <__iob+0x3>
    3d72:	23 81       	ldd	r18, Z+3	; 0x03
    3d74:	21 ff       	sbrs	r18, 1
    3d76:	1b c0       	rjmp	.+54     	; 0x3dae <puts+0x4c>
    3d78:	8c 01       	movw	r16, r24
    3d7a:	d0 e0       	ldi	r29, 0x00	; 0
    3d7c:	c0 e0       	ldi	r28, 0x00	; 0
    3d7e:	f8 01       	movw	r30, r16
    3d80:	81 91       	ld	r24, Z+
    3d82:	8f 01       	movw	r16, r30
    3d84:	60 91 5a 0d 	lds	r22, 0x0D5A	; 0x800d5a <__iob+0x2>
    3d88:	70 91 5b 0d 	lds	r23, 0x0D5B	; 0x800d5b <__iob+0x3>
    3d8c:	db 01       	movw	r26, r22
    3d8e:	18 96       	adiw	r26, 0x08	; 8
    3d90:	ed 91       	ld	r30, X+
    3d92:	fc 91       	ld	r31, X
    3d94:	19 97       	sbiw	r26, 0x09	; 9
    3d96:	88 23       	and	r24, r24
    3d98:	31 f0       	breq	.+12     	; 0x3da6 <puts+0x44>
    3d9a:	19 95       	eicall
    3d9c:	89 2b       	or	r24, r25
    3d9e:	79 f3       	breq	.-34     	; 0x3d7e <puts+0x1c>
    3da0:	df ef       	ldi	r29, 0xFF	; 255
    3da2:	cf ef       	ldi	r28, 0xFF	; 255
    3da4:	ec cf       	rjmp	.-40     	; 0x3d7e <puts+0x1c>
    3da6:	8a e0       	ldi	r24, 0x0A	; 10
    3da8:	19 95       	eicall
    3daa:	89 2b       	or	r24, r25
    3dac:	19 f0       	breq	.+6      	; 0x3db4 <puts+0x52>
    3dae:	8f ef       	ldi	r24, 0xFF	; 255
    3db0:	9f ef       	ldi	r25, 0xFF	; 255
    3db2:	02 c0       	rjmp	.+4      	; 0x3db8 <puts+0x56>
    3db4:	8d 2f       	mov	r24, r29
    3db6:	9c 2f       	mov	r25, r28
    3db8:	df 91       	pop	r29
    3dba:	cf 91       	pop	r28
    3dbc:	1f 91       	pop	r17
    3dbe:	0f 91       	pop	r16
    3dc0:	08 95       	ret

00003dc2 <_exit>:
    3dc2:	f8 94       	cli

00003dc4 <__stop_program>:
    3dc4:	ff cf       	rjmp	.-2      	; 0x3dc4 <__stop_program>

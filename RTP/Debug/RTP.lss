
RTP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ec  00800200  00004568  000045fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004568  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000bcc  008002ec  008002ec  000046e8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000046e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004744  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000688  00000000  00000000  00004784  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008d99  00000000  00000000  00004e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000024e4  00000000  00000000  0000dba5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004903  00000000  00000000  00010089  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000018cc  00000000  00000000  0001498c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002c2b  00000000  00000000  00016258  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008539  00000000  00000000  00018e83  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000710  00000000  00000000  000213bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	d5 c0       	rjmp	.+426    	; 0x1ac <__ctors_end>
       2:	00 00       	nop
       4:	f3 c0       	rjmp	.+486    	; 0x1ec <__bad_interrupt>
       6:	00 00       	nop
       8:	f1 c0       	rjmp	.+482    	; 0x1ec <__bad_interrupt>
       a:	00 00       	nop
       c:	ef c0       	rjmp	.+478    	; 0x1ec <__bad_interrupt>
       e:	00 00       	nop
      10:	ed c0       	rjmp	.+474    	; 0x1ec <__bad_interrupt>
      12:	00 00       	nop
      14:	eb c0       	rjmp	.+470    	; 0x1ec <__bad_interrupt>
      16:	00 00       	nop
      18:	e9 c0       	rjmp	.+466    	; 0x1ec <__bad_interrupt>
      1a:	00 00       	nop
      1c:	e7 c0       	rjmp	.+462    	; 0x1ec <__bad_interrupt>
      1e:	00 00       	nop
      20:	e5 c0       	rjmp	.+458    	; 0x1ec <__bad_interrupt>
      22:	00 00       	nop
      24:	e3 c0       	rjmp	.+454    	; 0x1ec <__bad_interrupt>
      26:	00 00       	nop
      28:	e1 c0       	rjmp	.+450    	; 0x1ec <__bad_interrupt>
      2a:	00 00       	nop
      2c:	df c0       	rjmp	.+446    	; 0x1ec <__bad_interrupt>
      2e:	00 00       	nop
      30:	a7 c4       	rjmp	.+2382   	; 0x980 <__vector_12>
      32:	00 00       	nop
      34:	db c0       	rjmp	.+438    	; 0x1ec <__bad_interrupt>
      36:	00 00       	nop
      38:	d9 c0       	rjmp	.+434    	; 0x1ec <__bad_interrupt>
      3a:	00 00       	nop
      3c:	d7 c0       	rjmp	.+430    	; 0x1ec <__bad_interrupt>
      3e:	00 00       	nop
      40:	d5 c0       	rjmp	.+426    	; 0x1ec <__bad_interrupt>
      42:	00 00       	nop
      44:	d3 c0       	rjmp	.+422    	; 0x1ec <__bad_interrupt>
      46:	00 00       	nop
      48:	d1 c0       	rjmp	.+418    	; 0x1ec <__bad_interrupt>
      4a:	00 00       	nop
      4c:	cf c0       	rjmp	.+414    	; 0x1ec <__bad_interrupt>
      4e:	00 00       	nop
      50:	cd c0       	rjmp	.+410    	; 0x1ec <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 76 14 	jmp	0x28ec	; 0x28ec <__vector_21>
      58:	c9 c0       	rjmp	.+402    	; 0x1ec <__bad_interrupt>
      5a:	00 00       	nop
      5c:	c7 c0       	rjmp	.+398    	; 0x1ec <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__vector_24>
      64:	0c 94 53 18 	jmp	0x30a6	; 0x30a6 <__vector_25>
      68:	0c 94 a5 18 	jmp	0x314a	; 0x314a <__vector_26>
      6c:	bf c0       	rjmp	.+382    	; 0x1ec <__bad_interrupt>
      6e:	00 00       	nop
      70:	bd c0       	rjmp	.+378    	; 0x1ec <__bad_interrupt>
      72:	00 00       	nop
      74:	bb c0       	rjmp	.+374    	; 0x1ec <__bad_interrupt>
      76:	00 00       	nop
      78:	b9 c0       	rjmp	.+370    	; 0x1ec <__bad_interrupt>
      7a:	00 00       	nop
      7c:	b7 c0       	rjmp	.+366    	; 0x1ec <__bad_interrupt>
      7e:	00 00       	nop
      80:	b5 c0       	rjmp	.+362    	; 0x1ec <__bad_interrupt>
      82:	00 00       	nop
      84:	b3 c0       	rjmp	.+358    	; 0x1ec <__bad_interrupt>
      86:	00 00       	nop
      88:	b1 c0       	rjmp	.+354    	; 0x1ec <__bad_interrupt>
      8a:	00 00       	nop
      8c:	af c0       	rjmp	.+350    	; 0x1ec <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 e9 18 	jmp	0x31d2	; 0x31d2 <__vector_36>
      94:	0c 94 3b 19 	jmp	0x3276	; 0x3276 <__vector_37>
      98:	a9 c0       	rjmp	.+338    	; 0x1ec <__bad_interrupt>
      9a:	00 00       	nop
      9c:	a7 c0       	rjmp	.+334    	; 0x1ec <__bad_interrupt>
      9e:	00 00       	nop
      a0:	a5 c0       	rjmp	.+330    	; 0x1ec <__bad_interrupt>
      a2:	00 00       	nop
      a4:	a3 c0       	rjmp	.+326    	; 0x1ec <__bad_interrupt>
      a6:	00 00       	nop
      a8:	a1 c0       	rjmp	.+322    	; 0x1ec <__bad_interrupt>
      aa:	00 00       	nop
      ac:	9f c0       	rjmp	.+318    	; 0x1ec <__bad_interrupt>
      ae:	00 00       	nop
      b0:	9d c0       	rjmp	.+314    	; 0x1ec <__bad_interrupt>
      b2:	00 00       	nop
      b4:	9b c0       	rjmp	.+310    	; 0x1ec <__bad_interrupt>
      b6:	00 00       	nop
      b8:	99 c0       	rjmp	.+306    	; 0x1ec <__bad_interrupt>
      ba:	00 00       	nop
      bc:	97 c0       	rjmp	.+302    	; 0x1ec <__bad_interrupt>
      be:	00 00       	nop
      c0:	95 c0       	rjmp	.+298    	; 0x1ec <__bad_interrupt>
      c2:	00 00       	nop
      c4:	93 c0       	rjmp	.+294    	; 0x1ec <__bad_interrupt>
      c6:	00 00       	nop
      c8:	91 c0       	rjmp	.+290    	; 0x1ec <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 7f 19 	jmp	0x32fe	; 0x32fe <__vector_51>
      d0:	0c 94 d1 19 	jmp	0x33a2	; 0x33a2 <__vector_52>
      d4:	8b c0       	rjmp	.+278    	; 0x1ec <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 15 1a 	jmp	0x342a	; 0x342a <__vector_54>
      dc:	0c 94 67 1a 	jmp	0x34ce	; 0x34ce <__vector_55>
      e0:	85 c0       	rjmp	.+266    	; 0x1ec <__bad_interrupt>
      e2:	00 00       	nop
      e4:	bf 12       	cpse	r11, r31
      e6:	bf 12       	cpse	r11, r31
      e8:	bf 12       	cpse	r11, r31
      ea:	f6 12       	cpse	r15, r22
      ec:	fe 12       	cpse	r15, r30
      ee:	13 13       	cpse	r17, r19
      f0:	bf 12       	cpse	r11, r31
      f2:	bf 12       	cpse	r11, r31
      f4:	f6 12       	cpse	r15, r22
      f6:	fe 12       	cpse	r15, r30
      f8:	07 63       	ori	r16, 0x37	; 55
      fa:	42 36       	cpi	r20, 0x62	; 98
      fc:	b7 9b       	sbis	0x16, 7	; 22
      fe:	d8 a7       	std	Y+40, r29	; 0x28
     100:	1a 39       	cpi	r17, 0x9A	; 154
     102:	68 56       	subi	r22, 0x68	; 104
     104:	18 ae       	std	Y+56, r1	; 0x38
     106:	ba ab       	std	Y+50, r27	; 0x32
     108:	55 8c       	ldd	r5, Z+29	; 0x1d
     10a:	1d 3c       	cpi	r17, 0xCD	; 205
     10c:	b7 cc       	rjmp	.-1682   	; 0xfffffa7c <__eeprom_end+0xff7efa7c>
     10e:	57 63       	ori	r21, 0x37	; 55
     110:	bd 6d       	ori	r27, 0xDD	; 221
     112:	ed fd       	.word	0xfded	; ????
     114:	75 3e       	cpi	r23, 0xE5	; 229
     116:	f6 17       	cp	r31, r22
     118:	72 31       	cpi	r23, 0x12	; 18
     11a:	bf 00       	.word	0x00bf	; ????
     11c:	00 00       	nop
     11e:	80 3f       	cpi	r24, 0xF0	; 240
     120:	08 00       	.word	0x0008	; ????
     122:	00 00       	nop
     124:	be 92       	st	-X, r11
     126:	24 49       	sbci	r18, 0x94	; 148
     128:	12 3e       	cpi	r17, 0xE2	; 226
     12a:	ab aa       	std	Y+51, r10	; 0x33
     12c:	aa 2a       	or	r10, r26
     12e:	be cd       	rjmp	.-1156   	; 0xfffffcac <__eeprom_end+0xff7efcac>
     130:	cc cc       	rjmp	.-1640   	; 0xfffffaca <__eeprom_end+0xff7efaca>
     132:	4c 3e       	cpi	r20, 0xEC	; 236
     134:	00 00       	nop
     136:	00 80       	ld	r0, Z
     138:	be ab       	std	Y+54, r27	; 0x36
     13a:	aa aa       	std	Y+50, r10	; 0x32
     13c:	aa 3e       	cpi	r26, 0xEA	; 234
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	bf 00       	.word	0x00bf	; ????
     144:	00 00       	nop
     146:	80 3f       	cpi	r24, 0xF0	; 240
     148:	00 00       	nop
     14a:	00 00       	nop
     14c:	00 08       	sbc	r0, r0
     14e:	41 78       	andi	r20, 0x81	; 129
     150:	d3 bb       	out	0x13, r29	; 19
     152:	43 87       	std	Z+11, r20	; 0x0b
     154:	d1 13       	cpse	r29, r17
     156:	3d 19       	sub	r19, r13
     158:	0e 3c       	cpi	r16, 0xCE	; 206
     15a:	c3 bd       	out	0x23, r28	; 35
     15c:	42 82       	std	Z+2, r4	; 0x02
     15e:	ad 2b       	or	r26, r29
     160:	3e 68       	ori	r19, 0x8E	; 142
     162:	ec 82       	std	Y+4, r14	; 0x04
     164:	76 be       	out	0x36, r7	; 54
     166:	d9 8f       	std	Y+25, r29	; 0x19
     168:	e1 a9       	ldd	r30, Z+49	; 0x31
     16a:	3e 4c       	sbci	r19, 0xCE	; 206
     16c:	80 ef       	ldi	r24, 0xF0	; 240
     16e:	ff be       	out	0x3f, r15	; 63
     170:	01 c4       	rjmp	.+2050   	; 0x974 <vPortYieldFromTick+0xbc>
     172:	ff 7f       	andi	r31, 0xFF	; 255
     174:	3f 00       	.word	0x003f	; ????
     176:	00 00       	nop
	...

0000017a <prvIdleTask>:
    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

    return uxReturn;
}
     17a:	0e 94 77 09 	call	0x12ee	; 0x12ee <prvCheckTasksWaitingTermination>
     17e:	80 91 11 0d 	lds	r24, 0x0D11	; 0x800d11 <pxReadyTasksLists>
     182:	82 30       	cpi	r24, 0x02	; 2
     184:	08 f0       	brcs	.+2      	; 0x188 <prvIdleTask+0xe>
     186:	37 d3       	rcall	.+1646   	; 0x7f6 <vPortYield>
     188:	0e 94 3c 13 	call	0x2678	; 0x2678 <vApplicationIdleHook>
     18c:	f6 cf       	rjmp	.-20     	; 0x17a <prvIdleTask>

0000018e <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     18e:	cf 93       	push	r28
     190:	df 93       	push	r29
     192:	1f 92       	push	r1
     194:	cd b7       	in	r28, 0x3d	; 61
     196:	de b7       	in	r29, 0x3e	; 62
     198:	ce 01       	movw	r24, r28
     19a:	01 96       	adiw	r24, 0x01	; 1
     19c:	0e 94 42 10 	call	0x2084	; 0x2084 <prvGetNextExpireTime>
     1a0:	49 81       	ldd	r20, Y+1	; 0x01
     1a2:	0e 94 35 12 	call	0x246a	; 0x246a <prvProcessTimerOrBlockTask>
     1a6:	0e 94 88 12 	call	0x2510	; 0x2510 <prvProcessReceivedCommands>
     1aa:	f6 cf       	rjmp	.-20     	; 0x198 <prvTimerTask+0xa>

000001ac <__ctors_end>:
     1ac:	11 24       	eor	r1, r1
     1ae:	1f be       	out	0x3f, r1	; 63
     1b0:	cf ef       	ldi	r28, 0xFF	; 255
     1b2:	d1 e2       	ldi	r29, 0x21	; 33
     1b4:	de bf       	out	0x3e, r29	; 62
     1b6:	cd bf       	out	0x3d, r28	; 61
     1b8:	00 e0       	ldi	r16, 0x00	; 0
     1ba:	0c bf       	out	0x3c, r16	; 60

000001bc <__do_copy_data>:
     1bc:	12 e0       	ldi	r17, 0x02	; 2
     1be:	a0 e0       	ldi	r26, 0x00	; 0
     1c0:	b2 e0       	ldi	r27, 0x02	; 2
     1c2:	e8 e6       	ldi	r30, 0x68	; 104
     1c4:	f5 e4       	ldi	r31, 0x45	; 69
     1c6:	00 e0       	ldi	r16, 0x00	; 0
     1c8:	0b bf       	out	0x3b, r16	; 59
     1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <__do_copy_data+0x14>
     1cc:	07 90       	elpm	r0, Z+
     1ce:	0d 92       	st	X+, r0
     1d0:	ac 3e       	cpi	r26, 0xEC	; 236
     1d2:	b1 07       	cpc	r27, r17
     1d4:	d9 f7       	brne	.-10     	; 0x1cc <__do_copy_data+0x10>

000001d6 <__do_clear_bss>:
     1d6:	2e e0       	ldi	r18, 0x0E	; 14
     1d8:	ac ee       	ldi	r26, 0xEC	; 236
     1da:	b2 e0       	ldi	r27, 0x02	; 2
     1dc:	01 c0       	rjmp	.+2      	; 0x1e0 <.do_clear_bss_start>

000001de <.do_clear_bss_loop>:
     1de:	1d 92       	st	X+, r1

000001e0 <.do_clear_bss_start>:
     1e0:	a8 3b       	cpi	r26, 0xB8	; 184
     1e2:	b2 07       	cpc	r27, r18
     1e4:	e1 f7       	brne	.-8      	; 0x1de <.do_clear_bss_loop>
     1e6:	d9 d0       	rcall	.+434    	; 0x39a <main>
     1e8:	0c 94 b2 22 	jmp	0x4564	; 0x4564 <_exit>

000001ec <__bad_interrupt>:
     1ec:	09 cf       	rjmp	.-494    	; 0x0 <__vectors>

000001ee <sampleTask>:

void sampleTask(void *pvParameters)
{
	for(;;)
	{
		printf("Sample task attempting to take the semaphore\r\n");
     1ee:	8d e1       	ldi	r24, 0x1D	; 29
     1f0:	92 e0       	ldi	r25, 0x02	; 2
     1f2:	0e 94 d5 1f 	call	0x3faa	; 0x3faa <puts>

		xSemaphoreTake(xSemaphore, portMAX_DELAY);
     1f6:	4f ef       	ldi	r20, 0xFF	; 255
     1f8:	5f ef       	ldi	r21, 0xFF	; 255
     1fa:	ba 01       	movw	r22, r20
     1fc:	80 91 ac 0e 	lds	r24, 0x0EAC	; 0x800eac <xSemaphore>
     200:	90 91 ad 0e 	lds	r25, 0x0EAD	; 0x800ead <xSemaphore+0x1>
     204:	69 d6       	rcall	.+3282   	; 0xed8 <xQueueSemaphoreTake>
		display_7seg_display(0,0);
     206:	40 e0       	ldi	r20, 0x00	; 0
     208:	60 e0       	ldi	r22, 0x00	; 0
     20a:	70 e0       	ldi	r23, 0x00	; 0
     20c:	cb 01       	movw	r24, r22
     20e:	0e 94 86 13 	call	0x270c	; 0x270c <display_7seg_display>
		printf("Sample task started\r\n");
     212:	8b e4       	ldi	r24, 0x4B	; 75
     214:	92 e0       	ldi	r25, 0x02	; 2
     216:	0e 94 d5 1f 	call	0x3faa	; 0x3faa <puts>
		
		for(int c = 0; c < 100; c++)
     21a:	40 e0       	ldi	r20, 0x00	; 0
     21c:	50 e0       	ldi	r21, 0x00	; 0
     21e:	19 c0       	rjmp	.+50     	; 0x252 <sampleTask+0x64>
		{
			for(int i = 0; i < 1000; i++)
			{
				for(int i = 0; i < 100; i++)
     220:	01 96       	adiw	r24, 0x01	; 1
     222:	02 c0       	rjmp	.+4      	; 0x228 <sampleTask+0x3a>
     224:	80 e0       	ldi	r24, 0x00	; 0
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	84 36       	cpi	r24, 0x64	; 100
     22a:	91 05       	cpc	r25, r1
     22c:	cc f3       	brlt	.-14     	; 0x220 <sampleTask+0x32>
		display_7seg_display(0,0);
		printf("Sample task started\r\n");
		
		for(int c = 0; c < 100; c++)
		{
			for(int i = 0; i < 1000; i++)
     22e:	2f 5f       	subi	r18, 0xFF	; 255
     230:	3f 4f       	sbci	r19, 0xFF	; 255
     232:	02 c0       	rjmp	.+4      	; 0x238 <sampleTask+0x4a>
     234:	20 e0       	ldi	r18, 0x00	; 0
     236:	30 e0       	ldi	r19, 0x00	; 0
     238:	28 3e       	cpi	r18, 0xE8	; 232
     23a:	83 e0       	ldi	r24, 0x03	; 3
     23c:	38 07       	cpc	r19, r24
     23e:	94 f3       	brlt	.-28     	; 0x224 <sampleTask+0x36>
				for(int i = 0; i < 100; i++)
				{
					;
				}
			}
			arr[c] = c;
     240:	fa 01       	movw	r30, r20
     242:	ee 0f       	add	r30, r30
     244:	ff 1f       	adc	r31, r31
     246:	ec 51       	subi	r30, 0x1C	; 28
     248:	f2 4f       	sbci	r31, 0xF2	; 242
     24a:	51 83       	std	Z+1, r21	; 0x01
     24c:	40 83       	st	Z, r20

		xSemaphoreTake(xSemaphore, portMAX_DELAY);
		display_7seg_display(0,0);
		printf("Sample task started\r\n");
		
		for(int c = 0; c < 100; c++)
     24e:	4f 5f       	subi	r20, 0xFF	; 255
     250:	5f 4f       	sbci	r21, 0xFF	; 255
     252:	44 36       	cpi	r20, 0x64	; 100
     254:	51 05       	cpc	r21, r1
     256:	74 f3       	brlt	.-36     	; 0x234 <sampleTask+0x46>
				}
			}
			arr[c] = c;
		}
		
		xSemaphoreGive(xSemaphore);
     258:	00 e0       	ldi	r16, 0x00	; 0
     25a:	20 e0       	ldi	r18, 0x00	; 0
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	a9 01       	movw	r20, r18
     260:	60 e0       	ldi	r22, 0x00	; 0
     262:	70 e0       	ldi	r23, 0x00	; 0
     264:	80 91 ac 0e 	lds	r24, 0x0EAC	; 0x800eac <xSemaphore>
     268:	90 91 ad 0e 	lds	r25, 0x0EAD	; 0x800ead <xSemaphore+0x1>
     26c:	e5 d4       	rcall	.+2506   	; 0xc38 <xQueueGenericSend>
		
		vTaskDelay(29);
     26e:	6d e1       	ldi	r22, 0x1D	; 29
     270:	70 e0       	ldi	r23, 0x00	; 0
     272:	80 e0       	ldi	r24, 0x00	; 0
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <vTaskDelay>
	}
     27a:	b9 cf       	rjmp	.-142    	; 0x1ee <sampleTask>

0000027c <readTask>:

void readTask(void *pvParameters)
{
	for(;;)
	{
		printf("Read attempting to take the semaphore\r\n");
     27c:	80 e6       	ldi	r24, 0x60	; 96
     27e:	92 e0       	ldi	r25, 0x02	; 2
     280:	0e 94 d5 1f 	call	0x3faa	; 0x3faa <puts>
		
		xSemaphoreTake(xSemaphore, portMAX_DELAY);
     284:	4f ef       	ldi	r20, 0xFF	; 255
     286:	5f ef       	ldi	r21, 0xFF	; 255
     288:	ba 01       	movw	r22, r20
     28a:	80 91 ac 0e 	lds	r24, 0x0EAC	; 0x800eac <xSemaphore>
     28e:	90 91 ad 0e 	lds	r25, 0x0EAD	; 0x800ead <xSemaphore+0x1>
     292:	22 d6       	rcall	.+3140   	; 0xed8 <xQueueSemaphoreTake>
		
		display_7seg_display(1,0);
     294:	40 e0       	ldi	r20, 0x00	; 0
     296:	60 e0       	ldi	r22, 0x00	; 0
     298:	70 e0       	ldi	r23, 0x00	; 0
     29a:	80 e8       	ldi	r24, 0x80	; 128
     29c:	9f e3       	ldi	r25, 0x3F	; 63
     29e:	0e 94 86 13 	call	0x270c	; 0x270c <display_7seg_display>
		printf("Read task started\r\n");
     2a2:	87 e8       	ldi	r24, 0x87	; 135
     2a4:	92 e0       	ldi	r25, 0x02	; 2
     2a6:	0e 94 d5 1f 	call	0x3faa	; 0x3faa <puts>

		int sumHolder = 0;
		
		for(int c = 0; c < 100; c++)
     2aa:	60 e0       	ldi	r22, 0x00	; 0
     2ac:	70 e0       	ldi	r23, 0x00	; 0
		xSemaphoreTake(xSemaphore, portMAX_DELAY);
		
		display_7seg_display(1,0);
		printf("Read task started\r\n");

		int sumHolder = 0;
     2ae:	80 e0       	ldi	r24, 0x00	; 0
     2b0:	90 e0       	ldi	r25, 0x00	; 0
		
		for(int c = 0; c < 100; c++)
     2b2:	1e c0       	rjmp	.+60     	; 0x2f0 <readTask+0x74>
		{
			sumHolder += arr[c];
     2b4:	fb 01       	movw	r30, r22
     2b6:	ee 0f       	add	r30, r30
     2b8:	ff 1f       	adc	r31, r31
     2ba:	ec 51       	subi	r30, 0x1C	; 28
     2bc:	f2 4f       	sbci	r31, 0xF2	; 242
     2be:	20 81       	ld	r18, Z
     2c0:	31 81       	ldd	r19, Z+1	; 0x01
     2c2:	82 0f       	add	r24, r18
     2c4:	93 1f       	adc	r25, r19
			arr[c] = 0;
     2c6:	11 82       	std	Z+1, r1	; 0x01
     2c8:	10 82       	st	Z, r1
			
			for(int i = 0; i < 1000; i++)
     2ca:	40 e0       	ldi	r20, 0x00	; 0
     2cc:	50 e0       	ldi	r21, 0x00	; 0
     2ce:	0a c0       	rjmp	.+20     	; 0x2e4 <readTask+0x68>
			{
				for(int j = 0; j < 100; j++)
     2d0:	2f 5f       	subi	r18, 0xFF	; 255
     2d2:	3f 4f       	sbci	r19, 0xFF	; 255
     2d4:	02 c0       	rjmp	.+4      	; 0x2da <readTask+0x5e>
     2d6:	20 e0       	ldi	r18, 0x00	; 0
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	24 36       	cpi	r18, 0x64	; 100
     2dc:	31 05       	cpc	r19, r1
     2de:	c4 f3       	brlt	.-16     	; 0x2d0 <readTask+0x54>
		for(int c = 0; c < 100; c++)
		{
			sumHolder += arr[c];
			arr[c] = 0;
			
			for(int i = 0; i < 1000; i++)
     2e0:	4f 5f       	subi	r20, 0xFF	; 255
     2e2:	5f 4f       	sbci	r21, 0xFF	; 255
     2e4:	48 3e       	cpi	r20, 0xE8	; 232
     2e6:	23 e0       	ldi	r18, 0x03	; 3
     2e8:	52 07       	cpc	r21, r18
     2ea:	ac f3       	brlt	.-22     	; 0x2d6 <readTask+0x5a>
		display_7seg_display(1,0);
		printf("Read task started\r\n");

		int sumHolder = 0;
		
		for(int c = 0; c < 100; c++)
     2ec:	6f 5f       	subi	r22, 0xFF	; 255
     2ee:	7f 4f       	sbci	r23, 0xFF	; 255
     2f0:	64 36       	cpi	r22, 0x64	; 100
     2f2:	71 05       	cpc	r23, r1
     2f4:	fc f2       	brlt	.-66     	; 0x2b4 <readTask+0x38>
					;
				}
			}
		}
	
		printf("%d\r\n", sumHolder/100);
     2f6:	64 e6       	ldi	r22, 0x64	; 100
     2f8:	70 e0       	ldi	r23, 0x00	; 0
     2fa:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <__divmodhi4>
     2fe:	7f 93       	push	r23
     300:	6f 93       	push	r22
     302:	8a e9       	ldi	r24, 0x9A	; 154
     304:	92 e0       	ldi	r25, 0x02	; 2
     306:	9f 93       	push	r25
     308:	8f 93       	push	r24
     30a:	0e 94 c2 1f 	call	0x3f84	; 0x3f84 <printf>
		xSemaphoreGive(xSemaphore);	
     30e:	00 e0       	ldi	r16, 0x00	; 0
     310:	20 e0       	ldi	r18, 0x00	; 0
     312:	30 e0       	ldi	r19, 0x00	; 0
     314:	a9 01       	movw	r20, r18
     316:	60 e0       	ldi	r22, 0x00	; 0
     318:	70 e0       	ldi	r23, 0x00	; 0
     31a:	80 91 ac 0e 	lds	r24, 0x0EAC	; 0x800eac <xSemaphore>
     31e:	90 91 ad 0e 	lds	r25, 0x0EAD	; 0x800ead <xSemaphore+0x1>
     322:	8a d4       	rcall	.+2324   	; 0xc38 <xQueueGenericSend>
		
		vTaskDelay(29);
     324:	6d e1       	ldi	r22, 0x1D	; 29
     326:	70 e0       	ldi	r23, 0x00	; 0
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <vTaskDelay>
	}
     330:	0f 90       	pop	r0
     332:	0f 90       	pop	r0
     334:	0f 90       	pop	r0
     336:	0f 90       	pop	r0
     338:	a1 cf       	rjmp	.-190    	; 0x27c <readTask>

0000033a <create_tasks_and_semaphores>:
void sampleTask(void *pvParameters);
void readTask(void *pvParameters);
int arr[100];

void create_tasks_and_semaphores(void)
{
     33a:	ef 92       	push	r14
     33c:	ff 92       	push	r15
     33e:	0f 93       	push	r16
	xSemaphore = xSemaphoreCreateCounting(1, 1);
     340:	61 e0       	ldi	r22, 0x01	; 1
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	6e d4       	rcall	.+2268   	; 0xc22 <xQueueCreateCountingSemaphore>
     346:	90 93 ad 0e 	sts	0x0EAD, r25	; 0x800ead <xSemaphore+0x1>
     34a:	80 93 ac 0e 	sts	0x0EAC, r24	; 0x800eac <xSemaphore>
	
	xTaskCreate(sampleTask, "Sample Task", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
     34e:	e1 2c       	mov	r14, r1
     350:	f1 2c       	mov	r15, r1
     352:	01 e0       	ldi	r16, 0x01	; 1
     354:	20 e0       	ldi	r18, 0x00	; 0
     356:	30 e0       	ldi	r19, 0x00	; 0
     358:	40 ec       	ldi	r20, 0xC0	; 192
     35a:	50 e0       	ldi	r21, 0x00	; 0
     35c:	6f e9       	ldi	r22, 0x9F	; 159
     35e:	72 e0       	ldi	r23, 0x02	; 2
     360:	87 ef       	ldi	r24, 0xF7	; 247
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	0e 94 3a 0a 	call	0x1474	; 0x1474 <xTaskCreate>
	xTaskCreate(readTask, "Read Task", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
     368:	20 e0       	ldi	r18, 0x00	; 0
     36a:	30 e0       	ldi	r19, 0x00	; 0
     36c:	40 ec       	ldi	r20, 0xC0	; 192
     36e:	50 e0       	ldi	r21, 0x00	; 0
     370:	6b ea       	ldi	r22, 0xAB	; 171
     372:	72 e0       	ldi	r23, 0x02	; 2
     374:	8e e3       	ldi	r24, 0x3E	; 62
     376:	91 e0       	ldi	r25, 0x01	; 1
     378:	0e 94 3a 0a 	call	0x1474	; 0x1474 <xTaskCreate>
}
     37c:	0f 91       	pop	r16
     37e:	ff 90       	pop	r15
     380:	ef 90       	pop	r14
     382:	08 95       	ret

00000384 <initialiseSystem>:
	}
}

void initialiseSystem()
{
	stdio_initialise(ser_USART0);
     384:	80 e0       	ldi	r24, 0x00	; 0
     386:	0e 94 04 15 	call	0x2a08	; 0x2a08 <stdio_initialise>
	create_tasks_and_semaphores();
     38a:	d7 df       	rcall	.-82     	; 0x33a <create_tasks_and_semaphores>
	
	display_7seg_initialise(NULL);
     38c:	80 e0       	ldi	r24, 0x00	; 0
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	0e 94 39 14 	call	0x2872	; 0x2872 <display_7seg_initialise>
	display_7seg_powerUp();
     394:	0c 94 2e 14 	jmp	0x285c	; 0x285c <display_7seg_powerUp>
     398:	08 95       	ret

0000039a <main>:
}

 int main(void)
{	
	initialiseSystem();
     39a:	f4 df       	rcall	.-24     	; 0x384 <initialiseSystem>
	printf("Program Started.\r\n");
     39c:	85 eb       	ldi	r24, 0xB5	; 181
     39e:	92 e0       	ldi	r25, 0x02	; 2
     3a0:	0e 94 d5 1f 	call	0x3faa	; 0x3faa <puts>
	vTaskStartScheduler();
     3a4:	0e 94 85 0a 	call	0x150a	; 0x150a <vTaskStartScheduler>
     3a8:	ff cf       	rjmp	.-2      	; 0x3a8 <main+0xe>

000003aa <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     3aa:	e8 ef       	ldi	r30, 0xF8	; 248
     3ac:	f2 e0       	ldi	r31, 0x02	; 2
     3ae:	ac ef       	ldi	r26, 0xFC	; 252
     3b0:	b2 e0       	ldi	r27, 0x02	; 2
     3b2:	b1 83       	std	Z+1, r27	; 0x01
     3b4:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     3b6:	13 82       	std	Z+3, r1	; 0x03
     3b8:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     3ba:	ec eb       	ldi	r30, 0xBC	; 188
     3bc:	fc e0       	ldi	r31, 0x0C	; 12
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     3be:	f0 93 f7 02 	sts	0x02F7, r31	; 0x8002f7 <pxEnd+0x1>
     3c2:	e0 93 f6 02 	sts	0x02F6, r30	; 0x8002f6 <pxEnd>
    pxEnd->xBlockSize = 0;
     3c6:	13 82       	std	Z+3, r1	; 0x03
     3c8:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     3ca:	11 82       	std	Z+1, r1	; 0x01
     3cc:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     3ce:	80 ec       	ldi	r24, 0xC0	; 192
     3d0:	99 e0       	ldi	r25, 0x09	; 9
     3d2:	13 96       	adiw	r26, 0x03	; 3
     3d4:	9c 93       	st	X, r25
     3d6:	8e 93       	st	-X, r24
     3d8:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     3da:	ed 93       	st	X+, r30
     3dc:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     3de:	90 93 f3 02 	sts	0x02F3, r25	; 0x8002f3 <xMinimumEverFreeBytesRemaining+0x1>
     3e2:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     3e6:	90 93 f5 02 	sts	0x02F5, r25	; 0x8002f5 <xFreeBytesRemaining+0x1>
     3ea:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	90 e8       	ldi	r25, 0x80	; 128
     3f2:	90 93 ed 02 	sts	0x02ED, r25	; 0x8002ed <__data_end+0x1>
     3f6:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <__data_end>
     3fa:	08 95       	ret

000003fc <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
     400:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     402:	a8 ef       	ldi	r26, 0xF8	; 248
     404:	b2 e0       	ldi	r27, 0x02	; 2
     406:	01 c0       	rjmp	.+2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     408:	df 01       	movw	r26, r30
     40a:	ed 91       	ld	r30, X+
     40c:	fc 91       	ld	r31, X
     40e:	11 97       	sbiw	r26, 0x01	; 1
     410:	ec 17       	cp	r30, r28
     412:	fd 07       	cpc	r31, r29
     414:	c8 f3       	brcs	.-14     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     416:	12 96       	adiw	r26, 0x02	; 2
     418:	8d 91       	ld	r24, X+
     41a:	9c 91       	ld	r25, X
     41c:	13 97       	sbiw	r26, 0x03	; 3
     41e:	9d 01       	movw	r18, r26
     420:	28 0f       	add	r18, r24
     422:	39 1f       	adc	r19, r25
     424:	c2 17       	cp	r28, r18
     426:	d3 07       	cpc	r29, r19
     428:	49 f4       	brne	.+18     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     42a:	2a 81       	ldd	r18, Y+2	; 0x02
     42c:	3b 81       	ldd	r19, Y+3	; 0x03
     42e:	82 0f       	add	r24, r18
     430:	93 1f       	adc	r25, r19
     432:	13 96       	adiw	r26, 0x03	; 3
     434:	9c 93       	st	X, r25
     436:	8e 93       	st	-X, r24
     438:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     43a:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     43c:	8a 81       	ldd	r24, Y+2	; 0x02
     43e:	9b 81       	ldd	r25, Y+3	; 0x03
     440:	9e 01       	movw	r18, r28
     442:	28 0f       	add	r18, r24
     444:	39 1f       	adc	r19, r25
     446:	e2 17       	cp	r30, r18
     448:	f3 07       	cpc	r31, r19
     44a:	c1 f4       	brne	.+48     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     44c:	20 91 f6 02 	lds	r18, 0x02F6	; 0x8002f6 <pxEnd>
     450:	30 91 f7 02 	lds	r19, 0x02F7	; 0x8002f7 <pxEnd+0x1>
     454:	e2 17       	cp	r30, r18
     456:	f3 07       	cpc	r31, r19
     458:	71 f0       	breq	.+28     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     45a:	22 81       	ldd	r18, Z+2	; 0x02
     45c:	33 81       	ldd	r19, Z+3	; 0x03
     45e:	82 0f       	add	r24, r18
     460:	93 1f       	adc	r25, r19
     462:	9b 83       	std	Y+3, r25	; 0x03
     464:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     466:	ed 91       	ld	r30, X+
     468:	fc 91       	ld	r31, X
     46a:	11 97       	sbiw	r26, 0x01	; 1
     46c:	80 81       	ld	r24, Z
     46e:	91 81       	ldd	r25, Z+1	; 0x01
     470:	99 83       	std	Y+1, r25	; 0x01
     472:	88 83       	st	Y, r24
     474:	05 c0       	rjmp	.+10     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     476:	39 83       	std	Y+1, r19	; 0x01
     478:	28 83       	st	Y, r18
     47a:	02 c0       	rjmp	.+4      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     47c:	f9 83       	std	Y+1, r31	; 0x01
     47e:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     480:	ca 17       	cp	r28, r26
     482:	db 07       	cpc	r29, r27
     484:	11 f0       	breq	.+4      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     486:	cd 93       	st	X+, r28
     488:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     48a:	df 91       	pop	r29
     48c:	cf 91       	pop	r28
     48e:	08 95       	ret

00000490 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     490:	ef 92       	push	r14
     492:	ff 92       	push	r15
     494:	0f 93       	push	r16
     496:	1f 93       	push	r17
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
     49c:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     49e:	0e 94 bb 0a 	call	0x1576	; 0x1576 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     4a2:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <pxEnd>
     4a6:	90 91 f7 02 	lds	r25, 0x02F7	; 0x8002f7 <pxEnd+0x1>
     4aa:	89 2b       	or	r24, r25
     4ac:	09 f4       	brne	.+2      	; 0x4b0 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     4ae:	7d df       	rcall	.-262    	; 0x3aa <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     4b0:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <__data_end>
     4b4:	90 91 ed 02 	lds	r25, 0x02ED	; 0x8002ed <__data_end+0x1>
     4b8:	80 23       	and	r24, r16
     4ba:	91 23       	and	r25, r17
     4bc:	89 2b       	or	r24, r25
     4be:	09 f0       	breq	.+2      	; 0x4c2 <pvPortMalloc+0x32>
     4c0:	76 c0       	rjmp	.+236    	; 0x5ae <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     4c2:	01 15       	cp	r16, r1
     4c4:	11 05       	cpc	r17, r1
     4c6:	49 f0       	breq	.+18     	; 0x4da <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     4c8:	c8 01       	movw	r24, r16
     4ca:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     4cc:	08 17       	cp	r16, r24
     4ce:	19 07       	cpc	r17, r25
     4d0:	18 f0       	brcs	.+6      	; 0x4d8 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     4d2:	00 e0       	ldi	r16, 0x00	; 0
     4d4:	10 e0       	ldi	r17, 0x00	; 0
     4d6:	01 c0       	rjmp	.+2      	; 0x4da <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     4d8:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     4da:	01 15       	cp	r16, r1
     4dc:	11 05       	cpc	r17, r1
     4de:	09 f4       	brne	.+2      	; 0x4e2 <pvPortMalloc+0x52>
     4e0:	69 c0       	rjmp	.+210    	; 0x5b4 <pvPortMalloc+0x124>
     4e2:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <xFreeBytesRemaining>
     4e6:	90 91 f5 02 	lds	r25, 0x02F5	; 0x8002f5 <xFreeBytesRemaining+0x1>
     4ea:	80 17       	cp	r24, r16
     4ec:	91 07       	cpc	r25, r17
     4ee:	08 f4       	brcc	.+2      	; 0x4f2 <pvPortMalloc+0x62>
     4f0:	64 c0       	rjmp	.+200    	; 0x5ba <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     4f2:	c0 91 f8 02 	lds	r28, 0x02F8	; 0x8002f8 <xStart>
     4f6:	d0 91 f9 02 	lds	r29, 0x02F9	; 0x8002f9 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     4fa:	e8 ef       	ldi	r30, 0xF8	; 248
     4fc:	f2 e0       	ldi	r31, 0x02	; 2
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     4fe:	02 c0       	rjmp	.+4      	; 0x504 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     500:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     502:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     504:	8a 81       	ldd	r24, Y+2	; 0x02
     506:	9b 81       	ldd	r25, Y+3	; 0x03
     508:	80 17       	cp	r24, r16
     50a:	91 07       	cpc	r25, r17
     50c:	20 f4       	brcc	.+8      	; 0x516 <pvPortMalloc+0x86>
     50e:	88 81       	ld	r24, Y
     510:	99 81       	ldd	r25, Y+1	; 0x01
     512:	00 97       	sbiw	r24, 0x00	; 0
     514:	a9 f7       	brne	.-22     	; 0x500 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     516:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <pxEnd>
     51a:	90 91 f7 02 	lds	r25, 0x02F7	; 0x8002f7 <pxEnd+0x1>
     51e:	c8 17       	cp	r28, r24
     520:	d9 07       	cpc	r29, r25
     522:	09 f4       	brne	.+2      	; 0x526 <pvPortMalloc+0x96>
     524:	4d c0       	rjmp	.+154    	; 0x5c0 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     526:	e0 80       	ld	r14, Z
     528:	f1 80       	ldd	r15, Z+1	; 0x01
     52a:	84 e0       	ldi	r24, 0x04	; 4
     52c:	e8 0e       	add	r14, r24
     52e:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     530:	88 81       	ld	r24, Y
     532:	99 81       	ldd	r25, Y+1	; 0x01
     534:	91 83       	std	Z+1, r25	; 0x01
     536:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     538:	2a 81       	ldd	r18, Y+2	; 0x02
     53a:	3b 81       	ldd	r19, Y+3	; 0x03
     53c:	20 1b       	sub	r18, r16
     53e:	31 0b       	sbc	r19, r17
     540:	29 30       	cpi	r18, 0x09	; 9
     542:	31 05       	cpc	r19, r1
     544:	48 f0       	brcs	.+18     	; 0x558 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     546:	ce 01       	movw	r24, r28
     548:	80 0f       	add	r24, r16
     54a:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     54c:	fc 01       	movw	r30, r24
     54e:	33 83       	std	Z+3, r19	; 0x03
     550:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     552:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     554:	0a 83       	std	Y+2, r16	; 0x02
     556:	52 df       	rcall	.-348    	; 0x3fc <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     558:	2a 81       	ldd	r18, Y+2	; 0x02
     55a:	3b 81       	ldd	r19, Y+3	; 0x03
     55c:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <xFreeBytesRemaining>
     560:	90 91 f5 02 	lds	r25, 0x02F5	; 0x8002f5 <xFreeBytesRemaining+0x1>
     564:	82 1b       	sub	r24, r18
     566:	93 0b       	sbc	r25, r19
     568:	90 93 f5 02 	sts	0x02F5, r25	; 0x8002f5 <xFreeBytesRemaining+0x1>
     56c:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     570:	40 91 f2 02 	lds	r20, 0x02F2	; 0x8002f2 <xMinimumEverFreeBytesRemaining>
     574:	50 91 f3 02 	lds	r21, 0x02F3	; 0x8002f3 <xMinimumEverFreeBytesRemaining+0x1>
     578:	84 17       	cp	r24, r20
     57a:	95 07       	cpc	r25, r21
     57c:	20 f4       	brcc	.+8      	; 0x586 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     57e:	90 93 f3 02 	sts	0x02F3, r25	; 0x8002f3 <xMinimumEverFreeBytesRemaining+0x1>
     582:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     586:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <__data_end>
     58a:	90 91 ed 02 	lds	r25, 0x02ED	; 0x8002ed <__data_end+0x1>
     58e:	28 2b       	or	r18, r24
     590:	39 2b       	or	r19, r25
     592:	3b 83       	std	Y+3, r19	; 0x03
     594:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     596:	19 82       	std	Y+1, r1	; 0x01
     598:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     59a:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <xNumberOfSuccessfulAllocations>
     59e:	90 91 f1 02 	lds	r25, 0x02F1	; 0x8002f1 <xNumberOfSuccessfulAllocations+0x1>
     5a2:	01 96       	adiw	r24, 0x01	; 1
     5a4:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <xNumberOfSuccessfulAllocations+0x1>
     5a8:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <xNumberOfSuccessfulAllocations>
     5ac:	0b c0       	rjmp	.+22     	; 0x5c4 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     5ae:	e1 2c       	mov	r14, r1
     5b0:	f1 2c       	mov	r15, r1
     5b2:	08 c0       	rjmp	.+16     	; 0x5c4 <pvPortMalloc+0x134>
     5b4:	e1 2c       	mov	r14, r1
     5b6:	f1 2c       	mov	r15, r1
     5b8:	05 c0       	rjmp	.+10     	; 0x5c4 <pvPortMalloc+0x134>
     5ba:	e1 2c       	mov	r14, r1
     5bc:	f1 2c       	mov	r15, r1
     5be:	02 c0       	rjmp	.+4      	; 0x5c4 <pvPortMalloc+0x134>
     5c0:	e1 2c       	mov	r14, r1
     5c2:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     5c4:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     5c8:	e1 14       	cp	r14, r1
     5ca:	f1 04       	cpc	r15, r1
     5cc:	11 f4       	brne	.+4      	; 0x5d2 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     5ce:	0e 94 48 13 	call	0x2690	; 0x2690 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     5d2:	c7 01       	movw	r24, r14
     5d4:	df 91       	pop	r29
     5d6:	cf 91       	pop	r28
     5d8:	1f 91       	pop	r17
     5da:	0f 91       	pop	r16
     5dc:	ff 90       	pop	r15
     5de:	ef 90       	pop	r14
     5e0:	08 95       	ret

000005e2 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     5e2:	0f 93       	push	r16
     5e4:	1f 93       	push	r17
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     5ea:	00 97       	sbiw	r24, 0x00	; 0
     5ec:	89 f1       	breq	.+98     	; 0x650 <vPortFree+0x6e>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     5ee:	ec 01       	movw	r28, r24
     5f0:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     5f2:	4a 81       	ldd	r20, Y+2	; 0x02
     5f4:	5b 81       	ldd	r21, Y+3	; 0x03
     5f6:	20 91 ec 02 	lds	r18, 0x02EC	; 0x8002ec <__data_end>
     5fa:	30 91 ed 02 	lds	r19, 0x02ED	; 0x8002ed <__data_end+0x1>
     5fe:	ba 01       	movw	r22, r20
     600:	62 23       	and	r22, r18
     602:	73 23       	and	r23, r19
     604:	67 2b       	or	r22, r23
     606:	21 f1       	breq	.+72     	; 0x650 <vPortFree+0x6e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     608:	68 81       	ld	r22, Y
     60a:	79 81       	ldd	r23, Y+1	; 0x01
     60c:	67 2b       	or	r22, r23
     60e:	01 f5       	brne	.+64     	; 0x650 <vPortFree+0x6e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     610:	20 95       	com	r18
     612:	30 95       	com	r19
     614:	24 23       	and	r18, r20
     616:	35 23       	and	r19, r21
     618:	3b 83       	std	Y+3, r19	; 0x03
     61a:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     61c:	ac d7       	rcall	.+3928   	; 0x1576 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     61e:	8a 81       	ldd	r24, Y+2	; 0x02
     620:	9b 81       	ldd	r25, Y+3	; 0x03
     622:	20 91 f4 02 	lds	r18, 0x02F4	; 0x8002f4 <xFreeBytesRemaining>
     626:	30 91 f5 02 	lds	r19, 0x02F5	; 0x8002f5 <xFreeBytesRemaining+0x1>
     62a:	82 0f       	add	r24, r18
     62c:	93 1f       	adc	r25, r19
     62e:	90 93 f5 02 	sts	0x02F5, r25	; 0x8002f5 <xFreeBytesRemaining+0x1>
     632:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     636:	ce 01       	movw	r24, r28
     638:	e1 de       	rcall	.-574    	; 0x3fc <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     63a:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <xNumberOfSuccessfulFrees>
     63e:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <xNumberOfSuccessfulFrees+0x1>
     642:	01 96       	adiw	r24, 0x01	; 1
     644:	90 93 ef 02 	sts	0x02EF, r25	; 0x8002ef <xNumberOfSuccessfulFrees+0x1>
     648:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     64c:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	1f 91       	pop	r17
     656:	0f 91       	pop	r16
     658:	08 95       	ret

0000065a <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     65a:	fc 01       	movw	r30, r24
     65c:	03 96       	adiw	r24, 0x03	; 3
     65e:	92 83       	std	Z+2, r25	; 0x02
     660:	81 83       	std	Z+1, r24	; 0x01
     662:	4f ef       	ldi	r20, 0xFF	; 255
     664:	5f ef       	ldi	r21, 0xFF	; 255
     666:	ba 01       	movw	r22, r20
     668:	43 83       	std	Z+3, r20	; 0x03
     66a:	54 83       	std	Z+4, r21	; 0x04
     66c:	65 83       	std	Z+5, r22	; 0x05
     66e:	76 83       	std	Z+6, r23	; 0x06
     670:	90 87       	std	Z+8, r25	; 0x08
     672:	87 83       	std	Z+7, r24	; 0x07
     674:	92 87       	std	Z+10, r25	; 0x0a
     676:	81 87       	std	Z+9, r24	; 0x09
     678:	10 82       	st	Z, r1
     67a:	08 95       	ret

0000067c <vListInitialiseItem>:
     67c:	fc 01       	movw	r30, r24
     67e:	13 86       	std	Z+11, r1	; 0x0b
     680:	12 86       	std	Z+10, r1	; 0x0a
     682:	08 95       	ret

00000684 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     684:	0f 93       	push	r16
     686:	1f 93       	push	r17
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     68e:	08 81       	ld	r16, Y
     690:	19 81       	ldd	r17, Y+1	; 0x01
     692:	2a 81       	ldd	r18, Y+2	; 0x02
     694:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     696:	0f 3f       	cpi	r16, 0xFF	; 255
     698:	4f ef       	ldi	r20, 0xFF	; 255
     69a:	14 07       	cpc	r17, r20
     69c:	24 07       	cpc	r18, r20
     69e:	34 07       	cpc	r19, r20
     6a0:	21 f4       	brne	.+8      	; 0x6aa <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     6a2:	fc 01       	movw	r30, r24
     6a4:	a1 85       	ldd	r26, Z+9	; 0x09
     6a6:	b2 85       	ldd	r27, Z+10	; 0x0a
     6a8:	11 c0       	rjmp	.+34     	; 0x6cc <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     6aa:	dc 01       	movw	r26, r24
     6ac:	13 96       	adiw	r26, 0x03	; 3
     6ae:	01 c0       	rjmp	.+2      	; 0x6b2 <vListInsert+0x2e>
     6b0:	df 01       	movw	r26, r30
     6b2:	14 96       	adiw	r26, 0x04	; 4
     6b4:	ed 91       	ld	r30, X+
     6b6:	fc 91       	ld	r31, X
     6b8:	15 97       	sbiw	r26, 0x05	; 5
     6ba:	40 81       	ld	r20, Z
     6bc:	51 81       	ldd	r21, Z+1	; 0x01
     6be:	62 81       	ldd	r22, Z+2	; 0x02
     6c0:	73 81       	ldd	r23, Z+3	; 0x03
     6c2:	04 17       	cp	r16, r20
     6c4:	15 07       	cpc	r17, r21
     6c6:	26 07       	cpc	r18, r22
     6c8:	37 07       	cpc	r19, r23
     6ca:	90 f7       	brcc	.-28     	; 0x6b0 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     6cc:	14 96       	adiw	r26, 0x04	; 4
     6ce:	ed 91       	ld	r30, X+
     6d0:	fc 91       	ld	r31, X
     6d2:	15 97       	sbiw	r26, 0x05	; 5
     6d4:	fd 83       	std	Y+5, r31	; 0x05
     6d6:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     6d8:	d7 83       	std	Z+7, r29	; 0x07
     6da:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     6dc:	bf 83       	std	Y+7, r27	; 0x07
     6de:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     6e0:	15 96       	adiw	r26, 0x05	; 5
     6e2:	dc 93       	st	X, r29
     6e4:	ce 93       	st	-X, r28
     6e6:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     6e8:	9b 87       	std	Y+11, r25	; 0x0b
     6ea:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     6ec:	fc 01       	movw	r30, r24
     6ee:	20 81       	ld	r18, Z
     6f0:	2f 5f       	subi	r18, 0xFF	; 255
     6f2:	20 83       	st	Z, r18
}
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	1f 91       	pop	r17
     6fa:	0f 91       	pop	r16
     6fc:	08 95       	ret

000006fe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     6fe:	cf 93       	push	r28
     700:	df 93       	push	r29
     702:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     704:	a2 85       	ldd	r26, Z+10	; 0x0a
     706:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     708:	c4 81       	ldd	r28, Z+4	; 0x04
     70a:	d5 81       	ldd	r29, Z+5	; 0x05
     70c:	86 81       	ldd	r24, Z+6	; 0x06
     70e:	97 81       	ldd	r25, Z+7	; 0x07
     710:	9f 83       	std	Y+7, r25	; 0x07
     712:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     714:	c6 81       	ldd	r28, Z+6	; 0x06
     716:	d7 81       	ldd	r29, Z+7	; 0x07
     718:	84 81       	ldd	r24, Z+4	; 0x04
     71a:	95 81       	ldd	r25, Z+5	; 0x05
     71c:	9d 83       	std	Y+5, r25	; 0x05
     71e:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     720:	11 96       	adiw	r26, 0x01	; 1
     722:	8d 91       	ld	r24, X+
     724:	9c 91       	ld	r25, X
     726:	12 97       	sbiw	r26, 0x02	; 2
     728:	e8 17       	cp	r30, r24
     72a:	f9 07       	cpc	r31, r25
     72c:	31 f4       	brne	.+12     	; 0x73a <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     72e:	86 81       	ldd	r24, Z+6	; 0x06
     730:	97 81       	ldd	r25, Z+7	; 0x07
     732:	12 96       	adiw	r26, 0x02	; 2
     734:	9c 93       	st	X, r25
     736:	8e 93       	st	-X, r24
     738:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     73a:	13 86       	std	Z+11, r1	; 0x0b
     73c:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     73e:	8c 91       	ld	r24, X
     740:	81 50       	subi	r24, 0x01	; 1
     742:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     744:	8c 91       	ld	r24, X
}
     746:	df 91       	pop	r29
     748:	cf 91       	pop	r28
     74a:	08 95       	ret

0000074c <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     74c:	a8 95       	wdr
     74e:	90 ec       	ldi	r25, 0xC0	; 192
     750:	88 e1       	ldi	r24, 0x18	; 24
     752:	0f b6       	in	r0, 0x3f	; 63
     754:	f8 94       	cli
     756:	a8 95       	wdr
     758:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     75c:	0f be       	out	0x3f, r0	; 63
     75e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     762:	08 95       	ret

00000764 <pxPortInitialiseStack>:
     764:	fc 01       	movw	r30, r24
     766:	60 83       	st	Z, r22
     768:	31 97       	sbiw	r30, 0x01	; 1
     76a:	70 83       	st	Z, r23
     76c:	31 97       	sbiw	r30, 0x01	; 1
     76e:	10 82       	st	Z, r1
     770:	31 97       	sbiw	r30, 0x01	; 1
     772:	10 82       	st	Z, r1
     774:	31 97       	sbiw	r30, 0x01	; 1
     776:	20 e8       	ldi	r18, 0x80	; 128
     778:	20 83       	st	Z, r18
     77a:	31 97       	sbiw	r30, 0x01	; 1
     77c:	10 82       	st	Z, r1
     77e:	31 97       	sbiw	r30, 0x01	; 1
     780:	10 82       	st	Z, r1
     782:	31 97       	sbiw	r30, 0x01	; 1
     784:	10 82       	st	Z, r1
     786:	77 97       	sbiw	r30, 0x17	; 23
     788:	40 83       	st	Z, r20
     78a:	31 97       	sbiw	r30, 0x01	; 1
     78c:	50 83       	st	Z, r21
     78e:	86 97       	sbiw	r24, 0x26	; 38
     790:	08 95       	ret

00000792 <xPortStartScheduler>:
     792:	dc df       	rcall	.-72     	; 0x74c <prvSetupTimerInterrupt>
     794:	a0 91 7f 0d 	lds	r26, 0x0D7F	; 0x800d7f <pxCurrentTCB>
     798:	b0 91 80 0d 	lds	r27, 0x0D80	; 0x800d80 <pxCurrentTCB+0x1>
     79c:	cd 91       	ld	r28, X+
     79e:	cd bf       	out	0x3d, r28	; 61
     7a0:	dd 91       	ld	r29, X+
     7a2:	de bf       	out	0x3e, r29	; 62
     7a4:	ff 91       	pop	r31
     7a6:	ef 91       	pop	r30
     7a8:	df 91       	pop	r29
     7aa:	cf 91       	pop	r28
     7ac:	bf 91       	pop	r27
     7ae:	af 91       	pop	r26
     7b0:	9f 91       	pop	r25
     7b2:	8f 91       	pop	r24
     7b4:	7f 91       	pop	r23
     7b6:	6f 91       	pop	r22
     7b8:	5f 91       	pop	r21
     7ba:	4f 91       	pop	r20
     7bc:	3f 91       	pop	r19
     7be:	2f 91       	pop	r18
     7c0:	1f 91       	pop	r17
     7c2:	0f 91       	pop	r16
     7c4:	ff 90       	pop	r15
     7c6:	ef 90       	pop	r14
     7c8:	df 90       	pop	r13
     7ca:	cf 90       	pop	r12
     7cc:	bf 90       	pop	r11
     7ce:	af 90       	pop	r10
     7d0:	9f 90       	pop	r9
     7d2:	8f 90       	pop	r8
     7d4:	7f 90       	pop	r7
     7d6:	6f 90       	pop	r6
     7d8:	5f 90       	pop	r5
     7da:	4f 90       	pop	r4
     7dc:	3f 90       	pop	r3
     7de:	2f 90       	pop	r2
     7e0:	1f 90       	pop	r1
     7e2:	0f 90       	pop	r0
     7e4:	0c be       	out	0x3c, r0	; 60
     7e6:	0f 90       	pop	r0
     7e8:	0b be       	out	0x3b, r0	; 59
     7ea:	0f 90       	pop	r0
     7ec:	0f be       	out	0x3f, r0	; 63
     7ee:	0f 90       	pop	r0
     7f0:	08 95       	ret
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	08 95       	ret

000007f6 <vPortYield>:
     7f6:	0f 92       	push	r0
     7f8:	0f b6       	in	r0, 0x3f	; 63
     7fa:	f8 94       	cli
     7fc:	0f 92       	push	r0
     7fe:	0b b6       	in	r0, 0x3b	; 59
     800:	0f 92       	push	r0
     802:	0c b6       	in	r0, 0x3c	; 60
     804:	0f 92       	push	r0
     806:	1f 92       	push	r1
     808:	11 24       	eor	r1, r1
     80a:	2f 92       	push	r2
     80c:	3f 92       	push	r3
     80e:	4f 92       	push	r4
     810:	5f 92       	push	r5
     812:	6f 92       	push	r6
     814:	7f 92       	push	r7
     816:	8f 92       	push	r8
     818:	9f 92       	push	r9
     81a:	af 92       	push	r10
     81c:	bf 92       	push	r11
     81e:	cf 92       	push	r12
     820:	df 92       	push	r13
     822:	ef 92       	push	r14
     824:	ff 92       	push	r15
     826:	0f 93       	push	r16
     828:	1f 93       	push	r17
     82a:	2f 93       	push	r18
     82c:	3f 93       	push	r19
     82e:	4f 93       	push	r20
     830:	5f 93       	push	r21
     832:	6f 93       	push	r22
     834:	7f 93       	push	r23
     836:	8f 93       	push	r24
     838:	9f 93       	push	r25
     83a:	af 93       	push	r26
     83c:	bf 93       	push	r27
     83e:	cf 93       	push	r28
     840:	df 93       	push	r29
     842:	ef 93       	push	r30
     844:	ff 93       	push	r31
     846:	a0 91 7f 0d 	lds	r26, 0x0D7F	; 0x800d7f <pxCurrentTCB>
     84a:	b0 91 80 0d 	lds	r27, 0x0D80	; 0x800d80 <pxCurrentTCB+0x1>
     84e:	0d b6       	in	r0, 0x3d	; 61
     850:	0d 92       	st	X+, r0
     852:	0e b6       	in	r0, 0x3e	; 62
     854:	0d 92       	st	X+, r0
     856:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <vTaskSwitchContext>
     85a:	a0 91 7f 0d 	lds	r26, 0x0D7F	; 0x800d7f <pxCurrentTCB>
     85e:	b0 91 80 0d 	lds	r27, 0x0D80	; 0x800d80 <pxCurrentTCB+0x1>
     862:	cd 91       	ld	r28, X+
     864:	cd bf       	out	0x3d, r28	; 61
     866:	dd 91       	ld	r29, X+
     868:	de bf       	out	0x3e, r29	; 62
     86a:	ff 91       	pop	r31
     86c:	ef 91       	pop	r30
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	bf 91       	pop	r27
     874:	af 91       	pop	r26
     876:	9f 91       	pop	r25
     878:	8f 91       	pop	r24
     87a:	7f 91       	pop	r23
     87c:	6f 91       	pop	r22
     87e:	5f 91       	pop	r21
     880:	4f 91       	pop	r20
     882:	3f 91       	pop	r19
     884:	2f 91       	pop	r18
     886:	1f 91       	pop	r17
     888:	0f 91       	pop	r16
     88a:	ff 90       	pop	r15
     88c:	ef 90       	pop	r14
     88e:	df 90       	pop	r13
     890:	cf 90       	pop	r12
     892:	bf 90       	pop	r11
     894:	af 90       	pop	r10
     896:	9f 90       	pop	r9
     898:	8f 90       	pop	r8
     89a:	7f 90       	pop	r7
     89c:	6f 90       	pop	r6
     89e:	5f 90       	pop	r5
     8a0:	4f 90       	pop	r4
     8a2:	3f 90       	pop	r3
     8a4:	2f 90       	pop	r2
     8a6:	1f 90       	pop	r1
     8a8:	0f 90       	pop	r0
     8aa:	0c be       	out	0x3c, r0	; 60
     8ac:	0f 90       	pop	r0
     8ae:	0b be       	out	0x3b, r0	; 59
     8b0:	0f 90       	pop	r0
     8b2:	0f be       	out	0x3f, r0	; 63
     8b4:	0f 90       	pop	r0
     8b6:	08 95       	ret

000008b8 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     8b8:	0f 92       	push	r0
     8ba:	0f b6       	in	r0, 0x3f	; 63
     8bc:	f8 94       	cli
     8be:	0f 92       	push	r0
     8c0:	0b b6       	in	r0, 0x3b	; 59
     8c2:	0f 92       	push	r0
     8c4:	0c b6       	in	r0, 0x3c	; 60
     8c6:	0f 92       	push	r0
     8c8:	1f 92       	push	r1
     8ca:	11 24       	eor	r1, r1
     8cc:	2f 92       	push	r2
     8ce:	3f 92       	push	r3
     8d0:	4f 92       	push	r4
     8d2:	5f 92       	push	r5
     8d4:	6f 92       	push	r6
     8d6:	7f 92       	push	r7
     8d8:	8f 92       	push	r8
     8da:	9f 92       	push	r9
     8dc:	af 92       	push	r10
     8de:	bf 92       	push	r11
     8e0:	cf 92       	push	r12
     8e2:	df 92       	push	r13
     8e4:	ef 92       	push	r14
     8e6:	ff 92       	push	r15
     8e8:	0f 93       	push	r16
     8ea:	1f 93       	push	r17
     8ec:	2f 93       	push	r18
     8ee:	3f 93       	push	r19
     8f0:	4f 93       	push	r20
     8f2:	5f 93       	push	r21
     8f4:	6f 93       	push	r22
     8f6:	7f 93       	push	r23
     8f8:	8f 93       	push	r24
     8fa:	9f 93       	push	r25
     8fc:	af 93       	push	r26
     8fe:	bf 93       	push	r27
     900:	cf 93       	push	r28
     902:	df 93       	push	r29
     904:	ef 93       	push	r30
     906:	ff 93       	push	r31
     908:	a0 91 7f 0d 	lds	r26, 0x0D7F	; 0x800d7f <pxCurrentTCB>
     90c:	b0 91 80 0d 	lds	r27, 0x0D80	; 0x800d80 <pxCurrentTCB+0x1>
     910:	0d b6       	in	r0, 0x3d	; 61
     912:	0d 92       	st	X+, r0
     914:	0e b6       	in	r0, 0x3e	; 62
     916:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     918:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     91a:	41 d6       	rcall	.+3202   	; 0x159e <xTaskIncrementTick>
     91c:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     91e:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     922:	a0 91 7f 0d 	lds	r26, 0x0D7F	; 0x800d7f <pxCurrentTCB>
     926:	b0 91 80 0d 	lds	r27, 0x0D80	; 0x800d80 <pxCurrentTCB+0x1>
     92a:	cd 91       	ld	r28, X+
     92c:	cd bf       	out	0x3d, r28	; 61
     92e:	dd 91       	ld	r29, X+
     930:	de bf       	out	0x3e, r29	; 62
     932:	ff 91       	pop	r31
     934:	ef 91       	pop	r30
     936:	df 91       	pop	r29
     938:	cf 91       	pop	r28
     93a:	bf 91       	pop	r27
     93c:	af 91       	pop	r26
     93e:	9f 91       	pop	r25
     940:	8f 91       	pop	r24
     942:	7f 91       	pop	r23
     944:	6f 91       	pop	r22
     946:	5f 91       	pop	r21
     948:	4f 91       	pop	r20
     94a:	3f 91       	pop	r19
     94c:	2f 91       	pop	r18
     94e:	1f 91       	pop	r17
     950:	0f 91       	pop	r16
     952:	ff 90       	pop	r15
     954:	ef 90       	pop	r14
     956:	df 90       	pop	r13
     958:	cf 90       	pop	r12
     95a:	bf 90       	pop	r11
     95c:	af 90       	pop	r10
     95e:	9f 90       	pop	r9
     960:	8f 90       	pop	r8
     962:	7f 90       	pop	r7
     964:	6f 90       	pop	r6
     966:	5f 90       	pop	r5
     968:	4f 90       	pop	r4
     96a:	3f 90       	pop	r3
     96c:	2f 90       	pop	r2
     96e:	1f 90       	pop	r1
     970:	0f 90       	pop	r0
     972:	0c be       	out	0x3c, r0	; 60
     974:	0f 90       	pop	r0
     976:	0b be       	out	0x3b, r0	; 59
     978:	0f 90       	pop	r0
     97a:	0f be       	out	0x3f, r0	; 63
     97c:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     97e:	08 95       	ret

00000980 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     980:	9b df       	rcall	.-202    	; 0x8b8 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     982:	18 95       	reti

00000984 <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     984:	dc 01       	movw	r26, r24
     986:	53 96       	adiw	r26, 0x13	; 19
     988:	2c 91       	ld	r18, X
     98a:	53 97       	sbiw	r26, 0x13	; 19
     98c:	22 23       	and	r18, r18
     98e:	41 f0       	breq	.+16     	; 0x9a0 <prvGetDisinheritPriorityAfterTimeout+0x1c>
     990:	5a 96       	adiw	r26, 0x1a	; 26
     992:	ed 91       	ld	r30, X+
     994:	fc 91       	ld	r31, X
     996:	5b 97       	sbiw	r26, 0x1b	; 27
     998:	90 81       	ld	r25, Z
     99a:	8a e0       	ldi	r24, 0x0A	; 10
     99c:	89 1b       	sub	r24, r25
     99e:	08 95       	ret
     9a0:	80 e0       	ldi	r24, 0x00	; 0
     9a2:	08 95       	ret

000009a4 <prvIsQueueEmpty>:
     9a4:	0f b6       	in	r0, 0x3f	; 63
     9a6:	f8 94       	cli
     9a8:	0f 92       	push	r0
     9aa:	fc 01       	movw	r30, r24
     9ac:	86 8d       	ldd	r24, Z+30	; 0x1e
     9ae:	81 11       	cpse	r24, r1
     9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <prvIsQueueEmpty+0x12>
     9b2:	81 e0       	ldi	r24, 0x01	; 1
     9b4:	01 c0       	rjmp	.+2      	; 0x9b8 <prvIsQueueEmpty+0x14>
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	0f 90       	pop	r0
     9ba:	0f be       	out	0x3f, r0	; 63
     9bc:	08 95       	ret

000009be <prvIsQueueFull>:
     9be:	0f b6       	in	r0, 0x3f	; 63
     9c0:	f8 94       	cli
     9c2:	0f 92       	push	r0
     9c4:	fc 01       	movw	r30, r24
     9c6:	26 8d       	ldd	r18, Z+30	; 0x1e
     9c8:	87 8d       	ldd	r24, Z+31	; 0x1f
     9ca:	28 13       	cpse	r18, r24
     9cc:	02 c0       	rjmp	.+4      	; 0x9d2 <prvIsQueueFull+0x14>
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	01 c0       	rjmp	.+2      	; 0x9d4 <prvIsQueueFull+0x16>
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	0f 90       	pop	r0
     9d6:	0f be       	out	0x3f, r0	; 63
     9d8:	08 95       	ret

000009da <prvCopyDataToQueue>:
     9da:	0f 93       	push	r16
     9dc:	1f 93       	push	r17
     9de:	cf 93       	push	r28
     9e0:	df 93       	push	r29
     9e2:	ec 01       	movw	r28, r24
     9e4:	04 2f       	mov	r16, r20
     9e6:	1e 8d       	ldd	r17, Y+30	; 0x1e
     9e8:	48 a1       	ldd	r20, Y+32	; 0x20
     9ea:	41 11       	cpse	r20, r1
     9ec:	0c c0       	rjmp	.+24     	; 0xa06 <prvCopyDataToQueue+0x2c>
     9ee:	88 81       	ld	r24, Y
     9f0:	99 81       	ldd	r25, Y+1	; 0x01
     9f2:	89 2b       	or	r24, r25
     9f4:	09 f0       	breq	.+2      	; 0x9f8 <prvCopyDataToQueue+0x1e>
     9f6:	42 c0       	rjmp	.+132    	; 0xa7c <prvCopyDataToQueue+0xa2>
     9f8:	8c 81       	ldd	r24, Y+4	; 0x04
     9fa:	9d 81       	ldd	r25, Y+5	; 0x05
     9fc:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <xTaskPriorityDisinherit>
     a00:	1d 82       	std	Y+5, r1	; 0x05
     a02:	1c 82       	std	Y+4, r1	; 0x04
     a04:	42 c0       	rjmp	.+132    	; 0xa8a <prvCopyDataToQueue+0xb0>
     a06:	01 11       	cpse	r16, r1
     a08:	17 c0       	rjmp	.+46     	; 0xa38 <prvCopyDataToQueue+0x5e>
     a0a:	50 e0       	ldi	r21, 0x00	; 0
     a0c:	8a 81       	ldd	r24, Y+2	; 0x02
     a0e:	9b 81       	ldd	r25, Y+3	; 0x03
     a10:	0e 94 b2 1f 	call	0x3f64	; 0x3f64 <memcpy>
     a14:	28 a1       	ldd	r18, Y+32	; 0x20
     a16:	8a 81       	ldd	r24, Y+2	; 0x02
     a18:	9b 81       	ldd	r25, Y+3	; 0x03
     a1a:	82 0f       	add	r24, r18
     a1c:	91 1d       	adc	r25, r1
     a1e:	9b 83       	std	Y+3, r25	; 0x03
     a20:	8a 83       	std	Y+2, r24	; 0x02
     a22:	2c 81       	ldd	r18, Y+4	; 0x04
     a24:	3d 81       	ldd	r19, Y+5	; 0x05
     a26:	82 17       	cp	r24, r18
     a28:	93 07       	cpc	r25, r19
     a2a:	50 f1       	brcs	.+84     	; 0xa80 <prvCopyDataToQueue+0xa6>
     a2c:	88 81       	ld	r24, Y
     a2e:	99 81       	ldd	r25, Y+1	; 0x01
     a30:	9b 83       	std	Y+3, r25	; 0x03
     a32:	8a 83       	std	Y+2, r24	; 0x02
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	29 c0       	rjmp	.+82     	; 0xa8a <prvCopyDataToQueue+0xb0>
     a38:	50 e0       	ldi	r21, 0x00	; 0
     a3a:	8e 81       	ldd	r24, Y+6	; 0x06
     a3c:	9f 81       	ldd	r25, Y+7	; 0x07
     a3e:	0e 94 b2 1f 	call	0x3f64	; 0x3f64 <memcpy>
     a42:	88 a1       	ldd	r24, Y+32	; 0x20
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	91 95       	neg	r25
     a48:	81 95       	neg	r24
     a4a:	91 09       	sbc	r25, r1
     a4c:	2e 81       	ldd	r18, Y+6	; 0x06
     a4e:	3f 81       	ldd	r19, Y+7	; 0x07
     a50:	28 0f       	add	r18, r24
     a52:	39 1f       	adc	r19, r25
     a54:	3f 83       	std	Y+7, r19	; 0x07
     a56:	2e 83       	std	Y+6, r18	; 0x06
     a58:	48 81       	ld	r20, Y
     a5a:	59 81       	ldd	r21, Y+1	; 0x01
     a5c:	24 17       	cp	r18, r20
     a5e:	35 07       	cpc	r19, r21
     a60:	30 f4       	brcc	.+12     	; 0xa6e <prvCopyDataToQueue+0x94>
     a62:	2c 81       	ldd	r18, Y+4	; 0x04
     a64:	3d 81       	ldd	r19, Y+5	; 0x05
     a66:	82 0f       	add	r24, r18
     a68:	93 1f       	adc	r25, r19
     a6a:	9f 83       	std	Y+7, r25	; 0x07
     a6c:	8e 83       	std	Y+6, r24	; 0x06
     a6e:	02 30       	cpi	r16, 0x02	; 2
     a70:	49 f4       	brne	.+18     	; 0xa84 <prvCopyDataToQueue+0xaa>
     a72:	11 23       	and	r17, r17
     a74:	49 f0       	breq	.+18     	; 0xa88 <prvCopyDataToQueue+0xae>
     a76:	11 50       	subi	r17, 0x01	; 1
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	07 c0       	rjmp	.+14     	; 0xa8a <prvCopyDataToQueue+0xb0>
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	05 c0       	rjmp	.+10     	; 0xa8a <prvCopyDataToQueue+0xb0>
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	03 c0       	rjmp	.+6      	; 0xa8a <prvCopyDataToQueue+0xb0>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	01 c0       	rjmp	.+2      	; 0xa8a <prvCopyDataToQueue+0xb0>
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	1f 5f       	subi	r17, 0xFF	; 255
     a8c:	1e 8f       	std	Y+30, r17	; 0x1e
     a8e:	df 91       	pop	r29
     a90:	cf 91       	pop	r28
     a92:	1f 91       	pop	r17
     a94:	0f 91       	pop	r16
     a96:	08 95       	ret

00000a98 <prvCopyDataFromQueue>:
     a98:	fc 01       	movw	r30, r24
     a9a:	40 a1       	ldd	r20, Z+32	; 0x20
     a9c:	44 23       	and	r20, r20
     a9e:	a9 f0       	breq	.+42     	; 0xaca <prvCopyDataFromQueue+0x32>
     aa0:	50 e0       	ldi	r21, 0x00	; 0
     aa2:	26 81       	ldd	r18, Z+6	; 0x06
     aa4:	37 81       	ldd	r19, Z+7	; 0x07
     aa6:	24 0f       	add	r18, r20
     aa8:	35 1f       	adc	r19, r21
     aaa:	37 83       	std	Z+7, r19	; 0x07
     aac:	26 83       	std	Z+6, r18	; 0x06
     aae:	84 81       	ldd	r24, Z+4	; 0x04
     ab0:	95 81       	ldd	r25, Z+5	; 0x05
     ab2:	28 17       	cp	r18, r24
     ab4:	39 07       	cpc	r19, r25
     ab6:	20 f0       	brcs	.+8      	; 0xac0 <prvCopyDataFromQueue+0x28>
     ab8:	80 81       	ld	r24, Z
     aba:	91 81       	ldd	r25, Z+1	; 0x01
     abc:	97 83       	std	Z+7, r25	; 0x07
     abe:	86 83       	std	Z+6, r24	; 0x06
     ac0:	cb 01       	movw	r24, r22
     ac2:	66 81       	ldd	r22, Z+6	; 0x06
     ac4:	77 81       	ldd	r23, Z+7	; 0x07
     ac6:	0c 94 b2 1f 	jmp	0x3f64	; 0x3f64 <memcpy>
     aca:	08 95       	ret

00000acc <prvUnlockQueue>:
     acc:	1f 93       	push	r17
     ace:	cf 93       	push	r28
     ad0:	df 93       	push	r29
     ad2:	ec 01       	movw	r28, r24
     ad4:	0f b6       	in	r0, 0x3f	; 63
     ad6:	f8 94       	cli
     ad8:	0f 92       	push	r0
     ada:	1a a1       	ldd	r17, Y+34	; 0x22
     adc:	0b c0       	rjmp	.+22     	; 0xaf4 <prvUnlockQueue+0x28>
     ade:	8b 89       	ldd	r24, Y+19	; 0x13
     ae0:	88 23       	and	r24, r24
     ae2:	51 f0       	breq	.+20     	; 0xaf8 <prvUnlockQueue+0x2c>
     ae4:	ce 01       	movw	r24, r28
     ae6:	43 96       	adiw	r24, 0x13	; 19
     ae8:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <xTaskRemoveFromEventList>
     aec:	81 11       	cpse	r24, r1
     aee:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <vTaskMissedYield>
     af2:	11 50       	subi	r17, 0x01	; 1
     af4:	11 16       	cp	r1, r17
     af6:	9c f3       	brlt	.-26     	; 0xade <prvUnlockQueue+0x12>
     af8:	8f ef       	ldi	r24, 0xFF	; 255
     afa:	8a a3       	std	Y+34, r24	; 0x22
     afc:	0f 90       	pop	r0
     afe:	0f be       	out	0x3f, r0	; 63
     b00:	0f b6       	in	r0, 0x3f	; 63
     b02:	f8 94       	cli
     b04:	0f 92       	push	r0
     b06:	19 a1       	ldd	r17, Y+33	; 0x21
     b08:	0b c0       	rjmp	.+22     	; 0xb20 <prvUnlockQueue+0x54>
     b0a:	88 85       	ldd	r24, Y+8	; 0x08
     b0c:	88 23       	and	r24, r24
     b0e:	51 f0       	breq	.+20     	; 0xb24 <prvUnlockQueue+0x58>
     b10:	ce 01       	movw	r24, r28
     b12:	08 96       	adiw	r24, 0x08	; 8
     b14:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <xTaskRemoveFromEventList>
     b18:	81 11       	cpse	r24, r1
     b1a:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <vTaskMissedYield>
     b1e:	11 50       	subi	r17, 0x01	; 1
     b20:	11 16       	cp	r1, r17
     b22:	9c f3       	brlt	.-26     	; 0xb0a <prvUnlockQueue+0x3e>
     b24:	8f ef       	ldi	r24, 0xFF	; 255
     b26:	89 a3       	std	Y+33, r24	; 0x21
     b28:	0f 90       	pop	r0
     b2a:	0f be       	out	0x3f, r0	; 63
     b2c:	df 91       	pop	r29
     b2e:	cf 91       	pop	r28
     b30:	1f 91       	pop	r17
     b32:	08 95       	ret

00000b34 <xQueueGenericReset>:
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	ec 01       	movw	r28, r24
     b3a:	0f b6       	in	r0, 0x3f	; 63
     b3c:	f8 94       	cli
     b3e:	0f 92       	push	r0
     b40:	e8 81       	ld	r30, Y
     b42:	f9 81       	ldd	r31, Y+1	; 0x01
     b44:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b46:	28 a1       	ldd	r18, Y+32	; 0x20
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	82 9f       	mul	r24, r18
     b4e:	a0 01       	movw	r20, r0
     b50:	83 9f       	mul	r24, r19
     b52:	50 0d       	add	r21, r0
     b54:	92 9f       	mul	r25, r18
     b56:	50 0d       	add	r21, r0
     b58:	11 24       	eor	r1, r1
     b5a:	4e 0f       	add	r20, r30
     b5c:	5f 1f       	adc	r21, r31
     b5e:	5d 83       	std	Y+5, r21	; 0x05
     b60:	4c 83       	std	Y+4, r20	; 0x04
     b62:	1e 8e       	std	Y+30, r1	; 0x1e
     b64:	fb 83       	std	Y+3, r31	; 0x03
     b66:	ea 83       	std	Y+2, r30	; 0x02
     b68:	01 97       	sbiw	r24, 0x01	; 1
     b6a:	28 9f       	mul	r18, r24
     b6c:	a0 01       	movw	r20, r0
     b6e:	29 9f       	mul	r18, r25
     b70:	50 0d       	add	r21, r0
     b72:	38 9f       	mul	r19, r24
     b74:	50 0d       	add	r21, r0
     b76:	11 24       	eor	r1, r1
     b78:	cf 01       	movw	r24, r30
     b7a:	84 0f       	add	r24, r20
     b7c:	95 1f       	adc	r25, r21
     b7e:	9f 83       	std	Y+7, r25	; 0x07
     b80:	8e 83       	std	Y+6, r24	; 0x06
     b82:	8f ef       	ldi	r24, 0xFF	; 255
     b84:	89 a3       	std	Y+33, r24	; 0x21
     b86:	8a a3       	std	Y+34, r24	; 0x22
     b88:	61 11       	cpse	r22, r1
     b8a:	0a c0       	rjmp	.+20     	; 0xba0 <xQueueGenericReset+0x6c>
     b8c:	88 85       	ldd	r24, Y+8	; 0x08
     b8e:	88 23       	and	r24, r24
     b90:	69 f0       	breq	.+26     	; 0xbac <xQueueGenericReset+0x78>
     b92:	ce 01       	movw	r24, r28
     b94:	08 96       	adiw	r24, 0x08	; 8
     b96:	e3 d7       	rcall	.+4038   	; 0x1b5e <xTaskRemoveFromEventList>
     b98:	88 23       	and	r24, r24
     b9a:	41 f0       	breq	.+16     	; 0xbac <xQueueGenericReset+0x78>
     b9c:	2c de       	rcall	.-936    	; 0x7f6 <vPortYield>
     b9e:	06 c0       	rjmp	.+12     	; 0xbac <xQueueGenericReset+0x78>
     ba0:	ce 01       	movw	r24, r28
     ba2:	08 96       	adiw	r24, 0x08	; 8
     ba4:	5a dd       	rcall	.-1356   	; 0x65a <vListInitialise>
     ba6:	ce 01       	movw	r24, r28
     ba8:	43 96       	adiw	r24, 0x13	; 19
     baa:	57 dd       	rcall	.-1362   	; 0x65a <vListInitialise>
     bac:	0f 90       	pop	r0
     bae:	0f be       	out	0x3f, r0	; 63
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	df 91       	pop	r29
     bb4:	cf 91       	pop	r28
     bb6:	08 95       	ret

00000bb8 <prvInitialiseNewQueue>:
     bb8:	0f 93       	push	r16
     bba:	1f 93       	push	r17
     bbc:	f8 01       	movw	r30, r16
     bbe:	61 11       	cpse	r22, r1
     bc0:	03 c0       	rjmp	.+6      	; 0xbc8 <prvInitialiseNewQueue+0x10>
     bc2:	11 83       	std	Z+1, r17	; 0x01
     bc4:	00 83       	st	Z, r16
     bc6:	02 c0       	rjmp	.+4      	; 0xbcc <prvInitialiseNewQueue+0x14>
     bc8:	51 83       	std	Z+1, r21	; 0x01
     bca:	40 83       	st	Z, r20
     bcc:	87 8f       	std	Z+31, r24	; 0x1f
     bce:	60 a3       	std	Z+32, r22	; 0x20
     bd0:	61 e0       	ldi	r22, 0x01	; 1
     bd2:	cf 01       	movw	r24, r30
     bd4:	af df       	rcall	.-162    	; 0xb34 <xQueueGenericReset>
     bd6:	1f 91       	pop	r17
     bd8:	0f 91       	pop	r16
     bda:	08 95       	ret

00000bdc <xQueueGenericCreate>:
     bdc:	df 92       	push	r13
     bde:	ef 92       	push	r14
     be0:	ff 92       	push	r15
     be2:	0f 93       	push	r16
     be4:	1f 93       	push	r17
     be6:	cf 93       	push	r28
     be8:	df 93       	push	r29
     bea:	f8 2e       	mov	r15, r24
     bec:	e6 2e       	mov	r14, r22
     bee:	d4 2e       	mov	r13, r20
     bf0:	86 9f       	mul	r24, r22
     bf2:	c0 01       	movw	r24, r0
     bf4:	11 24       	eor	r1, r1
     bf6:	83 96       	adiw	r24, 0x23	; 35
     bf8:	4b dc       	rcall	.-1898   	; 0x490 <pvPortMalloc>
     bfa:	ec 01       	movw	r28, r24
     bfc:	00 97       	sbiw	r24, 0x00	; 0
     bfe:	41 f0       	breq	.+16     	; 0xc10 <xQueueGenericCreate+0x34>
     c00:	8c 01       	movw	r16, r24
     c02:	2d 2d       	mov	r18, r13
     c04:	ac 01       	movw	r20, r24
     c06:	4d 5d       	subi	r20, 0xDD	; 221
     c08:	5f 4f       	sbci	r21, 0xFF	; 255
     c0a:	6e 2d       	mov	r22, r14
     c0c:	8f 2d       	mov	r24, r15
     c0e:	d4 df       	rcall	.-88     	; 0xbb8 <prvInitialiseNewQueue>
     c10:	ce 01       	movw	r24, r28
     c12:	df 91       	pop	r29
     c14:	cf 91       	pop	r28
     c16:	1f 91       	pop	r17
     c18:	0f 91       	pop	r16
     c1a:	ff 90       	pop	r15
     c1c:	ef 90       	pop	r14
     c1e:	df 90       	pop	r13
     c20:	08 95       	ret

00000c22 <xQueueCreateCountingSemaphore>:
     c22:	cf 93       	push	r28
     c24:	c6 2f       	mov	r28, r22
     c26:	42 e0       	ldi	r20, 0x02	; 2
     c28:	60 e0       	ldi	r22, 0x00	; 0
     c2a:	d8 df       	rcall	.-80     	; 0xbdc <xQueueGenericCreate>
     c2c:	00 97       	sbiw	r24, 0x00	; 0
     c2e:	11 f0       	breq	.+4      	; 0xc34 <xQueueCreateCountingSemaphore+0x12>
     c30:	fc 01       	movw	r30, r24
     c32:	c6 8f       	std	Z+30, r28	; 0x1e
     c34:	cf 91       	pop	r28
     c36:	08 95       	ret

00000c38 <xQueueGenericSend>:
     c38:	cf 92       	push	r12
     c3a:	df 92       	push	r13
     c3c:	ef 92       	push	r14
     c3e:	ff 92       	push	r15
     c40:	0f 93       	push	r16
     c42:	1f 93       	push	r17
     c44:	cf 93       	push	r28
     c46:	df 93       	push	r29
     c48:	cd b7       	in	r28, 0x3d	; 61
     c4a:	de b7       	in	r29, 0x3e	; 62
     c4c:	29 97       	sbiw	r28, 0x09	; 9
     c4e:	0f b6       	in	r0, 0x3f	; 63
     c50:	f8 94       	cli
     c52:	de bf       	out	0x3e, r29	; 62
     c54:	0f be       	out	0x3f, r0	; 63
     c56:	cd bf       	out	0x3d, r28	; 61
     c58:	7c 01       	movw	r14, r24
     c5a:	6b 01       	movw	r12, r22
     c5c:	2e 83       	std	Y+6, r18	; 0x06
     c5e:	3f 83       	std	Y+7, r19	; 0x07
     c60:	48 87       	std	Y+8, r20	; 0x08
     c62:	59 87       	std	Y+9, r21	; 0x09
     c64:	10 e0       	ldi	r17, 0x00	; 0
     c66:	0f b6       	in	r0, 0x3f	; 63
     c68:	f8 94       	cli
     c6a:	0f 92       	push	r0
     c6c:	f7 01       	movw	r30, r14
     c6e:	96 8d       	ldd	r25, Z+30	; 0x1e
     c70:	87 8d       	ldd	r24, Z+31	; 0x1f
     c72:	98 17       	cp	r25, r24
     c74:	10 f0       	brcs	.+4      	; 0xc7a <xQueueGenericSend+0x42>
     c76:	02 30       	cpi	r16, 0x02	; 2
     c78:	a9 f4       	brne	.+42     	; 0xca4 <xQueueGenericSend+0x6c>
     c7a:	40 2f       	mov	r20, r16
     c7c:	b6 01       	movw	r22, r12
     c7e:	c7 01       	movw	r24, r14
     c80:	ac de       	rcall	.-680    	; 0x9da <prvCopyDataToQueue>
     c82:	f7 01       	movw	r30, r14
     c84:	93 89       	ldd	r25, Z+19	; 0x13
     c86:	99 23       	and	r25, r25
     c88:	39 f0       	breq	.+14     	; 0xc98 <xQueueGenericSend+0x60>
     c8a:	c7 01       	movw	r24, r14
     c8c:	43 96       	adiw	r24, 0x13	; 19
     c8e:	67 d7       	rcall	.+3790   	; 0x1b5e <xTaskRemoveFromEventList>
     c90:	88 23       	and	r24, r24
     c92:	21 f0       	breq	.+8      	; 0xc9c <xQueueGenericSend+0x64>
     c94:	b0 dd       	rcall	.-1184   	; 0x7f6 <vPortYield>
     c96:	02 c0       	rjmp	.+4      	; 0xc9c <xQueueGenericSend+0x64>
     c98:	81 11       	cpse	r24, r1
     c9a:	ad dd       	rcall	.-1190   	; 0x7f6 <vPortYield>
     c9c:	0f 90       	pop	r0
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	46 c0       	rjmp	.+140    	; 0xd30 <xQueueGenericSend+0xf8>
     ca4:	8e 81       	ldd	r24, Y+6	; 0x06
     ca6:	9f 81       	ldd	r25, Y+7	; 0x07
     ca8:	a8 85       	ldd	r26, Y+8	; 0x08
     caa:	b9 85       	ldd	r27, Y+9	; 0x09
     cac:	89 2b       	or	r24, r25
     cae:	8a 2b       	or	r24, r26
     cb0:	8b 2b       	or	r24, r27
     cb2:	21 f4       	brne	.+8      	; 0xcbc <xQueueGenericSend+0x84>
     cb4:	0f 90       	pop	r0
     cb6:	0f be       	out	0x3f, r0	; 63
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	3a c0       	rjmp	.+116    	; 0xd30 <xQueueGenericSend+0xf8>
     cbc:	11 11       	cpse	r17, r1
     cbe:	04 c0       	rjmp	.+8      	; 0xcc8 <xQueueGenericSend+0x90>
     cc0:	ce 01       	movw	r24, r28
     cc2:	01 96       	adiw	r24, 0x01	; 1
     cc4:	fb d7       	rcall	.+4086   	; 0x1cbc <vTaskInternalSetTimeOutState>
     cc6:	11 e0       	ldi	r17, 0x01	; 1
     cc8:	0f 90       	pop	r0
     cca:	0f be       	out	0x3f, r0	; 63
     ccc:	54 d4       	rcall	.+2216   	; 0x1576 <vTaskSuspendAll>
     cce:	0f b6       	in	r0, 0x3f	; 63
     cd0:	f8 94       	cli
     cd2:	0f 92       	push	r0
     cd4:	f7 01       	movw	r30, r14
     cd6:	81 a1       	ldd	r24, Z+33	; 0x21
     cd8:	8f 3f       	cpi	r24, 0xFF	; 255
     cda:	09 f4       	brne	.+2      	; 0xcde <xQueueGenericSend+0xa6>
     cdc:	11 a2       	std	Z+33, r1	; 0x21
     cde:	f7 01       	movw	r30, r14
     ce0:	82 a1       	ldd	r24, Z+34	; 0x22
     ce2:	8f 3f       	cpi	r24, 0xFF	; 255
     ce4:	09 f4       	brne	.+2      	; 0xce8 <xQueueGenericSend+0xb0>
     ce6:	12 a2       	std	Z+34, r1	; 0x22
     ce8:	0f 90       	pop	r0
     cea:	0f be       	out	0x3f, r0	; 63
     cec:	be 01       	movw	r22, r28
     cee:	6a 5f       	subi	r22, 0xFA	; 250
     cf0:	7f 4f       	sbci	r23, 0xFF	; 255
     cf2:	ce 01       	movw	r24, r28
     cf4:	01 96       	adiw	r24, 0x01	; 1
     cf6:	f3 d7       	rcall	.+4070   	; 0x1cde <xTaskCheckForTimeOut>
     cf8:	81 11       	cpse	r24, r1
     cfa:	16 c0       	rjmp	.+44     	; 0xd28 <xQueueGenericSend+0xf0>
     cfc:	c7 01       	movw	r24, r14
     cfe:	5f de       	rcall	.-834    	; 0x9be <prvIsQueueFull>
     d00:	88 23       	and	r24, r24
     d02:	71 f0       	breq	.+28     	; 0xd20 <xQueueGenericSend+0xe8>
     d04:	4e 81       	ldd	r20, Y+6	; 0x06
     d06:	5f 81       	ldd	r21, Y+7	; 0x07
     d08:	68 85       	ldd	r22, Y+8	; 0x08
     d0a:	79 85       	ldd	r23, Y+9	; 0x09
     d0c:	c7 01       	movw	r24, r14
     d0e:	08 96       	adiw	r24, 0x08	; 8
     d10:	cd d6       	rcall	.+3482   	; 0x1aac <vTaskPlaceOnEventList>
     d12:	c7 01       	movw	r24, r14
     d14:	db de       	rcall	.-586    	; 0xacc <prvUnlockQueue>
     d16:	6f d5       	rcall	.+2782   	; 0x17f6 <xTaskResumeAll>
     d18:	81 11       	cpse	r24, r1
     d1a:	a5 cf       	rjmp	.-182    	; 0xc66 <xQueueGenericSend+0x2e>
     d1c:	6c dd       	rcall	.-1320   	; 0x7f6 <vPortYield>
     d1e:	a3 cf       	rjmp	.-186    	; 0xc66 <xQueueGenericSend+0x2e>
     d20:	c7 01       	movw	r24, r14
     d22:	d4 de       	rcall	.-600    	; 0xacc <prvUnlockQueue>
     d24:	68 d5       	rcall	.+2768   	; 0x17f6 <xTaskResumeAll>
     d26:	9f cf       	rjmp	.-194    	; 0xc66 <xQueueGenericSend+0x2e>
     d28:	c7 01       	movw	r24, r14
     d2a:	d0 de       	rcall	.-608    	; 0xacc <prvUnlockQueue>
     d2c:	64 d5       	rcall	.+2760   	; 0x17f6 <xTaskResumeAll>
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	29 96       	adiw	r28, 0x09	; 9
     d32:	0f b6       	in	r0, 0x3f	; 63
     d34:	f8 94       	cli
     d36:	de bf       	out	0x3e, r29	; 62
     d38:	0f be       	out	0x3f, r0	; 63
     d3a:	cd bf       	out	0x3d, r28	; 61
     d3c:	df 91       	pop	r29
     d3e:	cf 91       	pop	r28
     d40:	1f 91       	pop	r17
     d42:	0f 91       	pop	r16
     d44:	ff 90       	pop	r15
     d46:	ef 90       	pop	r14
     d48:	df 90       	pop	r13
     d4a:	cf 90       	pop	r12
     d4c:	08 95       	ret

00000d4e <xQueueGenericSendFromISR>:
     d4e:	ef 92       	push	r14
     d50:	ff 92       	push	r15
     d52:	0f 93       	push	r16
     d54:	1f 93       	push	r17
     d56:	cf 93       	push	r28
     d58:	df 93       	push	r29
     d5a:	8a 01       	movw	r16, r20
     d5c:	fc 01       	movw	r30, r24
     d5e:	56 8d       	ldd	r21, Z+30	; 0x1e
     d60:	37 8d       	ldd	r19, Z+31	; 0x1f
     d62:	53 17       	cp	r21, r19
     d64:	10 f0       	brcs	.+4      	; 0xd6a <xQueueGenericSendFromISR+0x1c>
     d66:	22 30       	cpi	r18, 0x02	; 2
     d68:	f1 f4       	brne	.+60     	; 0xda6 <xQueueGenericSendFromISR+0x58>
     d6a:	42 2f       	mov	r20, r18
     d6c:	78 01       	movw	r14, r16
     d6e:	ec 01       	movw	r28, r24
     d70:	1a a1       	ldd	r17, Y+34	; 0x22
     d72:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d74:	ce 01       	movw	r24, r28
     d76:	31 de       	rcall	.-926    	; 0x9da <prvCopyDataToQueue>
     d78:	1f 3f       	cpi	r17, 0xFF	; 255
     d7a:	79 f4       	brne	.+30     	; 0xd9a <xQueueGenericSendFromISR+0x4c>
     d7c:	8b 89       	ldd	r24, Y+19	; 0x13
     d7e:	88 23       	and	r24, r24
     d80:	a1 f0       	breq	.+40     	; 0xdaa <xQueueGenericSendFromISR+0x5c>
     d82:	ce 01       	movw	r24, r28
     d84:	43 96       	adiw	r24, 0x13	; 19
     d86:	eb d6       	rcall	.+3542   	; 0x1b5e <xTaskRemoveFromEventList>
     d88:	88 23       	and	r24, r24
     d8a:	89 f0       	breq	.+34     	; 0xdae <xQueueGenericSendFromISR+0x60>
     d8c:	e1 14       	cp	r14, r1
     d8e:	f1 04       	cpc	r15, r1
     d90:	81 f0       	breq	.+32     	; 0xdb2 <xQueueGenericSendFromISR+0x64>
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	f7 01       	movw	r30, r14
     d96:	80 83       	st	Z, r24
     d98:	0d c0       	rjmp	.+26     	; 0xdb4 <xQueueGenericSendFromISR+0x66>
     d9a:	ff 24       	eor	r15, r15
     d9c:	f3 94       	inc	r15
     d9e:	f1 0e       	add	r15, r17
     da0:	fa a2       	std	Y+34, r15	; 0x22
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	07 c0       	rjmp	.+14     	; 0xdb4 <xQueueGenericSendFromISR+0x66>
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	05 c0       	rjmp	.+10     	; 0xdb4 <xQueueGenericSendFromISR+0x66>
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	03 c0       	rjmp	.+6      	; 0xdb4 <xQueueGenericSendFromISR+0x66>
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	01 c0       	rjmp	.+2      	; 0xdb4 <xQueueGenericSendFromISR+0x66>
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	df 91       	pop	r29
     db6:	cf 91       	pop	r28
     db8:	1f 91       	pop	r17
     dba:	0f 91       	pop	r16
     dbc:	ff 90       	pop	r15
     dbe:	ef 90       	pop	r14
     dc0:	08 95       	ret

00000dc2 <xQueueReceive>:
     dc2:	cf 92       	push	r12
     dc4:	df 92       	push	r13
     dc6:	ef 92       	push	r14
     dc8:	ff 92       	push	r15
     dca:	0f 93       	push	r16
     dcc:	1f 93       	push	r17
     dce:	cf 93       	push	r28
     dd0:	df 93       	push	r29
     dd2:	cd b7       	in	r28, 0x3d	; 61
     dd4:	de b7       	in	r29, 0x3e	; 62
     dd6:	29 97       	sbiw	r28, 0x09	; 9
     dd8:	0f b6       	in	r0, 0x3f	; 63
     dda:	f8 94       	cli
     ddc:	de bf       	out	0x3e, r29	; 62
     dde:	0f be       	out	0x3f, r0	; 63
     de0:	cd bf       	out	0x3d, r28	; 61
     de2:	8c 01       	movw	r16, r24
     de4:	6b 01       	movw	r12, r22
     de6:	2e 83       	std	Y+6, r18	; 0x06
     de8:	3f 83       	std	Y+7, r19	; 0x07
     dea:	48 87       	std	Y+8, r20	; 0x08
     dec:	59 87       	std	Y+9, r21	; 0x09
     dee:	e1 2c       	mov	r14, r1
     df0:	0f b6       	in	r0, 0x3f	; 63
     df2:	f8 94       	cli
     df4:	0f 92       	push	r0
     df6:	f8 01       	movw	r30, r16
     df8:	f6 8c       	ldd	r15, Z+30	; 0x1e
     dfa:	ff 20       	and	r15, r15
     dfc:	91 f0       	breq	.+36     	; 0xe22 <xQueueReceive+0x60>
     dfe:	b6 01       	movw	r22, r12
     e00:	c8 01       	movw	r24, r16
     e02:	4a de       	rcall	.-876    	; 0xa98 <prvCopyDataFromQueue>
     e04:	fa 94       	dec	r15
     e06:	f8 01       	movw	r30, r16
     e08:	f6 8e       	std	Z+30, r15	; 0x1e
     e0a:	80 85       	ldd	r24, Z+8	; 0x08
     e0c:	88 23       	and	r24, r24
     e0e:	29 f0       	breq	.+10     	; 0xe1a <xQueueReceive+0x58>
     e10:	c8 01       	movw	r24, r16
     e12:	08 96       	adiw	r24, 0x08	; 8
     e14:	a4 d6       	rcall	.+3400   	; 0x1b5e <xTaskRemoveFromEventList>
     e16:	81 11       	cpse	r24, r1
     e18:	ee dc       	rcall	.-1572   	; 0x7f6 <vPortYield>
     e1a:	0f 90       	pop	r0
     e1c:	0f be       	out	0x3f, r0	; 63
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	4c c0       	rjmp	.+152    	; 0xeba <xQueueReceive+0xf8>
     e22:	8e 81       	ldd	r24, Y+6	; 0x06
     e24:	9f 81       	ldd	r25, Y+7	; 0x07
     e26:	a8 85       	ldd	r26, Y+8	; 0x08
     e28:	b9 85       	ldd	r27, Y+9	; 0x09
     e2a:	89 2b       	or	r24, r25
     e2c:	8a 2b       	or	r24, r26
     e2e:	8b 2b       	or	r24, r27
     e30:	21 f4       	brne	.+8      	; 0xe3a <xQueueReceive+0x78>
     e32:	0f 90       	pop	r0
     e34:	0f be       	out	0x3f, r0	; 63
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	40 c0       	rjmp	.+128    	; 0xeba <xQueueReceive+0xf8>
     e3a:	e1 10       	cpse	r14, r1
     e3c:	05 c0       	rjmp	.+10     	; 0xe48 <xQueueReceive+0x86>
     e3e:	ce 01       	movw	r24, r28
     e40:	01 96       	adiw	r24, 0x01	; 1
     e42:	3c d7       	rcall	.+3704   	; 0x1cbc <vTaskInternalSetTimeOutState>
     e44:	ee 24       	eor	r14, r14
     e46:	e3 94       	inc	r14
     e48:	0f 90       	pop	r0
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	94 d3       	rcall	.+1832   	; 0x1576 <vTaskSuspendAll>
     e4e:	0f b6       	in	r0, 0x3f	; 63
     e50:	f8 94       	cli
     e52:	0f 92       	push	r0
     e54:	f8 01       	movw	r30, r16
     e56:	81 a1       	ldd	r24, Z+33	; 0x21
     e58:	8f 3f       	cpi	r24, 0xFF	; 255
     e5a:	09 f4       	brne	.+2      	; 0xe5e <xQueueReceive+0x9c>
     e5c:	11 a2       	std	Z+33, r1	; 0x21
     e5e:	f8 01       	movw	r30, r16
     e60:	82 a1       	ldd	r24, Z+34	; 0x22
     e62:	8f 3f       	cpi	r24, 0xFF	; 255
     e64:	09 f4       	brne	.+2      	; 0xe68 <xQueueReceive+0xa6>
     e66:	12 a2       	std	Z+34, r1	; 0x22
     e68:	0f 90       	pop	r0
     e6a:	0f be       	out	0x3f, r0	; 63
     e6c:	be 01       	movw	r22, r28
     e6e:	6a 5f       	subi	r22, 0xFA	; 250
     e70:	7f 4f       	sbci	r23, 0xFF	; 255
     e72:	ce 01       	movw	r24, r28
     e74:	01 96       	adiw	r24, 0x01	; 1
     e76:	33 d7       	rcall	.+3686   	; 0x1cde <xTaskCheckForTimeOut>
     e78:	81 11       	cpse	r24, r1
     e7a:	16 c0       	rjmp	.+44     	; 0xea8 <xQueueReceive+0xe6>
     e7c:	c8 01       	movw	r24, r16
     e7e:	92 dd       	rcall	.-1244   	; 0x9a4 <prvIsQueueEmpty>
     e80:	88 23       	and	r24, r24
     e82:	71 f0       	breq	.+28     	; 0xea0 <xQueueReceive+0xde>
     e84:	4e 81       	ldd	r20, Y+6	; 0x06
     e86:	5f 81       	ldd	r21, Y+7	; 0x07
     e88:	68 85       	ldd	r22, Y+8	; 0x08
     e8a:	79 85       	ldd	r23, Y+9	; 0x09
     e8c:	c8 01       	movw	r24, r16
     e8e:	43 96       	adiw	r24, 0x13	; 19
     e90:	0d d6       	rcall	.+3098   	; 0x1aac <vTaskPlaceOnEventList>
     e92:	c8 01       	movw	r24, r16
     e94:	1b de       	rcall	.-970    	; 0xacc <prvUnlockQueue>
     e96:	af d4       	rcall	.+2398   	; 0x17f6 <xTaskResumeAll>
     e98:	81 11       	cpse	r24, r1
     e9a:	aa cf       	rjmp	.-172    	; 0xdf0 <xQueueReceive+0x2e>
     e9c:	ac dc       	rcall	.-1704   	; 0x7f6 <vPortYield>
     e9e:	a8 cf       	rjmp	.-176    	; 0xdf0 <xQueueReceive+0x2e>
     ea0:	c8 01       	movw	r24, r16
     ea2:	14 de       	rcall	.-984    	; 0xacc <prvUnlockQueue>
     ea4:	a8 d4       	rcall	.+2384   	; 0x17f6 <xTaskResumeAll>
     ea6:	a4 cf       	rjmp	.-184    	; 0xdf0 <xQueueReceive+0x2e>
     ea8:	c8 01       	movw	r24, r16
     eaa:	10 de       	rcall	.-992    	; 0xacc <prvUnlockQueue>
     eac:	a4 d4       	rcall	.+2376   	; 0x17f6 <xTaskResumeAll>
     eae:	c8 01       	movw	r24, r16
     eb0:	79 dd       	rcall	.-1294   	; 0x9a4 <prvIsQueueEmpty>
     eb2:	88 23       	and	r24, r24
     eb4:	09 f4       	brne	.+2      	; 0xeb8 <xQueueReceive+0xf6>
     eb6:	9c cf       	rjmp	.-200    	; 0xdf0 <xQueueReceive+0x2e>
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	29 96       	adiw	r28, 0x09	; 9
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	f8 94       	cli
     ec0:	de bf       	out	0x3e, r29	; 62
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	cd bf       	out	0x3d, r28	; 61
     ec6:	df 91       	pop	r29
     ec8:	cf 91       	pop	r28
     eca:	1f 91       	pop	r17
     ecc:	0f 91       	pop	r16
     ece:	ff 90       	pop	r15
     ed0:	ef 90       	pop	r14
     ed2:	df 90       	pop	r13
     ed4:	cf 90       	pop	r12
     ed6:	08 95       	ret

00000ed8 <xQueueSemaphoreTake>:
     ed8:	ef 92       	push	r14
     eda:	ff 92       	push	r15
     edc:	0f 93       	push	r16
     ede:	1f 93       	push	r17
     ee0:	cf 93       	push	r28
     ee2:	df 93       	push	r29
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62
     ee8:	29 97       	sbiw	r28, 0x09	; 9
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	f8 94       	cli
     eee:	de bf       	out	0x3e, r29	; 62
     ef0:	0f be       	out	0x3f, r0	; 63
     ef2:	cd bf       	out	0x3d, r28	; 61
     ef4:	8c 01       	movw	r16, r24
     ef6:	4e 83       	std	Y+6, r20	; 0x06
     ef8:	5f 83       	std	Y+7, r21	; 0x07
     efa:	68 87       	std	Y+8, r22	; 0x08
     efc:	79 87       	std	Y+9, r23	; 0x09
     efe:	e1 2c       	mov	r14, r1
     f00:	f1 2c       	mov	r15, r1
     f02:	0f b6       	in	r0, 0x3f	; 63
     f04:	f8 94       	cli
     f06:	0f 92       	push	r0
     f08:	f8 01       	movw	r30, r16
     f0a:	86 8d       	ldd	r24, Z+30	; 0x1e
     f0c:	88 23       	and	r24, r24
     f0e:	c1 f0       	breq	.+48     	; 0xf40 <xQueueSemaphoreTake+0x68>
     f10:	81 50       	subi	r24, 0x01	; 1
     f12:	86 8f       	std	Z+30, r24	; 0x1e
     f14:	80 81       	ld	r24, Z
     f16:	91 81       	ldd	r25, Z+1	; 0x01
     f18:	89 2b       	or	r24, r25
     f1a:	29 f4       	brne	.+10     	; 0xf26 <xQueueSemaphoreTake+0x4e>
     f1c:	0e 94 30 10 	call	0x2060	; 0x2060 <pvTaskIncrementMutexHeldCount>
     f20:	f8 01       	movw	r30, r16
     f22:	95 83       	std	Z+5, r25	; 0x05
     f24:	84 83       	std	Z+4, r24	; 0x04
     f26:	f8 01       	movw	r30, r16
     f28:	80 85       	ldd	r24, Z+8	; 0x08
     f2a:	88 23       	and	r24, r24
     f2c:	29 f0       	breq	.+10     	; 0xf38 <xQueueSemaphoreTake+0x60>
     f2e:	c8 01       	movw	r24, r16
     f30:	08 96       	adiw	r24, 0x08	; 8
     f32:	15 d6       	rcall	.+3114   	; 0x1b5e <xTaskRemoveFromEventList>
     f34:	81 11       	cpse	r24, r1
     f36:	5f dc       	rcall	.-1858   	; 0x7f6 <vPortYield>
     f38:	0f 90       	pop	r0
     f3a:	0f be       	out	0x3f, r0	; 63
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	6a c0       	rjmp	.+212    	; 0x1014 <__EEPROM_REGION_LENGTH__+0x14>
     f40:	8e 81       	ldd	r24, Y+6	; 0x06
     f42:	9f 81       	ldd	r25, Y+7	; 0x07
     f44:	a8 85       	ldd	r26, Y+8	; 0x08
     f46:	b9 85       	ldd	r27, Y+9	; 0x09
     f48:	89 2b       	or	r24, r25
     f4a:	8a 2b       	or	r24, r26
     f4c:	8b 2b       	or	r24, r27
     f4e:	21 f4       	brne	.+8      	; 0xf58 <xQueueSemaphoreTake+0x80>
     f50:	0f 90       	pop	r0
     f52:	0f be       	out	0x3f, r0	; 63
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	5e c0       	rjmp	.+188    	; 0x1014 <__EEPROM_REGION_LENGTH__+0x14>
     f58:	f1 10       	cpse	r15, r1
     f5a:	05 c0       	rjmp	.+10     	; 0xf66 <xQueueSemaphoreTake+0x8e>
     f5c:	ce 01       	movw	r24, r28
     f5e:	01 96       	adiw	r24, 0x01	; 1
     f60:	ad d6       	rcall	.+3418   	; 0x1cbc <vTaskInternalSetTimeOutState>
     f62:	ff 24       	eor	r15, r15
     f64:	f3 94       	inc	r15
     f66:	0f 90       	pop	r0
     f68:	0f be       	out	0x3f, r0	; 63
     f6a:	05 d3       	rcall	.+1546   	; 0x1576 <vTaskSuspendAll>
     f6c:	0f b6       	in	r0, 0x3f	; 63
     f6e:	f8 94       	cli
     f70:	0f 92       	push	r0
     f72:	f8 01       	movw	r30, r16
     f74:	81 a1       	ldd	r24, Z+33	; 0x21
     f76:	8f 3f       	cpi	r24, 0xFF	; 255
     f78:	09 f4       	brne	.+2      	; 0xf7c <xQueueSemaphoreTake+0xa4>
     f7a:	11 a2       	std	Z+33, r1	; 0x21
     f7c:	f8 01       	movw	r30, r16
     f7e:	82 a1       	ldd	r24, Z+34	; 0x22
     f80:	8f 3f       	cpi	r24, 0xFF	; 255
     f82:	09 f4       	brne	.+2      	; 0xf86 <xQueueSemaphoreTake+0xae>
     f84:	12 a2       	std	Z+34, r1	; 0x22
     f86:	0f 90       	pop	r0
     f88:	0f be       	out	0x3f, r0	; 63
     f8a:	be 01       	movw	r22, r28
     f8c:	6a 5f       	subi	r22, 0xFA	; 250
     f8e:	7f 4f       	sbci	r23, 0xFF	; 255
     f90:	ce 01       	movw	r24, r28
     f92:	01 96       	adiw	r24, 0x01	; 1
     f94:	a4 d6       	rcall	.+3400   	; 0x1cde <xTaskCheckForTimeOut>
     f96:	81 11       	cpse	r24, r1
     f98:	24 c0       	rjmp	.+72     	; 0xfe2 <xQueueSemaphoreTake+0x10a>
     f9a:	c8 01       	movw	r24, r16
     f9c:	03 dd       	rcall	.-1530   	; 0x9a4 <prvIsQueueEmpty>
     f9e:	88 23       	and	r24, r24
     fa0:	e1 f0       	breq	.+56     	; 0xfda <xQueueSemaphoreTake+0x102>
     fa2:	f8 01       	movw	r30, r16
     fa4:	80 81       	ld	r24, Z
     fa6:	91 81       	ldd	r25, Z+1	; 0x01
     fa8:	89 2b       	or	r24, r25
     faa:	49 f4       	brne	.+18     	; 0xfbe <xQueueSemaphoreTake+0xe6>
     fac:	0f b6       	in	r0, 0x3f	; 63
     fae:	f8 94       	cli
     fb0:	0f 92       	push	r0
     fb2:	84 81       	ldd	r24, Z+4	; 0x04
     fb4:	95 81       	ldd	r25, Z+5	; 0x05
     fb6:	0b d7       	rcall	.+3606   	; 0x1dce <xTaskPriorityInherit>
     fb8:	e8 2e       	mov	r14, r24
     fba:	0f 90       	pop	r0
     fbc:	0f be       	out	0x3f, r0	; 63
     fbe:	4e 81       	ldd	r20, Y+6	; 0x06
     fc0:	5f 81       	ldd	r21, Y+7	; 0x07
     fc2:	68 85       	ldd	r22, Y+8	; 0x08
     fc4:	79 85       	ldd	r23, Y+9	; 0x09
     fc6:	c8 01       	movw	r24, r16
     fc8:	43 96       	adiw	r24, 0x13	; 19
     fca:	70 d5       	rcall	.+2784   	; 0x1aac <vTaskPlaceOnEventList>
     fcc:	c8 01       	movw	r24, r16
     fce:	7e dd       	rcall	.-1284   	; 0xacc <prvUnlockQueue>
     fd0:	12 d4       	rcall	.+2084   	; 0x17f6 <xTaskResumeAll>
     fd2:	81 11       	cpse	r24, r1
     fd4:	96 cf       	rjmp	.-212    	; 0xf02 <xQueueSemaphoreTake+0x2a>
     fd6:	0f dc       	rcall	.-2018   	; 0x7f6 <vPortYield>
     fd8:	94 cf       	rjmp	.-216    	; 0xf02 <xQueueSemaphoreTake+0x2a>
     fda:	c8 01       	movw	r24, r16
     fdc:	77 dd       	rcall	.-1298   	; 0xacc <prvUnlockQueue>
     fde:	0b d4       	rcall	.+2070   	; 0x17f6 <xTaskResumeAll>
     fe0:	90 cf       	rjmp	.-224    	; 0xf02 <xQueueSemaphoreTake+0x2a>
     fe2:	c8 01       	movw	r24, r16
     fe4:	73 dd       	rcall	.-1306   	; 0xacc <prvUnlockQueue>
     fe6:	07 d4       	rcall	.+2062   	; 0x17f6 <xTaskResumeAll>
     fe8:	c8 01       	movw	r24, r16
     fea:	dc dc       	rcall	.-1608   	; 0x9a4 <prvIsQueueEmpty>
     fec:	88 23       	and	r24, r24
     fee:	09 f4       	brne	.+2      	; 0xff2 <xQueueSemaphoreTake+0x11a>
     ff0:	88 cf       	rjmp	.-240    	; 0xf02 <xQueueSemaphoreTake+0x2a>
     ff2:	ee 20       	and	r14, r14
     ff4:	71 f0       	breq	.+28     	; 0x1012 <__EEPROM_REGION_LENGTH__+0x12>
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	f8 94       	cli
     ffa:	0f 92       	push	r0
     ffc:	c8 01       	movw	r24, r16
     ffe:	c2 dc       	rcall	.-1660   	; 0x984 <prvGetDisinheritPriorityAfterTimeout>
    1000:	68 2f       	mov	r22, r24
    1002:	f8 01       	movw	r30, r16
    1004:	84 81       	ldd	r24, Z+4	; 0x04
    1006:	95 81       	ldd	r25, Z+5	; 0x05
    1008:	c4 d7       	rcall	.+3976   	; 0x1f92 <vTaskPriorityDisinheritAfterTimeout>
    100a:	0f 90       	pop	r0
    100c:	0f be       	out	0x3f, r0	; 63
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	01 c0       	rjmp	.+2      	; 0x1014 <__EEPROM_REGION_LENGTH__+0x14>
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	29 96       	adiw	r28, 0x09	; 9
    1016:	0f b6       	in	r0, 0x3f	; 63
    1018:	f8 94       	cli
    101a:	de bf       	out	0x3e, r29	; 62
    101c:	0f be       	out	0x3f, r0	; 63
    101e:	cd bf       	out	0x3d, r28	; 61
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	1f 91       	pop	r17
    1026:	0f 91       	pop	r16
    1028:	ff 90       	pop	r15
    102a:	ef 90       	pop	r14
    102c:	08 95       	ret

0000102e <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1034:	0f b6       	in	r0, 0x3f	; 63
    1036:	f8 94       	cli
    1038:	0f 92       	push	r0
    103a:	89 a1       	ldd	r24, Y+33	; 0x21
    103c:	8f 3f       	cpi	r24, 0xFF	; 255
    103e:	09 f4       	brne	.+2      	; 0x1042 <vQueueWaitForMessageRestricted+0x14>
    1040:	19 a2       	std	Y+33, r1	; 0x21
    1042:	8a a1       	ldd	r24, Y+34	; 0x22
    1044:	8f 3f       	cpi	r24, 0xFF	; 255
    1046:	09 f4       	brne	.+2      	; 0x104a <vQueueWaitForMessageRestricted+0x1c>
    1048:	1a a2       	std	Y+34, r1	; 0x22
    104a:	0f 90       	pop	r0
    104c:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    104e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1050:	81 11       	cpse	r24, r1
    1052:	03 c0       	rjmp	.+6      	; 0x105a <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1054:	ce 01       	movw	r24, r28
    1056:	43 96       	adiw	r24, 0x13	; 19
    1058:	40 d5       	rcall	.+2688   	; 0x1ada <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    105a:	ce 01       	movw	r24, r28
    105c:	37 dd       	rcall	.-1426   	; 0xacc <prvUnlockQueue>
    }
    105e:	df 91       	pop	r29
    1060:	cf 91       	pop	r28
    1062:	08 95       	ret

00001064 <prvResetNextTaskUnblockTime>:
    1064:	e0 91 f9 0c 	lds	r30, 0x0CF9	; 0x800cf9 <pxDelayedTaskList>
    1068:	f0 91 fa 0c 	lds	r31, 0x0CFA	; 0x800cfa <pxDelayedTaskList+0x1>
    106c:	80 81       	ld	r24, Z
    106e:	81 11       	cpse	r24, r1
    1070:	0c c0       	rjmp	.+24     	; 0x108a <prvResetNextTaskUnblockTime+0x26>
    1072:	8f ef       	ldi	r24, 0xFF	; 255
    1074:	9f ef       	ldi	r25, 0xFF	; 255
    1076:	dc 01       	movw	r26, r24
    1078:	80 93 c3 0c 	sts	0x0CC3, r24	; 0x800cc3 <xNextTaskUnblockTime>
    107c:	90 93 c4 0c 	sts	0x0CC4, r25	; 0x800cc4 <xNextTaskUnblockTime+0x1>
    1080:	a0 93 c5 0c 	sts	0x0CC5, r26	; 0x800cc5 <xNextTaskUnblockTime+0x2>
    1084:	b0 93 c6 0c 	sts	0x0CC6, r27	; 0x800cc6 <xNextTaskUnblockTime+0x3>
    1088:	08 95       	ret
    108a:	e0 91 f9 0c 	lds	r30, 0x0CF9	; 0x800cf9 <pxDelayedTaskList>
    108e:	f0 91 fa 0c 	lds	r31, 0x0CFA	; 0x800cfa <pxDelayedTaskList+0x1>
    1092:	07 80       	ldd	r0, Z+7	; 0x07
    1094:	f0 85       	ldd	r31, Z+8	; 0x08
    1096:	e0 2d       	mov	r30, r0
    1098:	80 81       	ld	r24, Z
    109a:	91 81       	ldd	r25, Z+1	; 0x01
    109c:	a2 81       	ldd	r26, Z+2	; 0x02
    109e:	b3 81       	ldd	r27, Z+3	; 0x03
    10a0:	80 93 c3 0c 	sts	0x0CC3, r24	; 0x800cc3 <xNextTaskUnblockTime>
    10a4:	90 93 c4 0c 	sts	0x0CC4, r25	; 0x800cc4 <xNextTaskUnblockTime+0x1>
    10a8:	a0 93 c5 0c 	sts	0x0CC5, r26	; 0x800cc5 <xNextTaskUnblockTime+0x2>
    10ac:	b0 93 c6 0c 	sts	0x0CC6, r27	; 0x800cc6 <xNextTaskUnblockTime+0x3>
    10b0:	08 95       	ret

000010b2 <prvDeleteTCB>:
    10b2:	cf 93       	push	r28
    10b4:	df 93       	push	r29
    10b6:	ec 01       	movw	r28, r24
    10b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10bc:	92 da       	rcall	.-2780   	; 0x5e2 <vPortFree>
    10be:	ce 01       	movw	r24, r28
    10c0:	90 da       	rcall	.-2784   	; 0x5e2 <vPortFree>
    10c2:	df 91       	pop	r29
    10c4:	cf 91       	pop	r28
    10c6:	08 95       	ret

000010c8 <prvInitialiseNewTask>:
    10c8:	4f 92       	push	r4
    10ca:	5f 92       	push	r5
    10cc:	6f 92       	push	r6
    10ce:	7f 92       	push	r7
    10d0:	8f 92       	push	r8
    10d2:	9f 92       	push	r9
    10d4:	af 92       	push	r10
    10d6:	bf 92       	push	r11
    10d8:	cf 92       	push	r12
    10da:	df 92       	push	r13
    10dc:	ef 92       	push	r14
    10de:	ff 92       	push	r15
    10e0:	0f 93       	push	r16
    10e2:	cf 93       	push	r28
    10e4:	df 93       	push	r29
    10e6:	2c 01       	movw	r4, r24
    10e8:	5b 01       	movw	r10, r22
    10ea:	4a 01       	movw	r8, r20
    10ec:	39 01       	movw	r6, r18
    10ee:	e6 01       	movw	r28, r12
    10f0:	65 ea       	ldi	r22, 0xA5	; 165
    10f2:	70 e0       	ldi	r23, 0x00	; 0
    10f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10f8:	0e 94 bb 1f 	call	0x3f76	; 0x3f76 <memset>
    10fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1100:	21 e0       	ldi	r18, 0x01	; 1
    1102:	82 1a       	sub	r8, r18
    1104:	91 08       	sbc	r9, r1
    1106:	88 0e       	add	r8, r24
    1108:	99 1e       	adc	r9, r25
    110a:	a1 14       	cp	r10, r1
    110c:	b1 04       	cpc	r11, r1
    110e:	89 f4       	brne	.+34     	; 0x1132 <prvInitialiseNewTask+0x6a>
    1110:	15 c0       	rjmp	.+42     	; 0x113c <prvInitialiseNewTask+0x74>
    1112:	82 2f       	mov	r24, r18
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	f5 01       	movw	r30, r10
    1118:	e8 0f       	add	r30, r24
    111a:	f9 1f       	adc	r31, r25
    111c:	30 81       	ld	r19, Z
    111e:	de 01       	movw	r26, r28
    1120:	a8 0f       	add	r26, r24
    1122:	b9 1f       	adc	r27, r25
    1124:	5d 96       	adiw	r26, 0x1d	; 29
    1126:	3c 93       	st	X, r19
    1128:	80 81       	ld	r24, Z
    112a:	88 23       	and	r24, r24
    112c:	29 f0       	breq	.+10     	; 0x1138 <prvInitialiseNewTask+0x70>
    112e:	2f 5f       	subi	r18, 0xFF	; 255
    1130:	01 c0       	rjmp	.+2      	; 0x1134 <prvInitialiseNewTask+0x6c>
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	20 31       	cpi	r18, 0x10	; 16
    1136:	68 f3       	brcs	.-38     	; 0x1112 <prvInitialiseNewTask+0x4a>
    1138:	1c a6       	std	Y+44, r1	; 0x2c
    113a:	01 c0       	rjmp	.+2      	; 0x113e <prvInitialiseNewTask+0x76>
    113c:	1d 8e       	std	Y+29, r1	; 0x1d
    113e:	0a 30       	cpi	r16, 0x0A	; 10
    1140:	08 f0       	brcs	.+2      	; 0x1144 <prvInitialiseNewTask+0x7c>
    1142:	09 e0       	ldi	r16, 0x09	; 9
    1144:	0a 8f       	std	Y+26, r16	; 0x1a
    1146:	0d a7       	std	Y+45, r16	; 0x2d
    1148:	1e a6       	std	Y+46, r1	; 0x2e
    114a:	ce 01       	movw	r24, r28
    114c:	02 96       	adiw	r24, 0x02	; 2
    114e:	96 da       	rcall	.-2772   	; 0x67c <vListInitialiseItem>
    1150:	ce 01       	movw	r24, r28
    1152:	0e 96       	adiw	r24, 0x0e	; 14
    1154:	93 da       	rcall	.-2778   	; 0x67c <vListInitialiseItem>
    1156:	db 87       	std	Y+11, r29	; 0x0b
    1158:	ca 87       	std	Y+10, r28	; 0x0a
    115a:	8a e0       	ldi	r24, 0x0A	; 10
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	a0 e0       	ldi	r26, 0x00	; 0
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	80 1b       	sub	r24, r16
    1164:	91 09       	sbc	r25, r1
    1166:	a1 09       	sbc	r26, r1
    1168:	b1 09       	sbc	r27, r1
    116a:	8e 87       	std	Y+14, r24	; 0x0e
    116c:	9f 87       	std	Y+15, r25	; 0x0f
    116e:	a8 8b       	std	Y+16, r26	; 0x10
    1170:	b9 8b       	std	Y+17, r27	; 0x11
    1172:	df 8b       	std	Y+23, r29	; 0x17
    1174:	ce 8b       	std	Y+22, r28	; 0x16
    1176:	84 e0       	ldi	r24, 0x04	; 4
    1178:	fe 01       	movw	r30, r28
    117a:	bf 96       	adiw	r30, 0x2f	; 47
    117c:	df 01       	movw	r26, r30
    117e:	1d 92       	st	X+, r1
    1180:	8a 95       	dec	r24
    1182:	e9 f7       	brne	.-6      	; 0x117e <prvInitialiseNewTask+0xb6>
    1184:	1b aa       	std	Y+51, r1	; 0x33
    1186:	a3 01       	movw	r20, r6
    1188:	b2 01       	movw	r22, r4
    118a:	c4 01       	movw	r24, r8
    118c:	eb da       	rcall	.-2602   	; 0x764 <pxPortInitialiseStack>
    118e:	99 83       	std	Y+1, r25	; 0x01
    1190:	88 83       	st	Y, r24
    1192:	e1 14       	cp	r14, r1
    1194:	f1 04       	cpc	r15, r1
    1196:	19 f0       	breq	.+6      	; 0x119e <prvInitialiseNewTask+0xd6>
    1198:	f7 01       	movw	r30, r14
    119a:	d1 83       	std	Z+1, r29	; 0x01
    119c:	c0 83       	st	Z, r28
    119e:	df 91       	pop	r29
    11a0:	cf 91       	pop	r28
    11a2:	0f 91       	pop	r16
    11a4:	ff 90       	pop	r15
    11a6:	ef 90       	pop	r14
    11a8:	df 90       	pop	r13
    11aa:	cf 90       	pop	r12
    11ac:	bf 90       	pop	r11
    11ae:	af 90       	pop	r10
    11b0:	9f 90       	pop	r9
    11b2:	8f 90       	pop	r8
    11b4:	7f 90       	pop	r7
    11b6:	6f 90       	pop	r6
    11b8:	5f 90       	pop	r5
    11ba:	4f 90       	pop	r4
    11bc:	08 95       	ret

000011be <prvInitialiseTaskLists>:
    11be:	cf 93       	push	r28
    11c0:	c0 e0       	ldi	r28, 0x00	; 0
    11c2:	08 c0       	rjmp	.+16     	; 0x11d4 <prvInitialiseTaskLists+0x16>
    11c4:	2b e0       	ldi	r18, 0x0B	; 11
    11c6:	c2 9f       	mul	r28, r18
    11c8:	c0 01       	movw	r24, r0
    11ca:	11 24       	eor	r1, r1
    11cc:	8f 5e       	subi	r24, 0xEF	; 239
    11ce:	92 4f       	sbci	r25, 0xF2	; 242
    11d0:	44 da       	rcall	.-2936   	; 0x65a <vListInitialise>
    11d2:	cf 5f       	subi	r28, 0xFF	; 255
    11d4:	ca 30       	cpi	r28, 0x0A	; 10
    11d6:	b0 f3       	brcs	.-20     	; 0x11c4 <prvInitialiseTaskLists+0x6>
    11d8:	86 e0       	ldi	r24, 0x06	; 6
    11da:	9d e0       	ldi	r25, 0x0D	; 13
    11dc:	3e da       	rcall	.-2948   	; 0x65a <vListInitialise>
    11de:	8b ef       	ldi	r24, 0xFB	; 251
    11e0:	9c e0       	ldi	r25, 0x0C	; 12
    11e2:	3b da       	rcall	.-2954   	; 0x65a <vListInitialise>
    11e4:	8c ee       	ldi	r24, 0xEC	; 236
    11e6:	9c e0       	ldi	r25, 0x0C	; 12
    11e8:	38 da       	rcall	.-2960   	; 0x65a <vListInitialise>
    11ea:	81 ee       	ldi	r24, 0xE1	; 225
    11ec:	9c e0       	ldi	r25, 0x0C	; 12
    11ee:	35 da       	rcall	.-2966   	; 0x65a <vListInitialise>
    11f0:	85 ed       	ldi	r24, 0xD5	; 213
    11f2:	9c e0       	ldi	r25, 0x0C	; 12
    11f4:	32 da       	rcall	.-2972   	; 0x65a <vListInitialise>
    11f6:	86 e0       	ldi	r24, 0x06	; 6
    11f8:	9d e0       	ldi	r25, 0x0D	; 13
    11fa:	90 93 fa 0c 	sts	0x0CFA, r25	; 0x800cfa <pxDelayedTaskList+0x1>
    11fe:	80 93 f9 0c 	sts	0x0CF9, r24	; 0x800cf9 <pxDelayedTaskList>
    1202:	8b ef       	ldi	r24, 0xFB	; 251
    1204:	9c e0       	ldi	r25, 0x0C	; 12
    1206:	90 93 f8 0c 	sts	0x0CF8, r25	; 0x800cf8 <pxOverflowDelayedTaskList+0x1>
    120a:	80 93 f7 0c 	sts	0x0CF7, r24	; 0x800cf7 <pxOverflowDelayedTaskList>
    120e:	cf 91       	pop	r28
    1210:	08 95       	ret

00001212 <prvAddNewTaskToReadyList>:
    1212:	cf 93       	push	r28
    1214:	df 93       	push	r29
    1216:	ec 01       	movw	r28, r24
    1218:	0f b6       	in	r0, 0x3f	; 63
    121a:	f8 94       	cli
    121c:	0f 92       	push	r0
    121e:	80 91 d4 0c 	lds	r24, 0x0CD4	; 0x800cd4 <uxCurrentNumberOfTasks>
    1222:	8f 5f       	subi	r24, 0xFF	; 255
    1224:	80 93 d4 0c 	sts	0x0CD4, r24	; 0x800cd4 <uxCurrentNumberOfTasks>
    1228:	80 91 7f 0d 	lds	r24, 0x0D7F	; 0x800d7f <pxCurrentTCB>
    122c:	90 91 80 0d 	lds	r25, 0x0D80	; 0x800d80 <pxCurrentTCB+0x1>
    1230:	89 2b       	or	r24, r25
    1232:	51 f4       	brne	.+20     	; 0x1248 <prvAddNewTaskToReadyList+0x36>
    1234:	d0 93 80 0d 	sts	0x0D80, r29	; 0x800d80 <pxCurrentTCB+0x1>
    1238:	c0 93 7f 0d 	sts	0x0D7F, r28	; 0x800d7f <pxCurrentTCB>
    123c:	80 91 d4 0c 	lds	r24, 0x0CD4	; 0x800cd4 <uxCurrentNumberOfTasks>
    1240:	81 30       	cpi	r24, 0x01	; 1
    1242:	91 f4       	brne	.+36     	; 0x1268 <prvAddNewTaskToReadyList+0x56>
    1244:	bc df       	rcall	.-136    	; 0x11be <prvInitialiseTaskLists>
    1246:	10 c0       	rjmp	.+32     	; 0x1268 <prvAddNewTaskToReadyList+0x56>
    1248:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <xSchedulerRunning>
    124c:	81 11       	cpse	r24, r1
    124e:	0c c0       	rjmp	.+24     	; 0x1268 <prvAddNewTaskToReadyList+0x56>
    1250:	e0 91 7f 0d 	lds	r30, 0x0D7F	; 0x800d7f <pxCurrentTCB>
    1254:	f0 91 80 0d 	lds	r31, 0x0D80	; 0x800d80 <pxCurrentTCB+0x1>
    1258:	92 8d       	ldd	r25, Z+26	; 0x1a
    125a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    125c:	89 17       	cp	r24, r25
    125e:	20 f0       	brcs	.+8      	; 0x1268 <prvAddNewTaskToReadyList+0x56>
    1260:	d0 93 80 0d 	sts	0x0D80, r29	; 0x800d80 <pxCurrentTCB+0x1>
    1264:	c0 93 7f 0d 	sts	0x0D7F, r28	; 0x800d7f <pxCurrentTCB>
    1268:	80 91 c7 0c 	lds	r24, 0x0CC7	; 0x800cc7 <uxTaskNumber>
    126c:	8f 5f       	subi	r24, 0xFF	; 255
    126e:	80 93 c7 0c 	sts	0x0CC7, r24	; 0x800cc7 <uxTaskNumber>
    1272:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1274:	80 91 cf 0c 	lds	r24, 0x0CCF	; 0x800ccf <uxTopReadyPriority>
    1278:	8e 17       	cp	r24, r30
    127a:	10 f4       	brcc	.+4      	; 0x1280 <prvAddNewTaskToReadyList+0x6e>
    127c:	e0 93 cf 0c 	sts	0x0CCF, r30	; 0x800ccf <uxTopReadyPriority>
    1280:	8b e0       	ldi	r24, 0x0B	; 11
    1282:	8e 9f       	mul	r24, r30
    1284:	f0 01       	movw	r30, r0
    1286:	11 24       	eor	r1, r1
    1288:	ef 5e       	subi	r30, 0xEF	; 239
    128a:	f2 4f       	sbci	r31, 0xF2	; 242
    128c:	01 80       	ldd	r0, Z+1	; 0x01
    128e:	f2 81       	ldd	r31, Z+2	; 0x02
    1290:	e0 2d       	mov	r30, r0
    1292:	ff 83       	std	Y+7, r31	; 0x07
    1294:	ee 83       	std	Y+6, r30	; 0x06
    1296:	26 81       	ldd	r18, Z+6	; 0x06
    1298:	37 81       	ldd	r19, Z+7	; 0x07
    129a:	39 87       	std	Y+9, r19	; 0x09
    129c:	28 87       	std	Y+8, r18	; 0x08
    129e:	a6 81       	ldd	r26, Z+6	; 0x06
    12a0:	b7 81       	ldd	r27, Z+7	; 0x07
    12a2:	9e 01       	movw	r18, r28
    12a4:	2e 5f       	subi	r18, 0xFE	; 254
    12a6:	3f 4f       	sbci	r19, 0xFF	; 255
    12a8:	15 96       	adiw	r26, 0x05	; 5
    12aa:	3c 93       	st	X, r19
    12ac:	2e 93       	st	-X, r18
    12ae:	14 97       	sbiw	r26, 0x04	; 4
    12b0:	37 83       	std	Z+7, r19	; 0x07
    12b2:	26 83       	std	Z+6, r18	; 0x06
    12b4:	ea 8d       	ldd	r30, Y+26	; 0x1a
    12b6:	8e 9f       	mul	r24, r30
    12b8:	f0 01       	movw	r30, r0
    12ba:	11 24       	eor	r1, r1
    12bc:	ef 5e       	subi	r30, 0xEF	; 239
    12be:	f2 4f       	sbci	r31, 0xF2	; 242
    12c0:	fd 87       	std	Y+13, r31	; 0x0d
    12c2:	ec 87       	std	Y+12, r30	; 0x0c
    12c4:	80 81       	ld	r24, Z
    12c6:	8f 5f       	subi	r24, 0xFF	; 255
    12c8:	80 83       	st	Z, r24
    12ca:	0f 90       	pop	r0
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <xSchedulerRunning>
    12d2:	88 23       	and	r24, r24
    12d4:	49 f0       	breq	.+18     	; 0x12e8 <prvAddNewTaskToReadyList+0xd6>
    12d6:	e0 91 7f 0d 	lds	r30, 0x0D7F	; 0x800d7f <pxCurrentTCB>
    12da:	f0 91 80 0d 	lds	r31, 0x0D80	; 0x800d80 <pxCurrentTCB+0x1>
    12de:	92 8d       	ldd	r25, Z+26	; 0x1a
    12e0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    12e2:	98 17       	cp	r25, r24
    12e4:	08 f4       	brcc	.+2      	; 0x12e8 <prvAddNewTaskToReadyList+0xd6>
    12e6:	87 da       	rcall	.-2802   	; 0x7f6 <vPortYield>
    12e8:	df 91       	pop	r29
    12ea:	cf 91       	pop	r28
    12ec:	08 95       	ret

000012ee <prvCheckTasksWaitingTermination>:
    12ee:	cf 93       	push	r28
    12f0:	df 93       	push	r29
    12f2:	1a c0       	rjmp	.+52     	; 0x1328 <prvCheckTasksWaitingTermination+0x3a>
    12f4:	0f b6       	in	r0, 0x3f	; 63
    12f6:	f8 94       	cli
    12f8:	0f 92       	push	r0
    12fa:	e0 91 e8 0c 	lds	r30, 0x0CE8	; 0x800ce8 <xTasksWaitingTermination+0x7>
    12fe:	f0 91 e9 0c 	lds	r31, 0x0CE9	; 0x800ce9 <xTasksWaitingTermination+0x8>
    1302:	c0 85       	ldd	r28, Z+8	; 0x08
    1304:	d1 85       	ldd	r29, Z+9	; 0x09
    1306:	ce 01       	movw	r24, r28
    1308:	02 96       	adiw	r24, 0x02	; 2
    130a:	f9 d9       	rcall	.-3086   	; 0x6fe <uxListRemove>
    130c:	80 91 d4 0c 	lds	r24, 0x0CD4	; 0x800cd4 <uxCurrentNumberOfTasks>
    1310:	81 50       	subi	r24, 0x01	; 1
    1312:	80 93 d4 0c 	sts	0x0CD4, r24	; 0x800cd4 <uxCurrentNumberOfTasks>
    1316:	80 91 e0 0c 	lds	r24, 0x0CE0	; 0x800ce0 <uxDeletedTasksWaitingCleanUp>
    131a:	81 50       	subi	r24, 0x01	; 1
    131c:	80 93 e0 0c 	sts	0x0CE0, r24	; 0x800ce0 <uxDeletedTasksWaitingCleanUp>
    1320:	0f 90       	pop	r0
    1322:	0f be       	out	0x3f, r0	; 63
    1324:	ce 01       	movw	r24, r28
    1326:	c5 de       	rcall	.-630    	; 0x10b2 <prvDeleteTCB>
    1328:	80 91 e0 0c 	lds	r24, 0x0CE0	; 0x800ce0 <uxDeletedTasksWaitingCleanUp>
    132c:	81 11       	cpse	r24, r1
    132e:	e2 cf       	rjmp	.-60     	; 0x12f4 <prvCheckTasksWaitingTermination+0x6>
    1330:	df 91       	pop	r29
    1332:	cf 91       	pop	r28
    1334:	08 95       	ret

00001336 <prvAddCurrentTaskToDelayedList>:
    1336:	8f 92       	push	r8
    1338:	9f 92       	push	r9
    133a:	af 92       	push	r10
    133c:	bf 92       	push	r11
    133e:	cf 92       	push	r12
    1340:	df 92       	push	r13
    1342:	ef 92       	push	r14
    1344:	ff 92       	push	r15
    1346:	cf 93       	push	r28
    1348:	df 93       	push	r29
    134a:	6b 01       	movw	r12, r22
    134c:	7c 01       	movw	r14, r24
    134e:	c4 2f       	mov	r28, r20
    1350:	80 90 d0 0c 	lds	r8, 0x0CD0	; 0x800cd0 <xTickCount>
    1354:	90 90 d1 0c 	lds	r9, 0x0CD1	; 0x800cd1 <xTickCount+0x1>
    1358:	a0 90 d2 0c 	lds	r10, 0x0CD2	; 0x800cd2 <xTickCount+0x2>
    135c:	b0 90 d3 0c 	lds	r11, 0x0CD3	; 0x800cd3 <xTickCount+0x3>
    1360:	80 91 7f 0d 	lds	r24, 0x0D7F	; 0x800d7f <pxCurrentTCB>
    1364:	90 91 80 0d 	lds	r25, 0x0D80	; 0x800d80 <pxCurrentTCB+0x1>
    1368:	02 96       	adiw	r24, 0x02	; 2
    136a:	c9 d9       	rcall	.-3182   	; 0x6fe <uxListRemove>
    136c:	8f ef       	ldi	r24, 0xFF	; 255
    136e:	c8 16       	cp	r12, r24
    1370:	d8 06       	cpc	r13, r24
    1372:	e8 06       	cpc	r14, r24
    1374:	f8 06       	cpc	r15, r24
    1376:	b1 f5       	brne	.+108    	; 0x13e4 <prvAddCurrentTaskToDelayedList+0xae>
    1378:	cc 23       	and	r28, r28
    137a:	a1 f1       	breq	.+104    	; 0x13e4 <prvAddCurrentTaskToDelayedList+0xae>
    137c:	e5 ed       	ldi	r30, 0xD5	; 213
    137e:	fc e0       	ldi	r31, 0x0C	; 12
    1380:	a1 81       	ldd	r26, Z+1	; 0x01
    1382:	b2 81       	ldd	r27, Z+2	; 0x02
    1384:	c0 91 7f 0d 	lds	r28, 0x0D7F	; 0x800d7f <pxCurrentTCB>
    1388:	d0 91 80 0d 	lds	r29, 0x0D80	; 0x800d80 <pxCurrentTCB+0x1>
    138c:	bf 83       	std	Y+7, r27	; 0x07
    138e:	ae 83       	std	Y+6, r26	; 0x06
    1390:	c0 91 7f 0d 	lds	r28, 0x0D7F	; 0x800d7f <pxCurrentTCB>
    1394:	d0 91 80 0d 	lds	r29, 0x0D80	; 0x800d80 <pxCurrentTCB+0x1>
    1398:	16 96       	adiw	r26, 0x06	; 6
    139a:	8d 91       	ld	r24, X+
    139c:	9c 91       	ld	r25, X
    139e:	17 97       	sbiw	r26, 0x07	; 7
    13a0:	99 87       	std	Y+9, r25	; 0x09
    13a2:	88 87       	std	Y+8, r24	; 0x08
    13a4:	16 96       	adiw	r26, 0x06	; 6
    13a6:	cd 91       	ld	r28, X+
    13a8:	dc 91       	ld	r29, X
    13aa:	17 97       	sbiw	r26, 0x07	; 7
    13ac:	80 91 7f 0d 	lds	r24, 0x0D7F	; 0x800d7f <pxCurrentTCB>
    13b0:	90 91 80 0d 	lds	r25, 0x0D80	; 0x800d80 <pxCurrentTCB+0x1>
    13b4:	02 96       	adiw	r24, 0x02	; 2
    13b6:	9d 83       	std	Y+5, r25	; 0x05
    13b8:	8c 83       	std	Y+4, r24	; 0x04
    13ba:	80 91 7f 0d 	lds	r24, 0x0D7F	; 0x800d7f <pxCurrentTCB>
    13be:	90 91 80 0d 	lds	r25, 0x0D80	; 0x800d80 <pxCurrentTCB+0x1>
    13c2:	02 96       	adiw	r24, 0x02	; 2
    13c4:	17 96       	adiw	r26, 0x07	; 7
    13c6:	9c 93       	st	X, r25
    13c8:	8e 93       	st	-X, r24
    13ca:	16 97       	sbiw	r26, 0x06	; 6
    13cc:	a0 91 7f 0d 	lds	r26, 0x0D7F	; 0x800d7f <pxCurrentTCB>
    13d0:	b0 91 80 0d 	lds	r27, 0x0D80	; 0x800d80 <pxCurrentTCB+0x1>
    13d4:	1d 96       	adiw	r26, 0x0d	; 13
    13d6:	fc 93       	st	X, r31
    13d8:	ee 93       	st	-X, r30
    13da:	1c 97       	sbiw	r26, 0x0c	; 12
    13dc:	80 81       	ld	r24, Z
    13de:	8f 5f       	subi	r24, 0xFF	; 255
    13e0:	80 83       	st	Z, r24
    13e2:	3d c0       	rjmp	.+122    	; 0x145e <prvAddCurrentTaskToDelayedList+0x128>
    13e4:	c8 0c       	add	r12, r8
    13e6:	d9 1c       	adc	r13, r9
    13e8:	ea 1c       	adc	r14, r10
    13ea:	fb 1c       	adc	r15, r11
    13ec:	e0 91 7f 0d 	lds	r30, 0x0D7F	; 0x800d7f <pxCurrentTCB>
    13f0:	f0 91 80 0d 	lds	r31, 0x0D80	; 0x800d80 <pxCurrentTCB+0x1>
    13f4:	c2 82       	std	Z+2, r12	; 0x02
    13f6:	d3 82       	std	Z+3, r13	; 0x03
    13f8:	e4 82       	std	Z+4, r14	; 0x04
    13fa:	f5 82       	std	Z+5, r15	; 0x05
    13fc:	c8 14       	cp	r12, r8
    13fe:	d9 04       	cpc	r13, r9
    1400:	ea 04       	cpc	r14, r10
    1402:	fb 04       	cpc	r15, r11
    1404:	60 f4       	brcc	.+24     	; 0x141e <prvAddCurrentTaskToDelayedList+0xe8>
    1406:	60 91 7f 0d 	lds	r22, 0x0D7F	; 0x800d7f <pxCurrentTCB>
    140a:	70 91 80 0d 	lds	r23, 0x0D80	; 0x800d80 <pxCurrentTCB+0x1>
    140e:	80 91 f7 0c 	lds	r24, 0x0CF7	; 0x800cf7 <pxOverflowDelayedTaskList>
    1412:	90 91 f8 0c 	lds	r25, 0x0CF8	; 0x800cf8 <pxOverflowDelayedTaskList+0x1>
    1416:	6e 5f       	subi	r22, 0xFE	; 254
    1418:	7f 4f       	sbci	r23, 0xFF	; 255
    141a:	34 d9       	rcall	.-3480   	; 0x684 <vListInsert>
    141c:	20 c0       	rjmp	.+64     	; 0x145e <prvAddCurrentTaskToDelayedList+0x128>
    141e:	60 91 7f 0d 	lds	r22, 0x0D7F	; 0x800d7f <pxCurrentTCB>
    1422:	70 91 80 0d 	lds	r23, 0x0D80	; 0x800d80 <pxCurrentTCB+0x1>
    1426:	80 91 f9 0c 	lds	r24, 0x0CF9	; 0x800cf9 <pxDelayedTaskList>
    142a:	90 91 fa 0c 	lds	r25, 0x0CFA	; 0x800cfa <pxDelayedTaskList+0x1>
    142e:	6e 5f       	subi	r22, 0xFE	; 254
    1430:	7f 4f       	sbci	r23, 0xFF	; 255
    1432:	28 d9       	rcall	.-3504   	; 0x684 <vListInsert>
    1434:	80 91 c3 0c 	lds	r24, 0x0CC3	; 0x800cc3 <xNextTaskUnblockTime>
    1438:	90 91 c4 0c 	lds	r25, 0x0CC4	; 0x800cc4 <xNextTaskUnblockTime+0x1>
    143c:	a0 91 c5 0c 	lds	r26, 0x0CC5	; 0x800cc5 <xNextTaskUnblockTime+0x2>
    1440:	b0 91 c6 0c 	lds	r27, 0x0CC6	; 0x800cc6 <xNextTaskUnblockTime+0x3>
    1444:	c8 16       	cp	r12, r24
    1446:	d9 06       	cpc	r13, r25
    1448:	ea 06       	cpc	r14, r26
    144a:	fb 06       	cpc	r15, r27
    144c:	40 f4       	brcc	.+16     	; 0x145e <prvAddCurrentTaskToDelayedList+0x128>
    144e:	c0 92 c3 0c 	sts	0x0CC3, r12	; 0x800cc3 <xNextTaskUnblockTime>
    1452:	d0 92 c4 0c 	sts	0x0CC4, r13	; 0x800cc4 <xNextTaskUnblockTime+0x1>
    1456:	e0 92 c5 0c 	sts	0x0CC5, r14	; 0x800cc5 <xNextTaskUnblockTime+0x2>
    145a:	f0 92 c6 0c 	sts	0x0CC6, r15	; 0x800cc6 <xNextTaskUnblockTime+0x3>
    145e:	df 91       	pop	r29
    1460:	cf 91       	pop	r28
    1462:	ff 90       	pop	r15
    1464:	ef 90       	pop	r14
    1466:	df 90       	pop	r13
    1468:	cf 90       	pop	r12
    146a:	bf 90       	pop	r11
    146c:	af 90       	pop	r10
    146e:	9f 90       	pop	r9
    1470:	8f 90       	pop	r8
    1472:	08 95       	ret

00001474 <xTaskCreate>:
    1474:	2f 92       	push	r2
    1476:	3f 92       	push	r3
    1478:	4f 92       	push	r4
    147a:	5f 92       	push	r5
    147c:	6f 92       	push	r6
    147e:	7f 92       	push	r7
    1480:	8f 92       	push	r8
    1482:	9f 92       	push	r9
    1484:	af 92       	push	r10
    1486:	bf 92       	push	r11
    1488:	cf 92       	push	r12
    148a:	df 92       	push	r13
    148c:	ef 92       	push	r14
    148e:	ff 92       	push	r15
    1490:	0f 93       	push	r16
    1492:	cf 93       	push	r28
    1494:	df 93       	push	r29
    1496:	3c 01       	movw	r6, r24
    1498:	1b 01       	movw	r2, r22
    149a:	4a 01       	movw	r8, r20
    149c:	29 01       	movw	r4, r18
    149e:	ca 01       	movw	r24, r20
    14a0:	0e 94 48 02 	call	0x490	; 0x490 <pvPortMalloc>
    14a4:	6c 01       	movw	r12, r24
    14a6:	89 2b       	or	r24, r25
    14a8:	69 f0       	breq	.+26     	; 0x14c4 <xTaskCreate+0x50>
    14aa:	84 e3       	ldi	r24, 0x34	; 52
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	0e 94 48 02 	call	0x490	; 0x490 <pvPortMalloc>
    14b2:	ec 01       	movw	r28, r24
    14b4:	89 2b       	or	r24, r25
    14b6:	19 f0       	breq	.+6      	; 0x14be <xTaskCreate+0x4a>
    14b8:	dc 8e       	std	Y+28, r13	; 0x1c
    14ba:	cb 8e       	std	Y+27, r12	; 0x1b
    14bc:	05 c0       	rjmp	.+10     	; 0x14c8 <xTaskCreate+0x54>
    14be:	c6 01       	movw	r24, r12
    14c0:	90 d8       	rcall	.-3808   	; 0x5e2 <vPortFree>
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <xTaskCreate+0x54>
    14c4:	c0 e0       	ldi	r28, 0x00	; 0
    14c6:	d0 e0       	ldi	r29, 0x00	; 0
    14c8:	20 97       	sbiw	r28, 0x00	; 0
    14ca:	61 f0       	breq	.+24     	; 0x14e4 <xTaskCreate+0x70>
    14cc:	a1 2c       	mov	r10, r1
    14ce:	b1 2c       	mov	r11, r1
    14d0:	6e 01       	movw	r12, r28
    14d2:	92 01       	movw	r18, r4
    14d4:	a4 01       	movw	r20, r8
    14d6:	b1 01       	movw	r22, r2
    14d8:	c3 01       	movw	r24, r6
    14da:	f6 dd       	rcall	.-1044   	; 0x10c8 <prvInitialiseNewTask>
    14dc:	ce 01       	movw	r24, r28
    14de:	99 de       	rcall	.-718    	; 0x1212 <prvAddNewTaskToReadyList>
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	01 c0       	rjmp	.+2      	; 0x14e6 <xTaskCreate+0x72>
    14e4:	8f ef       	ldi	r24, 0xFF	; 255
    14e6:	df 91       	pop	r29
    14e8:	cf 91       	pop	r28
    14ea:	0f 91       	pop	r16
    14ec:	ff 90       	pop	r15
    14ee:	ef 90       	pop	r14
    14f0:	df 90       	pop	r13
    14f2:	cf 90       	pop	r12
    14f4:	bf 90       	pop	r11
    14f6:	af 90       	pop	r10
    14f8:	9f 90       	pop	r9
    14fa:	8f 90       	pop	r8
    14fc:	7f 90       	pop	r7
    14fe:	6f 90       	pop	r6
    1500:	5f 90       	pop	r5
    1502:	4f 90       	pop	r4
    1504:	3f 90       	pop	r3
    1506:	2f 90       	pop	r2
    1508:	08 95       	ret

0000150a <vTaskStartScheduler>:
    150a:	ef 92       	push	r14
    150c:	ff 92       	push	r15
    150e:	0f 93       	push	r16
    1510:	0f 2e       	mov	r0, r31
    1512:	f1 ec       	ldi	r31, 0xC1	; 193
    1514:	ef 2e       	mov	r14, r31
    1516:	fc e0       	ldi	r31, 0x0C	; 12
    1518:	ff 2e       	mov	r15, r31
    151a:	f0 2d       	mov	r31, r0
    151c:	00 e0       	ldi	r16, 0x00	; 0
    151e:	20 e0       	ldi	r18, 0x00	; 0
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	40 ec       	ldi	r20, 0xC0	; 192
    1524:	50 e0       	ldi	r21, 0x00	; 0
    1526:	67 ec       	ldi	r22, 0xC7	; 199
    1528:	72 e0       	ldi	r23, 0x02	; 2
    152a:	8d eb       	ldi	r24, 0xBD	; 189
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	a2 df       	rcall	.-188    	; 0x1474 <xTaskCreate>
    1530:	81 30       	cpi	r24, 0x01	; 1
    1532:	09 f4       	brne	.+2      	; 0x1536 <vTaskStartScheduler+0x2c>
    1534:	31 d6       	rcall	.+3170   	; 0x2198 <xTimerCreateTimerTask>
    1536:	81 30       	cpi	r24, 0x01	; 1
    1538:	c1 f4       	brne	.+48     	; 0x156a <vTaskStartScheduler+0x60>
    153a:	f8 94       	cli
    153c:	8f ef       	ldi	r24, 0xFF	; 255
    153e:	9f ef       	ldi	r25, 0xFF	; 255
    1540:	dc 01       	movw	r26, r24
    1542:	80 93 c3 0c 	sts	0x0CC3, r24	; 0x800cc3 <xNextTaskUnblockTime>
    1546:	90 93 c4 0c 	sts	0x0CC4, r25	; 0x800cc4 <xNextTaskUnblockTime+0x1>
    154a:	a0 93 c5 0c 	sts	0x0CC5, r26	; 0x800cc5 <xNextTaskUnblockTime+0x2>
    154e:	b0 93 c6 0c 	sts	0x0CC6, r27	; 0x800cc6 <xNextTaskUnblockTime+0x3>
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	80 93 ce 0c 	sts	0x0CCE, r24	; 0x800cce <xSchedulerRunning>
    1558:	10 92 d0 0c 	sts	0x0CD0, r1	; 0x800cd0 <xTickCount>
    155c:	10 92 d1 0c 	sts	0x0CD1, r1	; 0x800cd1 <xTickCount+0x1>
    1560:	10 92 d2 0c 	sts	0x0CD2, r1	; 0x800cd2 <xTickCount+0x2>
    1564:	10 92 d3 0c 	sts	0x0CD3, r1	; 0x800cd3 <xTickCount+0x3>
    1568:	14 d9       	rcall	.-3544   	; 0x792 <xPortStartScheduler>
    156a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    156e:	0f 91       	pop	r16
    1570:	ff 90       	pop	r15
    1572:	ef 90       	pop	r14
    1574:	08 95       	ret

00001576 <vTaskSuspendAll>:
    1576:	80 91 c0 0c 	lds	r24, 0x0CC0	; 0x800cc0 <uxSchedulerSuspended>
    157a:	8f 5f       	subi	r24, 0xFF	; 255
    157c:	80 93 c0 0c 	sts	0x0CC0, r24	; 0x800cc0 <uxSchedulerSuspended>
    1580:	08 95       	ret

00001582 <xTaskGetTickCount>:
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	f8 94       	cli
    1586:	0f 92       	push	r0
    1588:	60 91 d0 0c 	lds	r22, 0x0CD0	; 0x800cd0 <xTickCount>
    158c:	70 91 d1 0c 	lds	r23, 0x0CD1	; 0x800cd1 <xTickCount+0x1>
    1590:	80 91 d2 0c 	lds	r24, 0x0CD2	; 0x800cd2 <xTickCount+0x2>
    1594:	90 91 d3 0c 	lds	r25, 0x0CD3	; 0x800cd3 <xTickCount+0x3>
    1598:	0f 90       	pop	r0
    159a:	0f be       	out	0x3f, r0	; 63
    159c:	08 95       	ret

0000159e <xTaskIncrementTick>:
    159e:	cf 92       	push	r12
    15a0:	df 92       	push	r13
    15a2:	ef 92       	push	r14
    15a4:	ff 92       	push	r15
    15a6:	cf 93       	push	r28
    15a8:	df 93       	push	r29
    15aa:	80 91 c0 0c 	lds	r24, 0x0CC0	; 0x800cc0 <uxSchedulerSuspended>
    15ae:	81 11       	cpse	r24, r1
    15b0:	05 c1       	rjmp	.+522    	; 0x17bc <xTaskIncrementTick+0x21e>
    15b2:	c0 90 d0 0c 	lds	r12, 0x0CD0	; 0x800cd0 <xTickCount>
    15b6:	d0 90 d1 0c 	lds	r13, 0x0CD1	; 0x800cd1 <xTickCount+0x1>
    15ba:	e0 90 d2 0c 	lds	r14, 0x0CD2	; 0x800cd2 <xTickCount+0x2>
    15be:	f0 90 d3 0c 	lds	r15, 0x0CD3	; 0x800cd3 <xTickCount+0x3>
    15c2:	8f ef       	ldi	r24, 0xFF	; 255
    15c4:	c8 1a       	sub	r12, r24
    15c6:	d8 0a       	sbc	r13, r24
    15c8:	e8 0a       	sbc	r14, r24
    15ca:	f8 0a       	sbc	r15, r24
    15cc:	c0 92 d0 0c 	sts	0x0CD0, r12	; 0x800cd0 <xTickCount>
    15d0:	d0 92 d1 0c 	sts	0x0CD1, r13	; 0x800cd1 <xTickCount+0x1>
    15d4:	e0 92 d2 0c 	sts	0x0CD2, r14	; 0x800cd2 <xTickCount+0x2>
    15d8:	f0 92 d3 0c 	sts	0x0CD3, r15	; 0x800cd3 <xTickCount+0x3>
    15dc:	c1 14       	cp	r12, r1
    15de:	d1 04       	cpc	r13, r1
    15e0:	e1 04       	cpc	r14, r1
    15e2:	f1 04       	cpc	r15, r1
    15e4:	b1 f4       	brne	.+44     	; 0x1612 <xTaskIncrementTick+0x74>
    15e6:	80 91 f9 0c 	lds	r24, 0x0CF9	; 0x800cf9 <pxDelayedTaskList>
    15ea:	90 91 fa 0c 	lds	r25, 0x0CFA	; 0x800cfa <pxDelayedTaskList+0x1>
    15ee:	20 91 f7 0c 	lds	r18, 0x0CF7	; 0x800cf7 <pxOverflowDelayedTaskList>
    15f2:	30 91 f8 0c 	lds	r19, 0x0CF8	; 0x800cf8 <pxOverflowDelayedTaskList+0x1>
    15f6:	30 93 fa 0c 	sts	0x0CFA, r19	; 0x800cfa <pxDelayedTaskList+0x1>
    15fa:	20 93 f9 0c 	sts	0x0CF9, r18	; 0x800cf9 <pxDelayedTaskList>
    15fe:	90 93 f8 0c 	sts	0x0CF8, r25	; 0x800cf8 <pxOverflowDelayedTaskList+0x1>
    1602:	80 93 f7 0c 	sts	0x0CF7, r24	; 0x800cf7 <pxOverflowDelayedTaskList>
    1606:	80 91 c8 0c 	lds	r24, 0x0CC8	; 0x800cc8 <xNumOfOverflows>
    160a:	8f 5f       	subi	r24, 0xFF	; 255
    160c:	80 93 c8 0c 	sts	0x0CC8, r24	; 0x800cc8 <xNumOfOverflows>
    1610:	29 dd       	rcall	.-1454   	; 0x1064 <prvResetNextTaskUnblockTime>
    1612:	80 91 c3 0c 	lds	r24, 0x0CC3	; 0x800cc3 <xNextTaskUnblockTime>
    1616:	90 91 c4 0c 	lds	r25, 0x0CC4	; 0x800cc4 <xNextTaskUnblockTime+0x1>
    161a:	a0 91 c5 0c 	lds	r26, 0x0CC5	; 0x800cc5 <xNextTaskUnblockTime+0x2>
    161e:	b0 91 c6 0c 	lds	r27, 0x0CC6	; 0x800cc6 <xNextTaskUnblockTime+0x3>
    1622:	c8 16       	cp	r12, r24
    1624:	d9 06       	cpc	r13, r25
    1626:	ea 06       	cpc	r14, r26
    1628:	fb 06       	cpc	r15, r27
    162a:	20 f4       	brcc	.+8      	; 0x1634 <xTaskIncrementTick+0x96>
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	b2 c0       	rjmp	.+356    	; 0x1794 <xTaskIncrementTick+0x1f6>
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	01 c0       	rjmp	.+2      	; 0x1636 <xTaskIncrementTick+0x98>
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	e0 91 f9 0c 	lds	r30, 0x0CF9	; 0x800cf9 <pxDelayedTaskList>
    163a:	f0 91 fa 0c 	lds	r31, 0x0CFA	; 0x800cfa <pxDelayedTaskList+0x1>
    163e:	90 81       	ld	r25, Z
    1640:	91 11       	cpse	r25, r1
    1642:	0c c0       	rjmp	.+24     	; 0x165c <xTaskIncrementTick+0xbe>
    1644:	4f ef       	ldi	r20, 0xFF	; 255
    1646:	5f ef       	ldi	r21, 0xFF	; 255
    1648:	ba 01       	movw	r22, r20
    164a:	40 93 c3 0c 	sts	0x0CC3, r20	; 0x800cc3 <xNextTaskUnblockTime>
    164e:	50 93 c4 0c 	sts	0x0CC4, r21	; 0x800cc4 <xNextTaskUnblockTime+0x1>
    1652:	60 93 c5 0c 	sts	0x0CC5, r22	; 0x800cc5 <xNextTaskUnblockTime+0x2>
    1656:	70 93 c6 0c 	sts	0x0CC6, r23	; 0x800cc6 <xNextTaskUnblockTime+0x3>
    165a:	9c c0       	rjmp	.+312    	; 0x1794 <xTaskIncrementTick+0x1f6>
    165c:	e0 91 f9 0c 	lds	r30, 0x0CF9	; 0x800cf9 <pxDelayedTaskList>
    1660:	f0 91 fa 0c 	lds	r31, 0x0CFA	; 0x800cfa <pxDelayedTaskList+0x1>
    1664:	07 80       	ldd	r0, Z+7	; 0x07
    1666:	f0 85       	ldd	r31, Z+8	; 0x08
    1668:	e0 2d       	mov	r30, r0
    166a:	00 84       	ldd	r0, Z+8	; 0x08
    166c:	f1 85       	ldd	r31, Z+9	; 0x09
    166e:	e0 2d       	mov	r30, r0
    1670:	42 81       	ldd	r20, Z+2	; 0x02
    1672:	53 81       	ldd	r21, Z+3	; 0x03
    1674:	64 81       	ldd	r22, Z+4	; 0x04
    1676:	75 81       	ldd	r23, Z+5	; 0x05
    1678:	c4 16       	cp	r12, r20
    167a:	d5 06       	cpc	r13, r21
    167c:	e6 06       	cpc	r14, r22
    167e:	f7 06       	cpc	r15, r23
    1680:	48 f4       	brcc	.+18     	; 0x1694 <xTaskIncrementTick+0xf6>
    1682:	40 93 c3 0c 	sts	0x0CC3, r20	; 0x800cc3 <xNextTaskUnblockTime>
    1686:	50 93 c4 0c 	sts	0x0CC4, r21	; 0x800cc4 <xNextTaskUnblockTime+0x1>
    168a:	60 93 c5 0c 	sts	0x0CC5, r22	; 0x800cc5 <xNextTaskUnblockTime+0x2>
    168e:	70 93 c6 0c 	sts	0x0CC6, r23	; 0x800cc6 <xNextTaskUnblockTime+0x3>
    1692:	80 c0       	rjmp	.+256    	; 0x1794 <xTaskIncrementTick+0x1f6>
    1694:	a4 85       	ldd	r26, Z+12	; 0x0c
    1696:	b5 85       	ldd	r27, Z+13	; 0x0d
    1698:	c6 81       	ldd	r28, Z+6	; 0x06
    169a:	d7 81       	ldd	r29, Z+7	; 0x07
    169c:	20 85       	ldd	r18, Z+8	; 0x08
    169e:	31 85       	ldd	r19, Z+9	; 0x09
    16a0:	3f 83       	std	Y+7, r19	; 0x07
    16a2:	2e 83       	std	Y+6, r18	; 0x06
    16a4:	c0 85       	ldd	r28, Z+8	; 0x08
    16a6:	d1 85       	ldd	r29, Z+9	; 0x09
    16a8:	26 81       	ldd	r18, Z+6	; 0x06
    16aa:	37 81       	ldd	r19, Z+7	; 0x07
    16ac:	3d 83       	std	Y+5, r19	; 0x05
    16ae:	2c 83       	std	Y+4, r18	; 0x04
    16b0:	11 96       	adiw	r26, 0x01	; 1
    16b2:	4d 91       	ld	r20, X+
    16b4:	5c 91       	ld	r21, X
    16b6:	12 97       	sbiw	r26, 0x02	; 2
    16b8:	9f 01       	movw	r18, r30
    16ba:	2e 5f       	subi	r18, 0xFE	; 254
    16bc:	3f 4f       	sbci	r19, 0xFF	; 255
    16be:	42 17       	cp	r20, r18
    16c0:	53 07       	cpc	r21, r19
    16c2:	31 f4       	brne	.+12     	; 0x16d0 <xTaskIncrementTick+0x132>
    16c4:	40 85       	ldd	r20, Z+8	; 0x08
    16c6:	51 85       	ldd	r21, Z+9	; 0x09
    16c8:	12 96       	adiw	r26, 0x02	; 2
    16ca:	5c 93       	st	X, r21
    16cc:	4e 93       	st	-X, r20
    16ce:	11 97       	sbiw	r26, 0x01	; 1
    16d0:	15 86       	std	Z+13, r1	; 0x0d
    16d2:	14 86       	std	Z+12, r1	; 0x0c
    16d4:	9c 91       	ld	r25, X
    16d6:	91 50       	subi	r25, 0x01	; 1
    16d8:	9c 93       	st	X, r25
    16da:	a0 8d       	ldd	r26, Z+24	; 0x18
    16dc:	b1 8d       	ldd	r27, Z+25	; 0x19
    16de:	10 97       	sbiw	r26, 0x00	; 0
    16e0:	09 f1       	breq	.+66     	; 0x1724 <xTaskIncrementTick+0x186>
    16e2:	c2 89       	ldd	r28, Z+18	; 0x12
    16e4:	d3 89       	ldd	r29, Z+19	; 0x13
    16e6:	44 89       	ldd	r20, Z+20	; 0x14
    16e8:	55 89       	ldd	r21, Z+21	; 0x15
    16ea:	5f 83       	std	Y+7, r21	; 0x07
    16ec:	4e 83       	std	Y+6, r20	; 0x06
    16ee:	c4 89       	ldd	r28, Z+20	; 0x14
    16f0:	d5 89       	ldd	r29, Z+21	; 0x15
    16f2:	42 89       	ldd	r20, Z+18	; 0x12
    16f4:	53 89       	ldd	r21, Z+19	; 0x13
    16f6:	5d 83       	std	Y+5, r21	; 0x05
    16f8:	4c 83       	std	Y+4, r20	; 0x04
    16fa:	11 96       	adiw	r26, 0x01	; 1
    16fc:	6d 91       	ld	r22, X+
    16fe:	7c 91       	ld	r23, X
    1700:	12 97       	sbiw	r26, 0x02	; 2
    1702:	af 01       	movw	r20, r30
    1704:	42 5f       	subi	r20, 0xF2	; 242
    1706:	5f 4f       	sbci	r21, 0xFF	; 255
    1708:	64 17       	cp	r22, r20
    170a:	75 07       	cpc	r23, r21
    170c:	31 f4       	brne	.+12     	; 0x171a <xTaskIncrementTick+0x17c>
    170e:	44 89       	ldd	r20, Z+20	; 0x14
    1710:	55 89       	ldd	r21, Z+21	; 0x15
    1712:	12 96       	adiw	r26, 0x02	; 2
    1714:	5c 93       	st	X, r21
    1716:	4e 93       	st	-X, r20
    1718:	11 97       	sbiw	r26, 0x01	; 1
    171a:	11 8e       	std	Z+25, r1	; 0x19
    171c:	10 8e       	std	Z+24, r1	; 0x18
    171e:	9c 91       	ld	r25, X
    1720:	91 50       	subi	r25, 0x01	; 1
    1722:	9c 93       	st	X, r25
    1724:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1726:	90 91 cf 0c 	lds	r25, 0x0CCF	; 0x800ccf <uxTopReadyPriority>
    172a:	9a 17       	cp	r25, r26
    172c:	10 f4       	brcc	.+4      	; 0x1732 <xTaskIncrementTick+0x194>
    172e:	a0 93 cf 0c 	sts	0x0CCF, r26	; 0x800ccf <uxTopReadyPriority>
    1732:	9b e0       	ldi	r25, 0x0B	; 11
    1734:	9a 9f       	mul	r25, r26
    1736:	d0 01       	movw	r26, r0
    1738:	11 24       	eor	r1, r1
    173a:	af 5e       	subi	r26, 0xEF	; 239
    173c:	b2 4f       	sbci	r27, 0xF2	; 242
    173e:	11 96       	adiw	r26, 0x01	; 1
    1740:	0d 90       	ld	r0, X+
    1742:	bc 91       	ld	r27, X
    1744:	a0 2d       	mov	r26, r0
    1746:	b7 83       	std	Z+7, r27	; 0x07
    1748:	a6 83       	std	Z+6, r26	; 0x06
    174a:	16 96       	adiw	r26, 0x06	; 6
    174c:	4d 91       	ld	r20, X+
    174e:	5c 91       	ld	r21, X
    1750:	17 97       	sbiw	r26, 0x07	; 7
    1752:	51 87       	std	Z+9, r21	; 0x09
    1754:	40 87       	std	Z+8, r20	; 0x08
    1756:	16 96       	adiw	r26, 0x06	; 6
    1758:	cd 91       	ld	r28, X+
    175a:	dc 91       	ld	r29, X
    175c:	17 97       	sbiw	r26, 0x07	; 7
    175e:	3d 83       	std	Y+5, r19	; 0x05
    1760:	2c 83       	std	Y+4, r18	; 0x04
    1762:	17 96       	adiw	r26, 0x07	; 7
    1764:	3c 93       	st	X, r19
    1766:	2e 93       	st	-X, r18
    1768:	16 97       	sbiw	r26, 0x06	; 6
    176a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    176c:	9a 9f       	mul	r25, r26
    176e:	d0 01       	movw	r26, r0
    1770:	11 24       	eor	r1, r1
    1772:	af 5e       	subi	r26, 0xEF	; 239
    1774:	b2 4f       	sbci	r27, 0xF2	; 242
    1776:	b5 87       	std	Z+13, r27	; 0x0d
    1778:	a4 87       	std	Z+12, r26	; 0x0c
    177a:	9c 91       	ld	r25, X
    177c:	9f 5f       	subi	r25, 0xFF	; 255
    177e:	9c 93       	st	X, r25
    1780:	22 8d       	ldd	r18, Z+26	; 0x1a
    1782:	e0 91 7f 0d 	lds	r30, 0x0D7F	; 0x800d7f <pxCurrentTCB>
    1786:	f0 91 80 0d 	lds	r31, 0x0D80	; 0x800d80 <pxCurrentTCB+0x1>
    178a:	92 8d       	ldd	r25, Z+26	; 0x1a
    178c:	29 17       	cp	r18, r25
    178e:	08 f0       	brcs	.+2      	; 0x1792 <xTaskIncrementTick+0x1f4>
    1790:	4f cf       	rjmp	.-354    	; 0x1630 <xTaskIncrementTick+0x92>
    1792:	51 cf       	rjmp	.-350    	; 0x1636 <xTaskIncrementTick+0x98>
    1794:	e0 91 7f 0d 	lds	r30, 0x0D7F	; 0x800d7f <pxCurrentTCB>
    1798:	f0 91 80 0d 	lds	r31, 0x0D80	; 0x800d80 <pxCurrentTCB+0x1>
    179c:	e2 8d       	ldd	r30, Z+26	; 0x1a
    179e:	9b e0       	ldi	r25, 0x0B	; 11
    17a0:	e9 9f       	mul	r30, r25
    17a2:	f0 01       	movw	r30, r0
    17a4:	11 24       	eor	r1, r1
    17a6:	ef 5e       	subi	r30, 0xEF	; 239
    17a8:	f2 4f       	sbci	r31, 0xF2	; 242
    17aa:	90 81       	ld	r25, Z
    17ac:	92 30       	cpi	r25, 0x02	; 2
    17ae:	08 f0       	brcs	.+2      	; 0x17b2 <xTaskIncrementTick+0x214>
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	90 91 c9 0c 	lds	r25, 0x0CC9	; 0x800cc9 <xYieldPending>
    17b6:	91 11       	cpse	r25, r1
    17b8:	16 c0       	rjmp	.+44     	; 0x17e6 <xTaskIncrementTick+0x248>
    17ba:	16 c0       	rjmp	.+44     	; 0x17e8 <xTaskIncrementTick+0x24a>
    17bc:	80 91 ca 0c 	lds	r24, 0x0CCA	; 0x800cca <xPendedTicks>
    17c0:	90 91 cb 0c 	lds	r25, 0x0CCB	; 0x800ccb <xPendedTicks+0x1>
    17c4:	a0 91 cc 0c 	lds	r26, 0x0CCC	; 0x800ccc <xPendedTicks+0x2>
    17c8:	b0 91 cd 0c 	lds	r27, 0x0CCD	; 0x800ccd <xPendedTicks+0x3>
    17cc:	01 96       	adiw	r24, 0x01	; 1
    17ce:	a1 1d       	adc	r26, r1
    17d0:	b1 1d       	adc	r27, r1
    17d2:	80 93 ca 0c 	sts	0x0CCA, r24	; 0x800cca <xPendedTicks>
    17d6:	90 93 cb 0c 	sts	0x0CCB, r25	; 0x800ccb <xPendedTicks+0x1>
    17da:	a0 93 cc 0c 	sts	0x0CCC, r26	; 0x800ccc <xPendedTicks+0x2>
    17de:	b0 93 cd 0c 	sts	0x0CCD, r27	; 0x800ccd <xPendedTicks+0x3>
    17e2:	80 e0       	ldi	r24, 0x00	; 0
    17e4:	01 c0       	rjmp	.+2      	; 0x17e8 <xTaskIncrementTick+0x24a>
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	df 91       	pop	r29
    17ea:	cf 91       	pop	r28
    17ec:	ff 90       	pop	r15
    17ee:	ef 90       	pop	r14
    17f0:	df 90       	pop	r13
    17f2:	cf 90       	pop	r12
    17f4:	08 95       	ret

000017f6 <xTaskResumeAll>:
    17f6:	cf 92       	push	r12
    17f8:	df 92       	push	r13
    17fa:	ef 92       	push	r14
    17fc:	ff 92       	push	r15
    17fe:	cf 93       	push	r28
    1800:	df 93       	push	r29
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	f8 94       	cli
    1806:	0f 92       	push	r0
    1808:	80 91 c0 0c 	lds	r24, 0x0CC0	; 0x800cc0 <uxSchedulerSuspended>
    180c:	81 50       	subi	r24, 0x01	; 1
    180e:	80 93 c0 0c 	sts	0x0CC0, r24	; 0x800cc0 <uxSchedulerSuspended>
    1812:	80 91 c0 0c 	lds	r24, 0x0CC0	; 0x800cc0 <uxSchedulerSuspended>
    1816:	81 11       	cpse	r24, r1
    1818:	be c0       	rjmp	.+380    	; 0x1996 <xTaskResumeAll+0x1a0>
    181a:	80 91 d4 0c 	lds	r24, 0x0CD4	; 0x800cd4 <uxCurrentNumberOfTasks>
    181e:	81 11       	cpse	r24, r1
    1820:	88 c0       	rjmp	.+272    	; 0x1932 <xTaskResumeAll+0x13c>
    1822:	bc c0       	rjmp	.+376    	; 0x199c <xTaskResumeAll+0x1a6>
    1824:	e0 91 f3 0c 	lds	r30, 0x0CF3	; 0x800cf3 <xPendingReadyList+0x7>
    1828:	f0 91 f4 0c 	lds	r31, 0x0CF4	; 0x800cf4 <xPendingReadyList+0x8>
    182c:	00 84       	ldd	r0, Z+8	; 0x08
    182e:	f1 85       	ldd	r31, Z+9	; 0x09
    1830:	e0 2d       	mov	r30, r0
    1832:	a0 8d       	ldd	r26, Z+24	; 0x18
    1834:	b1 8d       	ldd	r27, Z+25	; 0x19
    1836:	c2 89       	ldd	r28, Z+18	; 0x12
    1838:	d3 89       	ldd	r29, Z+19	; 0x13
    183a:	84 89       	ldd	r24, Z+20	; 0x14
    183c:	95 89       	ldd	r25, Z+21	; 0x15
    183e:	9f 83       	std	Y+7, r25	; 0x07
    1840:	8e 83       	std	Y+6, r24	; 0x06
    1842:	c4 89       	ldd	r28, Z+20	; 0x14
    1844:	d5 89       	ldd	r29, Z+21	; 0x15
    1846:	82 89       	ldd	r24, Z+18	; 0x12
    1848:	93 89       	ldd	r25, Z+19	; 0x13
    184a:	9d 83       	std	Y+5, r25	; 0x05
    184c:	8c 83       	std	Y+4, r24	; 0x04
    184e:	11 96       	adiw	r26, 0x01	; 1
    1850:	2d 91       	ld	r18, X+
    1852:	3c 91       	ld	r19, X
    1854:	12 97       	sbiw	r26, 0x02	; 2
    1856:	cf 01       	movw	r24, r30
    1858:	0e 96       	adiw	r24, 0x0e	; 14
    185a:	28 17       	cp	r18, r24
    185c:	39 07       	cpc	r19, r25
    185e:	31 f4       	brne	.+12     	; 0x186c <xTaskResumeAll+0x76>
    1860:	84 89       	ldd	r24, Z+20	; 0x14
    1862:	95 89       	ldd	r25, Z+21	; 0x15
    1864:	12 96       	adiw	r26, 0x02	; 2
    1866:	9c 93       	st	X, r25
    1868:	8e 93       	st	-X, r24
    186a:	11 97       	sbiw	r26, 0x01	; 1
    186c:	11 8e       	std	Z+25, r1	; 0x19
    186e:	10 8e       	std	Z+24, r1	; 0x18
    1870:	8c 91       	ld	r24, X
    1872:	81 50       	subi	r24, 0x01	; 1
    1874:	8c 93       	st	X, r24
    1876:	a4 85       	ldd	r26, Z+12	; 0x0c
    1878:	b5 85       	ldd	r27, Z+13	; 0x0d
    187a:	c6 81       	ldd	r28, Z+6	; 0x06
    187c:	d7 81       	ldd	r29, Z+7	; 0x07
    187e:	80 85       	ldd	r24, Z+8	; 0x08
    1880:	91 85       	ldd	r25, Z+9	; 0x09
    1882:	9f 83       	std	Y+7, r25	; 0x07
    1884:	8e 83       	std	Y+6, r24	; 0x06
    1886:	c0 85       	ldd	r28, Z+8	; 0x08
    1888:	d1 85       	ldd	r29, Z+9	; 0x09
    188a:	86 81       	ldd	r24, Z+6	; 0x06
    188c:	97 81       	ldd	r25, Z+7	; 0x07
    188e:	9d 83       	std	Y+5, r25	; 0x05
    1890:	8c 83       	std	Y+4, r24	; 0x04
    1892:	11 96       	adiw	r26, 0x01	; 1
    1894:	8d 91       	ld	r24, X+
    1896:	9c 91       	ld	r25, X
    1898:	12 97       	sbiw	r26, 0x02	; 2
    189a:	9f 01       	movw	r18, r30
    189c:	2e 5f       	subi	r18, 0xFE	; 254
    189e:	3f 4f       	sbci	r19, 0xFF	; 255
    18a0:	82 17       	cp	r24, r18
    18a2:	93 07       	cpc	r25, r19
    18a4:	31 f4       	brne	.+12     	; 0x18b2 <xTaskResumeAll+0xbc>
    18a6:	80 85       	ldd	r24, Z+8	; 0x08
    18a8:	91 85       	ldd	r25, Z+9	; 0x09
    18aa:	12 96       	adiw	r26, 0x02	; 2
    18ac:	9c 93       	st	X, r25
    18ae:	8e 93       	st	-X, r24
    18b0:	11 97       	sbiw	r26, 0x01	; 1
    18b2:	15 86       	std	Z+13, r1	; 0x0d
    18b4:	14 86       	std	Z+12, r1	; 0x0c
    18b6:	8c 91       	ld	r24, X
    18b8:	81 50       	subi	r24, 0x01	; 1
    18ba:	8c 93       	st	X, r24
    18bc:	a2 8d       	ldd	r26, Z+26	; 0x1a
    18be:	80 91 cf 0c 	lds	r24, 0x0CCF	; 0x800ccf <uxTopReadyPriority>
    18c2:	8a 17       	cp	r24, r26
    18c4:	10 f4       	brcc	.+4      	; 0x18ca <xTaskResumeAll+0xd4>
    18c6:	a0 93 cf 0c 	sts	0x0CCF, r26	; 0x800ccf <uxTopReadyPriority>
    18ca:	8b e0       	ldi	r24, 0x0B	; 11
    18cc:	8a 9f       	mul	r24, r26
    18ce:	d0 01       	movw	r26, r0
    18d0:	11 24       	eor	r1, r1
    18d2:	af 5e       	subi	r26, 0xEF	; 239
    18d4:	b2 4f       	sbci	r27, 0xF2	; 242
    18d6:	11 96       	adiw	r26, 0x01	; 1
    18d8:	0d 90       	ld	r0, X+
    18da:	bc 91       	ld	r27, X
    18dc:	a0 2d       	mov	r26, r0
    18de:	b7 83       	std	Z+7, r27	; 0x07
    18e0:	a6 83       	std	Z+6, r26	; 0x06
    18e2:	16 96       	adiw	r26, 0x06	; 6
    18e4:	4d 91       	ld	r20, X+
    18e6:	5c 91       	ld	r21, X
    18e8:	17 97       	sbiw	r26, 0x07	; 7
    18ea:	51 87       	std	Z+9, r21	; 0x09
    18ec:	40 87       	std	Z+8, r20	; 0x08
    18ee:	16 96       	adiw	r26, 0x06	; 6
    18f0:	cd 91       	ld	r28, X+
    18f2:	dc 91       	ld	r29, X
    18f4:	17 97       	sbiw	r26, 0x07	; 7
    18f6:	3d 83       	std	Y+5, r19	; 0x05
    18f8:	2c 83       	std	Y+4, r18	; 0x04
    18fa:	17 96       	adiw	r26, 0x07	; 7
    18fc:	3c 93       	st	X, r19
    18fe:	2e 93       	st	-X, r18
    1900:	16 97       	sbiw	r26, 0x06	; 6
    1902:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1904:	8a 9f       	mul	r24, r26
    1906:	d0 01       	movw	r26, r0
    1908:	11 24       	eor	r1, r1
    190a:	af 5e       	subi	r26, 0xEF	; 239
    190c:	b2 4f       	sbci	r27, 0xF2	; 242
    190e:	b5 87       	std	Z+13, r27	; 0x0d
    1910:	a4 87       	std	Z+12, r26	; 0x0c
    1912:	8c 91       	ld	r24, X
    1914:	8f 5f       	subi	r24, 0xFF	; 255
    1916:	8c 93       	st	X, r24
    1918:	92 8d       	ldd	r25, Z+26	; 0x1a
    191a:	a0 91 7f 0d 	lds	r26, 0x0D7F	; 0x800d7f <pxCurrentTCB>
    191e:	b0 91 80 0d 	lds	r27, 0x0D80	; 0x800d80 <pxCurrentTCB+0x1>
    1922:	5a 96       	adiw	r26, 0x1a	; 26
    1924:	8c 91       	ld	r24, X
    1926:	98 17       	cp	r25, r24
    1928:	30 f0       	brcs	.+12     	; 0x1936 <xTaskResumeAll+0x140>
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	80 93 c9 0c 	sts	0x0CC9, r24	; 0x800cc9 <xYieldPending>
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <xTaskResumeAll+0x140>
    1932:	e0 e0       	ldi	r30, 0x00	; 0
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	80 91 ec 0c 	lds	r24, 0x0CEC	; 0x800cec <xPendingReadyList>
    193a:	81 11       	cpse	r24, r1
    193c:	73 cf       	rjmp	.-282    	; 0x1824 <xTaskResumeAll+0x2e>
    193e:	ef 2b       	or	r30, r31
    1940:	09 f0       	breq	.+2      	; 0x1944 <xTaskResumeAll+0x14e>
    1942:	90 db       	rcall	.-2272   	; 0x1064 <prvResetNextTaskUnblockTime>
    1944:	c0 90 ca 0c 	lds	r12, 0x0CCA	; 0x800cca <xPendedTicks>
    1948:	d0 90 cb 0c 	lds	r13, 0x0CCB	; 0x800ccb <xPendedTicks+0x1>
    194c:	e0 90 cc 0c 	lds	r14, 0x0CCC	; 0x800ccc <xPendedTicks+0x2>
    1950:	f0 90 cd 0c 	lds	r15, 0x0CCD	; 0x800ccd <xPendedTicks+0x3>
    1954:	c1 14       	cp	r12, r1
    1956:	d1 04       	cpc	r13, r1
    1958:	e1 04       	cpc	r14, r1
    195a:	f1 04       	cpc	r15, r1
    195c:	a1 f0       	breq	.+40     	; 0x1986 <xTaskResumeAll+0x190>
    195e:	1f de       	rcall	.-962    	; 0x159e <xTaskIncrementTick>
    1960:	88 23       	and	r24, r24
    1962:	19 f0       	breq	.+6      	; 0x196a <xTaskResumeAll+0x174>
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	80 93 c9 0c 	sts	0x0CC9, r24	; 0x800cc9 <xYieldPending>
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	c8 1a       	sub	r12, r24
    196e:	d1 08       	sbc	r13, r1
    1970:	e1 08       	sbc	r14, r1
    1972:	f1 08       	sbc	r15, r1
    1974:	a1 f7       	brne	.-24     	; 0x195e <xTaskResumeAll+0x168>
    1976:	10 92 ca 0c 	sts	0x0CCA, r1	; 0x800cca <xPendedTicks>
    197a:	10 92 cb 0c 	sts	0x0CCB, r1	; 0x800ccb <xPendedTicks+0x1>
    197e:	10 92 cc 0c 	sts	0x0CCC, r1	; 0x800ccc <xPendedTicks+0x2>
    1982:	10 92 cd 0c 	sts	0x0CCD, r1	; 0x800ccd <xPendedTicks+0x3>
    1986:	80 91 c9 0c 	lds	r24, 0x0CC9	; 0x800cc9 <xYieldPending>
    198a:	88 23       	and	r24, r24
    198c:	31 f0       	breq	.+12     	; 0x199a <xTaskResumeAll+0x1a4>
    198e:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <vPortYield>
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	03 c0       	rjmp	.+6      	; 0x199c <xTaskResumeAll+0x1a6>
    1996:	80 e0       	ldi	r24, 0x00	; 0
    1998:	01 c0       	rjmp	.+2      	; 0x199c <xTaskResumeAll+0x1a6>
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	0f 90       	pop	r0
    199e:	0f be       	out	0x3f, r0	; 63
    19a0:	df 91       	pop	r29
    19a2:	cf 91       	pop	r28
    19a4:	ff 90       	pop	r15
    19a6:	ef 90       	pop	r14
    19a8:	df 90       	pop	r13
    19aa:	cf 90       	pop	r12
    19ac:	08 95       	ret

000019ae <vTaskDelay>:
    19ae:	cf 92       	push	r12
    19b0:	df 92       	push	r13
    19b2:	ef 92       	push	r14
    19b4:	ff 92       	push	r15
    19b6:	6b 01       	movw	r12, r22
    19b8:	7c 01       	movw	r14, r24
    19ba:	67 2b       	or	r22, r23
    19bc:	68 2b       	or	r22, r24
    19be:	69 2b       	or	r22, r25
    19c0:	39 f0       	breq	.+14     	; 0x19d0 <vTaskDelay+0x22>
    19c2:	d9 dd       	rcall	.-1102   	; 0x1576 <vTaskSuspendAll>
    19c4:	40 e0       	ldi	r20, 0x00	; 0
    19c6:	c7 01       	movw	r24, r14
    19c8:	b6 01       	movw	r22, r12
    19ca:	b5 dc       	rcall	.-1686   	; 0x1336 <prvAddCurrentTaskToDelayedList>
    19cc:	14 df       	rcall	.-472    	; 0x17f6 <xTaskResumeAll>
    19ce:	01 c0       	rjmp	.+2      	; 0x19d2 <vTaskDelay+0x24>
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	81 11       	cpse	r24, r1
    19d4:	02 c0       	rjmp	.+4      	; 0x19da <vTaskDelay+0x2c>
    19d6:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <vPortYield>
    19da:	ff 90       	pop	r15
    19dc:	ef 90       	pop	r14
    19de:	df 90       	pop	r13
    19e0:	cf 90       	pop	r12
    19e2:	08 95       	ret

000019e4 <vTaskSwitchContext>:
    19e4:	80 91 c0 0c 	lds	r24, 0x0CC0	; 0x800cc0 <uxSchedulerSuspended>
    19e8:	88 23       	and	r24, r24
    19ea:	21 f0       	breq	.+8      	; 0x19f4 <vTaskSwitchContext+0x10>
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	80 93 c9 0c 	sts	0x0CC9, r24	; 0x800cc9 <xYieldPending>
    19f2:	08 95       	ret
    19f4:	10 92 c9 0c 	sts	0x0CC9, r1	; 0x800cc9 <xYieldPending>
    19f8:	e0 91 7f 0d 	lds	r30, 0x0D7F	; 0x800d7f <pxCurrentTCB>
    19fc:	f0 91 80 0d 	lds	r31, 0x0D80	; 0x800d80 <pxCurrentTCB+0x1>
    1a00:	20 81       	ld	r18, Z
    1a02:	31 81       	ldd	r19, Z+1	; 0x01
    1a04:	e0 91 7f 0d 	lds	r30, 0x0D7F	; 0x800d7f <pxCurrentTCB>
    1a08:	f0 91 80 0d 	lds	r31, 0x0D80	; 0x800d80 <pxCurrentTCB+0x1>
    1a0c:	83 8d       	ldd	r24, Z+27	; 0x1b
    1a0e:	94 8d       	ldd	r25, Z+28	; 0x1c
    1a10:	82 17       	cp	r24, r18
    1a12:	93 07       	cpc	r25, r19
    1a14:	58 f0       	brcs	.+22     	; 0x1a2c <vTaskSwitchContext+0x48>
    1a16:	60 91 7f 0d 	lds	r22, 0x0D7F	; 0x800d7f <pxCurrentTCB>
    1a1a:	70 91 80 0d 	lds	r23, 0x0D80	; 0x800d80 <pxCurrentTCB+0x1>
    1a1e:	63 5e       	subi	r22, 0xE3	; 227
    1a20:	7f 4f       	sbci	r23, 0xFF	; 255
    1a22:	80 91 7f 0d 	lds	r24, 0x0D7F	; 0x800d7f <pxCurrentTCB>
    1a26:	90 91 80 0d 	lds	r25, 0x0D80	; 0x800d80 <pxCurrentTCB+0x1>
    1a2a:	3e d6       	rcall	.+3196   	; 0x26a8 <vApplicationStackOverflowHook>
    1a2c:	80 91 cf 0c 	lds	r24, 0x0CCF	; 0x800ccf <uxTopReadyPriority>
    1a30:	01 c0       	rjmp	.+2      	; 0x1a34 <vTaskSwitchContext+0x50>
    1a32:	81 50       	subi	r24, 0x01	; 1
    1a34:	28 2f       	mov	r18, r24
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	9b e0       	ldi	r25, 0x0B	; 11
    1a3a:	92 9f       	mul	r25, r18
    1a3c:	f0 01       	movw	r30, r0
    1a3e:	93 9f       	mul	r25, r19
    1a40:	f0 0d       	add	r31, r0
    1a42:	11 24       	eor	r1, r1
    1a44:	ef 5e       	subi	r30, 0xEF	; 239
    1a46:	f2 4f       	sbci	r31, 0xF2	; 242
    1a48:	90 81       	ld	r25, Z
    1a4a:	99 23       	and	r25, r25
    1a4c:	91 f3       	breq	.-28     	; 0x1a32 <vTaskSwitchContext+0x4e>
    1a4e:	9b e0       	ldi	r25, 0x0B	; 11
    1a50:	92 9f       	mul	r25, r18
    1a52:	a0 01       	movw	r20, r0
    1a54:	93 9f       	mul	r25, r19
    1a56:	50 0d       	add	r21, r0
    1a58:	11 24       	eor	r1, r1
    1a5a:	df 01       	movw	r26, r30
    1a5c:	01 80       	ldd	r0, Z+1	; 0x01
    1a5e:	f2 81       	ldd	r31, Z+2	; 0x02
    1a60:	e0 2d       	mov	r30, r0
    1a62:	04 80       	ldd	r0, Z+4	; 0x04
    1a64:	f5 81       	ldd	r31, Z+5	; 0x05
    1a66:	e0 2d       	mov	r30, r0
    1a68:	12 96       	adiw	r26, 0x02	; 2
    1a6a:	fc 93       	st	X, r31
    1a6c:	ee 93       	st	-X, r30
    1a6e:	11 97       	sbiw	r26, 0x01	; 1
    1a70:	4c 5e       	subi	r20, 0xEC	; 236
    1a72:	52 4f       	sbci	r21, 0xF2	; 242
    1a74:	e4 17       	cp	r30, r20
    1a76:	f5 07       	cpc	r31, r21
    1a78:	29 f4       	brne	.+10     	; 0x1a84 <vTaskSwitchContext+0xa0>
    1a7a:	44 81       	ldd	r20, Z+4	; 0x04
    1a7c:	55 81       	ldd	r21, Z+5	; 0x05
    1a7e:	fd 01       	movw	r30, r26
    1a80:	52 83       	std	Z+2, r21	; 0x02
    1a82:	41 83       	std	Z+1, r20	; 0x01
    1a84:	9b e0       	ldi	r25, 0x0B	; 11
    1a86:	92 9f       	mul	r25, r18
    1a88:	f0 01       	movw	r30, r0
    1a8a:	93 9f       	mul	r25, r19
    1a8c:	f0 0d       	add	r31, r0
    1a8e:	11 24       	eor	r1, r1
    1a90:	ef 5e       	subi	r30, 0xEF	; 239
    1a92:	f2 4f       	sbci	r31, 0xF2	; 242
    1a94:	01 80       	ldd	r0, Z+1	; 0x01
    1a96:	f2 81       	ldd	r31, Z+2	; 0x02
    1a98:	e0 2d       	mov	r30, r0
    1a9a:	20 85       	ldd	r18, Z+8	; 0x08
    1a9c:	31 85       	ldd	r19, Z+9	; 0x09
    1a9e:	30 93 80 0d 	sts	0x0D80, r19	; 0x800d80 <pxCurrentTCB+0x1>
    1aa2:	20 93 7f 0d 	sts	0x0D7F, r18	; 0x800d7f <pxCurrentTCB>
    1aa6:	80 93 cf 0c 	sts	0x0CCF, r24	; 0x800ccf <uxTopReadyPriority>
    1aaa:	08 95       	ret

00001aac <vTaskPlaceOnEventList>:
    1aac:	cf 92       	push	r12
    1aae:	df 92       	push	r13
    1ab0:	ef 92       	push	r14
    1ab2:	ff 92       	push	r15
    1ab4:	6a 01       	movw	r12, r20
    1ab6:	7b 01       	movw	r14, r22
    1ab8:	60 91 7f 0d 	lds	r22, 0x0D7F	; 0x800d7f <pxCurrentTCB>
    1abc:	70 91 80 0d 	lds	r23, 0x0D80	; 0x800d80 <pxCurrentTCB+0x1>
    1ac0:	62 5f       	subi	r22, 0xF2	; 242
    1ac2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac4:	0e 94 42 03 	call	0x684	; 0x684 <vListInsert>
    1ac8:	41 e0       	ldi	r20, 0x01	; 1
    1aca:	c7 01       	movw	r24, r14
    1acc:	b6 01       	movw	r22, r12
    1ace:	33 dc       	rcall	.-1946   	; 0x1336 <prvAddCurrentTaskToDelayedList>
    1ad0:	ff 90       	pop	r15
    1ad2:	ef 90       	pop	r14
    1ad4:	df 90       	pop	r13
    1ad6:	cf 90       	pop	r12
    1ad8:	08 95       	ret

00001ada <vTaskPlaceOnEventListRestricted>:
    1ada:	cf 93       	push	r28
    1adc:	df 93       	push	r29
    1ade:	fc 01       	movw	r30, r24
    1ae0:	cb 01       	movw	r24, r22
    1ae2:	ba 01       	movw	r22, r20
    1ae4:	a1 81       	ldd	r26, Z+1	; 0x01
    1ae6:	b2 81       	ldd	r27, Z+2	; 0x02
    1ae8:	c0 91 7f 0d 	lds	r28, 0x0D7F	; 0x800d7f <pxCurrentTCB>
    1aec:	d0 91 80 0d 	lds	r29, 0x0D80	; 0x800d80 <pxCurrentTCB+0x1>
    1af0:	bb 8b       	std	Y+19, r27	; 0x13
    1af2:	aa 8b       	std	Y+18, r26	; 0x12
    1af4:	c0 91 7f 0d 	lds	r28, 0x0D7F	; 0x800d7f <pxCurrentTCB>
    1af8:	d0 91 80 0d 	lds	r29, 0x0D80	; 0x800d80 <pxCurrentTCB+0x1>
    1afc:	16 96       	adiw	r26, 0x06	; 6
    1afe:	4d 91       	ld	r20, X+
    1b00:	5c 91       	ld	r21, X
    1b02:	17 97       	sbiw	r26, 0x07	; 7
    1b04:	5d 8b       	std	Y+21, r21	; 0x15
    1b06:	4c 8b       	std	Y+20, r20	; 0x14
    1b08:	16 96       	adiw	r26, 0x06	; 6
    1b0a:	cd 91       	ld	r28, X+
    1b0c:	dc 91       	ld	r29, X
    1b0e:	17 97       	sbiw	r26, 0x07	; 7
    1b10:	40 91 7f 0d 	lds	r20, 0x0D7F	; 0x800d7f <pxCurrentTCB>
    1b14:	50 91 80 0d 	lds	r21, 0x0D80	; 0x800d80 <pxCurrentTCB+0x1>
    1b18:	42 5f       	subi	r20, 0xF2	; 242
    1b1a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b1c:	5d 83       	std	Y+5, r21	; 0x05
    1b1e:	4c 83       	std	Y+4, r20	; 0x04
    1b20:	40 91 7f 0d 	lds	r20, 0x0D7F	; 0x800d7f <pxCurrentTCB>
    1b24:	50 91 80 0d 	lds	r21, 0x0D80	; 0x800d80 <pxCurrentTCB+0x1>
    1b28:	42 5f       	subi	r20, 0xF2	; 242
    1b2a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b2c:	17 96       	adiw	r26, 0x07	; 7
    1b2e:	5c 93       	st	X, r21
    1b30:	4e 93       	st	-X, r20
    1b32:	16 97       	sbiw	r26, 0x06	; 6
    1b34:	a0 91 7f 0d 	lds	r26, 0x0D7F	; 0x800d7f <pxCurrentTCB>
    1b38:	b0 91 80 0d 	lds	r27, 0x0D80	; 0x800d80 <pxCurrentTCB+0x1>
    1b3c:	59 96       	adiw	r26, 0x19	; 25
    1b3e:	fc 93       	st	X, r31
    1b40:	ee 93       	st	-X, r30
    1b42:	58 97       	sbiw	r26, 0x18	; 24
    1b44:	30 81       	ld	r19, Z
    1b46:	3f 5f       	subi	r19, 0xFF	; 255
    1b48:	30 83       	st	Z, r19
    1b4a:	22 23       	and	r18, r18
    1b4c:	19 f0       	breq	.+6      	; 0x1b54 <vTaskPlaceOnEventListRestricted+0x7a>
    1b4e:	6f ef       	ldi	r22, 0xFF	; 255
    1b50:	7f ef       	ldi	r23, 0xFF	; 255
    1b52:	cb 01       	movw	r24, r22
    1b54:	42 2f       	mov	r20, r18
    1b56:	ef db       	rcall	.-2082   	; 0x1336 <prvAddCurrentTaskToDelayedList>
    1b58:	df 91       	pop	r29
    1b5a:	cf 91       	pop	r28
    1b5c:	08 95       	ret

00001b5e <xTaskRemoveFromEventList>:
    1b5e:	cf 93       	push	r28
    1b60:	df 93       	push	r29
    1b62:	dc 01       	movw	r26, r24
    1b64:	17 96       	adiw	r26, 0x07	; 7
    1b66:	ed 91       	ld	r30, X+
    1b68:	fc 91       	ld	r31, X
    1b6a:	18 97       	sbiw	r26, 0x08	; 8
    1b6c:	00 84       	ldd	r0, Z+8	; 0x08
    1b6e:	f1 85       	ldd	r31, Z+9	; 0x09
    1b70:	e0 2d       	mov	r30, r0
    1b72:	a0 8d       	ldd	r26, Z+24	; 0x18
    1b74:	b1 8d       	ldd	r27, Z+25	; 0x19
    1b76:	c2 89       	ldd	r28, Z+18	; 0x12
    1b78:	d3 89       	ldd	r29, Z+19	; 0x13
    1b7a:	84 89       	ldd	r24, Z+20	; 0x14
    1b7c:	95 89       	ldd	r25, Z+21	; 0x15
    1b7e:	9f 83       	std	Y+7, r25	; 0x07
    1b80:	8e 83       	std	Y+6, r24	; 0x06
    1b82:	c4 89       	ldd	r28, Z+20	; 0x14
    1b84:	d5 89       	ldd	r29, Z+21	; 0x15
    1b86:	82 89       	ldd	r24, Z+18	; 0x12
    1b88:	93 89       	ldd	r25, Z+19	; 0x13
    1b8a:	9d 83       	std	Y+5, r25	; 0x05
    1b8c:	8c 83       	std	Y+4, r24	; 0x04
    1b8e:	11 96       	adiw	r26, 0x01	; 1
    1b90:	8d 91       	ld	r24, X+
    1b92:	9c 91       	ld	r25, X
    1b94:	12 97       	sbiw	r26, 0x02	; 2
    1b96:	9f 01       	movw	r18, r30
    1b98:	22 5f       	subi	r18, 0xF2	; 242
    1b9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b9c:	82 17       	cp	r24, r18
    1b9e:	93 07       	cpc	r25, r19
    1ba0:	31 f4       	brne	.+12     	; 0x1bae <xTaskRemoveFromEventList+0x50>
    1ba2:	84 89       	ldd	r24, Z+20	; 0x14
    1ba4:	95 89       	ldd	r25, Z+21	; 0x15
    1ba6:	12 96       	adiw	r26, 0x02	; 2
    1ba8:	9c 93       	st	X, r25
    1baa:	8e 93       	st	-X, r24
    1bac:	11 97       	sbiw	r26, 0x01	; 1
    1bae:	11 8e       	std	Z+25, r1	; 0x19
    1bb0:	10 8e       	std	Z+24, r1	; 0x18
    1bb2:	8c 91       	ld	r24, X
    1bb4:	81 50       	subi	r24, 0x01	; 1
    1bb6:	8c 93       	st	X, r24
    1bb8:	80 91 c0 0c 	lds	r24, 0x0CC0	; 0x800cc0 <uxSchedulerSuspended>
    1bbc:	81 11       	cpse	r24, r1
    1bbe:	52 c0       	rjmp	.+164    	; 0x1c64 <xTaskRemoveFromEventList+0x106>
    1bc0:	a4 85       	ldd	r26, Z+12	; 0x0c
    1bc2:	b5 85       	ldd	r27, Z+13	; 0x0d
    1bc4:	c6 81       	ldd	r28, Z+6	; 0x06
    1bc6:	d7 81       	ldd	r29, Z+7	; 0x07
    1bc8:	80 85       	ldd	r24, Z+8	; 0x08
    1bca:	91 85       	ldd	r25, Z+9	; 0x09
    1bcc:	9f 83       	std	Y+7, r25	; 0x07
    1bce:	8e 83       	std	Y+6, r24	; 0x06
    1bd0:	c0 85       	ldd	r28, Z+8	; 0x08
    1bd2:	d1 85       	ldd	r29, Z+9	; 0x09
    1bd4:	86 81       	ldd	r24, Z+6	; 0x06
    1bd6:	97 81       	ldd	r25, Z+7	; 0x07
    1bd8:	9d 83       	std	Y+5, r25	; 0x05
    1bda:	8c 83       	std	Y+4, r24	; 0x04
    1bdc:	11 96       	adiw	r26, 0x01	; 1
    1bde:	8d 91       	ld	r24, X+
    1be0:	9c 91       	ld	r25, X
    1be2:	12 97       	sbiw	r26, 0x02	; 2
    1be4:	9f 01       	movw	r18, r30
    1be6:	2e 5f       	subi	r18, 0xFE	; 254
    1be8:	3f 4f       	sbci	r19, 0xFF	; 255
    1bea:	82 17       	cp	r24, r18
    1bec:	93 07       	cpc	r25, r19
    1bee:	31 f4       	brne	.+12     	; 0x1bfc <xTaskRemoveFromEventList+0x9e>
    1bf0:	80 85       	ldd	r24, Z+8	; 0x08
    1bf2:	91 85       	ldd	r25, Z+9	; 0x09
    1bf4:	12 96       	adiw	r26, 0x02	; 2
    1bf6:	9c 93       	st	X, r25
    1bf8:	8e 93       	st	-X, r24
    1bfa:	11 97       	sbiw	r26, 0x01	; 1
    1bfc:	15 86       	std	Z+13, r1	; 0x0d
    1bfe:	14 86       	std	Z+12, r1	; 0x0c
    1c00:	8c 91       	ld	r24, X
    1c02:	81 50       	subi	r24, 0x01	; 1
    1c04:	8c 93       	st	X, r24
    1c06:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1c08:	80 91 cf 0c 	lds	r24, 0x0CCF	; 0x800ccf <uxTopReadyPriority>
    1c0c:	8a 17       	cp	r24, r26
    1c0e:	10 f4       	brcc	.+4      	; 0x1c14 <xTaskRemoveFromEventList+0xb6>
    1c10:	a0 93 cf 0c 	sts	0x0CCF, r26	; 0x800ccf <uxTopReadyPriority>
    1c14:	8b e0       	ldi	r24, 0x0B	; 11
    1c16:	8a 9f       	mul	r24, r26
    1c18:	d0 01       	movw	r26, r0
    1c1a:	11 24       	eor	r1, r1
    1c1c:	af 5e       	subi	r26, 0xEF	; 239
    1c1e:	b2 4f       	sbci	r27, 0xF2	; 242
    1c20:	11 96       	adiw	r26, 0x01	; 1
    1c22:	0d 90       	ld	r0, X+
    1c24:	bc 91       	ld	r27, X
    1c26:	a0 2d       	mov	r26, r0
    1c28:	b7 83       	std	Z+7, r27	; 0x07
    1c2a:	a6 83       	std	Z+6, r26	; 0x06
    1c2c:	16 96       	adiw	r26, 0x06	; 6
    1c2e:	4d 91       	ld	r20, X+
    1c30:	5c 91       	ld	r21, X
    1c32:	17 97       	sbiw	r26, 0x07	; 7
    1c34:	51 87       	std	Z+9, r21	; 0x09
    1c36:	40 87       	std	Z+8, r20	; 0x08
    1c38:	16 96       	adiw	r26, 0x06	; 6
    1c3a:	cd 91       	ld	r28, X+
    1c3c:	dc 91       	ld	r29, X
    1c3e:	17 97       	sbiw	r26, 0x07	; 7
    1c40:	3d 83       	std	Y+5, r19	; 0x05
    1c42:	2c 83       	std	Y+4, r18	; 0x04
    1c44:	17 96       	adiw	r26, 0x07	; 7
    1c46:	3c 93       	st	X, r19
    1c48:	2e 93       	st	-X, r18
    1c4a:	16 97       	sbiw	r26, 0x06	; 6
    1c4c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1c4e:	8a 9f       	mul	r24, r26
    1c50:	d0 01       	movw	r26, r0
    1c52:	11 24       	eor	r1, r1
    1c54:	af 5e       	subi	r26, 0xEF	; 239
    1c56:	b2 4f       	sbci	r27, 0xF2	; 242
    1c58:	b5 87       	std	Z+13, r27	; 0x0d
    1c5a:	a4 87       	std	Z+12, r26	; 0x0c
    1c5c:	8c 91       	ld	r24, X
    1c5e:	8f 5f       	subi	r24, 0xFF	; 255
    1c60:	8c 93       	st	X, r24
    1c62:	1c c0       	rjmp	.+56     	; 0x1c9c <xTaskRemoveFromEventList+0x13e>
    1c64:	4c ee       	ldi	r20, 0xEC	; 236
    1c66:	5c e0       	ldi	r21, 0x0C	; 12
    1c68:	da 01       	movw	r26, r20
    1c6a:	11 96       	adiw	r26, 0x01	; 1
    1c6c:	cd 91       	ld	r28, X+
    1c6e:	dc 91       	ld	r29, X
    1c70:	12 97       	sbiw	r26, 0x02	; 2
    1c72:	d3 8b       	std	Z+19, r29	; 0x13
    1c74:	c2 8b       	std	Z+18, r28	; 0x12
    1c76:	8e 81       	ldd	r24, Y+6	; 0x06
    1c78:	9f 81       	ldd	r25, Y+7	; 0x07
    1c7a:	95 8b       	std	Z+21, r25	; 0x15
    1c7c:	84 8b       	std	Z+20, r24	; 0x14
    1c7e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c80:	9f 81       	ldd	r25, Y+7	; 0x07
    1c82:	dc 01       	movw	r26, r24
    1c84:	15 96       	adiw	r26, 0x05	; 5
    1c86:	3c 93       	st	X, r19
    1c88:	2e 93       	st	-X, r18
    1c8a:	14 97       	sbiw	r26, 0x04	; 4
    1c8c:	3f 83       	std	Y+7, r19	; 0x07
    1c8e:	2e 83       	std	Y+6, r18	; 0x06
    1c90:	51 8f       	std	Z+25, r21	; 0x19
    1c92:	40 8f       	std	Z+24, r20	; 0x18
    1c94:	da 01       	movw	r26, r20
    1c96:	8c 91       	ld	r24, X
    1c98:	8f 5f       	subi	r24, 0xFF	; 255
    1c9a:	8c 93       	st	X, r24
    1c9c:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c9e:	e0 91 7f 0d 	lds	r30, 0x0D7F	; 0x800d7f <pxCurrentTCB>
    1ca2:	f0 91 80 0d 	lds	r31, 0x0D80	; 0x800d80 <pxCurrentTCB+0x1>
    1ca6:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ca8:	89 17       	cp	r24, r25
    1caa:	20 f4       	brcc	.+8      	; 0x1cb4 <xTaskRemoveFromEventList+0x156>
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	80 93 c9 0c 	sts	0x0CC9, r24	; 0x800cc9 <xYieldPending>
    1cb2:	01 c0       	rjmp	.+2      	; 0x1cb6 <xTaskRemoveFromEventList+0x158>
    1cb4:	80 e0       	ldi	r24, 0x00	; 0
    1cb6:	df 91       	pop	r29
    1cb8:	cf 91       	pop	r28
    1cba:	08 95       	ret

00001cbc <vTaskInternalSetTimeOutState>:
    1cbc:	20 91 c8 0c 	lds	r18, 0x0CC8	; 0x800cc8 <xNumOfOverflows>
    1cc0:	fc 01       	movw	r30, r24
    1cc2:	20 83       	st	Z, r18
    1cc4:	40 91 d0 0c 	lds	r20, 0x0CD0	; 0x800cd0 <xTickCount>
    1cc8:	50 91 d1 0c 	lds	r21, 0x0CD1	; 0x800cd1 <xTickCount+0x1>
    1ccc:	60 91 d2 0c 	lds	r22, 0x0CD2	; 0x800cd2 <xTickCount+0x2>
    1cd0:	70 91 d3 0c 	lds	r23, 0x0CD3	; 0x800cd3 <xTickCount+0x3>
    1cd4:	41 83       	std	Z+1, r20	; 0x01
    1cd6:	52 83       	std	Z+2, r21	; 0x02
    1cd8:	63 83       	std	Z+3, r22	; 0x03
    1cda:	74 83       	std	Z+4, r23	; 0x04
    1cdc:	08 95       	ret

00001cde <xTaskCheckForTimeOut>:
    1cde:	8f 92       	push	r8
    1ce0:	9f 92       	push	r9
    1ce2:	af 92       	push	r10
    1ce4:	bf 92       	push	r11
    1ce6:	cf 92       	push	r12
    1ce8:	df 92       	push	r13
    1cea:	ef 92       	push	r14
    1cec:	ff 92       	push	r15
    1cee:	0f 93       	push	r16
    1cf0:	1f 93       	push	r17
    1cf2:	cf 93       	push	r28
    1cf4:	df 93       	push	r29
    1cf6:	fb 01       	movw	r30, r22
    1cf8:	0f b6       	in	r0, 0x3f	; 63
    1cfa:	f8 94       	cli
    1cfc:	0f 92       	push	r0
    1cfe:	c0 90 d0 0c 	lds	r12, 0x0CD0	; 0x800cd0 <xTickCount>
    1d02:	d0 90 d1 0c 	lds	r13, 0x0CD1	; 0x800cd1 <xTickCount+0x1>
    1d06:	e0 90 d2 0c 	lds	r14, 0x0CD2	; 0x800cd2 <xTickCount+0x2>
    1d0a:	f0 90 d3 0c 	lds	r15, 0x0CD3	; 0x800cd3 <xTickCount+0x3>
    1d0e:	dc 01       	movw	r26, r24
    1d10:	11 96       	adiw	r26, 0x01	; 1
    1d12:	0d 91       	ld	r16, X+
    1d14:	1d 91       	ld	r17, X+
    1d16:	2d 91       	ld	r18, X+
    1d18:	3c 91       	ld	r19, X
    1d1a:	14 97       	sbiw	r26, 0x04	; 4
    1d1c:	46 01       	movw	r8, r12
    1d1e:	57 01       	movw	r10, r14
    1d20:	80 1a       	sub	r8, r16
    1d22:	91 0a       	sbc	r9, r17
    1d24:	a2 0a       	sbc	r10, r18
    1d26:	b3 0a       	sbc	r11, r19
    1d28:	40 81       	ld	r20, Z
    1d2a:	51 81       	ldd	r21, Z+1	; 0x01
    1d2c:	62 81       	ldd	r22, Z+2	; 0x02
    1d2e:	73 81       	ldd	r23, Z+3	; 0x03
    1d30:	4f 3f       	cpi	r20, 0xFF	; 255
    1d32:	bf ef       	ldi	r27, 0xFF	; 255
    1d34:	5b 07       	cpc	r21, r27
    1d36:	6b 07       	cpc	r22, r27
    1d38:	7b 07       	cpc	r23, r27
    1d3a:	39 f1       	breq	.+78     	; 0x1d8a <xTaskCheckForTimeOut+0xac>
    1d3c:	ec 01       	movw	r28, r24
    1d3e:	b8 81       	ld	r27, Y
    1d40:	a0 91 c8 0c 	lds	r26, 0x0CC8	; 0x800cc8 <xNumOfOverflows>
    1d44:	ba 17       	cp	r27, r26
    1d46:	59 f0       	breq	.+22     	; 0x1d5e <xTaskCheckForTimeOut+0x80>
    1d48:	c0 16       	cp	r12, r16
    1d4a:	d1 06       	cpc	r13, r17
    1d4c:	e2 06       	cpc	r14, r18
    1d4e:	f3 06       	cpc	r15, r19
    1d50:	30 f0       	brcs	.+12     	; 0x1d5e <xTaskCheckForTimeOut+0x80>
    1d52:	10 82       	st	Z, r1
    1d54:	11 82       	std	Z+1, r1	; 0x01
    1d56:	12 82       	std	Z+2, r1	; 0x02
    1d58:	13 82       	std	Z+3, r1	; 0x03
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	17 c0       	rjmp	.+46     	; 0x1d8c <xTaskCheckForTimeOut+0xae>
    1d5e:	84 16       	cp	r8, r20
    1d60:	95 06       	cpc	r9, r21
    1d62:	a6 06       	cpc	r10, r22
    1d64:	b7 06       	cpc	r11, r23
    1d66:	58 f4       	brcc	.+22     	; 0x1d7e <xTaskCheckForTimeOut+0xa0>
    1d68:	48 19       	sub	r20, r8
    1d6a:	59 09       	sbc	r21, r9
    1d6c:	6a 09       	sbc	r22, r10
    1d6e:	7b 09       	sbc	r23, r11
    1d70:	40 83       	st	Z, r20
    1d72:	51 83       	std	Z+1, r21	; 0x01
    1d74:	62 83       	std	Z+2, r22	; 0x02
    1d76:	73 83       	std	Z+3, r23	; 0x03
    1d78:	a1 df       	rcall	.-190    	; 0x1cbc <vTaskInternalSetTimeOutState>
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	07 c0       	rjmp	.+14     	; 0x1d8c <xTaskCheckForTimeOut+0xae>
    1d7e:	10 82       	st	Z, r1
    1d80:	11 82       	std	Z+1, r1	; 0x01
    1d82:	12 82       	std	Z+2, r1	; 0x02
    1d84:	13 82       	std	Z+3, r1	; 0x03
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	01 c0       	rjmp	.+2      	; 0x1d8c <xTaskCheckForTimeOut+0xae>
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
    1d8c:	0f 90       	pop	r0
    1d8e:	0f be       	out	0x3f, r0	; 63
    1d90:	df 91       	pop	r29
    1d92:	cf 91       	pop	r28
    1d94:	1f 91       	pop	r17
    1d96:	0f 91       	pop	r16
    1d98:	ff 90       	pop	r15
    1d9a:	ef 90       	pop	r14
    1d9c:	df 90       	pop	r13
    1d9e:	cf 90       	pop	r12
    1da0:	bf 90       	pop	r11
    1da2:	af 90       	pop	r10
    1da4:	9f 90       	pop	r9
    1da6:	8f 90       	pop	r8
    1da8:	08 95       	ret

00001daa <vTaskMissedYield>:
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	80 93 c9 0c 	sts	0x0CC9, r24	; 0x800cc9 <xYieldPending>
    1db0:	08 95       	ret

00001db2 <xTaskGetSchedulerState>:
    1db2:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <xSchedulerRunning>
    1db6:	88 23       	and	r24, r24
    1db8:	31 f0       	breq	.+12     	; 0x1dc6 <xTaskGetSchedulerState+0x14>
    1dba:	80 91 c0 0c 	lds	r24, 0x0CC0	; 0x800cc0 <uxSchedulerSuspended>
    1dbe:	81 11       	cpse	r24, r1
    1dc0:	04 c0       	rjmp	.+8      	; 0x1dca <xTaskGetSchedulerState+0x18>
    1dc2:	82 e0       	ldi	r24, 0x02	; 2
    1dc4:	08 95       	ret
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	08 95       	ret
    1dca:	80 e0       	ldi	r24, 0x00	; 0
    1dcc:	08 95       	ret

00001dce <xTaskPriorityInherit>:
    1dce:	0f 93       	push	r16
    1dd0:	1f 93       	push	r17
    1dd2:	cf 93       	push	r28
    1dd4:	df 93       	push	r29
    1dd6:	fc 01       	movw	r30, r24
    1dd8:	89 2b       	or	r24, r25
    1dda:	09 f4       	brne	.+2      	; 0x1dde <xTaskPriorityInherit+0x10>
    1ddc:	77 c0       	rjmp	.+238    	; 0x1ecc <xTaskPriorityInherit+0xfe>
    1dde:	82 8d       	ldd	r24, Z+26	; 0x1a
    1de0:	a0 91 7f 0d 	lds	r26, 0x0D7F	; 0x800d7f <pxCurrentTCB>
    1de4:	b0 91 80 0d 	lds	r27, 0x0D80	; 0x800d80 <pxCurrentTCB+0x1>
    1de8:	5a 96       	adiw	r26, 0x1a	; 26
    1dea:	9c 91       	ld	r25, X
    1dec:	89 17       	cp	r24, r25
    1dee:	08 f0       	brcs	.+2      	; 0x1df2 <xTaskPriorityInherit+0x24>
    1df0:	63 c0       	rjmp	.+198    	; 0x1eb8 <xTaskPriorityInherit+0xea>
    1df2:	46 85       	ldd	r20, Z+14	; 0x0e
    1df4:	57 85       	ldd	r21, Z+15	; 0x0f
    1df6:	60 89       	ldd	r22, Z+16	; 0x10
    1df8:	71 89       	ldd	r23, Z+17	; 0x11
    1dfa:	77 23       	and	r23, r23
    1dfc:	94 f0       	brlt	.+36     	; 0x1e22 <xTaskPriorityInherit+0x54>
    1dfe:	a0 91 7f 0d 	lds	r26, 0x0D7F	; 0x800d7f <pxCurrentTCB>
    1e02:	b0 91 80 0d 	lds	r27, 0x0D80	; 0x800d80 <pxCurrentTCB+0x1>
    1e06:	5a 96       	adiw	r26, 0x1a	; 26
    1e08:	9c 91       	ld	r25, X
    1e0a:	4a e0       	ldi	r20, 0x0A	; 10
    1e0c:	50 e0       	ldi	r21, 0x00	; 0
    1e0e:	60 e0       	ldi	r22, 0x00	; 0
    1e10:	70 e0       	ldi	r23, 0x00	; 0
    1e12:	49 1b       	sub	r20, r25
    1e14:	51 09       	sbc	r21, r1
    1e16:	61 09       	sbc	r22, r1
    1e18:	71 09       	sbc	r23, r1
    1e1a:	46 87       	std	Z+14, r20	; 0x0e
    1e1c:	57 87       	std	Z+15, r21	; 0x0f
    1e1e:	60 8b       	std	Z+16, r22	; 0x10
    1e20:	71 8b       	std	Z+17, r23	; 0x11
    1e22:	24 85       	ldd	r18, Z+12	; 0x0c
    1e24:	35 85       	ldd	r19, Z+13	; 0x0d
    1e26:	4b e0       	ldi	r20, 0x0B	; 11
    1e28:	84 9f       	mul	r24, r20
    1e2a:	c0 01       	movw	r24, r0
    1e2c:	11 24       	eor	r1, r1
    1e2e:	8f 5e       	subi	r24, 0xEF	; 239
    1e30:	92 4f       	sbci	r25, 0xF2	; 242
    1e32:	28 17       	cp	r18, r24
    1e34:	39 07       	cpc	r19, r25
    1e36:	b9 f5       	brne	.+110    	; 0x1ea6 <xTaskPriorityInherit+0xd8>
    1e38:	ef 01       	movw	r28, r30
    1e3a:	8f 01       	movw	r16, r30
    1e3c:	0e 5f       	subi	r16, 0xFE	; 254
    1e3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e40:	c8 01       	movw	r24, r16
    1e42:	0e 94 7f 03 	call	0x6fe	; 0x6fe <uxListRemove>
    1e46:	e0 91 7f 0d 	lds	r30, 0x0D7F	; 0x800d7f <pxCurrentTCB>
    1e4a:	f0 91 80 0d 	lds	r31, 0x0D80	; 0x800d80 <pxCurrentTCB+0x1>
    1e4e:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1e50:	ea 8f       	std	Y+26, r30	; 0x1a
    1e52:	80 91 cf 0c 	lds	r24, 0x0CCF	; 0x800ccf <uxTopReadyPriority>
    1e56:	8e 17       	cp	r24, r30
    1e58:	10 f4       	brcc	.+4      	; 0x1e5e <xTaskPriorityInherit+0x90>
    1e5a:	e0 93 cf 0c 	sts	0x0CCF, r30	; 0x800ccf <uxTopReadyPriority>
    1e5e:	8b e0       	ldi	r24, 0x0B	; 11
    1e60:	8e 9f       	mul	r24, r30
    1e62:	f0 01       	movw	r30, r0
    1e64:	11 24       	eor	r1, r1
    1e66:	ef 5e       	subi	r30, 0xEF	; 239
    1e68:	f2 4f       	sbci	r31, 0xF2	; 242
    1e6a:	01 80       	ldd	r0, Z+1	; 0x01
    1e6c:	f2 81       	ldd	r31, Z+2	; 0x02
    1e6e:	e0 2d       	mov	r30, r0
    1e70:	ff 83       	std	Y+7, r31	; 0x07
    1e72:	ee 83       	std	Y+6, r30	; 0x06
    1e74:	26 81       	ldd	r18, Z+6	; 0x06
    1e76:	37 81       	ldd	r19, Z+7	; 0x07
    1e78:	39 87       	std	Y+9, r19	; 0x09
    1e7a:	28 87       	std	Y+8, r18	; 0x08
    1e7c:	a6 81       	ldd	r26, Z+6	; 0x06
    1e7e:	b7 81       	ldd	r27, Z+7	; 0x07
    1e80:	15 96       	adiw	r26, 0x05	; 5
    1e82:	1c 93       	st	X, r17
    1e84:	0e 93       	st	-X, r16
    1e86:	14 97       	sbiw	r26, 0x04	; 4
    1e88:	17 83       	std	Z+7, r17	; 0x07
    1e8a:	06 83       	std	Z+6, r16	; 0x06
    1e8c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1e8e:	8e 9f       	mul	r24, r30
    1e90:	f0 01       	movw	r30, r0
    1e92:	11 24       	eor	r1, r1
    1e94:	ef 5e       	subi	r30, 0xEF	; 239
    1e96:	f2 4f       	sbci	r31, 0xF2	; 242
    1e98:	fd 87       	std	Y+13, r31	; 0x0d
    1e9a:	ec 87       	std	Y+12, r30	; 0x0c
    1e9c:	80 81       	ld	r24, Z
    1e9e:	8f 5f       	subi	r24, 0xFF	; 255
    1ea0:	80 83       	st	Z, r24
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	16 c0       	rjmp	.+44     	; 0x1ed2 <xTaskPriorityInherit+0x104>
    1ea6:	a0 91 7f 0d 	lds	r26, 0x0D7F	; 0x800d7f <pxCurrentTCB>
    1eaa:	b0 91 80 0d 	lds	r27, 0x0D80	; 0x800d80 <pxCurrentTCB+0x1>
    1eae:	5a 96       	adiw	r26, 0x1a	; 26
    1eb0:	8c 91       	ld	r24, X
    1eb2:	82 8f       	std	Z+26, r24	; 0x1a
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	0d c0       	rjmp	.+26     	; 0x1ed2 <xTaskPriorityInherit+0x104>
    1eb8:	95 a5       	ldd	r25, Z+45	; 0x2d
    1eba:	e0 91 7f 0d 	lds	r30, 0x0D7F	; 0x800d7f <pxCurrentTCB>
    1ebe:	f0 91 80 0d 	lds	r31, 0x0D80	; 0x800d80 <pxCurrentTCB+0x1>
    1ec2:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ec4:	98 17       	cp	r25, r24
    1ec6:	20 f0       	brcs	.+8      	; 0x1ed0 <xTaskPriorityInherit+0x102>
    1ec8:	80 e0       	ldi	r24, 0x00	; 0
    1eca:	03 c0       	rjmp	.+6      	; 0x1ed2 <xTaskPriorityInherit+0x104>
    1ecc:	80 e0       	ldi	r24, 0x00	; 0
    1ece:	01 c0       	rjmp	.+2      	; 0x1ed2 <xTaskPriorityInherit+0x104>
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	df 91       	pop	r29
    1ed4:	cf 91       	pop	r28
    1ed6:	1f 91       	pop	r17
    1ed8:	0f 91       	pop	r16
    1eda:	08 95       	ret

00001edc <xTaskPriorityDisinherit>:
    1edc:	0f 93       	push	r16
    1ede:	1f 93       	push	r17
    1ee0:	cf 93       	push	r28
    1ee2:	df 93       	push	r29
    1ee4:	fc 01       	movw	r30, r24
    1ee6:	89 2b       	or	r24, r25
    1ee8:	09 f4       	brne	.+2      	; 0x1eec <xTaskPriorityDisinherit+0x10>
    1eea:	49 c0       	rjmp	.+146    	; 0x1f7e <xTaskPriorityDisinherit+0xa2>
    1eec:	86 a5       	ldd	r24, Z+46	; 0x2e
    1eee:	81 50       	subi	r24, 0x01	; 1
    1ef0:	86 a7       	std	Z+46, r24	; 0x2e
    1ef2:	22 8d       	ldd	r18, Z+26	; 0x1a
    1ef4:	95 a5       	ldd	r25, Z+45	; 0x2d
    1ef6:	29 17       	cp	r18, r25
    1ef8:	09 f4       	brne	.+2      	; 0x1efc <xTaskPriorityDisinherit+0x20>
    1efa:	43 c0       	rjmp	.+134    	; 0x1f82 <xTaskPriorityDisinherit+0xa6>
    1efc:	81 11       	cpse	r24, r1
    1efe:	43 c0       	rjmp	.+134    	; 0x1f86 <xTaskPriorityDisinherit+0xaa>
    1f00:	ef 01       	movw	r28, r30
    1f02:	8f 01       	movw	r16, r30
    1f04:	0e 5f       	subi	r16, 0xFE	; 254
    1f06:	1f 4f       	sbci	r17, 0xFF	; 255
    1f08:	c8 01       	movw	r24, r16
    1f0a:	0e 94 7f 03 	call	0x6fe	; 0x6fe <uxListRemove>
    1f0e:	ed a5       	ldd	r30, Y+45	; 0x2d
    1f10:	ea 8f       	std	Y+26, r30	; 0x1a
    1f12:	8a e0       	ldi	r24, 0x0A	; 10
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	a0 e0       	ldi	r26, 0x00	; 0
    1f18:	b0 e0       	ldi	r27, 0x00	; 0
    1f1a:	8e 1b       	sub	r24, r30
    1f1c:	91 09       	sbc	r25, r1
    1f1e:	a1 09       	sbc	r26, r1
    1f20:	b1 09       	sbc	r27, r1
    1f22:	8e 87       	std	Y+14, r24	; 0x0e
    1f24:	9f 87       	std	Y+15, r25	; 0x0f
    1f26:	a8 8b       	std	Y+16, r26	; 0x10
    1f28:	b9 8b       	std	Y+17, r27	; 0x11
    1f2a:	80 91 cf 0c 	lds	r24, 0x0CCF	; 0x800ccf <uxTopReadyPriority>
    1f2e:	8e 17       	cp	r24, r30
    1f30:	10 f4       	brcc	.+4      	; 0x1f36 <xTaskPriorityDisinherit+0x5a>
    1f32:	e0 93 cf 0c 	sts	0x0CCF, r30	; 0x800ccf <uxTopReadyPriority>
    1f36:	8b e0       	ldi	r24, 0x0B	; 11
    1f38:	8e 9f       	mul	r24, r30
    1f3a:	f0 01       	movw	r30, r0
    1f3c:	11 24       	eor	r1, r1
    1f3e:	ef 5e       	subi	r30, 0xEF	; 239
    1f40:	f2 4f       	sbci	r31, 0xF2	; 242
    1f42:	01 80       	ldd	r0, Z+1	; 0x01
    1f44:	f2 81       	ldd	r31, Z+2	; 0x02
    1f46:	e0 2d       	mov	r30, r0
    1f48:	ff 83       	std	Y+7, r31	; 0x07
    1f4a:	ee 83       	std	Y+6, r30	; 0x06
    1f4c:	26 81       	ldd	r18, Z+6	; 0x06
    1f4e:	37 81       	ldd	r19, Z+7	; 0x07
    1f50:	39 87       	std	Y+9, r19	; 0x09
    1f52:	28 87       	std	Y+8, r18	; 0x08
    1f54:	a6 81       	ldd	r26, Z+6	; 0x06
    1f56:	b7 81       	ldd	r27, Z+7	; 0x07
    1f58:	15 96       	adiw	r26, 0x05	; 5
    1f5a:	1c 93       	st	X, r17
    1f5c:	0e 93       	st	-X, r16
    1f5e:	14 97       	sbiw	r26, 0x04	; 4
    1f60:	17 83       	std	Z+7, r17	; 0x07
    1f62:	06 83       	std	Z+6, r16	; 0x06
    1f64:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1f66:	8e 9f       	mul	r24, r30
    1f68:	f0 01       	movw	r30, r0
    1f6a:	11 24       	eor	r1, r1
    1f6c:	ef 5e       	subi	r30, 0xEF	; 239
    1f6e:	f2 4f       	sbci	r31, 0xF2	; 242
    1f70:	fd 87       	std	Y+13, r31	; 0x0d
    1f72:	ec 87       	std	Y+12, r30	; 0x0c
    1f74:	80 81       	ld	r24, Z
    1f76:	8f 5f       	subi	r24, 0xFF	; 255
    1f78:	80 83       	st	Z, r24
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	05 c0       	rjmp	.+10     	; 0x1f88 <xTaskPriorityDisinherit+0xac>
    1f7e:	80 e0       	ldi	r24, 0x00	; 0
    1f80:	03 c0       	rjmp	.+6      	; 0x1f88 <xTaskPriorityDisinherit+0xac>
    1f82:	80 e0       	ldi	r24, 0x00	; 0
    1f84:	01 c0       	rjmp	.+2      	; 0x1f88 <xTaskPriorityDisinherit+0xac>
    1f86:	80 e0       	ldi	r24, 0x00	; 0
    1f88:	df 91       	pop	r29
    1f8a:	cf 91       	pop	r28
    1f8c:	1f 91       	pop	r17
    1f8e:	0f 91       	pop	r16
    1f90:	08 95       	ret

00001f92 <vTaskPriorityDisinheritAfterTimeout>:
    1f92:	0f 93       	push	r16
    1f94:	1f 93       	push	r17
    1f96:	cf 93       	push	r28
    1f98:	df 93       	push	r29
    1f9a:	fc 01       	movw	r30, r24
    1f9c:	89 2b       	or	r24, r25
    1f9e:	09 f4       	brne	.+2      	; 0x1fa2 <vTaskPriorityDisinheritAfterTimeout+0x10>
    1fa0:	5a c0       	rjmp	.+180    	; 0x2056 <__DATA_REGION_LENGTH__+0x56>
    1fa2:	85 a5       	ldd	r24, Z+45	; 0x2d
    1fa4:	86 17       	cp	r24, r22
    1fa6:	08 f4       	brcc	.+2      	; 0x1faa <vTaskPriorityDisinheritAfterTimeout+0x18>
    1fa8:	86 2f       	mov	r24, r22
    1faa:	92 8d       	ldd	r25, Z+26	; 0x1a
    1fac:	89 17       	cp	r24, r25
    1fae:	09 f4       	brne	.+2      	; 0x1fb2 <vTaskPriorityDisinheritAfterTimeout+0x20>
    1fb0:	52 c0       	rjmp	.+164    	; 0x2056 <__DATA_REGION_LENGTH__+0x56>
    1fb2:	26 a5       	ldd	r18, Z+46	; 0x2e
    1fb4:	21 30       	cpi	r18, 0x01	; 1
    1fb6:	09 f0       	breq	.+2      	; 0x1fba <vTaskPriorityDisinheritAfterTimeout+0x28>
    1fb8:	4e c0       	rjmp	.+156    	; 0x2056 <__DATA_REGION_LENGTH__+0x56>
    1fba:	82 8f       	std	Z+26, r24	; 0x1a
    1fbc:	46 85       	ldd	r20, Z+14	; 0x0e
    1fbe:	57 85       	ldd	r21, Z+15	; 0x0f
    1fc0:	60 89       	ldd	r22, Z+16	; 0x10
    1fc2:	71 89       	ldd	r23, Z+17	; 0x11
    1fc4:	77 23       	and	r23, r23
    1fc6:	64 f0       	brlt	.+24     	; 0x1fe0 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    1fc8:	4a e0       	ldi	r20, 0x0A	; 10
    1fca:	50 e0       	ldi	r21, 0x00	; 0
    1fcc:	60 e0       	ldi	r22, 0x00	; 0
    1fce:	70 e0       	ldi	r23, 0x00	; 0
    1fd0:	48 1b       	sub	r20, r24
    1fd2:	51 09       	sbc	r21, r1
    1fd4:	61 09       	sbc	r22, r1
    1fd6:	71 09       	sbc	r23, r1
    1fd8:	46 87       	std	Z+14, r20	; 0x0e
    1fda:	57 87       	std	Z+15, r21	; 0x0f
    1fdc:	60 8b       	std	Z+16, r22	; 0x10
    1fde:	71 8b       	std	Z+17, r23	; 0x11
    1fe0:	24 85       	ldd	r18, Z+12	; 0x0c
    1fe2:	35 85       	ldd	r19, Z+13	; 0x0d
    1fe4:	4b e0       	ldi	r20, 0x0B	; 11
    1fe6:	94 9f       	mul	r25, r20
    1fe8:	c0 01       	movw	r24, r0
    1fea:	11 24       	eor	r1, r1
    1fec:	8f 5e       	subi	r24, 0xEF	; 239
    1fee:	92 4f       	sbci	r25, 0xF2	; 242
    1ff0:	28 17       	cp	r18, r24
    1ff2:	39 07       	cpc	r19, r25
    1ff4:	81 f5       	brne	.+96     	; 0x2056 <__DATA_REGION_LENGTH__+0x56>
    1ff6:	ef 01       	movw	r28, r30
    1ff8:	8f 01       	movw	r16, r30
    1ffa:	0e 5f       	subi	r16, 0xFE	; 254
    1ffc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ffe:	c8 01       	movw	r24, r16
    2000:	0e 94 7f 03 	call	0x6fe	; 0x6fe <uxListRemove>
    2004:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2006:	80 91 cf 0c 	lds	r24, 0x0CCF	; 0x800ccf <uxTopReadyPriority>
    200a:	8e 17       	cp	r24, r30
    200c:	10 f4       	brcc	.+4      	; 0x2012 <__DATA_REGION_LENGTH__+0x12>
    200e:	e0 93 cf 0c 	sts	0x0CCF, r30	; 0x800ccf <uxTopReadyPriority>
    2012:	8b e0       	ldi	r24, 0x0B	; 11
    2014:	8e 9f       	mul	r24, r30
    2016:	f0 01       	movw	r30, r0
    2018:	11 24       	eor	r1, r1
    201a:	ef 5e       	subi	r30, 0xEF	; 239
    201c:	f2 4f       	sbci	r31, 0xF2	; 242
    201e:	01 80       	ldd	r0, Z+1	; 0x01
    2020:	f2 81       	ldd	r31, Z+2	; 0x02
    2022:	e0 2d       	mov	r30, r0
    2024:	ff 83       	std	Y+7, r31	; 0x07
    2026:	ee 83       	std	Y+6, r30	; 0x06
    2028:	26 81       	ldd	r18, Z+6	; 0x06
    202a:	37 81       	ldd	r19, Z+7	; 0x07
    202c:	39 87       	std	Y+9, r19	; 0x09
    202e:	28 87       	std	Y+8, r18	; 0x08
    2030:	a6 81       	ldd	r26, Z+6	; 0x06
    2032:	b7 81       	ldd	r27, Z+7	; 0x07
    2034:	15 96       	adiw	r26, 0x05	; 5
    2036:	1c 93       	st	X, r17
    2038:	0e 93       	st	-X, r16
    203a:	14 97       	sbiw	r26, 0x04	; 4
    203c:	17 83       	std	Z+7, r17	; 0x07
    203e:	06 83       	std	Z+6, r16	; 0x06
    2040:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2042:	8e 9f       	mul	r24, r30
    2044:	f0 01       	movw	r30, r0
    2046:	11 24       	eor	r1, r1
    2048:	ef 5e       	subi	r30, 0xEF	; 239
    204a:	f2 4f       	sbci	r31, 0xF2	; 242
    204c:	fd 87       	std	Y+13, r31	; 0x0d
    204e:	ec 87       	std	Y+12, r30	; 0x0c
    2050:	80 81       	ld	r24, Z
    2052:	8f 5f       	subi	r24, 0xFF	; 255
    2054:	80 83       	st	Z, r24
    2056:	df 91       	pop	r29
    2058:	cf 91       	pop	r28
    205a:	1f 91       	pop	r17
    205c:	0f 91       	pop	r16
    205e:	08 95       	ret

00002060 <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    2060:	80 91 7f 0d 	lds	r24, 0x0D7F	; 0x800d7f <pxCurrentTCB>
    2064:	90 91 80 0d 	lds	r25, 0x0D80	; 0x800d80 <pxCurrentTCB+0x1>
    2068:	89 2b       	or	r24, r25
    206a:	39 f0       	breq	.+14     	; 0x207a <pvTaskIncrementMutexHeldCount+0x1a>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    206c:	e0 91 7f 0d 	lds	r30, 0x0D7F	; 0x800d7f <pxCurrentTCB>
    2070:	f0 91 80 0d 	lds	r31, 0x0D80	; 0x800d80 <pxCurrentTCB+0x1>
    2074:	86 a5       	ldd	r24, Z+46	; 0x2e
    2076:	8f 5f       	subi	r24, 0xFF	; 255
    2078:	86 a7       	std	Z+46, r24	; 0x2e
        }

        return ( TaskHandle_t ) pxCurrentTCB;
    207a:	80 91 7f 0d 	lds	r24, 0x0D7F	; 0x800d7f <pxCurrentTCB>
    207e:	90 91 80 0d 	lds	r25, 0x0D80	; 0x800d80 <pxCurrentTCB+0x1>
    }
    2082:	08 95       	ret

00002084 <prvGetNextExpireTime>:
    2084:	dc 01       	movw	r26, r24
    2086:	e0 91 8b 0d 	lds	r30, 0x0D8B	; 0x800d8b <pxCurrentTimerList>
    208a:	f0 91 8c 0d 	lds	r31, 0x0D8C	; 0x800d8c <pxCurrentTimerList+0x1>
    208e:	80 81       	ld	r24, Z
    2090:	91 e0       	ldi	r25, 0x01	; 1
    2092:	81 11       	cpse	r24, r1
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	9c 93       	st	X, r25
    2098:	91 11       	cpse	r25, r1
    209a:	08 c0       	rjmp	.+16     	; 0x20ac <prvGetNextExpireTime+0x28>
    209c:	07 80       	ldd	r0, Z+7	; 0x07
    209e:	f0 85       	ldd	r31, Z+8	; 0x08
    20a0:	e0 2d       	mov	r30, r0
    20a2:	60 81       	ld	r22, Z
    20a4:	71 81       	ldd	r23, Z+1	; 0x01
    20a6:	82 81       	ldd	r24, Z+2	; 0x02
    20a8:	93 81       	ldd	r25, Z+3	; 0x03
    20aa:	08 95       	ret
    20ac:	60 e0       	ldi	r22, 0x00	; 0
    20ae:	70 e0       	ldi	r23, 0x00	; 0
    20b0:	cb 01       	movw	r24, r22
    20b2:	08 95       	ret

000020b4 <prvInsertTimerInActiveList>:
    20b4:	cf 92       	push	r12
    20b6:	df 92       	push	r13
    20b8:	ef 92       	push	r14
    20ba:	ff 92       	push	r15
    20bc:	0f 93       	push	r16
    20be:	1f 93       	push	r17
    20c0:	fc 01       	movw	r30, r24
    20c2:	42 83       	std	Z+2, r20	; 0x02
    20c4:	53 83       	std	Z+3, r21	; 0x03
    20c6:	64 83       	std	Z+4, r22	; 0x04
    20c8:	75 83       	std	Z+5, r23	; 0x05
    20ca:	93 87       	std	Z+11, r25	; 0x0b
    20cc:	82 87       	std	Z+10, r24	; 0x0a
    20ce:	04 17       	cp	r16, r20
    20d0:	15 07       	cpc	r17, r21
    20d2:	26 07       	cpc	r18, r22
    20d4:	37 07       	cpc	r19, r23
    20d6:	c0 f0       	brcs	.+48     	; 0x2108 <prvInsertTimerInActiveList+0x54>
    20d8:	0c 19       	sub	r16, r12
    20da:	1d 09       	sbc	r17, r13
    20dc:	2e 09       	sbc	r18, r14
    20de:	3f 09       	sbc	r19, r15
    20e0:	86 85       	ldd	r24, Z+14	; 0x0e
    20e2:	97 85       	ldd	r25, Z+15	; 0x0f
    20e4:	a0 89       	ldd	r26, Z+16	; 0x10
    20e6:	b1 89       	ldd	r27, Z+17	; 0x11
    20e8:	08 17       	cp	r16, r24
    20ea:	19 07       	cpc	r17, r25
    20ec:	2a 07       	cpc	r18, r26
    20ee:	3b 07       	cpc	r19, r27
    20f0:	00 f5       	brcc	.+64     	; 0x2132 <prvInsertTimerInActiveList+0x7e>
    20f2:	bf 01       	movw	r22, r30
    20f4:	6e 5f       	subi	r22, 0xFE	; 254
    20f6:	7f 4f       	sbci	r23, 0xFF	; 255
    20f8:	80 91 89 0d 	lds	r24, 0x0D89	; 0x800d89 <pxOverflowTimerList>
    20fc:	90 91 8a 0d 	lds	r25, 0x0D8A	; 0x800d8a <pxOverflowTimerList+0x1>
    2100:	0e 94 42 03 	call	0x684	; 0x684 <vListInsert>
    2104:	80 e0       	ldi	r24, 0x00	; 0
    2106:	18 c0       	rjmp	.+48     	; 0x2138 <prvInsertTimerInActiveList+0x84>
    2108:	0c 15       	cp	r16, r12
    210a:	1d 05       	cpc	r17, r13
    210c:	2e 05       	cpc	r18, r14
    210e:	3f 05       	cpc	r19, r15
    2110:	28 f4       	brcc	.+10     	; 0x211c <prvInsertTimerInActiveList+0x68>
    2112:	4c 15       	cp	r20, r12
    2114:	5d 05       	cpc	r21, r13
    2116:	6e 05       	cpc	r22, r14
    2118:	7f 05       	cpc	r23, r15
    211a:	68 f4       	brcc	.+26     	; 0x2136 <prvInsertTimerInActiveList+0x82>
    211c:	bf 01       	movw	r22, r30
    211e:	6e 5f       	subi	r22, 0xFE	; 254
    2120:	7f 4f       	sbci	r23, 0xFF	; 255
    2122:	80 91 8b 0d 	lds	r24, 0x0D8B	; 0x800d8b <pxCurrentTimerList>
    2126:	90 91 8c 0d 	lds	r25, 0x0D8C	; 0x800d8c <pxCurrentTimerList+0x1>
    212a:	0e 94 42 03 	call	0x684	; 0x684 <vListInsert>
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	03 c0       	rjmp	.+6      	; 0x2138 <prvInsertTimerInActiveList+0x84>
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	01 c0       	rjmp	.+2      	; 0x2138 <prvInsertTimerInActiveList+0x84>
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	1f 91       	pop	r17
    213a:	0f 91       	pop	r16
    213c:	ff 90       	pop	r15
    213e:	ef 90       	pop	r14
    2140:	df 90       	pop	r13
    2142:	cf 90       	pop	r12
    2144:	08 95       	ret

00002146 <prvCheckForValidListAndQueue>:
    2146:	0f b6       	in	r0, 0x3f	; 63
    2148:	f8 94       	cli
    214a:	0f 92       	push	r0
    214c:	80 91 87 0d 	lds	r24, 0x0D87	; 0x800d87 <xTimerQueue>
    2150:	90 91 88 0d 	lds	r25, 0x0D88	; 0x800d88 <xTimerQueue+0x1>
    2154:	89 2b       	or	r24, r25
    2156:	e9 f4       	brne	.+58     	; 0x2192 <prvCheckForValidListAndQueue+0x4c>
    2158:	88 e9       	ldi	r24, 0x98	; 152
    215a:	9d e0       	ldi	r25, 0x0D	; 13
    215c:	0e 94 2d 03 	call	0x65a	; 0x65a <vListInitialise>
    2160:	8d e8       	ldi	r24, 0x8D	; 141
    2162:	9d e0       	ldi	r25, 0x0D	; 13
    2164:	0e 94 2d 03 	call	0x65a	; 0x65a <vListInitialise>
    2168:	88 e9       	ldi	r24, 0x98	; 152
    216a:	9d e0       	ldi	r25, 0x0D	; 13
    216c:	90 93 8c 0d 	sts	0x0D8C, r25	; 0x800d8c <pxCurrentTimerList+0x1>
    2170:	80 93 8b 0d 	sts	0x0D8B, r24	; 0x800d8b <pxCurrentTimerList>
    2174:	8d e8       	ldi	r24, 0x8D	; 141
    2176:	9d e0       	ldi	r25, 0x0D	; 13
    2178:	90 93 8a 0d 	sts	0x0D8A, r25	; 0x800d8a <pxOverflowTimerList+0x1>
    217c:	80 93 89 0d 	sts	0x0D89, r24	; 0x800d89 <pxOverflowTimerList>
    2180:	40 e0       	ldi	r20, 0x00	; 0
    2182:	67 e0       	ldi	r22, 0x07	; 7
    2184:	8a e0       	ldi	r24, 0x0A	; 10
    2186:	0e 94 ee 05 	call	0xbdc	; 0xbdc <xQueueGenericCreate>
    218a:	90 93 88 0d 	sts	0x0D88, r25	; 0x800d88 <xTimerQueue+0x1>
    218e:	80 93 87 0d 	sts	0x0D87, r24	; 0x800d87 <xTimerQueue>
    2192:	0f 90       	pop	r0
    2194:	0f be       	out	0x3f, r0	; 63
    2196:	08 95       	ret

00002198 <xTimerCreateTimerTask>:
    2198:	ef 92       	push	r14
    219a:	ff 92       	push	r15
    219c:	0f 93       	push	r16
    219e:	d3 df       	rcall	.-90     	; 0x2146 <prvCheckForValidListAndQueue>
    21a0:	80 91 87 0d 	lds	r24, 0x0D87	; 0x800d87 <xTimerQueue>
    21a4:	90 91 88 0d 	lds	r25, 0x0D88	; 0x800d88 <xTimerQueue+0x1>
    21a8:	89 2b       	or	r24, r25
    21aa:	89 f0       	breq	.+34     	; 0x21ce <xTimerCreateTimerTask+0x36>
    21ac:	0f 2e       	mov	r0, r31
    21ae:	f5 e8       	ldi	r31, 0x85	; 133
    21b0:	ef 2e       	mov	r14, r31
    21b2:	fd e0       	ldi	r31, 0x0D	; 13
    21b4:	ff 2e       	mov	r15, r31
    21b6:	f0 2d       	mov	r31, r0
    21b8:	03 e0       	ldi	r16, 0x03	; 3
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	40 ec       	ldi	r20, 0xC0	; 192
    21c0:	50 e0       	ldi	r21, 0x00	; 0
    21c2:	6c ec       	ldi	r22, 0xCC	; 204
    21c4:	72 e0       	ldi	r23, 0x02	; 2
    21c6:	87 ec       	ldi	r24, 0xC7	; 199
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	54 d9       	rcall	.-3416   	; 0x1474 <xTaskCreate>
    21cc:	01 c0       	rjmp	.+2      	; 0x21d0 <xTimerCreateTimerTask+0x38>
    21ce:	80 e0       	ldi	r24, 0x00	; 0
    21d0:	0f 91       	pop	r16
    21d2:	ff 90       	pop	r15
    21d4:	ef 90       	pop	r14
    21d6:	08 95       	ret

000021d8 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    21d8:	8f 92       	push	r8
    21da:	9f 92       	push	r9
    21dc:	af 92       	push	r10
    21de:	bf 92       	push	r11
    21e0:	cf 92       	push	r12
    21e2:	df 92       	push	r13
    21e4:	ef 92       	push	r14
    21e6:	ff 92       	push	r15
    21e8:	0f 93       	push	r16
    21ea:	1f 93       	push	r17
    21ec:	cf 93       	push	r28
    21ee:	df 93       	push	r29
    21f0:	cd b7       	in	r28, 0x3d	; 61
    21f2:	de b7       	in	r29, 0x3e	; 62
    21f4:	27 97       	sbiw	r28, 0x07	; 7
    21f6:	0f b6       	in	r0, 0x3f	; 63
    21f8:	f8 94       	cli
    21fa:	de bf       	out	0x3e, r29	; 62
    21fc:	0f be       	out	0x3f, r0	; 63
    21fe:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2200:	e0 91 87 0d 	lds	r30, 0x0D87	; 0x800d87 <xTimerQueue>
    2204:	f0 91 88 0d 	lds	r31, 0x0D88	; 0x800d88 <xTimerQueue+0x1>
    2208:	30 97       	sbiw	r30, 0x00	; 0
    220a:	81 f1       	breq	.+96     	; 0x226c <__stack+0x6d>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    220c:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    220e:	2a 83       	std	Y+2, r18	; 0x02
    2210:	3b 83       	std	Y+3, r19	; 0x03
    2212:	4c 83       	std	Y+4, r20	; 0x04
    2214:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2216:	9f 83       	std	Y+7, r25	; 0x07
    2218:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    221a:	66 30       	cpi	r22, 0x06	; 6
    221c:	f4 f4       	brge	.+60     	; 0x225a <__stack+0x5b>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    221e:	c9 dd       	rcall	.-1134   	; 0x1db2 <xTaskGetSchedulerState>
    2220:	82 30       	cpi	r24, 0x02	; 2
    2222:	69 f4       	brne	.+26     	; 0x223e <__stack+0x3f>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2224:	00 e0       	ldi	r16, 0x00	; 0
    2226:	a7 01       	movw	r20, r14
    2228:	96 01       	movw	r18, r12
    222a:	be 01       	movw	r22, r28
    222c:	6f 5f       	subi	r22, 0xFF	; 255
    222e:	7f 4f       	sbci	r23, 0xFF	; 255
    2230:	80 91 87 0d 	lds	r24, 0x0D87	; 0x800d87 <xTimerQueue>
    2234:	90 91 88 0d 	lds	r25, 0x0D88	; 0x800d88 <xTimerQueue+0x1>
    2238:	0e 94 1c 06 	call	0xc38	; 0xc38 <xQueueGenericSend>
    223c:	18 c0       	rjmp	.+48     	; 0x226e <__stack+0x6f>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    223e:	00 e0       	ldi	r16, 0x00	; 0
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	a9 01       	movw	r20, r18
    2246:	be 01       	movw	r22, r28
    2248:	6f 5f       	subi	r22, 0xFF	; 255
    224a:	7f 4f       	sbci	r23, 0xFF	; 255
    224c:	80 91 87 0d 	lds	r24, 0x0D87	; 0x800d87 <xTimerQueue>
    2250:	90 91 88 0d 	lds	r25, 0x0D88	; 0x800d88 <xTimerQueue+0x1>
    2254:	0e 94 1c 06 	call	0xc38	; 0xc38 <xQueueGenericSend>
    2258:	0a c0       	rjmp	.+20     	; 0x226e <__stack+0x6f>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	a8 01       	movw	r20, r16
    225e:	be 01       	movw	r22, r28
    2260:	6f 5f       	subi	r22, 0xFF	; 255
    2262:	7f 4f       	sbci	r23, 0xFF	; 255
    2264:	cf 01       	movw	r24, r30
    2266:	0e 94 a7 06 	call	0xd4e	; 0xd4e <xQueueGenericSendFromISR>
    226a:	01 c0       	rjmp	.+2      	; 0x226e <__stack+0x6f>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    226c:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    226e:	27 96       	adiw	r28, 0x07	; 7
    2270:	0f b6       	in	r0, 0x3f	; 63
    2272:	f8 94       	cli
    2274:	de bf       	out	0x3e, r29	; 62
    2276:	0f be       	out	0x3f, r0	; 63
    2278:	cd bf       	out	0x3d, r28	; 61
    227a:	df 91       	pop	r29
    227c:	cf 91       	pop	r28
    227e:	1f 91       	pop	r17
    2280:	0f 91       	pop	r16
    2282:	ff 90       	pop	r15
    2284:	ef 90       	pop	r14
    2286:	df 90       	pop	r13
    2288:	cf 90       	pop	r12
    228a:	bf 90       	pop	r11
    228c:	af 90       	pop	r10
    228e:	9f 90       	pop	r9
    2290:	8f 90       	pop	r8
    2292:	08 95       	ret

00002294 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    2294:	8f 92       	push	r8
    2296:	9f 92       	push	r9
    2298:	af 92       	push	r10
    229a:	bf 92       	push	r11
    229c:	cf 92       	push	r12
    229e:	df 92       	push	r13
    22a0:	ef 92       	push	r14
    22a2:	ff 92       	push	r15
    22a4:	0f 93       	push	r16
    22a6:	1f 93       	push	r17
    22a8:	cf 93       	push	r28
    22aa:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    22ac:	3b c0       	rjmp	.+118    	; 0x2324 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    22ae:	07 80       	ldd	r0, Z+7	; 0x07
    22b0:	f0 85       	ldd	r31, Z+8	; 0x08
    22b2:	e0 2d       	mov	r30, r0
    22b4:	80 80       	ld	r8, Z
    22b6:	91 80       	ldd	r9, Z+1	; 0x01
    22b8:	a2 80       	ldd	r10, Z+2	; 0x02
    22ba:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    22bc:	c0 85       	ldd	r28, Z+8	; 0x08
    22be:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    22c0:	8e 01       	movw	r16, r28
    22c2:	0e 5f       	subi	r16, 0xFE	; 254
    22c4:	1f 4f       	sbci	r17, 0xFF	; 255
    22c6:	c8 01       	movw	r24, r16
    22c8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    22cc:	ec 89       	ldd	r30, Y+20	; 0x14
    22ce:	fd 89       	ldd	r31, Y+21	; 0x15
    22d0:	ce 01       	movw	r24, r28
    22d2:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    22d4:	8e 89       	ldd	r24, Y+22	; 0x16
    22d6:	82 ff       	sbrs	r24, 2
    22d8:	25 c0       	rjmp	.+74     	; 0x2324 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    22da:	8e 85       	ldd	r24, Y+14	; 0x0e
    22dc:	9f 85       	ldd	r25, Y+15	; 0x0f
    22de:	a8 89       	ldd	r26, Y+16	; 0x10
    22e0:	b9 89       	ldd	r27, Y+17	; 0x11
    22e2:	88 0d       	add	r24, r8
    22e4:	99 1d       	adc	r25, r9
    22e6:	aa 1d       	adc	r26, r10
    22e8:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    22ea:	88 16       	cp	r8, r24
    22ec:	99 06       	cpc	r9, r25
    22ee:	aa 06       	cpc	r10, r26
    22f0:	bb 06       	cpc	r11, r27
    22f2:	70 f4       	brcc	.+28     	; 0x2310 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    22f4:	8a 83       	std	Y+2, r24	; 0x02
    22f6:	9b 83       	std	Y+3, r25	; 0x03
    22f8:	ac 83       	std	Y+4, r26	; 0x04
    22fa:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    22fc:	db 87       	std	Y+11, r29	; 0x0b
    22fe:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2300:	b8 01       	movw	r22, r16
    2302:	80 91 8b 0d 	lds	r24, 0x0D8B	; 0x800d8b <pxCurrentTimerList>
    2306:	90 91 8c 0d 	lds	r25, 0x0D8C	; 0x800d8c <pxCurrentTimerList+0x1>
    230a:	0e 94 42 03 	call	0x684	; 0x684 <vListInsert>
    230e:	0a c0       	rjmp	.+20     	; 0x2324 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2310:	c1 2c       	mov	r12, r1
    2312:	d1 2c       	mov	r13, r1
    2314:	76 01       	movw	r14, r12
    2316:	00 e0       	ldi	r16, 0x00	; 0
    2318:	10 e0       	ldi	r17, 0x00	; 0
    231a:	a5 01       	movw	r20, r10
    231c:	94 01       	movw	r18, r8
    231e:	60 e0       	ldi	r22, 0x00	; 0
    2320:	ce 01       	movw	r24, r28
    2322:	5a df       	rcall	.-332    	; 0x21d8 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2324:	e0 91 8b 0d 	lds	r30, 0x0D8B	; 0x800d8b <pxCurrentTimerList>
    2328:	f0 91 8c 0d 	lds	r31, 0x0D8C	; 0x800d8c <pxCurrentTimerList+0x1>
    232c:	80 81       	ld	r24, Z
    232e:	81 11       	cpse	r24, r1
    2330:	be cf       	rjmp	.-132    	; 0x22ae <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    2332:	80 91 89 0d 	lds	r24, 0x0D89	; 0x800d89 <pxOverflowTimerList>
    2336:	90 91 8a 0d 	lds	r25, 0x0D8A	; 0x800d8a <pxOverflowTimerList+0x1>
    233a:	90 93 8c 0d 	sts	0x0D8C, r25	; 0x800d8c <pxCurrentTimerList+0x1>
    233e:	80 93 8b 0d 	sts	0x0D8B, r24	; 0x800d8b <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    2342:	f0 93 8a 0d 	sts	0x0D8A, r31	; 0x800d8a <pxOverflowTimerList+0x1>
    2346:	e0 93 89 0d 	sts	0x0D89, r30	; 0x800d89 <pxOverflowTimerList>
    }
    234a:	df 91       	pop	r29
    234c:	cf 91       	pop	r28
    234e:	1f 91       	pop	r17
    2350:	0f 91       	pop	r16
    2352:	ff 90       	pop	r15
    2354:	ef 90       	pop	r14
    2356:	df 90       	pop	r13
    2358:	cf 90       	pop	r12
    235a:	bf 90       	pop	r11
    235c:	af 90       	pop	r10
    235e:	9f 90       	pop	r9
    2360:	8f 90       	pop	r8
    2362:	08 95       	ret

00002364 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    2364:	cf 92       	push	r12
    2366:	df 92       	push	r13
    2368:	ef 92       	push	r14
    236a:	ff 92       	push	r15
    236c:	cf 93       	push	r28
    236e:	df 93       	push	r29
    2370:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    2372:	07 d9       	rcall	.-3570   	; 0x1582 <xTaskGetTickCount>
    2374:	6b 01       	movw	r12, r22
    2376:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    2378:	80 91 81 0d 	lds	r24, 0x0D81	; 0x800d81 <xLastTime.2436>
    237c:	90 91 82 0d 	lds	r25, 0x0D82	; 0x800d82 <xLastTime.2436+0x1>
    2380:	a0 91 83 0d 	lds	r26, 0x0D83	; 0x800d83 <xLastTime.2436+0x2>
    2384:	b0 91 84 0d 	lds	r27, 0x0D84	; 0x800d84 <xLastTime.2436+0x3>
    2388:	c8 16       	cp	r12, r24
    238a:	d9 06       	cpc	r13, r25
    238c:	ea 06       	cpc	r14, r26
    238e:	fb 06       	cpc	r15, r27
        {
            prvSwitchTimerLists();
    2390:	20 f4       	brcc	.+8      	; 0x239a <prvSampleTimeNow+0x36>
    2392:	80 df       	rcall	.-256    	; 0x2294 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	88 83       	st	Y, r24
    2398:	01 c0       	rjmp	.+2      	; 0x239c <prvSampleTimeNow+0x38>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    239a:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    239c:	c0 92 81 0d 	sts	0x0D81, r12	; 0x800d81 <xLastTime.2436>
    23a0:	d0 92 82 0d 	sts	0x0D82, r13	; 0x800d82 <xLastTime.2436+0x1>
    23a4:	e0 92 83 0d 	sts	0x0D83, r14	; 0x800d83 <xLastTime.2436+0x2>
    23a8:	f0 92 84 0d 	sts	0x0D84, r15	; 0x800d84 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    23ac:	c7 01       	movw	r24, r14
    23ae:	b6 01       	movw	r22, r12
    23b0:	df 91       	pop	r29
    23b2:	cf 91       	pop	r28
    23b4:	ff 90       	pop	r15
    23b6:	ef 90       	pop	r14
    23b8:	df 90       	pop	r13
    23ba:	cf 90       	pop	r12
    23bc:	08 95       	ret

000023be <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    23be:	4f 92       	push	r4
    23c0:	5f 92       	push	r5
    23c2:	6f 92       	push	r6
    23c4:	7f 92       	push	r7
    23c6:	8f 92       	push	r8
    23c8:	9f 92       	push	r9
    23ca:	af 92       	push	r10
    23cc:	bf 92       	push	r11
    23ce:	cf 92       	push	r12
    23d0:	df 92       	push	r13
    23d2:	ef 92       	push	r14
    23d4:	ff 92       	push	r15
    23d6:	0f 93       	push	r16
    23d8:	1f 93       	push	r17
    23da:	cf 93       	push	r28
    23dc:	df 93       	push	r29
    23de:	4b 01       	movw	r8, r22
    23e0:	5c 01       	movw	r10, r24
    23e2:	29 01       	movw	r4, r18
    23e4:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    23e6:	e0 91 8b 0d 	lds	r30, 0x0D8B	; 0x800d8b <pxCurrentTimerList>
    23ea:	f0 91 8c 0d 	lds	r31, 0x0D8C	; 0x800d8c <pxCurrentTimerList+0x1>
    23ee:	07 80       	ldd	r0, Z+7	; 0x07
    23f0:	f0 85       	ldd	r31, Z+8	; 0x08
    23f2:	e0 2d       	mov	r30, r0
    23f4:	c0 85       	ldd	r28, Z+8	; 0x08
    23f6:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    23f8:	ce 01       	movw	r24, r28
    23fa:	02 96       	adiw	r24, 0x02	; 2
    23fc:	0e 94 7f 03 	call	0x6fe	; 0x6fe <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2400:	8e 89       	ldd	r24, Y+22	; 0x16
    2402:	82 ff       	sbrs	r24, 2
    2404:	1b c0       	rjmp	.+54     	; 0x243c <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2406:	4e 85       	ldd	r20, Y+14	; 0x0e
    2408:	5f 85       	ldd	r21, Y+15	; 0x0f
    240a:	68 89       	ldd	r22, Y+16	; 0x10
    240c:	79 89       	ldd	r23, Y+17	; 0x11
    240e:	48 0d       	add	r20, r8
    2410:	59 1d       	adc	r21, r9
    2412:	6a 1d       	adc	r22, r10
    2414:	7b 1d       	adc	r23, r11
    2416:	75 01       	movw	r14, r10
    2418:	64 01       	movw	r12, r8
    241a:	93 01       	movw	r18, r6
    241c:	82 01       	movw	r16, r4
    241e:	ce 01       	movw	r24, r28
    2420:	49 de       	rcall	.-878    	; 0x20b4 <prvInsertTimerInActiveList>
    2422:	88 23       	and	r24, r24
    2424:	69 f0       	breq	.+26     	; 0x2440 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2426:	c1 2c       	mov	r12, r1
    2428:	d1 2c       	mov	r13, r1
    242a:	76 01       	movw	r14, r12
    242c:	00 e0       	ldi	r16, 0x00	; 0
    242e:	10 e0       	ldi	r17, 0x00	; 0
    2430:	a5 01       	movw	r20, r10
    2432:	94 01       	movw	r18, r8
    2434:	60 e0       	ldi	r22, 0x00	; 0
    2436:	ce 01       	movw	r24, r28
    2438:	cf de       	rcall	.-610    	; 0x21d8 <xTimerGenericCommand>
    243a:	02 c0       	rjmp	.+4      	; 0x2440 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    243c:	8e 7f       	andi	r24, 0xFE	; 254
    243e:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2440:	ec 89       	ldd	r30, Y+20	; 0x14
    2442:	fd 89       	ldd	r31, Y+21	; 0x15
    2444:	ce 01       	movw	r24, r28
    2446:	19 95       	eicall
    }
    2448:	df 91       	pop	r29
    244a:	cf 91       	pop	r28
    244c:	1f 91       	pop	r17
    244e:	0f 91       	pop	r16
    2450:	ff 90       	pop	r15
    2452:	ef 90       	pop	r14
    2454:	df 90       	pop	r13
    2456:	cf 90       	pop	r12
    2458:	bf 90       	pop	r11
    245a:	af 90       	pop	r10
    245c:	9f 90       	pop	r9
    245e:	8f 90       	pop	r8
    2460:	7f 90       	pop	r7
    2462:	6f 90       	pop	r6
    2464:	5f 90       	pop	r5
    2466:	4f 90       	pop	r4
    2468:	08 95       	ret

0000246a <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    246a:	8f 92       	push	r8
    246c:	9f 92       	push	r9
    246e:	af 92       	push	r10
    2470:	bf 92       	push	r11
    2472:	cf 92       	push	r12
    2474:	df 92       	push	r13
    2476:	ef 92       	push	r14
    2478:	ff 92       	push	r15
    247a:	1f 93       	push	r17
    247c:	cf 93       	push	r28
    247e:	df 93       	push	r29
    2480:	1f 92       	push	r1
    2482:	cd b7       	in	r28, 0x3d	; 61
    2484:	de b7       	in	r29, 0x3e	; 62
    2486:	6b 01       	movw	r12, r22
    2488:	7c 01       	movw	r14, r24
    248a:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    248c:	74 d8       	rcall	.-3864   	; 0x1576 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    248e:	ce 01       	movw	r24, r28
    2490:	01 96       	adiw	r24, 0x01	; 1
    2492:	68 df       	rcall	.-304    	; 0x2364 <prvSampleTimeNow>
    2494:	4b 01       	movw	r8, r22
    2496:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    2498:	89 81       	ldd	r24, Y+1	; 0x01
    249a:	81 11       	cpse	r24, r1
    249c:	2b c0       	rjmp	.+86     	; 0x24f4 <prvProcessTimerOrBlockTask+0x8a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    249e:	11 11       	cpse	r17, r1
    24a0:	0c c0       	rjmp	.+24     	; 0x24ba <prvProcessTimerOrBlockTask+0x50>
    24a2:	8c 14       	cp	r8, r12
    24a4:	9d 04       	cpc	r9, r13
    24a6:	ae 04       	cpc	r10, r14
    24a8:	bf 04       	cpc	r11, r15
                {
                    ( void ) xTaskResumeAll();
    24aa:	38 f0       	brcs	.+14     	; 0x24ba <prvProcessTimerOrBlockTask+0x50>
    24ac:	a4 d9       	rcall	.-3256   	; 0x17f6 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    24ae:	a5 01       	movw	r20, r10
    24b0:	94 01       	movw	r18, r8
    24b2:	c7 01       	movw	r24, r14
    24b4:	b6 01       	movw	r22, r12
    24b6:	83 df       	rcall	.-250    	; 0x23be <prvProcessExpiredTimer>
    24b8:	1e c0       	rjmp	.+60     	; 0x24f6 <prvProcessTimerOrBlockTask+0x8c>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    24ba:	11 23       	and	r17, r17
    24bc:	41 f0       	breq	.+16     	; 0x24ce <prvProcessTimerOrBlockTask+0x64>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    24be:	e0 91 89 0d 	lds	r30, 0x0D89	; 0x800d89 <pxOverflowTimerList>
    24c2:	f0 91 8a 0d 	lds	r31, 0x0D8A	; 0x800d8a <pxOverflowTimerList+0x1>
    24c6:	80 81       	ld	r24, Z
    24c8:	11 e0       	ldi	r17, 0x01	; 1
    24ca:	81 11       	cpse	r24, r1
    24cc:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    24ce:	b7 01       	movw	r22, r14
    24d0:	a6 01       	movw	r20, r12
    24d2:	48 19       	sub	r20, r8
    24d4:	59 09       	sbc	r21, r9
    24d6:	6a 09       	sbc	r22, r10
    24d8:	7b 09       	sbc	r23, r11
    24da:	21 2f       	mov	r18, r17
    24dc:	80 91 87 0d 	lds	r24, 0x0D87	; 0x800d87 <xTimerQueue>
    24e0:	90 91 88 0d 	lds	r25, 0x0D88	; 0x800d88 <xTimerQueue+0x1>
    24e4:	0e 94 17 08 	call	0x102e	; 0x102e <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    24e8:	86 d9       	rcall	.-3316   	; 0x17f6 <xTaskResumeAll>
    24ea:	81 11       	cpse	r24, r1
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    24ec:	04 c0       	rjmp	.+8      	; 0x24f6 <prvProcessTimerOrBlockTask+0x8c>
    24ee:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <vPortYield>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    24f2:	01 c0       	rjmp	.+2      	; 0x24f6 <prvProcessTimerOrBlockTask+0x8c>
    24f4:	80 d9       	rcall	.-3328   	; 0x17f6 <xTaskResumeAll>
            }
        }
    }
    24f6:	0f 90       	pop	r0
    24f8:	df 91       	pop	r29
    24fa:	cf 91       	pop	r28
    24fc:	1f 91       	pop	r17
    24fe:	ff 90       	pop	r15
    2500:	ef 90       	pop	r14
    2502:	df 90       	pop	r13
    2504:	cf 90       	pop	r12
    2506:	bf 90       	pop	r11
    2508:	af 90       	pop	r10
    250a:	9f 90       	pop	r9
    250c:	8f 90       	pop	r8
    250e:	08 95       	ret

00002510 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    2510:	af 92       	push	r10
    2512:	bf 92       	push	r11
    2514:	cf 92       	push	r12
    2516:	df 92       	push	r13
    2518:	ef 92       	push	r14
    251a:	ff 92       	push	r15
    251c:	0f 93       	push	r16
    251e:	1f 93       	push	r17
    2520:	cf 93       	push	r28
    2522:	df 93       	push	r29
    2524:	cd b7       	in	r28, 0x3d	; 61
    2526:	de b7       	in	r29, 0x3e	; 62
    2528:	28 97       	sbiw	r28, 0x08	; 8
    252a:	0f b6       	in	r0, 0x3f	; 63
    252c:	f8 94       	cli
    252e:	de bf       	out	0x3e, r29	; 62
    2530:	0f be       	out	0x3f, r0	; 63
    2532:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2534:	82 c0       	rjmp	.+260    	; 0x263a <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2536:	89 81       	ldd	r24, Y+1	; 0x01
    2538:	88 23       	and	r24, r24
    253a:	0c f4       	brge	.+2      	; 0x253e <prvProcessReceivedCommands+0x2e>
    253c:	7e c0       	rjmp	.+252    	; 0x263a <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    253e:	ae 80       	ldd	r10, Y+6	; 0x06
    2540:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    2542:	d5 01       	movw	r26, r10
    2544:	1c 96       	adiw	r26, 0x0c	; 12
    2546:	8d 91       	ld	r24, X+
    2548:	9c 91       	ld	r25, X
    254a:	1d 97       	sbiw	r26, 0x0d	; 13
    254c:	89 2b       	or	r24, r25
    254e:	21 f0       	breq	.+8      	; 0x2558 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2550:	c5 01       	movw	r24, r10
    2552:	02 96       	adiw	r24, 0x02	; 2
    2554:	0e 94 7f 03 	call	0x6fe	; 0x6fe <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2558:	ce 01       	movw	r24, r28
    255a:	08 96       	adiw	r24, 0x08	; 8
    255c:	03 df       	rcall	.-506    	; 0x2364 <prvSampleTimeNow>
    255e:	8b 01       	movw	r16, r22
    2560:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    2562:	e9 81       	ldd	r30, Y+1	; 0x01
    2564:	0e 2e       	mov	r0, r30
    2566:	00 0c       	add	r0, r0
    2568:	ff 0b       	sbc	r31, r31
    256a:	ea 30       	cpi	r30, 0x0A	; 10
    256c:	f1 05       	cpc	r31, r1
    256e:	08 f0       	brcs	.+2      	; 0x2572 <prvProcessReceivedCommands+0x62>
    2570:	64 c0       	rjmp	.+200    	; 0x263a <prvProcessReceivedCommands+0x12a>
    2572:	88 27       	eor	r24, r24
    2574:	ee 58       	subi	r30, 0x8E	; 142
    2576:	ff 4f       	sbci	r31, 0xFF	; 255
    2578:	8f 4f       	sbci	r24, 0xFF	; 255
    257a:	0c 94 57 1e 	jmp	0x3cae	; 0x3cae <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    257e:	f5 01       	movw	r30, r10
    2580:	86 89       	ldd	r24, Z+22	; 0x16
    2582:	81 60       	ori	r24, 0x01	; 1
    2584:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    2586:	ca 80       	ldd	r12, Y+2	; 0x02
    2588:	db 80       	ldd	r13, Y+3	; 0x03
    258a:	ec 80       	ldd	r14, Y+4	; 0x04
    258c:	fd 80       	ldd	r15, Y+5	; 0x05
    258e:	46 85       	ldd	r20, Z+14	; 0x0e
    2590:	57 85       	ldd	r21, Z+15	; 0x0f
    2592:	60 89       	ldd	r22, Z+16	; 0x10
    2594:	71 89       	ldd	r23, Z+17	; 0x11
    2596:	4c 0d       	add	r20, r12
    2598:	5d 1d       	adc	r21, r13
    259a:	6e 1d       	adc	r22, r14
    259c:	7f 1d       	adc	r23, r15
    259e:	c5 01       	movw	r24, r10
    25a0:	89 dd       	rcall	.-1262   	; 0x20b4 <prvInsertTimerInActiveList>
    25a2:	88 23       	and	r24, r24
    25a4:	09 f4       	brne	.+2      	; 0x25a8 <prvProcessReceivedCommands+0x98>
    25a6:	49 c0       	rjmp	.+146    	; 0x263a <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    25a8:	d5 01       	movw	r26, r10
    25aa:	54 96       	adiw	r26, 0x14	; 20
    25ac:	ed 91       	ld	r30, X+
    25ae:	fc 91       	ld	r31, X
    25b0:	55 97       	sbiw	r26, 0x15	; 21
    25b2:	c5 01       	movw	r24, r10
    25b4:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    25b6:	f5 01       	movw	r30, r10
    25b8:	86 89       	ldd	r24, Z+22	; 0x16
    25ba:	82 ff       	sbrs	r24, 2
    25bc:	3e c0       	rjmp	.+124    	; 0x263a <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    25be:	4a 81       	ldd	r20, Y+2	; 0x02
    25c0:	5b 81       	ldd	r21, Y+3	; 0x03
    25c2:	6c 81       	ldd	r22, Y+4	; 0x04
    25c4:	7d 81       	ldd	r23, Y+5	; 0x05
    25c6:	86 85       	ldd	r24, Z+14	; 0x0e
    25c8:	97 85       	ldd	r25, Z+15	; 0x0f
    25ca:	a0 89       	ldd	r26, Z+16	; 0x10
    25cc:	b1 89       	ldd	r27, Z+17	; 0x11
    25ce:	9a 01       	movw	r18, r20
    25d0:	ab 01       	movw	r20, r22
    25d2:	28 0f       	add	r18, r24
    25d4:	39 1f       	adc	r19, r25
    25d6:	4a 1f       	adc	r20, r26
    25d8:	5b 1f       	adc	r21, r27
    25da:	c1 2c       	mov	r12, r1
    25dc:	d1 2c       	mov	r13, r1
    25de:	76 01       	movw	r14, r12
    25e0:	00 e0       	ldi	r16, 0x00	; 0
    25e2:	10 e0       	ldi	r17, 0x00	; 0
    25e4:	60 e0       	ldi	r22, 0x00	; 0
    25e6:	c5 01       	movw	r24, r10
    25e8:	f7 dd       	rcall	.-1042   	; 0x21d8 <xTimerGenericCommand>
    25ea:	27 c0       	rjmp	.+78     	; 0x263a <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    25ec:	d5 01       	movw	r26, r10
    25ee:	56 96       	adiw	r26, 0x16	; 22
    25f0:	8c 91       	ld	r24, X
    25f2:	56 97       	sbiw	r26, 0x16	; 22
    25f4:	8e 7f       	andi	r24, 0xFE	; 254
    25f6:	56 96       	adiw	r26, 0x16	; 22
    25f8:	8c 93       	st	X, r24
                        break;
    25fa:	1f c0       	rjmp	.+62     	; 0x263a <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    25fc:	f5 01       	movw	r30, r10
    25fe:	86 89       	ldd	r24, Z+22	; 0x16
    2600:	81 60       	ori	r24, 0x01	; 1
    2602:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2604:	4a 81       	ldd	r20, Y+2	; 0x02
    2606:	5b 81       	ldd	r21, Y+3	; 0x03
    2608:	6c 81       	ldd	r22, Y+4	; 0x04
    260a:	7d 81       	ldd	r23, Y+5	; 0x05
    260c:	46 87       	std	Z+14, r20	; 0x0e
    260e:	57 87       	std	Z+15, r21	; 0x0f
    2610:	60 8b       	std	Z+16, r22	; 0x10
    2612:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2614:	40 0f       	add	r20, r16
    2616:	51 1f       	adc	r21, r17
    2618:	62 1f       	adc	r22, r18
    261a:	73 1f       	adc	r23, r19
    261c:	68 01       	movw	r12, r16
    261e:	79 01       	movw	r14, r18
    2620:	c5 01       	movw	r24, r10
    2622:	48 dd       	rcall	.-1392   	; 0x20b4 <prvInsertTimerInActiveList>
                        break;
    2624:	0a c0       	rjmp	.+20     	; 0x263a <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    2626:	f5 01       	movw	r30, r10
    2628:	86 89       	ldd	r24, Z+22	; 0x16
    262a:	81 fd       	sbrc	r24, 1
    262c:	04 c0       	rjmp	.+8      	; 0x2636 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    262e:	c5 01       	movw	r24, r10
    2630:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <vPortFree>
    2634:	02 c0       	rjmp	.+4      	; 0x263a <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2636:	8e 7f       	andi	r24, 0xFE	; 254
    2638:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    263a:	20 e0       	ldi	r18, 0x00	; 0
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	a9 01       	movw	r20, r18
    2640:	be 01       	movw	r22, r28
    2642:	6f 5f       	subi	r22, 0xFF	; 255
    2644:	7f 4f       	sbci	r23, 0xFF	; 255
    2646:	80 91 87 0d 	lds	r24, 0x0D87	; 0x800d87 <xTimerQueue>
    264a:	90 91 88 0d 	lds	r25, 0x0D88	; 0x800d88 <xTimerQueue+0x1>
    264e:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <xQueueReceive>
    2652:	81 11       	cpse	r24, r1
    2654:	70 cf       	rjmp	.-288    	; 0x2536 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    2656:	28 96       	adiw	r28, 0x08	; 8
    2658:	0f b6       	in	r0, 0x3f	; 63
    265a:	f8 94       	cli
    265c:	de bf       	out	0x3e, r29	; 62
    265e:	0f be       	out	0x3f, r0	; 63
    2660:	cd bf       	out	0x3d, r28	; 61
    2662:	df 91       	pop	r29
    2664:	cf 91       	pop	r28
    2666:	1f 91       	pop	r17
    2668:	0f 91       	pop	r16
    266a:	ff 90       	pop	r15
    266c:	ef 90       	pop	r14
    266e:	df 90       	pop	r13
    2670:	cf 90       	pop	r12
    2672:	bf 90       	pop	r11
    2674:	af 90       	pop	r10
    2676:	08 95       	ret

00002678 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2678:	08 95       	ret

0000267a <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    267a:	84 b1       	in	r24, 0x04	; 4
    267c:	80 68       	ori	r24, 0x80	; 128
    267e:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2680:	85 b1       	in	r24, 0x05	; 5
    2682:	80 68       	ori	r24, 0x80	; 128
    2684:	85 b9       	out	0x05, r24	; 5
    2686:	08 95       	ret

00002688 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    2688:	83 b1       	in	r24, 0x03	; 3
    268a:	80 68       	ori	r24, 0x80	; 128
    268c:	83 b9       	out	0x03, r24	; 3
    268e:	08 95       	ret

00002690 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    2690:	f4 df       	rcall	.-24     	; 0x267a <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2692:	2f ef       	ldi	r18, 0xFF	; 255
    2694:	80 e7       	ldi	r24, 0x70	; 112
    2696:	92 e0       	ldi	r25, 0x02	; 2
    2698:	21 50       	subi	r18, 0x01	; 1
    269a:	80 40       	sbci	r24, 0x00	; 0
    269c:	90 40       	sbci	r25, 0x00	; 0
    269e:	e1 f7       	brne	.-8      	; 0x2698 <vApplicationMallocFailedHook+0x8>
    26a0:	00 c0       	rjmp	.+0      	; 0x26a2 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    26a2:	00 00       	nop
    26a4:	f1 df       	rcall	.-30     	; 0x2688 <prvBlinkMainLed>
    26a6:	f5 cf       	rjmp	.-22     	; 0x2692 <vApplicationMallocFailedHook+0x2>

000026a8 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    26a8:	e8 df       	rcall	.-48     	; 0x267a <prvSetMainLedOn>
    26aa:	2f ef       	ldi	r18, 0xFF	; 255
    26ac:	87 ea       	ldi	r24, 0xA7	; 167
    26ae:	91 e6       	ldi	r25, 0x61	; 97
    26b0:	21 50       	subi	r18, 0x01	; 1
    26b2:	80 40       	sbci	r24, 0x00	; 0
    26b4:	90 40       	sbci	r25, 0x00	; 0
    26b6:	e1 f7       	brne	.-8      	; 0x26b0 <vApplicationStackOverflowHook+0x8>
    26b8:	00 c0       	rjmp	.+0      	; 0x26ba <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    26ba:	00 00       	nop
    26bc:	e5 df       	rcall	.-54     	; 0x2688 <prvBlinkMainLed>
    26be:	f5 cf       	rjmp	.-22     	; 0x26aa <vApplicationStackOverflowHook+0x2>

000026c0 <_spiCallBack>:
    26c0:	81 b3       	in	r24, 0x11	; 17
    26c2:	8f 60       	ori	r24, 0x0F	; 15
    26c4:	81 bb       	out	0x11, r24	; 17
    26c6:	28 98       	cbi	0x05, 0	; 5
    26c8:	28 9a       	sbi	0x05, 0	; 5
    26ca:	21 b3       	in	r18, 0x11	; 17
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	00 90 d3 0d 	lds	r0, 0x0DD3	; 0x800dd3 <_digitNo>
    26d4:	02 c0       	rjmp	.+4      	; 0x26da <_spiCallBack+0x1a>
    26d6:	88 0f       	add	r24, r24
    26d8:	99 1f       	adc	r25, r25
    26da:	0a 94       	dec	r0
    26dc:	e2 f7       	brpl	.-8      	; 0x26d6 <_spiCallBack+0x16>
    26de:	80 95       	com	r24
    26e0:	82 23       	and	r24, r18
    26e2:	81 bb       	out	0x11, r24	; 17
    26e4:	e0 91 a3 0d 	lds	r30, 0x0DA3	; 0x800da3 <_displayDoneCallBack>
    26e8:	f0 91 a4 0d 	lds	r31, 0x0DA4	; 0x800da4 <_displayDoneCallBack+0x1>
    26ec:	30 97       	sbiw	r30, 0x00	; 0
    26ee:	09 f0       	breq	.+2      	; 0x26f2 <_spiCallBack+0x32>
    26f0:	19 95       	eicall
    26f2:	08 95       	ret

000026f4 <display_7seg_displayErr>:
    26f4:	9f b7       	in	r25, 0x3f	; 63
    26f6:	f8 94       	cli
    26f8:	ef ec       	ldi	r30, 0xCF	; 207
    26fa:	fd e0       	ldi	r31, 0x0D	; 13
    26fc:	10 82       	st	Z, r1
    26fe:	8e e9       	ldi	r24, 0x9E	; 158
    2700:	81 83       	std	Z+1, r24	; 0x01
    2702:	8a e0       	ldi	r24, 0x0A	; 10
    2704:	82 83       	std	Z+2, r24	; 0x02
    2706:	83 83       	std	Z+3, r24	; 0x03
    2708:	9f bf       	out	0x3f, r25	; 63
    270a:	08 95       	ret

0000270c <display_7seg_display>:
    270c:	bf 92       	push	r11
    270e:	cf 92       	push	r12
    2710:	df 92       	push	r13
    2712:	ef 92       	push	r14
    2714:	ff 92       	push	r15
    2716:	0f 93       	push	r16
    2718:	1f 93       	push	r17
    271a:	cf 93       	push	r28
    271c:	df 93       	push	r29
    271e:	6b 01       	movw	r12, r22
    2720:	7c 01       	movw	r14, r24
    2722:	b4 2e       	mov	r11, r20
    2724:	10 92 a6 0d 	sts	0x0DA6, r1	; 0x800da6 <_maxHexSegmentindex>
    2728:	83 e0       	ldi	r24, 0x03	; 3
    272a:	84 17       	cp	r24, r20
    272c:	88 f1       	brcs	.+98     	; 0x2790 <display_7seg_display+0x84>
    272e:	64 2f       	mov	r22, r20
    2730:	70 e0       	ldi	r23, 0x00	; 0
    2732:	80 e0       	ldi	r24, 0x00	; 0
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	0e 94 a9 1b 	call	0x3752	; 0x3752 <__floatunsisf>
    273a:	9b 01       	movw	r18, r22
    273c:	ac 01       	movw	r20, r24
    273e:	60 e0       	ldi	r22, 0x00	; 0
    2740:	70 e0       	ldi	r23, 0x00	; 0
    2742:	80 e2       	ldi	r24, 0x20	; 32
    2744:	91 e4       	ldi	r25, 0x41	; 65
    2746:	0e 94 ed 1c 	call	0x39da	; 0x39da <pow>
    274a:	a7 01       	movw	r20, r14
    274c:	96 01       	movw	r18, r12
    274e:	0e 94 8a 1c 	call	0x3914	; 0x3914 <__mulsf3>
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	40 e0       	ldi	r20, 0x00	; 0
    2758:	5f e3       	ldi	r21, 0x3F	; 63
    275a:	fe d6       	rcall	.+3580   	; 0x3558 <__addsf3>
    275c:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <floor>
    2760:	c7 d7       	rcall	.+3982   	; 0x36f0 <__fixsfsi>
    2762:	ab 01       	movw	r20, r22
    2764:	77 23       	and	r23, r23
    2766:	64 f4       	brge	.+24     	; 0x2780 <display_7seg_display+0x74>
    2768:	44 27       	eor	r20, r20
    276a:	55 27       	eor	r21, r21
    276c:	46 1b       	sub	r20, r22
    276e:	57 0b       	sbc	r21, r23
    2770:	21 e0       	ldi	r18, 0x01	; 1
    2772:	48 3e       	cpi	r20, 0xE8	; 232
    2774:	83 e0       	ldi	r24, 0x03	; 3
    2776:	58 07       	cpc	r21, r24
    2778:	0c f4       	brge	.+2      	; 0x277c <display_7seg_display+0x70>
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	11 e0       	ldi	r17, 0x01	; 1
    277e:	0c c0       	rjmp	.+24     	; 0x2798 <display_7seg_display+0x8c>
    2780:	21 e0       	ldi	r18, 0x01	; 1
    2782:	40 31       	cpi	r20, 0x10	; 16
    2784:	87 e2       	ldi	r24, 0x27	; 39
    2786:	58 07       	cpc	r21, r24
    2788:	0c f4       	brge	.+2      	; 0x278c <display_7seg_display+0x80>
    278a:	20 e0       	ldi	r18, 0x00	; 0
    278c:	10 e0       	ldi	r17, 0x00	; 0
    278e:	04 c0       	rjmp	.+8      	; 0x2798 <display_7seg_display+0x8c>
    2790:	40 e0       	ldi	r20, 0x00	; 0
    2792:	50 e0       	ldi	r21, 0x00	; 0
    2794:	21 e0       	ldi	r18, 0x01	; 1
    2796:	10 e0       	ldi	r17, 0x00	; 0
    2798:	0f b7       	in	r16, 0x3f	; 63
    279a:	f8 94       	cli
    279c:	22 23       	and	r18, r18
    279e:	11 f0       	breq	.+4      	; 0x27a4 <display_7seg_display+0x98>
    27a0:	a9 df       	rcall	.-174    	; 0x26f4 <display_7seg_displayErr>
    27a2:	51 c0       	rjmp	.+162    	; 0x2846 <display_7seg_display+0x13a>
    27a4:	c3 ed       	ldi	r28, 0xD3	; 211
    27a6:	dd e0       	ldi	r29, 0x0D	; 13
    27a8:	0f 2e       	mov	r0, r31
    27aa:	ff ec       	ldi	r31, 0xCF	; 207
    27ac:	cf 2e       	mov	r12, r31
    27ae:	fd e0       	ldi	r31, 0x0D	; 13
    27b0:	df 2e       	mov	r13, r31
    27b2:	f0 2d       	mov	r31, r0
    27b4:	0f 2e       	mov	r0, r31
    27b6:	fa e0       	ldi	r31, 0x0A	; 10
    27b8:	ef 2e       	mov	r14, r31
    27ba:	f1 2c       	mov	r15, r1
    27bc:	f0 2d       	mov	r31, r0
    27be:	ca 01       	movw	r24, r20
    27c0:	b7 01       	movw	r22, r14
    27c2:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <__divmodhi4>
    27c6:	fc 01       	movw	r30, r24
    27c8:	ec 52       	subi	r30, 0x2C	; 44
    27ca:	fd 4f       	sbci	r31, 0xFD	; 253
    27cc:	80 81       	ld	r24, Z
    27ce:	8a 93       	st	-Y, r24
    27d0:	46 2f       	mov	r20, r22
    27d2:	57 2f       	mov	r21, r23
    27d4:	cc 15       	cp	r28, r12
    27d6:	dd 05       	cpc	r29, r13
    27d8:	91 f7       	brne	.-28     	; 0x27be <display_7seg_display+0xb2>
    27da:	43 e0       	ldi	r20, 0x03	; 3
    27dc:	50 e0       	ldi	r21, 0x00	; 0
    27de:	4b 19       	sub	r20, r11
    27e0:	51 09       	sbc	r21, r1
    27e2:	14 16       	cp	r1, r20
    27e4:	15 06       	cpc	r1, r21
    27e6:	f4 f4       	brge	.+60     	; 0x2824 <display_7seg_display+0x118>
    27e8:	80 91 cf 0d 	lds	r24, 0x0DCF	; 0x800dcf <_digitSegments>
    27ec:	8c 3f       	cpi	r24, 0xFC	; 252
    27ee:	49 f0       	breq	.+18     	; 0x2802 <display_7seg_display+0xf6>
    27f0:	60 e0       	ldi	r22, 0x00	; 0
    27f2:	19 c0       	rjmp	.+50     	; 0x2826 <display_7seg_display+0x11a>
    27f4:	fc 01       	movw	r30, r24
    27f6:	e1 53       	subi	r30, 0x31	; 49
    27f8:	f2 4f       	sbci	r31, 0xF2	; 242
    27fa:	30 81       	ld	r19, Z
    27fc:	3c 3f       	cpi	r19, 0xFC	; 252
    27fe:	21 f0       	breq	.+8      	; 0x2808 <display_7seg_display+0xfc>
    2800:	12 c0       	rjmp	.+36     	; 0x2826 <display_7seg_display+0x11a>
    2802:	80 e0       	ldi	r24, 0x00	; 0
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	20 e0       	ldi	r18, 0x00	; 0
    2808:	fc 01       	movw	r30, r24
    280a:	e1 53       	subi	r30, 0x31	; 49
    280c:	f2 4f       	sbci	r31, 0xF2	; 242
    280e:	10 82       	st	Z, r1
    2810:	62 2f       	mov	r22, r18
    2812:	2f 5f       	subi	r18, 0xFF	; 255
    2814:	82 2f       	mov	r24, r18
    2816:	02 2e       	mov	r0, r18
    2818:	00 0c       	add	r0, r0
    281a:	99 0b       	sbc	r25, r25
    281c:	84 17       	cp	r24, r20
    281e:	95 07       	cpc	r25, r21
    2820:	4c f3       	brlt	.-46     	; 0x27f4 <display_7seg_display+0xe8>
    2822:	01 c0       	rjmp	.+2      	; 0x2826 <display_7seg_display+0x11a>
    2824:	60 e0       	ldi	r22, 0x00	; 0
    2826:	11 23       	and	r17, r17
    2828:	31 f0       	breq	.+12     	; 0x2836 <display_7seg_display+0x12a>
    282a:	e6 2f       	mov	r30, r22
    282c:	f0 e0       	ldi	r31, 0x00	; 0
    282e:	e1 53       	subi	r30, 0x31	; 49
    2830:	f2 4f       	sbci	r31, 0xF2	; 242
    2832:	82 e0       	ldi	r24, 0x02	; 2
    2834:	80 83       	st	Z, r24
    2836:	bb 20       	and	r11, r11
    2838:	31 f0       	breq	.+12     	; 0x2846 <display_7seg_display+0x13a>
    283a:	fa 01       	movw	r30, r20
    283c:	e1 53       	subi	r30, 0x31	; 49
    283e:	f2 4f       	sbci	r31, 0xF2	; 242
    2840:	80 81       	ld	r24, Z
    2842:	81 60       	ori	r24, 0x01	; 1
    2844:	80 83       	st	Z, r24
    2846:	0f bf       	out	0x3f, r16	; 63
    2848:	df 91       	pop	r29
    284a:	cf 91       	pop	r28
    284c:	1f 91       	pop	r17
    284e:	0f 91       	pop	r16
    2850:	ff 90       	pop	r15
    2852:	ef 90       	pop	r14
    2854:	df 90       	pop	r13
    2856:	cf 90       	pop	r12
    2858:	bf 90       	pop	r11
    285a:	08 95       	ret

0000285c <display_7seg_powerUp>:
    285c:	85 b5       	in	r24, 0x25	; 37
    285e:	85 60       	ori	r24, 0x05	; 5
    2860:	85 bd       	out	0x25, r24	; 37
    2862:	08 95       	ret

00002864 <display_7seg_powerDown>:
    2864:	85 b5       	in	r24, 0x25	; 37
    2866:	88 7f       	andi	r24, 0xF8	; 248
    2868:	85 bd       	out	0x25, r24	; 37
    286a:	81 b3       	in	r24, 0x11	; 17
    286c:	8f 60       	ori	r24, 0x0F	; 15
    286e:	81 bb       	out	0x11, r24	; 17
    2870:	08 95       	ret

00002872 <display_7seg_initialise>:
    2872:	8f 92       	push	r8
    2874:	af 92       	push	r10
    2876:	cf 92       	push	r12
    2878:	ef 92       	push	r14
    287a:	0f 93       	push	r16
    287c:	1f 93       	push	r17
    287e:	cf 93       	push	r28
    2880:	df 93       	push	r29
    2882:	ec 01       	movw	r28, r24
    2884:	80 b3       	in	r24, 0x10	; 16
    2886:	8f 60       	ori	r24, 0x0F	; 15
    2888:	80 bb       	out	0x10, r24	; 16
    288a:	81 b3       	in	r24, 0x11	; 17
    288c:	8f 60       	ori	r24, 0x0F	; 15
    288e:	81 bb       	out	0x11, r24	; 17
    2890:	20 9a       	sbi	0x04, 0	; 4
    2892:	80 e6       	ldi	r24, 0x60	; 96
    2894:	93 e1       	ldi	r25, 0x13	; 19
    2896:	9f 93       	push	r25
    2898:	8f 93       	push	r24
    289a:	81 2c       	mov	r8, r1
    289c:	a1 2c       	mov	r10, r1
    289e:	c1 2c       	mov	r12, r1
    28a0:	e1 2c       	mov	r14, r1
    28a2:	00 e0       	ldi	r16, 0x00	; 0
    28a4:	10 e0       	ldi	r17, 0x00	; 0
    28a6:	20 e2       	ldi	r18, 0x20	; 32
    28a8:	40 e0       	ldi	r20, 0x00	; 0
    28aa:	63 e0       	ldi	r22, 0x03	; 3
    28ac:	80 e1       	ldi	r24, 0x10	; 16
    28ae:	0e d1       	rcall	.+540    	; 0x2acc <spi_create>
    28b0:	90 93 d5 0d 	sts	0x0DD5, r25	; 0x800dd5 <_spi+0x1>
    28b4:	80 93 d4 0d 	sts	0x0DD4, r24	; 0x800dd4 <_spi>
    28b8:	89 e1       	ldi	r24, 0x19	; 25
    28ba:	87 bd       	out	0x27, r24	; 39
    28bc:	84 b5       	in	r24, 0x24	; 36
    28be:	82 60       	ori	r24, 0x02	; 2
    28c0:	84 bd       	out	0x24, r24	; 36
    28c2:	ee e6       	ldi	r30, 0x6E	; 110
    28c4:	f0 e0       	ldi	r31, 0x00	; 0
    28c6:	80 81       	ld	r24, Z
    28c8:	82 60       	ori	r24, 0x02	; 2
    28ca:	80 83       	st	Z, r24
    28cc:	cb df       	rcall	.-106    	; 0x2864 <display_7seg_powerDown>
    28ce:	d0 93 a4 0d 	sts	0x0DA4, r29	; 0x800da4 <_displayDoneCallBack+0x1>
    28d2:	c0 93 a3 0d 	sts	0x0DA3, r28	; 0x800da3 <_displayDoneCallBack>
    28d6:	0f 90       	pop	r0
    28d8:	0f 90       	pop	r0
    28da:	df 91       	pop	r29
    28dc:	cf 91       	pop	r28
    28de:	1f 91       	pop	r17
    28e0:	0f 91       	pop	r16
    28e2:	ef 90       	pop	r14
    28e4:	cf 90       	pop	r12
    28e6:	af 90       	pop	r10
    28e8:	8f 90       	pop	r8
    28ea:	08 95       	ret

000028ec <__vector_21>:
    28ec:	1f 92       	push	r1
    28ee:	0f 92       	push	r0
    28f0:	0f b6       	in	r0, 0x3f	; 63
    28f2:	0f 92       	push	r0
    28f4:	11 24       	eor	r1, r1
    28f6:	0b b6       	in	r0, 0x3b	; 59
    28f8:	0f 92       	push	r0
    28fa:	2f 93       	push	r18
    28fc:	3f 93       	push	r19
    28fe:	4f 93       	push	r20
    2900:	5f 93       	push	r21
    2902:	6f 93       	push	r22
    2904:	7f 93       	push	r23
    2906:	8f 93       	push	r24
    2908:	9f 93       	push	r25
    290a:	af 93       	push	r26
    290c:	bf 93       	push	r27
    290e:	ef 93       	push	r30
    2910:	ff 93       	push	r31
    2912:	80 91 a6 0d 	lds	r24, 0x0DA6	; 0x800da6 <_maxHexSegmentindex>
    2916:	88 23       	and	r24, r24
    2918:	69 f1       	breq	.+90     	; 0x2974 <__vector_21+0x88>
    291a:	20 91 a7 0d 	lds	r18, 0x0DA7	; 0x800da7 <_intCounter>
    291e:	30 91 a8 0d 	lds	r19, 0x0DA8	; 0x800da8 <_intCounter+0x1>
    2922:	25 3f       	cpi	r18, 0xF5	; 245
    2924:	91 e0       	ldi	r25, 0x01	; 1
    2926:	39 07       	cpc	r19, r25
    2928:	38 f4       	brcc	.+14     	; 0x2938 <__vector_21+0x4c>
    292a:	2f 5f       	subi	r18, 0xFF	; 255
    292c:	3f 4f       	sbci	r19, 0xFF	; 255
    292e:	30 93 a8 0d 	sts	0x0DA8, r19	; 0x800da8 <_intCounter+0x1>
    2932:	20 93 a7 0d 	sts	0x0DA7, r18	; 0x800da7 <_intCounter>
    2936:	1e c0       	rjmp	.+60     	; 0x2974 <__vector_21+0x88>
    2938:	10 92 a8 0d 	sts	0x0DA8, r1	; 0x800da8 <_intCounter+0x1>
    293c:	10 92 a7 0d 	sts	0x0DA7, r1	; 0x800da7 <_intCounter>
    2940:	e0 91 a5 0d 	lds	r30, 0x0DA5	; 0x800da5 <_scrollIndex>
    2944:	2e 2f       	mov	r18, r30
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	04 97       	sbiw	r24, 0x04	; 4
    294c:	28 17       	cp	r18, r24
    294e:	39 07       	cpc	r19, r25
    2950:	14 f4       	brge	.+4      	; 0x2956 <__vector_21+0x6a>
    2952:	ef 5f       	subi	r30, 0xFF	; 255
    2954:	01 c0       	rjmp	.+2      	; 0x2958 <__vector_21+0x6c>
    2956:	e0 e0       	ldi	r30, 0x00	; 0
    2958:	e0 93 a5 0d 	sts	0x0DA5, r30	; 0x800da5 <_scrollIndex>
    295c:	f0 e0       	ldi	r31, 0x00	; 0
    295e:	e7 55       	subi	r30, 0x57	; 87
    2960:	f2 4f       	sbci	r31, 0xF2	; 242
    2962:	af ec       	ldi	r26, 0xCF	; 207
    2964:	bd e0       	ldi	r27, 0x0D	; 13
    2966:	23 ed       	ldi	r18, 0xD3	; 211
    2968:	3d e0       	ldi	r19, 0x0D	; 13
    296a:	81 91       	ld	r24, Z+
    296c:	8d 93       	st	X+, r24
    296e:	a2 17       	cp	r26, r18
    2970:	b3 07       	cpc	r27, r19
    2972:	d9 f7       	brne	.-10     	; 0x296a <__vector_21+0x7e>
    2974:	80 91 d3 0d 	lds	r24, 0x0DD3	; 0x800dd3 <_digitNo>
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	01 96       	adiw	r24, 0x01	; 1
    297c:	83 70       	andi	r24, 0x03	; 3
    297e:	90 78       	andi	r25, 0x80	; 128
    2980:	99 23       	and	r25, r25
    2982:	24 f4       	brge	.+8      	; 0x298c <__vector_21+0xa0>
    2984:	01 97       	sbiw	r24, 0x01	; 1
    2986:	8c 6f       	ori	r24, 0xFC	; 252
    2988:	9f 6f       	ori	r25, 0xFF	; 255
    298a:	01 96       	adiw	r24, 0x01	; 1
    298c:	80 93 d3 0d 	sts	0x0DD3, r24	; 0x800dd3 <_digitNo>
    2990:	99 27       	eor	r25, r25
    2992:	fc 01       	movw	r30, r24
    2994:	e1 53       	subi	r30, 0x31	; 49
    2996:	f2 4f       	sbci	r31, 0xF2	; 242
    2998:	60 81       	ld	r22, Z
    299a:	60 95       	com	r22
    299c:	80 91 d4 0d 	lds	r24, 0x0DD4	; 0x800dd4 <_spi>
    29a0:	90 91 d5 0d 	lds	r25, 0x0DD5	; 0x800dd5 <_spi+0x1>
    29a4:	6a d1       	rcall	.+724    	; 0x2c7a <spi_sendByte>
    29a6:	ff 91       	pop	r31
    29a8:	ef 91       	pop	r30
    29aa:	bf 91       	pop	r27
    29ac:	af 91       	pop	r26
    29ae:	9f 91       	pop	r25
    29b0:	8f 91       	pop	r24
    29b2:	7f 91       	pop	r23
    29b4:	6f 91       	pop	r22
    29b6:	5f 91       	pop	r21
    29b8:	4f 91       	pop	r20
    29ba:	3f 91       	pop	r19
    29bc:	2f 91       	pop	r18
    29be:	0f 90       	pop	r0
    29c0:	0b be       	out	0x3b, r0	; 59
    29c2:	0f 90       	pop	r0
    29c4:	0f be       	out	0x3f, r0	; 63
    29c6:	0f 90       	pop	r0
    29c8:	1f 90       	pop	r1
    29ca:	18 95       	reti

000029cc <usart_getchar>:
    29cc:	cf 93       	push	r28
    29ce:	df 93       	push	r29
    29d0:	1f 92       	push	r1
    29d2:	cd b7       	in	r28, 0x3d	; 61
    29d4:	de b7       	in	r29, 0x3e	; 62
    29d6:	be 01       	movw	r22, r28
    29d8:	6f 5f       	subi	r22, 0xFF	; 255
    29da:	7f 4f       	sbci	r23, 0xFF	; 255
    29dc:	80 91 d6 0d 	lds	r24, 0x0DD6	; 0x800dd6 <_com_serial_instance>
    29e0:	90 91 d7 0d 	lds	r25, 0x0DD7	; 0x800dd7 <_com_serial_instance+0x1>
    29e4:	40 d3       	rcall	.+1664   	; 0x3066 <serial_getByte>
    29e6:	81 11       	cpse	r24, r1
    29e8:	f6 cf       	rjmp	.-20     	; 0x29d6 <usart_getchar+0xa>
    29ea:	89 81       	ldd	r24, Y+1	; 0x01
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	0f 90       	pop	r0
    29f0:	df 91       	pop	r29
    29f2:	cf 91       	pop	r28
    29f4:	08 95       	ret

000029f6 <usart_putchar>:
    29f6:	68 2f       	mov	r22, r24
    29f8:	80 91 d6 0d 	lds	r24, 0x0DD6	; 0x800dd6 <_com_serial_instance>
    29fc:	90 91 d7 0d 	lds	r25, 0x0DD7	; 0x800dd7 <_com_serial_instance+0x1>
    2a00:	07 d3       	rcall	.+1550   	; 0x3010 <serial_sendByte>
    2a02:	80 e0       	ldi	r24, 0x00	; 0
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	08 95       	ret

00002a08 <stdio_initialise>:
    2a08:	8f 92       	push	r8
    2a0a:	9f 92       	push	r9
    2a0c:	af 92       	push	r10
    2a0e:	cf 92       	push	r12
    2a10:	ef 92       	push	r14
    2a12:	0f 93       	push	r16
    2a14:	81 2c       	mov	r8, r1
    2a16:	91 2c       	mov	r9, r1
    2a18:	68 94       	set
    2a1a:	aa 24       	eor	r10, r10
    2a1c:	a7 f8       	bld	r10, 7
    2a1e:	68 94       	set
    2a20:	cc 24       	eor	r12, r12
    2a22:	c7 f8       	bld	r12, 7
    2a24:	e1 2c       	mov	r14, r1
    2a26:	00 e0       	ldi	r16, 0x00	; 0
    2a28:	23 e0       	ldi	r18, 0x03	; 3
    2a2a:	40 e0       	ldi	r20, 0x00	; 0
    2a2c:	51 ee       	ldi	r21, 0xE1	; 225
    2a2e:	60 e0       	ldi	r22, 0x00	; 0
    2a30:	70 e0       	ldi	r23, 0x00	; 0
    2a32:	52 d2       	rcall	.+1188   	; 0x2ed8 <serial_create>
    2a34:	90 93 d7 0d 	sts	0x0DD7, r25	; 0x800dd7 <_com_serial_instance+0x1>
    2a38:	80 93 d6 0d 	sts	0x0DD6, r24	; 0x800dd6 <_com_serial_instance>
    2a3c:	e2 eb       	ldi	r30, 0xB2	; 178
    2a3e:	fe e0       	ldi	r31, 0x0E	; 14
    2a40:	87 e0       	ldi	r24, 0x07	; 7
    2a42:	92 e0       	ldi	r25, 0x02	; 2
    2a44:	91 83       	std	Z+1, r25	; 0x01
    2a46:	80 83       	st	Z, r24
    2a48:	93 83       	std	Z+3, r25	; 0x03
    2a4a:	82 83       	std	Z+2, r24	; 0x02
    2a4c:	0f 91       	pop	r16
    2a4e:	ef 90       	pop	r14
    2a50:	cf 90       	pop	r12
    2a52:	af 90       	pop	r10
    2a54:	9f 90       	pop	r9
    2a56:	8f 90       	pop	r8
    2a58:	08 95       	ret

00002a5a <_select_instance>:
    2a5a:	e0 91 d9 0d 	lds	r30, 0x0DD9	; 0x800dd9 <_this>
    2a5e:	f0 91 da 0d 	lds	r31, 0x0DDA	; 0x800dda <_this+0x1>
    2a62:	30 97       	sbiw	r30, 0x00	; 0
    2a64:	f9 f0       	breq	.+62     	; 0x2aa4 <_select_instance+0x4a>
    2a66:	a0 81       	ld	r26, Z
    2a68:	b1 81       	ldd	r27, Z+1	; 0x01
    2a6a:	10 97       	sbiw	r26, 0x00	; 0
    2a6c:	d9 f0       	breq	.+54     	; 0x2aa4 <_select_instance+0x4a>
    2a6e:	23 81       	ldd	r18, Z+3	; 0x03
    2a70:	21 30       	cpi	r18, 0x01	; 1
    2a72:	69 f4       	brne	.+26     	; 0x2a8e <_select_instance+0x34>
    2a74:	4c 91       	ld	r20, X
    2a76:	21 e0       	ldi	r18, 0x01	; 1
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	02 80       	ldd	r0, Z+2	; 0x02
    2a7c:	02 c0       	rjmp	.+4      	; 0x2a82 <_select_instance+0x28>
    2a7e:	22 0f       	add	r18, r18
    2a80:	33 1f       	adc	r19, r19
    2a82:	0a 94       	dec	r0
    2a84:	e2 f7       	brpl	.-8      	; 0x2a7e <_select_instance+0x24>
    2a86:	20 95       	com	r18
    2a88:	24 23       	and	r18, r20
    2a8a:	2c 93       	st	X, r18
    2a8c:	0b c0       	rjmp	.+22     	; 0x2aa4 <_select_instance+0x4a>
    2a8e:	4c 91       	ld	r20, X
    2a90:	21 e0       	ldi	r18, 0x01	; 1
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	02 80       	ldd	r0, Z+2	; 0x02
    2a96:	02 c0       	rjmp	.+4      	; 0x2a9c <_select_instance+0x42>
    2a98:	22 0f       	add	r18, r18
    2a9a:	33 1f       	adc	r19, r19
    2a9c:	0a 94       	dec	r0
    2a9e:	e2 f7       	brpl	.-8      	; 0x2a98 <_select_instance+0x3e>
    2aa0:	24 2b       	or	r18, r20
    2aa2:	2c 93       	st	X, r18
    2aa4:	90 93 da 0d 	sts	0x0DDA, r25	; 0x800dda <_this+0x1>
    2aa8:	80 93 d9 0d 	sts	0x0DD9, r24	; 0x800dd9 <_this>
    2aac:	00 97       	sbiw	r24, 0x00	; 0
    2aae:	69 f0       	breq	.+26     	; 0x2aca <_select_instance+0x70>
    2ab0:	10 92 db 0d 	sts	0x0DDB, r1	; 0x800ddb <_spi_active>
    2ab4:	2c b5       	in	r18, 0x2c	; 44
    2ab6:	2f 73       	andi	r18, 0x3F	; 63
    2ab8:	2c bd       	out	0x2c, r18	; 44
    2aba:	fc 01       	movw	r30, r24
    2abc:	24 81       	ldd	r18, Z+4	; 0x04
    2abe:	2c bd       	out	0x2c, r18	; 44
    2ac0:	85 81       	ldd	r24, Z+5	; 0x05
    2ac2:	8d bd       	out	0x2d, r24	; 45
    2ac4:	8c b5       	in	r24, 0x2c	; 44
    2ac6:	80 64       	ori	r24, 0x40	; 64
    2ac8:	8c bd       	out	0x2c, r24	; 44
    2aca:	08 95       	ret

00002acc <spi_create>:
    2acc:	4f 92       	push	r4
    2ace:	5f 92       	push	r5
    2ad0:	6f 92       	push	r6
    2ad2:	7f 92       	push	r7
    2ad4:	8f 92       	push	r8
    2ad6:	9f 92       	push	r9
    2ad8:	af 92       	push	r10
    2ada:	bf 92       	push	r11
    2adc:	cf 92       	push	r12
    2ade:	df 92       	push	r13
    2ae0:	ef 92       	push	r14
    2ae2:	ff 92       	push	r15
    2ae4:	0f 93       	push	r16
    2ae6:	1f 93       	push	r17
    2ae8:	cf 93       	push	r28
    2aea:	df 93       	push	r29
    2aec:	cd b7       	in	r28, 0x3d	; 61
    2aee:	de b7       	in	r29, 0x3e	; 62
    2af0:	98 2e       	mov	r9, r24
    2af2:	b6 2e       	mov	r11, r22
    2af4:	d4 2e       	mov	r13, r20
    2af6:	f2 2e       	mov	r15, r18
    2af8:	80 91 d8 0d 	lds	r24, 0x0DD8	; 0x800dd8 <_initialised>
    2afc:	81 11       	cpse	r24, r1
    2afe:	06 c0       	rjmp	.+12     	; 0x2b0c <spi_create+0x40>
    2b00:	84 b1       	in	r24, 0x04	; 4
    2b02:	87 60       	ori	r24, 0x07	; 7
    2b04:	84 b9       	out	0x04, r24	; 4
    2b06:	81 e0       	ldi	r24, 0x01	; 1
    2b08:	80 93 d8 0d 	sts	0x0DD8, r24	; 0x800dd8 <_initialised>
    2b0c:	8c e0       	ldi	r24, 0x0C	; 12
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <malloc>
    2b14:	3c 01       	movw	r6, r24
    2b16:	dc 01       	movw	r26, r24
    2b18:	11 96       	adiw	r26, 0x01	; 1
    2b1a:	1c 93       	st	X, r17
    2b1c:	0e 93       	st	-X, r16
    2b1e:	12 96       	adiw	r26, 0x02	; 2
    2b20:	ec 92       	st	X, r14
    2b22:	12 97       	sbiw	r26, 0x02	; 2
    2b24:	13 96       	adiw	r26, 0x03	; 3
    2b26:	cc 92       	st	X, r12
    2b28:	13 97       	sbiw	r26, 0x03	; 3
    2b2a:	8d 2d       	mov	r24, r13
    2b2c:	88 0f       	add	r24, r24
    2b2e:	88 0f       	add	r24, r24
    2b30:	f8 2a       	or	r15, r24
    2b32:	eb 2d       	mov	r30, r11
    2b34:	f0 e0       	ldi	r31, 0x00	; 0
    2b36:	ec 51       	subi	r30, 0x1C	; 28
    2b38:	fd 4f       	sbci	r31, 0xFD	; 253
    2b3a:	80 81       	ld	r24, Z
    2b3c:	98 2a       	or	r9, r24
    2b3e:	8f 2d       	mov	r24, r15
    2b40:	89 29       	or	r24, r9
    2b42:	14 96       	adiw	r26, 0x04	; 4
    2b44:	8c 93       	st	X, r24
    2b46:	b3 e0       	ldi	r27, 0x03	; 3
    2b48:	bb 15       	cp	r27, r11
    2b4a:	18 f4       	brcc	.+6      	; 0x2b52 <spi_create+0x86>
    2b4c:	81 e0       	ldi	r24, 0x01	; 1
    2b4e:	f3 01       	movw	r30, r6
    2b50:	85 83       	std	Z+5, r24	; 0x05
    2b52:	a1 10       	cpse	r10, r1
    2b54:	06 c0       	rjmp	.+12     	; 0x2b62 <spi_create+0x96>
    2b56:	d3 01       	movw	r26, r6
    2b58:	19 96       	adiw	r26, 0x09	; 9
    2b5a:	1c 92       	st	X, r1
    2b5c:	1e 92       	st	-X, r1
    2b5e:	18 97       	sbiw	r26, 0x08	; 8
    2b60:	14 c0       	rjmp	.+40     	; 0x2b8a <spi_create+0xbe>
    2b62:	6a 2d       	mov	r22, r10
    2b64:	70 e0       	ldi	r23, 0x00	; 0
    2b66:	84 e0       	ldi	r24, 0x04	; 4
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <calloc>
    2b6e:	2c 01       	movw	r4, r24
    2b70:	61 e0       	ldi	r22, 0x01	; 1
    2b72:	70 e0       	ldi	r23, 0x00	; 0
    2b74:	86 e0       	ldi	r24, 0x06	; 6
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <calloc>
    2b7c:	6c 01       	movw	r12, r24
    2b7e:	4a 2d       	mov	r20, r10
    2b80:	b2 01       	movw	r22, r4
    2b82:	8b d1       	rcall	.+790    	; 0x2e9a <fifo_init>
    2b84:	f3 01       	movw	r30, r6
    2b86:	d1 86       	std	Z+9, r13	; 0x09
    2b88:	c0 86       	std	Z+8, r12	; 0x08
    2b8a:	81 10       	cpse	r8, r1
    2b8c:	06 c0       	rjmp	.+12     	; 0x2b9a <spi_create+0xce>
    2b8e:	d3 01       	movw	r26, r6
    2b90:	17 96       	adiw	r26, 0x07	; 7
    2b92:	1c 92       	st	X, r1
    2b94:	1e 92       	st	-X, r1
    2b96:	16 97       	sbiw	r26, 0x06	; 6
    2b98:	14 c0       	rjmp	.+40     	; 0x2bc2 <spi_create+0xf6>
    2b9a:	68 2d       	mov	r22, r8
    2b9c:	70 e0       	ldi	r23, 0x00	; 0
    2b9e:	84 e0       	ldi	r24, 0x04	; 4
    2ba0:	90 e0       	ldi	r25, 0x00	; 0
    2ba2:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <calloc>
    2ba6:	5c 01       	movw	r10, r24
    2ba8:	61 e0       	ldi	r22, 0x01	; 1
    2baa:	70 e0       	ldi	r23, 0x00	; 0
    2bac:	86 e0       	ldi	r24, 0x06	; 6
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <calloc>
    2bb4:	6c 01       	movw	r12, r24
    2bb6:	48 2d       	mov	r20, r8
    2bb8:	b5 01       	movw	r22, r10
    2bba:	6f d1       	rcall	.+734    	; 0x2e9a <fifo_init>
    2bbc:	f3 01       	movw	r30, r6
    2bbe:	d7 82       	std	Z+7, r13	; 0x07
    2bc0:	c6 82       	std	Z+6, r12	; 0x06
    2bc2:	8c 89       	ldd	r24, Y+20	; 0x14
    2bc4:	9d 89       	ldd	r25, Y+21	; 0x15
    2bc6:	d3 01       	movw	r26, r6
    2bc8:	1b 96       	adiw	r26, 0x0b	; 11
    2bca:	9c 93       	st	X, r25
    2bcc:	8e 93       	st	-X, r24
    2bce:	1a 97       	sbiw	r26, 0x0a	; 10
    2bd0:	01 15       	cp	r16, r1
    2bd2:	11 05       	cpc	r17, r1
    2bd4:	59 f0       	breq	.+22     	; 0x2bec <spi_create+0x120>
    2bd6:	f8 01       	movw	r30, r16
    2bd8:	22 91       	ld	r18, -Z
    2bda:	81 e0       	ldi	r24, 0x01	; 1
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	02 c0       	rjmp	.+4      	; 0x2be4 <spi_create+0x118>
    2be0:	88 0f       	add	r24, r24
    2be2:	99 1f       	adc	r25, r25
    2be4:	ea 94       	dec	r14
    2be6:	e2 f7       	brpl	.-8      	; 0x2be0 <spi_create+0x114>
    2be8:	82 2b       	or	r24, r18
    2bea:	80 83       	st	Z, r24
    2bec:	2f b7       	in	r18, 0x3f	; 63
    2bee:	f8 94       	cli
    2bf0:	40 91 d9 0d 	lds	r20, 0x0DD9	; 0x800dd9 <_this>
    2bf4:	50 91 da 0d 	lds	r21, 0x0DDA	; 0x800dda <_this+0x1>
    2bf8:	70 92 da 0d 	sts	0x0DDA, r7	; 0x800dda <_this+0x1>
    2bfc:	60 92 d9 0d 	sts	0x0DD9, r6	; 0x800dd9 <_this>
    2c00:	d3 01       	movw	r26, r6
    2c02:	ed 91       	ld	r30, X+
    2c04:	fc 91       	ld	r31, X
    2c06:	11 97       	sbiw	r26, 0x01	; 1
    2c08:	30 97       	sbiw	r30, 0x00	; 0
    2c0a:	01 f1       	breq	.+64     	; 0x2c4c <spi_create+0x180>
    2c0c:	13 96       	adiw	r26, 0x03	; 3
    2c0e:	8c 91       	ld	r24, X
    2c10:	13 97       	sbiw	r26, 0x03	; 3
    2c12:	81 30       	cpi	r24, 0x01	; 1
    2c14:	71 f4       	brne	.+28     	; 0x2c32 <spi_create+0x166>
    2c16:	30 81       	ld	r19, Z
    2c18:	81 e0       	ldi	r24, 0x01	; 1
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	12 96       	adiw	r26, 0x02	; 2
    2c1e:	0c 90       	ld	r0, X
    2c20:	02 c0       	rjmp	.+4      	; 0x2c26 <spi_create+0x15a>
    2c22:	88 0f       	add	r24, r24
    2c24:	99 1f       	adc	r25, r25
    2c26:	0a 94       	dec	r0
    2c28:	e2 f7       	brpl	.-8      	; 0x2c22 <spi_create+0x156>
    2c2a:	80 95       	com	r24
    2c2c:	83 23       	and	r24, r19
    2c2e:	80 83       	st	Z, r24
    2c30:	0d c0       	rjmp	.+26     	; 0x2c4c <spi_create+0x180>
    2c32:	30 81       	ld	r19, Z
    2c34:	81 e0       	ldi	r24, 0x01	; 1
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	d3 01       	movw	r26, r6
    2c3a:	12 96       	adiw	r26, 0x02	; 2
    2c3c:	0c 90       	ld	r0, X
    2c3e:	02 c0       	rjmp	.+4      	; 0x2c44 <spi_create+0x178>
    2c40:	88 0f       	add	r24, r24
    2c42:	99 1f       	adc	r25, r25
    2c44:	0a 94       	dec	r0
    2c46:	e2 f7       	brpl	.-8      	; 0x2c40 <spi_create+0x174>
    2c48:	83 2b       	or	r24, r19
    2c4a:	80 83       	st	Z, r24
    2c4c:	50 93 da 0d 	sts	0x0DDA, r21	; 0x800dda <_this+0x1>
    2c50:	40 93 d9 0d 	sts	0x0DD9, r20	; 0x800dd9 <_this>
    2c54:	2f bf       	out	0x3f, r18	; 63
    2c56:	c3 01       	movw	r24, r6
    2c58:	df 91       	pop	r29
    2c5a:	cf 91       	pop	r28
    2c5c:	1f 91       	pop	r17
    2c5e:	0f 91       	pop	r16
    2c60:	ff 90       	pop	r15
    2c62:	ef 90       	pop	r14
    2c64:	df 90       	pop	r13
    2c66:	cf 90       	pop	r12
    2c68:	bf 90       	pop	r11
    2c6a:	af 90       	pop	r10
    2c6c:	9f 90       	pop	r9
    2c6e:	8f 90       	pop	r8
    2c70:	7f 90       	pop	r7
    2c72:	6f 90       	pop	r6
    2c74:	5f 90       	pop	r5
    2c76:	4f 90       	pop	r4
    2c78:	08 95       	ret

00002c7a <spi_sendByte>:
    2c7a:	1f 93       	push	r17
    2c7c:	cf 93       	push	r28
    2c7e:	df 93       	push	r29
    2c80:	00 97       	sbiw	r24, 0x00	; 0
    2c82:	09 f4       	brne	.+2      	; 0x2c86 <spi_sendByte+0xc>
    2c84:	6a c0       	rjmp	.+212    	; 0x2d5a <spi_sendByte+0xe0>
    2c86:	16 2f       	mov	r17, r22
    2c88:	ec 01       	movw	r28, r24
    2c8a:	80 91 d9 0d 	lds	r24, 0x0DD9	; 0x800dd9 <_this>
    2c8e:	90 91 da 0d 	lds	r25, 0x0DDA	; 0x800dda <_this+0x1>
    2c92:	c8 17       	cp	r28, r24
    2c94:	d9 07       	cpc	r29, r25
    2c96:	11 f0       	breq	.+4      	; 0x2c9c <spi_sendByte+0x22>
    2c98:	ce 01       	movw	r24, r28
    2c9a:	df de       	rcall	.-578    	; 0x2a5a <_select_instance>
    2c9c:	8f b7       	in	r24, 0x3f	; 63
    2c9e:	2f b7       	in	r18, 0x3f	; 63
    2ca0:	f8 94       	cli
    2ca2:	80 91 db 0d 	lds	r24, 0x0DDB	; 0x800ddb <_spi_active>
    2ca6:	81 11       	cpse	r24, r1
    2ca8:	31 c0       	rjmp	.+98     	; 0x2d0c <spi_sendByte+0x92>
    2caa:	81 e0       	ldi	r24, 0x01	; 1
    2cac:	80 93 db 0d 	sts	0x0DDB, r24	; 0x800ddb <_spi_active>
    2cb0:	a0 91 d9 0d 	lds	r26, 0x0DD9	; 0x800dd9 <_this>
    2cb4:	b0 91 da 0d 	lds	r27, 0x0DDA	; 0x800dda <_this+0x1>
    2cb8:	ed 91       	ld	r30, X+
    2cba:	fc 91       	ld	r31, X
    2cbc:	11 97       	sbiw	r26, 0x01	; 1
    2cbe:	30 97       	sbiw	r30, 0x00	; 0
    2cc0:	f9 f0       	breq	.+62     	; 0x2d00 <spi_sendByte+0x86>
    2cc2:	13 96       	adiw	r26, 0x03	; 3
    2cc4:	8c 91       	ld	r24, X
    2cc6:	13 97       	sbiw	r26, 0x03	; 3
    2cc8:	81 30       	cpi	r24, 0x01	; 1
    2cca:	69 f4       	brne	.+26     	; 0x2ce6 <spi_sendByte+0x6c>
    2ccc:	30 81       	ld	r19, Z
    2cce:	81 e0       	ldi	r24, 0x01	; 1
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	12 96       	adiw	r26, 0x02	; 2
    2cd4:	0c 90       	ld	r0, X
    2cd6:	02 c0       	rjmp	.+4      	; 0x2cdc <spi_sendByte+0x62>
    2cd8:	88 0f       	add	r24, r24
    2cda:	99 1f       	adc	r25, r25
    2cdc:	0a 94       	dec	r0
    2cde:	e2 f7       	brpl	.-8      	; 0x2cd8 <spi_sendByte+0x5e>
    2ce0:	83 2b       	or	r24, r19
    2ce2:	80 83       	st	Z, r24
    2ce4:	0d c0       	rjmp	.+26     	; 0x2d00 <spi_sendByte+0x86>
    2ce6:	30 81       	ld	r19, Z
    2ce8:	81 e0       	ldi	r24, 0x01	; 1
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	12 96       	adiw	r26, 0x02	; 2
    2cee:	0c 90       	ld	r0, X
    2cf0:	02 c0       	rjmp	.+4      	; 0x2cf6 <spi_sendByte+0x7c>
    2cf2:	88 0f       	add	r24, r24
    2cf4:	99 1f       	adc	r25, r25
    2cf6:	0a 94       	dec	r0
    2cf8:	e2 f7       	brpl	.-8      	; 0x2cf2 <spi_sendByte+0x78>
    2cfa:	80 95       	com	r24
    2cfc:	83 23       	and	r24, r19
    2cfe:	80 83       	st	Z, r24
    2d00:	8c b5       	in	r24, 0x2c	; 44
    2d02:	80 68       	ori	r24, 0x80	; 128
    2d04:	8c bd       	out	0x2c, r24	; 44
    2d06:	1e bd       	out	0x2e, r17	; 46
    2d08:	80 e0       	ldi	r24, 0x00	; 0
    2d0a:	25 c0       	rjmp	.+74     	; 0x2d56 <spi_sendByte+0xdc>
    2d0c:	ee 81       	ldd	r30, Y+6	; 0x06
    2d0e:	ff 81       	ldd	r31, Y+7	; 0x07
    2d10:	30 97       	sbiw	r30, 0x00	; 0
    2d12:	e1 f0       	breq	.+56     	; 0x2d4c <spi_sendByte+0xd2>
    2d14:	34 81       	ldd	r19, Z+4	; 0x04
    2d16:	83 81       	ldd	r24, Z+3	; 0x03
    2d18:	42 81       	ldd	r20, Z+2	; 0x02
    2d1a:	95 81       	ldd	r25, Z+5	; 0x05
    2d1c:	84 1b       	sub	r24, r20
    2d1e:	89 23       	and	r24, r25
    2d20:	38 17       	cp	r19, r24
    2d22:	b1 f0       	breq	.+44     	; 0x2d50 <spi_sendByte+0xd6>
    2d24:	83 81       	ldd	r24, Z+3	; 0x03
    2d26:	42 81       	ldd	r20, Z+2	; 0x02
    2d28:	84 1b       	sub	r24, r20
    2d2a:	89 23       	and	r24, r25
    2d2c:	38 17       	cp	r19, r24
    2d2e:	91 f0       	breq	.+36     	; 0x2d54 <spi_sendByte+0xda>
    2d30:	83 81       	ldd	r24, Z+3	; 0x03
    2d32:	96 95       	lsr	r25
    2d34:	98 23       	and	r25, r24
    2d36:	a0 81       	ld	r26, Z
    2d38:	b1 81       	ldd	r27, Z+1	; 0x01
    2d3a:	a9 0f       	add	r26, r25
    2d3c:	b1 1d       	adc	r27, r1
    2d3e:	1c 93       	st	X, r17
    2d40:	8f 5f       	subi	r24, 0xFF	; 255
    2d42:	95 81       	ldd	r25, Z+5	; 0x05
    2d44:	89 23       	and	r24, r25
    2d46:	83 83       	std	Z+3, r24	; 0x03
    2d48:	80 e0       	ldi	r24, 0x00	; 0
    2d4a:	05 c0       	rjmp	.+10     	; 0x2d56 <spi_sendByte+0xdc>
    2d4c:	82 e0       	ldi	r24, 0x02	; 2
    2d4e:	03 c0       	rjmp	.+6      	; 0x2d56 <spi_sendByte+0xdc>
    2d50:	81 e0       	ldi	r24, 0x01	; 1
    2d52:	01 c0       	rjmp	.+2      	; 0x2d56 <spi_sendByte+0xdc>
    2d54:	80 e0       	ldi	r24, 0x00	; 0
    2d56:	2f bf       	out	0x3f, r18	; 63
    2d58:	01 c0       	rjmp	.+2      	; 0x2d5c <spi_sendByte+0xe2>
    2d5a:	83 e0       	ldi	r24, 0x03	; 3
    2d5c:	df 91       	pop	r29
    2d5e:	cf 91       	pop	r28
    2d60:	1f 91       	pop	r17
    2d62:	08 95       	ret

00002d64 <__vector_24>:
    2d64:	1f 92       	push	r1
    2d66:	0f 92       	push	r0
    2d68:	0f b6       	in	r0, 0x3f	; 63
    2d6a:	0f 92       	push	r0
    2d6c:	11 24       	eor	r1, r1
    2d6e:	0b b6       	in	r0, 0x3b	; 59
    2d70:	0f 92       	push	r0
    2d72:	2f 93       	push	r18
    2d74:	3f 93       	push	r19
    2d76:	4f 93       	push	r20
    2d78:	5f 93       	push	r21
    2d7a:	6f 93       	push	r22
    2d7c:	7f 93       	push	r23
    2d7e:	8f 93       	push	r24
    2d80:	9f 93       	push	r25
    2d82:	af 93       	push	r26
    2d84:	bf 93       	push	r27
    2d86:	cf 93       	push	r28
    2d88:	df 93       	push	r29
    2d8a:	ef 93       	push	r30
    2d8c:	ff 93       	push	r31
    2d8e:	6e b5       	in	r22, 0x2e	; 46
    2d90:	a0 91 d9 0d 	lds	r26, 0x0DD9	; 0x800dd9 <_this>
    2d94:	b0 91 da 0d 	lds	r27, 0x0DDA	; 0x800dda <_this+0x1>
    2d98:	18 96       	adiw	r26, 0x08	; 8
    2d9a:	ed 91       	ld	r30, X+
    2d9c:	fc 91       	ld	r31, X
    2d9e:	19 97       	sbiw	r26, 0x09	; 9
    2da0:	30 97       	sbiw	r30, 0x00	; 0
    2da2:	a1 f0       	breq	.+40     	; 0x2dcc <__vector_24+0x68>
    2da4:	83 81       	ldd	r24, Z+3	; 0x03
    2da6:	22 81       	ldd	r18, Z+2	; 0x02
    2da8:	95 81       	ldd	r25, Z+5	; 0x05
    2daa:	82 1b       	sub	r24, r18
    2dac:	89 23       	and	r24, r25
    2dae:	24 81       	ldd	r18, Z+4	; 0x04
    2db0:	82 17       	cp	r24, r18
    2db2:	61 f0       	breq	.+24     	; 0x2dcc <__vector_24+0x68>
    2db4:	83 81       	ldd	r24, Z+3	; 0x03
    2db6:	96 95       	lsr	r25
    2db8:	98 23       	and	r25, r24
    2dba:	c0 81       	ld	r28, Z
    2dbc:	d1 81       	ldd	r29, Z+1	; 0x01
    2dbe:	c9 0f       	add	r28, r25
    2dc0:	d1 1d       	adc	r29, r1
    2dc2:	68 83       	st	Y, r22
    2dc4:	8f 5f       	subi	r24, 0xFF	; 255
    2dc6:	95 81       	ldd	r25, Z+5	; 0x05
    2dc8:	89 23       	and	r24, r25
    2dca:	83 83       	std	Z+3, r24	; 0x03
    2dcc:	16 96       	adiw	r26, 0x06	; 6
    2dce:	ed 91       	ld	r30, X+
    2dd0:	fc 91       	ld	r31, X
    2dd2:	17 97       	sbiw	r26, 0x07	; 7
    2dd4:	30 97       	sbiw	r30, 0x00	; 0
    2dd6:	99 f0       	breq	.+38     	; 0x2dfe <__vector_24+0x9a>
    2dd8:	93 81       	ldd	r25, Z+3	; 0x03
    2dda:	82 81       	ldd	r24, Z+2	; 0x02
    2ddc:	98 17       	cp	r25, r24
    2dde:	79 f0       	breq	.+30     	; 0x2dfe <__vector_24+0x9a>
    2de0:	92 81       	ldd	r25, Z+2	; 0x02
    2de2:	85 81       	ldd	r24, Z+5	; 0x05
    2de4:	28 2f       	mov	r18, r24
    2de6:	26 95       	lsr	r18
    2de8:	29 23       	and	r18, r25
    2dea:	a0 81       	ld	r26, Z
    2dec:	b1 81       	ldd	r27, Z+1	; 0x01
    2dee:	a2 0f       	add	r26, r18
    2df0:	b1 1d       	adc	r27, r1
    2df2:	2c 91       	ld	r18, X
    2df4:	9f 5f       	subi	r25, 0xFF	; 255
    2df6:	89 23       	and	r24, r25
    2df8:	82 83       	std	Z+2, r24	; 0x02
    2dfa:	2e bd       	out	0x2e, r18	; 46
    2dfc:	2d c0       	rjmp	.+90     	; 0x2e58 <__vector_24+0xf4>
    2dfe:	8c b5       	in	r24, 0x2c	; 44
    2e00:	8f 77       	andi	r24, 0x7F	; 127
    2e02:	8c bd       	out	0x2c, r24	; 44
    2e04:	10 92 db 0d 	sts	0x0DDB, r1	; 0x800ddb <_spi_active>
    2e08:	a0 91 d9 0d 	lds	r26, 0x0DD9	; 0x800dd9 <_this>
    2e0c:	b0 91 da 0d 	lds	r27, 0x0DDA	; 0x800dda <_this+0x1>
    2e10:	ed 91       	ld	r30, X+
    2e12:	fc 91       	ld	r31, X
    2e14:	11 97       	sbiw	r26, 0x01	; 1
    2e16:	30 97       	sbiw	r30, 0x00	; 0
    2e18:	f9 f0       	breq	.+62     	; 0x2e58 <__vector_24+0xf4>
    2e1a:	13 96       	adiw	r26, 0x03	; 3
    2e1c:	8c 91       	ld	r24, X
    2e1e:	13 97       	sbiw	r26, 0x03	; 3
    2e20:	81 30       	cpi	r24, 0x01	; 1
    2e22:	71 f4       	brne	.+28     	; 0x2e40 <__vector_24+0xdc>
    2e24:	20 81       	ld	r18, Z
    2e26:	81 e0       	ldi	r24, 0x01	; 1
    2e28:	90 e0       	ldi	r25, 0x00	; 0
    2e2a:	12 96       	adiw	r26, 0x02	; 2
    2e2c:	0c 90       	ld	r0, X
    2e2e:	02 c0       	rjmp	.+4      	; 0x2e34 <__vector_24+0xd0>
    2e30:	88 0f       	add	r24, r24
    2e32:	99 1f       	adc	r25, r25
    2e34:	0a 94       	dec	r0
    2e36:	e2 f7       	brpl	.-8      	; 0x2e30 <__vector_24+0xcc>
    2e38:	80 95       	com	r24
    2e3a:	82 23       	and	r24, r18
    2e3c:	80 83       	st	Z, r24
    2e3e:	0c c0       	rjmp	.+24     	; 0x2e58 <__vector_24+0xf4>
    2e40:	20 81       	ld	r18, Z
    2e42:	81 e0       	ldi	r24, 0x01	; 1
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	12 96       	adiw	r26, 0x02	; 2
    2e48:	0c 90       	ld	r0, X
    2e4a:	02 c0       	rjmp	.+4      	; 0x2e50 <__vector_24+0xec>
    2e4c:	88 0f       	add	r24, r24
    2e4e:	99 1f       	adc	r25, r25
    2e50:	0a 94       	dec	r0
    2e52:	e2 f7       	brpl	.-8      	; 0x2e4c <__vector_24+0xe8>
    2e54:	82 2b       	or	r24, r18
    2e56:	80 83       	st	Z, r24
    2e58:	80 91 d9 0d 	lds	r24, 0x0DD9	; 0x800dd9 <_this>
    2e5c:	90 91 da 0d 	lds	r25, 0x0DDA	; 0x800dda <_this+0x1>
    2e60:	dc 01       	movw	r26, r24
    2e62:	1a 96       	adiw	r26, 0x0a	; 10
    2e64:	ed 91       	ld	r30, X+
    2e66:	fc 91       	ld	r31, X
    2e68:	1b 97       	sbiw	r26, 0x0b	; 11
    2e6a:	30 97       	sbiw	r30, 0x00	; 0
    2e6c:	09 f0       	breq	.+2      	; 0x2e70 <__vector_24+0x10c>
    2e6e:	19 95       	eicall
    2e70:	ff 91       	pop	r31
    2e72:	ef 91       	pop	r30
    2e74:	df 91       	pop	r29
    2e76:	cf 91       	pop	r28
    2e78:	bf 91       	pop	r27
    2e7a:	af 91       	pop	r26
    2e7c:	9f 91       	pop	r25
    2e7e:	8f 91       	pop	r24
    2e80:	7f 91       	pop	r23
    2e82:	6f 91       	pop	r22
    2e84:	5f 91       	pop	r21
    2e86:	4f 91       	pop	r20
    2e88:	3f 91       	pop	r19
    2e8a:	2f 91       	pop	r18
    2e8c:	0f 90       	pop	r0
    2e8e:	0b be       	out	0x3b, r0	; 59
    2e90:	0f 90       	pop	r0
    2e92:	0f be       	out	0x3f, r0	; 63
    2e94:	0f 90       	pop	r0
    2e96:	1f 90       	pop	r1
    2e98:	18 95       	reti

00002e9a <fifo_init>:
    2e9a:	fc 01       	movw	r30, r24
    2e9c:	41 11       	cpse	r20, r1
    2e9e:	02 c0       	rjmp	.+4      	; 0x2ea4 <fifo_init+0xa>
    2ea0:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <abort>
    2ea4:	84 2f       	mov	r24, r20
    2ea6:	90 e0       	ldi	r25, 0x00	; 0
    2ea8:	9c 01       	movw	r18, r24
    2eaa:	21 50       	subi	r18, 0x01	; 1
    2eac:	31 09       	sbc	r19, r1
    2eae:	82 23       	and	r24, r18
    2eb0:	93 23       	and	r25, r19
    2eb2:	89 2b       	or	r24, r25
    2eb4:	11 f0       	breq	.+4      	; 0x2eba <fifo_init+0x20>
    2eb6:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <abort>
    2eba:	41 38       	cpi	r20, 0x81	; 129
    2ebc:	10 f0       	brcs	.+4      	; 0x2ec2 <fifo_init+0x28>
    2ebe:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <abort>
    2ec2:	12 82       	std	Z+2, r1	; 0x02
    2ec4:	13 82       	std	Z+3, r1	; 0x03
    2ec6:	44 83       	std	Z+4, r20	; 0x04
    2ec8:	44 0f       	add	r20, r20
    2eca:	41 50       	subi	r20, 0x01	; 1
    2ecc:	45 83       	std	Z+5, r20	; 0x05
    2ece:	71 83       	std	Z+1, r23	; 0x01
    2ed0:	60 83       	st	Z, r22
    2ed2:	80 e0       	ldi	r24, 0x00	; 0
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	08 95       	ret

00002ed8 <serial_create>:
    2ed8:	2f 92       	push	r2
    2eda:	3f 92       	push	r3
    2edc:	4f 92       	push	r4
    2ede:	5f 92       	push	r5
    2ee0:	6f 92       	push	r6
    2ee2:	7f 92       	push	r7
    2ee4:	8f 92       	push	r8
    2ee6:	9f 92       	push	r9
    2ee8:	af 92       	push	r10
    2eea:	cf 92       	push	r12
    2eec:	ef 92       	push	r14
    2eee:	ff 92       	push	r15
    2ef0:	0f 93       	push	r16
    2ef2:	1f 93       	push	r17
    2ef4:	cf 93       	push	r28
    2ef6:	df 93       	push	r29
    2ef8:	cd b7       	in	r28, 0x3d	; 61
    2efa:	de b7       	in	r29, 0x3e	; 62
    2efc:	f8 2e       	mov	r15, r24
    2efe:	2a 01       	movw	r4, r20
    2f00:	3b 01       	movw	r6, r22
    2f02:	88 e0       	ldi	r24, 0x08	; 8
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	09 d7       	rcall	.+3602   	; 0x3d1a <malloc>
    2f08:	8c 01       	movw	r16, r24
    2f0a:	8f 2d       	mov	r24, r15
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	fc 01       	movw	r30, r24
    2f10:	ee 0f       	add	r30, r30
    2f12:	ff 1f       	adc	r31, r31
    2f14:	e4 52       	subi	r30, 0x24	; 36
    2f16:	f2 4f       	sbci	r31, 0xF2	; 242
    2f18:	11 83       	std	Z+1, r17	; 0x01
    2f1a:	00 83       	st	Z, r16
    2f1c:	01 15       	cp	r16, r1
    2f1e:	11 05       	cpc	r17, r1
    2f20:	09 f4       	brne	.+2      	; 0x2f24 <serial_create+0x4c>
    2f22:	64 c0       	rjmp	.+200    	; 0x2fec <serial_create+0x114>
    2f24:	88 0f       	add	r24, r24
    2f26:	99 1f       	adc	r25, r25
    2f28:	fc 01       	movw	r30, r24
    2f2a:	eb 5e       	subi	r30, 0xEB	; 235
    2f2c:	fd 4f       	sbci	r31, 0xFD	; 253
    2f2e:	80 81       	ld	r24, Z
    2f30:	91 81       	ldd	r25, Z+1	; 0x01
    2f32:	d8 01       	movw	r26, r16
    2f34:	8d 93       	st	X+, r24
    2f36:	9c 93       	st	X, r25
    2f38:	8c 2d       	mov	r24, r12
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	88 0f       	add	r24, r24
    2f3e:	99 1f       	adc	r25, r25
    2f40:	88 0f       	add	r24, r24
    2f42:	99 1f       	adc	r25, r25
    2f44:	ea d6       	rcall	.+3540   	; 0x3d1a <malloc>
    2f46:	1c 01       	movw	r2, r24
    2f48:	86 e0       	ldi	r24, 0x06	; 6
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	e6 d6       	rcall	.+3532   	; 0x3d1a <malloc>
    2f4e:	7c 01       	movw	r14, r24
    2f50:	4c 2d       	mov	r20, r12
    2f52:	b1 01       	movw	r22, r2
    2f54:	a2 df       	rcall	.-188    	; 0x2e9a <fifo_init>
    2f56:	f8 01       	movw	r30, r16
    2f58:	f5 82       	std	Z+5, r15	; 0x05
    2f5a:	e4 82       	std	Z+4, r14	; 0x04
    2f5c:	8a 2d       	mov	r24, r10
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	88 0f       	add	r24, r24
    2f62:	99 1f       	adc	r25, r25
    2f64:	88 0f       	add	r24, r24
    2f66:	99 1f       	adc	r25, r25
    2f68:	d8 d6       	rcall	.+3504   	; 0x3d1a <malloc>
    2f6a:	1c 01       	movw	r2, r24
    2f6c:	86 e0       	ldi	r24, 0x06	; 6
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	d4 d6       	rcall	.+3496   	; 0x3d1a <malloc>
    2f72:	7c 01       	movw	r14, r24
    2f74:	4a 2d       	mov	r20, r10
    2f76:	b1 01       	movw	r22, r2
    2f78:	90 df       	rcall	.-224    	; 0x2e9a <fifo_init>
    2f7a:	d8 01       	movw	r26, r16
    2f7c:	13 96       	adiw	r26, 0x03	; 3
    2f7e:	fc 92       	st	X, r15
    2f80:	ee 92       	st	-X, r14
    2f82:	12 97       	sbiw	r26, 0x02	; 2
    2f84:	17 96       	adiw	r26, 0x07	; 7
    2f86:	9c 92       	st	X, r9
    2f88:	8e 92       	st	-X, r8
    2f8a:	16 97       	sbiw	r26, 0x06	; 6
    2f8c:	ff b6       	in	r15, 0x3f	; 63
    2f8e:	f8 94       	cli
    2f90:	ed 91       	ld	r30, X+
    2f92:	fc 91       	ld	r31, X
    2f94:	11 97       	sbiw	r26, 0x01	; 1
    2f96:	36 97       	sbiw	r30, 0x06	; 6
    2f98:	80 81       	ld	r24, Z
    2f9a:	82 60       	ori	r24, 0x02	; 2
    2f9c:	80 83       	st	Z, r24
    2f9e:	8d 90       	ld	r8, X+
    2fa0:	9c 90       	ld	r9, X
    2fa2:	c3 01       	movw	r24, r6
    2fa4:	b2 01       	movw	r22, r4
    2fa6:	d5 d3       	rcall	.+1962   	; 0x3752 <__floatunsisf>
    2fa8:	20 e0       	ldi	r18, 0x00	; 0
    2faa:	30 e0       	ldi	r19, 0x00	; 0
    2fac:	40 e0       	ldi	r20, 0x00	; 0
    2fae:	51 e4       	ldi	r21, 0x41	; 65
    2fb0:	b1 d4       	rcall	.+2402   	; 0x3914 <__mulsf3>
    2fb2:	9b 01       	movw	r18, r22
    2fb4:	ac 01       	movw	r20, r24
    2fb6:	60 e0       	ldi	r22, 0x00	; 0
    2fb8:	74 e2       	ldi	r23, 0x24	; 36
    2fba:	84 e7       	ldi	r24, 0x74	; 116
    2fbc:	9b e4       	ldi	r25, 0x4B	; 75
    2fbe:	30 d3       	rcall	.+1632   	; 0x3620 <__divsf3>
    2fc0:	20 e0       	ldi	r18, 0x00	; 0
    2fc2:	30 e0       	ldi	r19, 0x00	; 0
    2fc4:	40 e8       	ldi	r20, 0x80	; 128
    2fc6:	5f e3       	ldi	r21, 0x3F	; 63
    2fc8:	c6 d2       	rcall	.+1420   	; 0x3556 <__subsf3>
    2fca:	97 d3       	rcall	.+1838   	; 0x36fa <__fixunssfsi>
    2fcc:	f4 01       	movw	r30, r8
    2fce:	32 97       	sbiw	r30, 0x02	; 2
    2fd0:	60 83       	st	Z, r22
    2fd2:	d8 01       	movw	r26, r16
    2fd4:	ed 91       	ld	r30, X+
    2fd6:	fc 91       	ld	r31, X
    2fd8:	11 97       	sbiw	r26, 0x01	; 1
    2fda:	35 97       	sbiw	r30, 0x05	; 5
    2fdc:	88 e9       	ldi	r24, 0x98	; 152
    2fde:	80 83       	st	Z, r24
    2fe0:	ed 91       	ld	r30, X+
    2fe2:	fc 91       	ld	r31, X
    2fe4:	34 97       	sbiw	r30, 0x04	; 4
    2fe6:	86 e0       	ldi	r24, 0x06	; 6
    2fe8:	80 83       	st	Z, r24
    2fea:	ff be       	out	0x3f, r15	; 63
    2fec:	c8 01       	movw	r24, r16
    2fee:	df 91       	pop	r29
    2ff0:	cf 91       	pop	r28
    2ff2:	1f 91       	pop	r17
    2ff4:	0f 91       	pop	r16
    2ff6:	ff 90       	pop	r15
    2ff8:	ef 90       	pop	r14
    2ffa:	cf 90       	pop	r12
    2ffc:	af 90       	pop	r10
    2ffe:	9f 90       	pop	r9
    3000:	8f 90       	pop	r8
    3002:	7f 90       	pop	r7
    3004:	6f 90       	pop	r6
    3006:	5f 90       	pop	r5
    3008:	4f 90       	pop	r4
    300a:	3f 90       	pop	r3
    300c:	2f 90       	pop	r2
    300e:	08 95       	ret

00003010 <serial_sendByte>:
    3010:	cf 93       	push	r28
    3012:	df 93       	push	r29
    3014:	dc 01       	movw	r26, r24
    3016:	89 2b       	or	r24, r25
    3018:	01 f1       	breq	.+64     	; 0x305a <serial_sendByte+0x4a>
    301a:	12 96       	adiw	r26, 0x02	; 2
    301c:	ed 91       	ld	r30, X+
    301e:	fc 91       	ld	r31, X
    3020:	13 97       	sbiw	r26, 0x03	; 3
    3022:	93 81       	ldd	r25, Z+3	; 0x03
    3024:	82 81       	ldd	r24, Z+2	; 0x02
    3026:	25 81       	ldd	r18, Z+5	; 0x05
    3028:	98 1b       	sub	r25, r24
    302a:	92 23       	and	r25, r18
    302c:	84 81       	ldd	r24, Z+4	; 0x04
    302e:	98 17       	cp	r25, r24
    3030:	b1 f0       	breq	.+44     	; 0x305e <serial_sendByte+0x4e>
    3032:	83 81       	ldd	r24, Z+3	; 0x03
    3034:	26 95       	lsr	r18
    3036:	28 23       	and	r18, r24
    3038:	c0 81       	ld	r28, Z
    303a:	d1 81       	ldd	r29, Z+1	; 0x01
    303c:	c2 0f       	add	r28, r18
    303e:	d1 1d       	adc	r29, r1
    3040:	68 83       	st	Y, r22
    3042:	8f 5f       	subi	r24, 0xFF	; 255
    3044:	95 81       	ldd	r25, Z+5	; 0x05
    3046:	89 23       	and	r24, r25
    3048:	83 83       	std	Z+3, r24	; 0x03
    304a:	ed 91       	ld	r30, X+
    304c:	fc 91       	ld	r31, X
    304e:	35 97       	sbiw	r30, 0x05	; 5
    3050:	80 81       	ld	r24, Z
    3052:	80 62       	ori	r24, 0x20	; 32
    3054:	80 83       	st	Z, r24
    3056:	80 e0       	ldi	r24, 0x00	; 0
    3058:	03 c0       	rjmp	.+6      	; 0x3060 <serial_sendByte+0x50>
    305a:	81 e0       	ldi	r24, 0x01	; 1
    305c:	01 c0       	rjmp	.+2      	; 0x3060 <serial_sendByte+0x50>
    305e:	82 e0       	ldi	r24, 0x02	; 2
    3060:	df 91       	pop	r29
    3062:	cf 91       	pop	r28
    3064:	08 95       	ret

00003066 <serial_getByte>:
    3066:	00 97       	sbiw	r24, 0x00	; 0
    3068:	d1 f0       	breq	.+52     	; 0x309e <serial_getByte+0x38>
    306a:	dc 01       	movw	r26, r24
    306c:	14 96       	adiw	r26, 0x04	; 4
    306e:	ed 91       	ld	r30, X+
    3070:	fc 91       	ld	r31, X
    3072:	15 97       	sbiw	r26, 0x05	; 5
    3074:	93 81       	ldd	r25, Z+3	; 0x03
    3076:	82 81       	ldd	r24, Z+2	; 0x02
    3078:	98 17       	cp	r25, r24
    307a:	99 f0       	breq	.+38     	; 0x30a2 <serial_getByte+0x3c>
    307c:	92 81       	ldd	r25, Z+2	; 0x02
    307e:	85 81       	ldd	r24, Z+5	; 0x05
    3080:	86 95       	lsr	r24
    3082:	89 23       	and	r24, r25
    3084:	a0 81       	ld	r26, Z
    3086:	b1 81       	ldd	r27, Z+1	; 0x01
    3088:	a8 0f       	add	r26, r24
    308a:	b1 1d       	adc	r27, r1
    308c:	8c 91       	ld	r24, X
    308e:	db 01       	movw	r26, r22
    3090:	8c 93       	st	X, r24
    3092:	9f 5f       	subi	r25, 0xFF	; 255
    3094:	85 81       	ldd	r24, Z+5	; 0x05
    3096:	98 23       	and	r25, r24
    3098:	92 83       	std	Z+2, r25	; 0x02
    309a:	80 e0       	ldi	r24, 0x00	; 0
    309c:	08 95       	ret
    309e:	81 e0       	ldi	r24, 0x01	; 1
    30a0:	08 95       	ret
    30a2:	83 e0       	ldi	r24, 0x03	; 3
    30a4:	08 95       	ret

000030a6 <__vector_25>:
    30a6:	1f 92       	push	r1
    30a8:	0f 92       	push	r0
    30aa:	0f b6       	in	r0, 0x3f	; 63
    30ac:	0f 92       	push	r0
    30ae:	11 24       	eor	r1, r1
    30b0:	0b b6       	in	r0, 0x3b	; 59
    30b2:	0f 92       	push	r0
    30b4:	2f 93       	push	r18
    30b6:	3f 93       	push	r19
    30b8:	4f 93       	push	r20
    30ba:	5f 93       	push	r21
    30bc:	6f 93       	push	r22
    30be:	7f 93       	push	r23
    30c0:	8f 93       	push	r24
    30c2:	9f 93       	push	r25
    30c4:	af 93       	push	r26
    30c6:	bf 93       	push	r27
    30c8:	cf 93       	push	r28
    30ca:	df 93       	push	r29
    30cc:	ef 93       	push	r30
    30ce:	ff 93       	push	r31
    30d0:	a0 91 dc 0d 	lds	r26, 0x0DDC	; 0x800ddc <_ser_handle>
    30d4:	b0 91 dd 0d 	lds	r27, 0x0DDD	; 0x800ddd <_ser_handle+0x1>
    30d8:	10 97       	sbiw	r26, 0x00	; 0
    30da:	11 f1       	breq	.+68     	; 0x3120 <__vector_25+0x7a>
    30dc:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    30e0:	14 96       	adiw	r26, 0x04	; 4
    30e2:	ed 91       	ld	r30, X+
    30e4:	fc 91       	ld	r31, X
    30e6:	15 97       	sbiw	r26, 0x05	; 5
    30e8:	93 81       	ldd	r25, Z+3	; 0x03
    30ea:	82 81       	ldd	r24, Z+2	; 0x02
    30ec:	25 81       	ldd	r18, Z+5	; 0x05
    30ee:	98 1b       	sub	r25, r24
    30f0:	92 23       	and	r25, r18
    30f2:	84 81       	ldd	r24, Z+4	; 0x04
    30f4:	98 17       	cp	r25, r24
    30f6:	61 f0       	breq	.+24     	; 0x3110 <__vector_25+0x6a>
    30f8:	83 81       	ldd	r24, Z+3	; 0x03
    30fa:	26 95       	lsr	r18
    30fc:	28 23       	and	r18, r24
    30fe:	c0 81       	ld	r28, Z
    3100:	d1 81       	ldd	r29, Z+1	; 0x01
    3102:	c2 0f       	add	r28, r18
    3104:	d1 1d       	adc	r29, r1
    3106:	68 83       	st	Y, r22
    3108:	8f 5f       	subi	r24, 0xFF	; 255
    310a:	95 81       	ldd	r25, Z+5	; 0x05
    310c:	89 23       	and	r24, r25
    310e:	83 83       	std	Z+3, r24	; 0x03
    3110:	16 96       	adiw	r26, 0x06	; 6
    3112:	ed 91       	ld	r30, X+
    3114:	fc 91       	ld	r31, X
    3116:	17 97       	sbiw	r26, 0x07	; 7
    3118:	30 97       	sbiw	r30, 0x00	; 0
    311a:	11 f0       	breq	.+4      	; 0x3120 <__vector_25+0x7a>
    311c:	cd 01       	movw	r24, r26
    311e:	19 95       	eicall
    3120:	ff 91       	pop	r31
    3122:	ef 91       	pop	r30
    3124:	df 91       	pop	r29
    3126:	cf 91       	pop	r28
    3128:	bf 91       	pop	r27
    312a:	af 91       	pop	r26
    312c:	9f 91       	pop	r25
    312e:	8f 91       	pop	r24
    3130:	7f 91       	pop	r23
    3132:	6f 91       	pop	r22
    3134:	5f 91       	pop	r21
    3136:	4f 91       	pop	r20
    3138:	3f 91       	pop	r19
    313a:	2f 91       	pop	r18
    313c:	0f 90       	pop	r0
    313e:	0b be       	out	0x3b, r0	; 59
    3140:	0f 90       	pop	r0
    3142:	0f be       	out	0x3f, r0	; 63
    3144:	0f 90       	pop	r0
    3146:	1f 90       	pop	r1
    3148:	18 95       	reti

0000314a <__vector_26>:
    314a:	1f 92       	push	r1
    314c:	0f 92       	push	r0
    314e:	0f b6       	in	r0, 0x3f	; 63
    3150:	0f 92       	push	r0
    3152:	11 24       	eor	r1, r1
    3154:	0b b6       	in	r0, 0x3b	; 59
    3156:	0f 92       	push	r0
    3158:	2f 93       	push	r18
    315a:	8f 93       	push	r24
    315c:	9f 93       	push	r25
    315e:	af 93       	push	r26
    3160:	bf 93       	push	r27
    3162:	ef 93       	push	r30
    3164:	ff 93       	push	r31
    3166:	e0 91 dc 0d 	lds	r30, 0x0DDC	; 0x800ddc <_ser_handle>
    316a:	f0 91 dd 0d 	lds	r31, 0x0DDD	; 0x800ddd <_ser_handle+0x1>
    316e:	30 97       	sbiw	r30, 0x00	; 0
    3170:	b9 f0       	breq	.+46     	; 0x31a0 <__vector_26+0x56>
    3172:	02 80       	ldd	r0, Z+2	; 0x02
    3174:	f3 81       	ldd	r31, Z+3	; 0x03
    3176:	e0 2d       	mov	r30, r0
    3178:	93 81       	ldd	r25, Z+3	; 0x03
    317a:	82 81       	ldd	r24, Z+2	; 0x02
    317c:	98 17       	cp	r25, r24
    317e:	b1 f0       	breq	.+44     	; 0x31ac <__vector_26+0x62>
    3180:	92 81       	ldd	r25, Z+2	; 0x02
    3182:	85 81       	ldd	r24, Z+5	; 0x05
    3184:	28 2f       	mov	r18, r24
    3186:	26 95       	lsr	r18
    3188:	29 23       	and	r18, r25
    318a:	a0 81       	ld	r26, Z
    318c:	b1 81       	ldd	r27, Z+1	; 0x01
    318e:	a2 0f       	add	r26, r18
    3190:	b1 1d       	adc	r27, r1
    3192:	2c 91       	ld	r18, X
    3194:	9f 5f       	subi	r25, 0xFF	; 255
    3196:	89 23       	and	r24, r25
    3198:	82 83       	std	Z+2, r24	; 0x02
    319a:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    319e:	0b c0       	rjmp	.+22     	; 0x31b6 <__vector_26+0x6c>
    31a0:	e1 ec       	ldi	r30, 0xC1	; 193
    31a2:	f0 e0       	ldi	r31, 0x00	; 0
    31a4:	80 81       	ld	r24, Z
    31a6:	8f 7d       	andi	r24, 0xDF	; 223
    31a8:	80 83       	st	Z, r24
    31aa:	05 c0       	rjmp	.+10     	; 0x31b6 <__vector_26+0x6c>
    31ac:	e1 ec       	ldi	r30, 0xC1	; 193
    31ae:	f0 e0       	ldi	r31, 0x00	; 0
    31b0:	80 81       	ld	r24, Z
    31b2:	8f 7d       	andi	r24, 0xDF	; 223
    31b4:	80 83       	st	Z, r24
    31b6:	ff 91       	pop	r31
    31b8:	ef 91       	pop	r30
    31ba:	bf 91       	pop	r27
    31bc:	af 91       	pop	r26
    31be:	9f 91       	pop	r25
    31c0:	8f 91       	pop	r24
    31c2:	2f 91       	pop	r18
    31c4:	0f 90       	pop	r0
    31c6:	0b be       	out	0x3b, r0	; 59
    31c8:	0f 90       	pop	r0
    31ca:	0f be       	out	0x3f, r0	; 63
    31cc:	0f 90       	pop	r0
    31ce:	1f 90       	pop	r1
    31d0:	18 95       	reti

000031d2 <__vector_36>:
    31d2:	1f 92       	push	r1
    31d4:	0f 92       	push	r0
    31d6:	0f b6       	in	r0, 0x3f	; 63
    31d8:	0f 92       	push	r0
    31da:	11 24       	eor	r1, r1
    31dc:	0b b6       	in	r0, 0x3b	; 59
    31de:	0f 92       	push	r0
    31e0:	2f 93       	push	r18
    31e2:	3f 93       	push	r19
    31e4:	4f 93       	push	r20
    31e6:	5f 93       	push	r21
    31e8:	6f 93       	push	r22
    31ea:	7f 93       	push	r23
    31ec:	8f 93       	push	r24
    31ee:	9f 93       	push	r25
    31f0:	af 93       	push	r26
    31f2:	bf 93       	push	r27
    31f4:	cf 93       	push	r28
    31f6:	df 93       	push	r29
    31f8:	ef 93       	push	r30
    31fa:	ff 93       	push	r31
    31fc:	a0 91 de 0d 	lds	r26, 0x0DDE	; 0x800dde <_ser_handle+0x2>
    3200:	b0 91 df 0d 	lds	r27, 0x0DDF	; 0x800ddf <_ser_handle+0x3>
    3204:	10 97       	sbiw	r26, 0x00	; 0
    3206:	11 f1       	breq	.+68     	; 0x324c <__vector_36+0x7a>
    3208:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    320c:	14 96       	adiw	r26, 0x04	; 4
    320e:	ed 91       	ld	r30, X+
    3210:	fc 91       	ld	r31, X
    3212:	15 97       	sbiw	r26, 0x05	; 5
    3214:	93 81       	ldd	r25, Z+3	; 0x03
    3216:	82 81       	ldd	r24, Z+2	; 0x02
    3218:	25 81       	ldd	r18, Z+5	; 0x05
    321a:	98 1b       	sub	r25, r24
    321c:	92 23       	and	r25, r18
    321e:	84 81       	ldd	r24, Z+4	; 0x04
    3220:	98 17       	cp	r25, r24
    3222:	61 f0       	breq	.+24     	; 0x323c <__vector_36+0x6a>
    3224:	83 81       	ldd	r24, Z+3	; 0x03
    3226:	26 95       	lsr	r18
    3228:	28 23       	and	r18, r24
    322a:	c0 81       	ld	r28, Z
    322c:	d1 81       	ldd	r29, Z+1	; 0x01
    322e:	c2 0f       	add	r28, r18
    3230:	d1 1d       	adc	r29, r1
    3232:	68 83       	st	Y, r22
    3234:	8f 5f       	subi	r24, 0xFF	; 255
    3236:	95 81       	ldd	r25, Z+5	; 0x05
    3238:	89 23       	and	r24, r25
    323a:	83 83       	std	Z+3, r24	; 0x03
    323c:	16 96       	adiw	r26, 0x06	; 6
    323e:	ed 91       	ld	r30, X+
    3240:	fc 91       	ld	r31, X
    3242:	17 97       	sbiw	r26, 0x07	; 7
    3244:	30 97       	sbiw	r30, 0x00	; 0
    3246:	11 f0       	breq	.+4      	; 0x324c <__vector_36+0x7a>
    3248:	cd 01       	movw	r24, r26
    324a:	19 95       	eicall
    324c:	ff 91       	pop	r31
    324e:	ef 91       	pop	r30
    3250:	df 91       	pop	r29
    3252:	cf 91       	pop	r28
    3254:	bf 91       	pop	r27
    3256:	af 91       	pop	r26
    3258:	9f 91       	pop	r25
    325a:	8f 91       	pop	r24
    325c:	7f 91       	pop	r23
    325e:	6f 91       	pop	r22
    3260:	5f 91       	pop	r21
    3262:	4f 91       	pop	r20
    3264:	3f 91       	pop	r19
    3266:	2f 91       	pop	r18
    3268:	0f 90       	pop	r0
    326a:	0b be       	out	0x3b, r0	; 59
    326c:	0f 90       	pop	r0
    326e:	0f be       	out	0x3f, r0	; 63
    3270:	0f 90       	pop	r0
    3272:	1f 90       	pop	r1
    3274:	18 95       	reti

00003276 <__vector_37>:
    3276:	1f 92       	push	r1
    3278:	0f 92       	push	r0
    327a:	0f b6       	in	r0, 0x3f	; 63
    327c:	0f 92       	push	r0
    327e:	11 24       	eor	r1, r1
    3280:	0b b6       	in	r0, 0x3b	; 59
    3282:	0f 92       	push	r0
    3284:	2f 93       	push	r18
    3286:	8f 93       	push	r24
    3288:	9f 93       	push	r25
    328a:	af 93       	push	r26
    328c:	bf 93       	push	r27
    328e:	ef 93       	push	r30
    3290:	ff 93       	push	r31
    3292:	e0 91 de 0d 	lds	r30, 0x0DDE	; 0x800dde <_ser_handle+0x2>
    3296:	f0 91 df 0d 	lds	r31, 0x0DDF	; 0x800ddf <_ser_handle+0x3>
    329a:	30 97       	sbiw	r30, 0x00	; 0
    329c:	b9 f0       	breq	.+46     	; 0x32cc <__vector_37+0x56>
    329e:	02 80       	ldd	r0, Z+2	; 0x02
    32a0:	f3 81       	ldd	r31, Z+3	; 0x03
    32a2:	e0 2d       	mov	r30, r0
    32a4:	93 81       	ldd	r25, Z+3	; 0x03
    32a6:	82 81       	ldd	r24, Z+2	; 0x02
    32a8:	98 17       	cp	r25, r24
    32aa:	b1 f0       	breq	.+44     	; 0x32d8 <__vector_37+0x62>
    32ac:	92 81       	ldd	r25, Z+2	; 0x02
    32ae:	85 81       	ldd	r24, Z+5	; 0x05
    32b0:	28 2f       	mov	r18, r24
    32b2:	26 95       	lsr	r18
    32b4:	29 23       	and	r18, r25
    32b6:	a0 81       	ld	r26, Z
    32b8:	b1 81       	ldd	r27, Z+1	; 0x01
    32ba:	a2 0f       	add	r26, r18
    32bc:	b1 1d       	adc	r27, r1
    32be:	2c 91       	ld	r18, X
    32c0:	9f 5f       	subi	r25, 0xFF	; 255
    32c2:	89 23       	and	r24, r25
    32c4:	82 83       	std	Z+2, r24	; 0x02
    32c6:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    32ca:	0b c0       	rjmp	.+22     	; 0x32e2 <__vector_37+0x6c>
    32cc:	e9 ec       	ldi	r30, 0xC9	; 201
    32ce:	f0 e0       	ldi	r31, 0x00	; 0
    32d0:	80 81       	ld	r24, Z
    32d2:	8f 7d       	andi	r24, 0xDF	; 223
    32d4:	80 83       	st	Z, r24
    32d6:	05 c0       	rjmp	.+10     	; 0x32e2 <__vector_37+0x6c>
    32d8:	e9 ec       	ldi	r30, 0xC9	; 201
    32da:	f0 e0       	ldi	r31, 0x00	; 0
    32dc:	80 81       	ld	r24, Z
    32de:	8f 7d       	andi	r24, 0xDF	; 223
    32e0:	80 83       	st	Z, r24
    32e2:	ff 91       	pop	r31
    32e4:	ef 91       	pop	r30
    32e6:	bf 91       	pop	r27
    32e8:	af 91       	pop	r26
    32ea:	9f 91       	pop	r25
    32ec:	8f 91       	pop	r24
    32ee:	2f 91       	pop	r18
    32f0:	0f 90       	pop	r0
    32f2:	0b be       	out	0x3b, r0	; 59
    32f4:	0f 90       	pop	r0
    32f6:	0f be       	out	0x3f, r0	; 63
    32f8:	0f 90       	pop	r0
    32fa:	1f 90       	pop	r1
    32fc:	18 95       	reti

000032fe <__vector_51>:
    32fe:	1f 92       	push	r1
    3300:	0f 92       	push	r0
    3302:	0f b6       	in	r0, 0x3f	; 63
    3304:	0f 92       	push	r0
    3306:	11 24       	eor	r1, r1
    3308:	0b b6       	in	r0, 0x3b	; 59
    330a:	0f 92       	push	r0
    330c:	2f 93       	push	r18
    330e:	3f 93       	push	r19
    3310:	4f 93       	push	r20
    3312:	5f 93       	push	r21
    3314:	6f 93       	push	r22
    3316:	7f 93       	push	r23
    3318:	8f 93       	push	r24
    331a:	9f 93       	push	r25
    331c:	af 93       	push	r26
    331e:	bf 93       	push	r27
    3320:	cf 93       	push	r28
    3322:	df 93       	push	r29
    3324:	ef 93       	push	r30
    3326:	ff 93       	push	r31
    3328:	a0 91 e0 0d 	lds	r26, 0x0DE0	; 0x800de0 <_ser_handle+0x4>
    332c:	b0 91 e1 0d 	lds	r27, 0x0DE1	; 0x800de1 <_ser_handle+0x5>
    3330:	10 97       	sbiw	r26, 0x00	; 0
    3332:	11 f1       	breq	.+68     	; 0x3378 <__vector_51+0x7a>
    3334:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    3338:	14 96       	adiw	r26, 0x04	; 4
    333a:	ed 91       	ld	r30, X+
    333c:	fc 91       	ld	r31, X
    333e:	15 97       	sbiw	r26, 0x05	; 5
    3340:	93 81       	ldd	r25, Z+3	; 0x03
    3342:	82 81       	ldd	r24, Z+2	; 0x02
    3344:	25 81       	ldd	r18, Z+5	; 0x05
    3346:	98 1b       	sub	r25, r24
    3348:	92 23       	and	r25, r18
    334a:	84 81       	ldd	r24, Z+4	; 0x04
    334c:	98 17       	cp	r25, r24
    334e:	61 f0       	breq	.+24     	; 0x3368 <__vector_51+0x6a>
    3350:	83 81       	ldd	r24, Z+3	; 0x03
    3352:	26 95       	lsr	r18
    3354:	28 23       	and	r18, r24
    3356:	c0 81       	ld	r28, Z
    3358:	d1 81       	ldd	r29, Z+1	; 0x01
    335a:	c2 0f       	add	r28, r18
    335c:	d1 1d       	adc	r29, r1
    335e:	68 83       	st	Y, r22
    3360:	8f 5f       	subi	r24, 0xFF	; 255
    3362:	95 81       	ldd	r25, Z+5	; 0x05
    3364:	89 23       	and	r24, r25
    3366:	83 83       	std	Z+3, r24	; 0x03
    3368:	16 96       	adiw	r26, 0x06	; 6
    336a:	ed 91       	ld	r30, X+
    336c:	fc 91       	ld	r31, X
    336e:	17 97       	sbiw	r26, 0x07	; 7
    3370:	30 97       	sbiw	r30, 0x00	; 0
    3372:	11 f0       	breq	.+4      	; 0x3378 <__vector_51+0x7a>
    3374:	cd 01       	movw	r24, r26
    3376:	19 95       	eicall
    3378:	ff 91       	pop	r31
    337a:	ef 91       	pop	r30
    337c:	df 91       	pop	r29
    337e:	cf 91       	pop	r28
    3380:	bf 91       	pop	r27
    3382:	af 91       	pop	r26
    3384:	9f 91       	pop	r25
    3386:	8f 91       	pop	r24
    3388:	7f 91       	pop	r23
    338a:	6f 91       	pop	r22
    338c:	5f 91       	pop	r21
    338e:	4f 91       	pop	r20
    3390:	3f 91       	pop	r19
    3392:	2f 91       	pop	r18
    3394:	0f 90       	pop	r0
    3396:	0b be       	out	0x3b, r0	; 59
    3398:	0f 90       	pop	r0
    339a:	0f be       	out	0x3f, r0	; 63
    339c:	0f 90       	pop	r0
    339e:	1f 90       	pop	r1
    33a0:	18 95       	reti

000033a2 <__vector_52>:
    33a2:	1f 92       	push	r1
    33a4:	0f 92       	push	r0
    33a6:	0f b6       	in	r0, 0x3f	; 63
    33a8:	0f 92       	push	r0
    33aa:	11 24       	eor	r1, r1
    33ac:	0b b6       	in	r0, 0x3b	; 59
    33ae:	0f 92       	push	r0
    33b0:	2f 93       	push	r18
    33b2:	8f 93       	push	r24
    33b4:	9f 93       	push	r25
    33b6:	af 93       	push	r26
    33b8:	bf 93       	push	r27
    33ba:	ef 93       	push	r30
    33bc:	ff 93       	push	r31
    33be:	e0 91 e0 0d 	lds	r30, 0x0DE0	; 0x800de0 <_ser_handle+0x4>
    33c2:	f0 91 e1 0d 	lds	r31, 0x0DE1	; 0x800de1 <_ser_handle+0x5>
    33c6:	30 97       	sbiw	r30, 0x00	; 0
    33c8:	b9 f0       	breq	.+46     	; 0x33f8 <__vector_52+0x56>
    33ca:	02 80       	ldd	r0, Z+2	; 0x02
    33cc:	f3 81       	ldd	r31, Z+3	; 0x03
    33ce:	e0 2d       	mov	r30, r0
    33d0:	93 81       	ldd	r25, Z+3	; 0x03
    33d2:	82 81       	ldd	r24, Z+2	; 0x02
    33d4:	98 17       	cp	r25, r24
    33d6:	b1 f0       	breq	.+44     	; 0x3404 <__vector_52+0x62>
    33d8:	92 81       	ldd	r25, Z+2	; 0x02
    33da:	85 81       	ldd	r24, Z+5	; 0x05
    33dc:	28 2f       	mov	r18, r24
    33de:	26 95       	lsr	r18
    33e0:	29 23       	and	r18, r25
    33e2:	a0 81       	ld	r26, Z
    33e4:	b1 81       	ldd	r27, Z+1	; 0x01
    33e6:	a2 0f       	add	r26, r18
    33e8:	b1 1d       	adc	r27, r1
    33ea:	2c 91       	ld	r18, X
    33ec:	9f 5f       	subi	r25, 0xFF	; 255
    33ee:	89 23       	and	r24, r25
    33f0:	82 83       	std	Z+2, r24	; 0x02
    33f2:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    33f6:	0b c0       	rjmp	.+22     	; 0x340e <__vector_52+0x6c>
    33f8:	e1 ed       	ldi	r30, 0xD1	; 209
    33fa:	f0 e0       	ldi	r31, 0x00	; 0
    33fc:	80 81       	ld	r24, Z
    33fe:	8f 7d       	andi	r24, 0xDF	; 223
    3400:	80 83       	st	Z, r24
    3402:	05 c0       	rjmp	.+10     	; 0x340e <__vector_52+0x6c>
    3404:	e1 ed       	ldi	r30, 0xD1	; 209
    3406:	f0 e0       	ldi	r31, 0x00	; 0
    3408:	80 81       	ld	r24, Z
    340a:	8f 7d       	andi	r24, 0xDF	; 223
    340c:	80 83       	st	Z, r24
    340e:	ff 91       	pop	r31
    3410:	ef 91       	pop	r30
    3412:	bf 91       	pop	r27
    3414:	af 91       	pop	r26
    3416:	9f 91       	pop	r25
    3418:	8f 91       	pop	r24
    341a:	2f 91       	pop	r18
    341c:	0f 90       	pop	r0
    341e:	0b be       	out	0x3b, r0	; 59
    3420:	0f 90       	pop	r0
    3422:	0f be       	out	0x3f, r0	; 63
    3424:	0f 90       	pop	r0
    3426:	1f 90       	pop	r1
    3428:	18 95       	reti

0000342a <__vector_54>:
    342a:	1f 92       	push	r1
    342c:	0f 92       	push	r0
    342e:	0f b6       	in	r0, 0x3f	; 63
    3430:	0f 92       	push	r0
    3432:	11 24       	eor	r1, r1
    3434:	0b b6       	in	r0, 0x3b	; 59
    3436:	0f 92       	push	r0
    3438:	2f 93       	push	r18
    343a:	3f 93       	push	r19
    343c:	4f 93       	push	r20
    343e:	5f 93       	push	r21
    3440:	6f 93       	push	r22
    3442:	7f 93       	push	r23
    3444:	8f 93       	push	r24
    3446:	9f 93       	push	r25
    3448:	af 93       	push	r26
    344a:	bf 93       	push	r27
    344c:	cf 93       	push	r28
    344e:	df 93       	push	r29
    3450:	ef 93       	push	r30
    3452:	ff 93       	push	r31
    3454:	a0 91 e2 0d 	lds	r26, 0x0DE2	; 0x800de2 <_ser_handle+0x6>
    3458:	b0 91 e3 0d 	lds	r27, 0x0DE3	; 0x800de3 <_ser_handle+0x7>
    345c:	10 97       	sbiw	r26, 0x00	; 0
    345e:	11 f1       	breq	.+68     	; 0x34a4 <__vector_54+0x7a>
    3460:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    3464:	14 96       	adiw	r26, 0x04	; 4
    3466:	ed 91       	ld	r30, X+
    3468:	fc 91       	ld	r31, X
    346a:	15 97       	sbiw	r26, 0x05	; 5
    346c:	93 81       	ldd	r25, Z+3	; 0x03
    346e:	82 81       	ldd	r24, Z+2	; 0x02
    3470:	25 81       	ldd	r18, Z+5	; 0x05
    3472:	98 1b       	sub	r25, r24
    3474:	92 23       	and	r25, r18
    3476:	84 81       	ldd	r24, Z+4	; 0x04
    3478:	98 17       	cp	r25, r24
    347a:	61 f0       	breq	.+24     	; 0x3494 <__vector_54+0x6a>
    347c:	83 81       	ldd	r24, Z+3	; 0x03
    347e:	26 95       	lsr	r18
    3480:	28 23       	and	r18, r24
    3482:	c0 81       	ld	r28, Z
    3484:	d1 81       	ldd	r29, Z+1	; 0x01
    3486:	c2 0f       	add	r28, r18
    3488:	d1 1d       	adc	r29, r1
    348a:	68 83       	st	Y, r22
    348c:	8f 5f       	subi	r24, 0xFF	; 255
    348e:	95 81       	ldd	r25, Z+5	; 0x05
    3490:	89 23       	and	r24, r25
    3492:	83 83       	std	Z+3, r24	; 0x03
    3494:	16 96       	adiw	r26, 0x06	; 6
    3496:	ed 91       	ld	r30, X+
    3498:	fc 91       	ld	r31, X
    349a:	17 97       	sbiw	r26, 0x07	; 7
    349c:	30 97       	sbiw	r30, 0x00	; 0
    349e:	11 f0       	breq	.+4      	; 0x34a4 <__vector_54+0x7a>
    34a0:	cd 01       	movw	r24, r26
    34a2:	19 95       	eicall
    34a4:	ff 91       	pop	r31
    34a6:	ef 91       	pop	r30
    34a8:	df 91       	pop	r29
    34aa:	cf 91       	pop	r28
    34ac:	bf 91       	pop	r27
    34ae:	af 91       	pop	r26
    34b0:	9f 91       	pop	r25
    34b2:	8f 91       	pop	r24
    34b4:	7f 91       	pop	r23
    34b6:	6f 91       	pop	r22
    34b8:	5f 91       	pop	r21
    34ba:	4f 91       	pop	r20
    34bc:	3f 91       	pop	r19
    34be:	2f 91       	pop	r18
    34c0:	0f 90       	pop	r0
    34c2:	0b be       	out	0x3b, r0	; 59
    34c4:	0f 90       	pop	r0
    34c6:	0f be       	out	0x3f, r0	; 63
    34c8:	0f 90       	pop	r0
    34ca:	1f 90       	pop	r1
    34cc:	18 95       	reti

000034ce <__vector_55>:
    34ce:	1f 92       	push	r1
    34d0:	0f 92       	push	r0
    34d2:	0f b6       	in	r0, 0x3f	; 63
    34d4:	0f 92       	push	r0
    34d6:	11 24       	eor	r1, r1
    34d8:	0b b6       	in	r0, 0x3b	; 59
    34da:	0f 92       	push	r0
    34dc:	2f 93       	push	r18
    34de:	8f 93       	push	r24
    34e0:	9f 93       	push	r25
    34e2:	af 93       	push	r26
    34e4:	bf 93       	push	r27
    34e6:	ef 93       	push	r30
    34e8:	ff 93       	push	r31
    34ea:	e0 91 e2 0d 	lds	r30, 0x0DE2	; 0x800de2 <_ser_handle+0x6>
    34ee:	f0 91 e3 0d 	lds	r31, 0x0DE3	; 0x800de3 <_ser_handle+0x7>
    34f2:	30 97       	sbiw	r30, 0x00	; 0
    34f4:	b9 f0       	breq	.+46     	; 0x3524 <__vector_55+0x56>
    34f6:	02 80       	ldd	r0, Z+2	; 0x02
    34f8:	f3 81       	ldd	r31, Z+3	; 0x03
    34fa:	e0 2d       	mov	r30, r0
    34fc:	93 81       	ldd	r25, Z+3	; 0x03
    34fe:	82 81       	ldd	r24, Z+2	; 0x02
    3500:	98 17       	cp	r25, r24
    3502:	b1 f0       	breq	.+44     	; 0x3530 <__vector_55+0x62>
    3504:	92 81       	ldd	r25, Z+2	; 0x02
    3506:	85 81       	ldd	r24, Z+5	; 0x05
    3508:	28 2f       	mov	r18, r24
    350a:	26 95       	lsr	r18
    350c:	29 23       	and	r18, r25
    350e:	a0 81       	ld	r26, Z
    3510:	b1 81       	ldd	r27, Z+1	; 0x01
    3512:	a2 0f       	add	r26, r18
    3514:	b1 1d       	adc	r27, r1
    3516:	2c 91       	ld	r18, X
    3518:	9f 5f       	subi	r25, 0xFF	; 255
    351a:	89 23       	and	r24, r25
    351c:	82 83       	std	Z+2, r24	; 0x02
    351e:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    3522:	0b c0       	rjmp	.+22     	; 0x353a <__vector_55+0x6c>
    3524:	e1 e3       	ldi	r30, 0x31	; 49
    3526:	f1 e0       	ldi	r31, 0x01	; 1
    3528:	80 81       	ld	r24, Z
    352a:	8f 7d       	andi	r24, 0xDF	; 223
    352c:	80 83       	st	Z, r24
    352e:	05 c0       	rjmp	.+10     	; 0x353a <__vector_55+0x6c>
    3530:	e1 e3       	ldi	r30, 0x31	; 49
    3532:	f1 e0       	ldi	r31, 0x01	; 1
    3534:	80 81       	ld	r24, Z
    3536:	8f 7d       	andi	r24, 0xDF	; 223
    3538:	80 83       	st	Z, r24
    353a:	ff 91       	pop	r31
    353c:	ef 91       	pop	r30
    353e:	bf 91       	pop	r27
    3540:	af 91       	pop	r26
    3542:	9f 91       	pop	r25
    3544:	8f 91       	pop	r24
    3546:	2f 91       	pop	r18
    3548:	0f 90       	pop	r0
    354a:	0b be       	out	0x3b, r0	; 59
    354c:	0f 90       	pop	r0
    354e:	0f be       	out	0x3f, r0	; 63
    3550:	0f 90       	pop	r0
    3552:	1f 90       	pop	r1
    3554:	18 95       	reti

00003556 <__subsf3>:
    3556:	50 58       	subi	r21, 0x80	; 128

00003558 <__addsf3>:
    3558:	bb 27       	eor	r27, r27
    355a:	aa 27       	eor	r26, r26
    355c:	0e d0       	rcall	.+28     	; 0x357a <__addsf3x>
    355e:	89 c1       	rjmp	.+786    	; 0x3872 <__fp_round>
    3560:	7a d1       	rcall	.+756    	; 0x3856 <__fp_pscA>
    3562:	30 f0       	brcs	.+12     	; 0x3570 <__addsf3+0x18>
    3564:	7f d1       	rcall	.+766    	; 0x3864 <__fp_pscB>
    3566:	20 f0       	brcs	.+8      	; 0x3570 <__addsf3+0x18>
    3568:	31 f4       	brne	.+12     	; 0x3576 <__addsf3+0x1e>
    356a:	9f 3f       	cpi	r25, 0xFF	; 255
    356c:	11 f4       	brne	.+4      	; 0x3572 <__addsf3+0x1a>
    356e:	1e f4       	brtc	.+6      	; 0x3576 <__addsf3+0x1e>
    3570:	6f c1       	rjmp	.+734    	; 0x3850 <__fp_nan>
    3572:	0e f4       	brtc	.+2      	; 0x3576 <__addsf3+0x1e>
    3574:	e0 95       	com	r30
    3576:	e7 fb       	bst	r30, 7
    3578:	3c c1       	rjmp	.+632    	; 0x37f2 <__fp_inf>

0000357a <__addsf3x>:
    357a:	e9 2f       	mov	r30, r25
    357c:	8b d1       	rcall	.+790    	; 0x3894 <__fp_split3>
    357e:	80 f3       	brcs	.-32     	; 0x3560 <__addsf3+0x8>
    3580:	ba 17       	cp	r27, r26
    3582:	62 07       	cpc	r22, r18
    3584:	73 07       	cpc	r23, r19
    3586:	84 07       	cpc	r24, r20
    3588:	95 07       	cpc	r25, r21
    358a:	18 f0       	brcs	.+6      	; 0x3592 <__addsf3x+0x18>
    358c:	71 f4       	brne	.+28     	; 0x35aa <__addsf3x+0x30>
    358e:	9e f5       	brtc	.+102    	; 0x35f6 <__addsf3x+0x7c>
    3590:	ba c1       	rjmp	.+884    	; 0x3906 <__fp_zero>
    3592:	0e f4       	brtc	.+2      	; 0x3596 <__addsf3x+0x1c>
    3594:	e0 95       	com	r30
    3596:	0b 2e       	mov	r0, r27
    3598:	ba 2f       	mov	r27, r26
    359a:	a0 2d       	mov	r26, r0
    359c:	0b 01       	movw	r0, r22
    359e:	b9 01       	movw	r22, r18
    35a0:	90 01       	movw	r18, r0
    35a2:	0c 01       	movw	r0, r24
    35a4:	ca 01       	movw	r24, r20
    35a6:	a0 01       	movw	r20, r0
    35a8:	11 24       	eor	r1, r1
    35aa:	ff 27       	eor	r31, r31
    35ac:	59 1b       	sub	r21, r25
    35ae:	99 f0       	breq	.+38     	; 0x35d6 <__addsf3x+0x5c>
    35b0:	59 3f       	cpi	r21, 0xF9	; 249
    35b2:	50 f4       	brcc	.+20     	; 0x35c8 <__addsf3x+0x4e>
    35b4:	50 3e       	cpi	r21, 0xE0	; 224
    35b6:	68 f1       	brcs	.+90     	; 0x3612 <__addsf3x+0x98>
    35b8:	1a 16       	cp	r1, r26
    35ba:	f0 40       	sbci	r31, 0x00	; 0
    35bc:	a2 2f       	mov	r26, r18
    35be:	23 2f       	mov	r18, r19
    35c0:	34 2f       	mov	r19, r20
    35c2:	44 27       	eor	r20, r20
    35c4:	58 5f       	subi	r21, 0xF8	; 248
    35c6:	f3 cf       	rjmp	.-26     	; 0x35ae <__addsf3x+0x34>
    35c8:	46 95       	lsr	r20
    35ca:	37 95       	ror	r19
    35cc:	27 95       	ror	r18
    35ce:	a7 95       	ror	r26
    35d0:	f0 40       	sbci	r31, 0x00	; 0
    35d2:	53 95       	inc	r21
    35d4:	c9 f7       	brne	.-14     	; 0x35c8 <__addsf3x+0x4e>
    35d6:	7e f4       	brtc	.+30     	; 0x35f6 <__addsf3x+0x7c>
    35d8:	1f 16       	cp	r1, r31
    35da:	ba 0b       	sbc	r27, r26
    35dc:	62 0b       	sbc	r22, r18
    35de:	73 0b       	sbc	r23, r19
    35e0:	84 0b       	sbc	r24, r20
    35e2:	ba f0       	brmi	.+46     	; 0x3612 <__addsf3x+0x98>
    35e4:	91 50       	subi	r25, 0x01	; 1
    35e6:	a1 f0       	breq	.+40     	; 0x3610 <__addsf3x+0x96>
    35e8:	ff 0f       	add	r31, r31
    35ea:	bb 1f       	adc	r27, r27
    35ec:	66 1f       	adc	r22, r22
    35ee:	77 1f       	adc	r23, r23
    35f0:	88 1f       	adc	r24, r24
    35f2:	c2 f7       	brpl	.-16     	; 0x35e4 <__addsf3x+0x6a>
    35f4:	0e c0       	rjmp	.+28     	; 0x3612 <__addsf3x+0x98>
    35f6:	ba 0f       	add	r27, r26
    35f8:	62 1f       	adc	r22, r18
    35fa:	73 1f       	adc	r23, r19
    35fc:	84 1f       	adc	r24, r20
    35fe:	48 f4       	brcc	.+18     	; 0x3612 <__addsf3x+0x98>
    3600:	87 95       	ror	r24
    3602:	77 95       	ror	r23
    3604:	67 95       	ror	r22
    3606:	b7 95       	ror	r27
    3608:	f7 95       	ror	r31
    360a:	9e 3f       	cpi	r25, 0xFE	; 254
    360c:	08 f0       	brcs	.+2      	; 0x3610 <__addsf3x+0x96>
    360e:	b3 cf       	rjmp	.-154    	; 0x3576 <__addsf3+0x1e>
    3610:	93 95       	inc	r25
    3612:	88 0f       	add	r24, r24
    3614:	08 f0       	brcs	.+2      	; 0x3618 <__addsf3x+0x9e>
    3616:	99 27       	eor	r25, r25
    3618:	ee 0f       	add	r30, r30
    361a:	97 95       	ror	r25
    361c:	87 95       	ror	r24
    361e:	08 95       	ret

00003620 <__divsf3>:
    3620:	0c d0       	rcall	.+24     	; 0x363a <__divsf3x>
    3622:	27 c1       	rjmp	.+590    	; 0x3872 <__fp_round>
    3624:	1f d1       	rcall	.+574    	; 0x3864 <__fp_pscB>
    3626:	40 f0       	brcs	.+16     	; 0x3638 <__divsf3+0x18>
    3628:	16 d1       	rcall	.+556    	; 0x3856 <__fp_pscA>
    362a:	30 f0       	brcs	.+12     	; 0x3638 <__divsf3+0x18>
    362c:	21 f4       	brne	.+8      	; 0x3636 <__divsf3+0x16>
    362e:	5f 3f       	cpi	r21, 0xFF	; 255
    3630:	19 f0       	breq	.+6      	; 0x3638 <__divsf3+0x18>
    3632:	df c0       	rjmp	.+446    	; 0x37f2 <__fp_inf>
    3634:	51 11       	cpse	r21, r1
    3636:	68 c1       	rjmp	.+720    	; 0x3908 <__fp_szero>
    3638:	0b c1       	rjmp	.+534    	; 0x3850 <__fp_nan>

0000363a <__divsf3x>:
    363a:	2c d1       	rcall	.+600    	; 0x3894 <__fp_split3>
    363c:	98 f3       	brcs	.-26     	; 0x3624 <__divsf3+0x4>

0000363e <__divsf3_pse>:
    363e:	99 23       	and	r25, r25
    3640:	c9 f3       	breq	.-14     	; 0x3634 <__divsf3+0x14>
    3642:	55 23       	and	r21, r21
    3644:	b1 f3       	breq	.-20     	; 0x3632 <__divsf3+0x12>
    3646:	95 1b       	sub	r25, r21
    3648:	55 0b       	sbc	r21, r21
    364a:	bb 27       	eor	r27, r27
    364c:	aa 27       	eor	r26, r26
    364e:	62 17       	cp	r22, r18
    3650:	73 07       	cpc	r23, r19
    3652:	84 07       	cpc	r24, r20
    3654:	38 f0       	brcs	.+14     	; 0x3664 <__divsf3_pse+0x26>
    3656:	9f 5f       	subi	r25, 0xFF	; 255
    3658:	5f 4f       	sbci	r21, 0xFF	; 255
    365a:	22 0f       	add	r18, r18
    365c:	33 1f       	adc	r19, r19
    365e:	44 1f       	adc	r20, r20
    3660:	aa 1f       	adc	r26, r26
    3662:	a9 f3       	breq	.-22     	; 0x364e <__divsf3_pse+0x10>
    3664:	33 d0       	rcall	.+102    	; 0x36cc <__divsf3_pse+0x8e>
    3666:	0e 2e       	mov	r0, r30
    3668:	3a f0       	brmi	.+14     	; 0x3678 <__divsf3_pse+0x3a>
    366a:	e0 e8       	ldi	r30, 0x80	; 128
    366c:	30 d0       	rcall	.+96     	; 0x36ce <__divsf3_pse+0x90>
    366e:	91 50       	subi	r25, 0x01	; 1
    3670:	50 40       	sbci	r21, 0x00	; 0
    3672:	e6 95       	lsr	r30
    3674:	00 1c       	adc	r0, r0
    3676:	ca f7       	brpl	.-14     	; 0x366a <__divsf3_pse+0x2c>
    3678:	29 d0       	rcall	.+82     	; 0x36cc <__divsf3_pse+0x8e>
    367a:	fe 2f       	mov	r31, r30
    367c:	27 d0       	rcall	.+78     	; 0x36cc <__divsf3_pse+0x8e>
    367e:	66 0f       	add	r22, r22
    3680:	77 1f       	adc	r23, r23
    3682:	88 1f       	adc	r24, r24
    3684:	bb 1f       	adc	r27, r27
    3686:	26 17       	cp	r18, r22
    3688:	37 07       	cpc	r19, r23
    368a:	48 07       	cpc	r20, r24
    368c:	ab 07       	cpc	r26, r27
    368e:	b0 e8       	ldi	r27, 0x80	; 128
    3690:	09 f0       	breq	.+2      	; 0x3694 <__divsf3_pse+0x56>
    3692:	bb 0b       	sbc	r27, r27
    3694:	80 2d       	mov	r24, r0
    3696:	bf 01       	movw	r22, r30
    3698:	ff 27       	eor	r31, r31
    369a:	93 58       	subi	r25, 0x83	; 131
    369c:	5f 4f       	sbci	r21, 0xFF	; 255
    369e:	2a f0       	brmi	.+10     	; 0x36aa <__divsf3_pse+0x6c>
    36a0:	9e 3f       	cpi	r25, 0xFE	; 254
    36a2:	51 05       	cpc	r21, r1
    36a4:	68 f0       	brcs	.+26     	; 0x36c0 <__divsf3_pse+0x82>
    36a6:	a5 c0       	rjmp	.+330    	; 0x37f2 <__fp_inf>
    36a8:	2f c1       	rjmp	.+606    	; 0x3908 <__fp_szero>
    36aa:	5f 3f       	cpi	r21, 0xFF	; 255
    36ac:	ec f3       	brlt	.-6      	; 0x36a8 <__divsf3_pse+0x6a>
    36ae:	98 3e       	cpi	r25, 0xE8	; 232
    36b0:	dc f3       	brlt	.-10     	; 0x36a8 <__divsf3_pse+0x6a>
    36b2:	86 95       	lsr	r24
    36b4:	77 95       	ror	r23
    36b6:	67 95       	ror	r22
    36b8:	b7 95       	ror	r27
    36ba:	f7 95       	ror	r31
    36bc:	9f 5f       	subi	r25, 0xFF	; 255
    36be:	c9 f7       	brne	.-14     	; 0x36b2 <__divsf3_pse+0x74>
    36c0:	88 0f       	add	r24, r24
    36c2:	91 1d       	adc	r25, r1
    36c4:	96 95       	lsr	r25
    36c6:	87 95       	ror	r24
    36c8:	97 f9       	bld	r25, 7
    36ca:	08 95       	ret
    36cc:	e1 e0       	ldi	r30, 0x01	; 1
    36ce:	66 0f       	add	r22, r22
    36d0:	77 1f       	adc	r23, r23
    36d2:	88 1f       	adc	r24, r24
    36d4:	bb 1f       	adc	r27, r27
    36d6:	62 17       	cp	r22, r18
    36d8:	73 07       	cpc	r23, r19
    36da:	84 07       	cpc	r24, r20
    36dc:	ba 07       	cpc	r27, r26
    36de:	20 f0       	brcs	.+8      	; 0x36e8 <__divsf3_pse+0xaa>
    36e0:	62 1b       	sub	r22, r18
    36e2:	73 0b       	sbc	r23, r19
    36e4:	84 0b       	sbc	r24, r20
    36e6:	ba 0b       	sbc	r27, r26
    36e8:	ee 1f       	adc	r30, r30
    36ea:	88 f7       	brcc	.-30     	; 0x36ce <__divsf3_pse+0x90>
    36ec:	e0 95       	com	r30
    36ee:	08 95       	ret

000036f0 <__fixsfsi>:
    36f0:	04 d0       	rcall	.+8      	; 0x36fa <__fixunssfsi>
    36f2:	68 94       	set
    36f4:	b1 11       	cpse	r27, r1
    36f6:	08 c1       	rjmp	.+528    	; 0x3908 <__fp_szero>
    36f8:	08 95       	ret

000036fa <__fixunssfsi>:
    36fa:	d4 d0       	rcall	.+424    	; 0x38a4 <__fp_splitA>
    36fc:	88 f0       	brcs	.+34     	; 0x3720 <__fixunssfsi+0x26>
    36fe:	9f 57       	subi	r25, 0x7F	; 127
    3700:	90 f0       	brcs	.+36     	; 0x3726 <__fixunssfsi+0x2c>
    3702:	b9 2f       	mov	r27, r25
    3704:	99 27       	eor	r25, r25
    3706:	b7 51       	subi	r27, 0x17	; 23
    3708:	a0 f0       	brcs	.+40     	; 0x3732 <__fixunssfsi+0x38>
    370a:	d1 f0       	breq	.+52     	; 0x3740 <__fixunssfsi+0x46>
    370c:	66 0f       	add	r22, r22
    370e:	77 1f       	adc	r23, r23
    3710:	88 1f       	adc	r24, r24
    3712:	99 1f       	adc	r25, r25
    3714:	1a f0       	brmi	.+6      	; 0x371c <__fixunssfsi+0x22>
    3716:	ba 95       	dec	r27
    3718:	c9 f7       	brne	.-14     	; 0x370c <__fixunssfsi+0x12>
    371a:	12 c0       	rjmp	.+36     	; 0x3740 <__fixunssfsi+0x46>
    371c:	b1 30       	cpi	r27, 0x01	; 1
    371e:	81 f0       	breq	.+32     	; 0x3740 <__fixunssfsi+0x46>
    3720:	f2 d0       	rcall	.+484    	; 0x3906 <__fp_zero>
    3722:	b1 e0       	ldi	r27, 0x01	; 1
    3724:	08 95       	ret
    3726:	ef c0       	rjmp	.+478    	; 0x3906 <__fp_zero>
    3728:	67 2f       	mov	r22, r23
    372a:	78 2f       	mov	r23, r24
    372c:	88 27       	eor	r24, r24
    372e:	b8 5f       	subi	r27, 0xF8	; 248
    3730:	39 f0       	breq	.+14     	; 0x3740 <__fixunssfsi+0x46>
    3732:	b9 3f       	cpi	r27, 0xF9	; 249
    3734:	cc f3       	brlt	.-14     	; 0x3728 <__fixunssfsi+0x2e>
    3736:	86 95       	lsr	r24
    3738:	77 95       	ror	r23
    373a:	67 95       	ror	r22
    373c:	b3 95       	inc	r27
    373e:	d9 f7       	brne	.-10     	; 0x3736 <__fixunssfsi+0x3c>
    3740:	3e f4       	brtc	.+14     	; 0x3750 <__fixunssfsi+0x56>
    3742:	90 95       	com	r25
    3744:	80 95       	com	r24
    3746:	70 95       	com	r23
    3748:	61 95       	neg	r22
    374a:	7f 4f       	sbci	r23, 0xFF	; 255
    374c:	8f 4f       	sbci	r24, 0xFF	; 255
    374e:	9f 4f       	sbci	r25, 0xFF	; 255
    3750:	08 95       	ret

00003752 <__floatunsisf>:
    3752:	e8 94       	clt
    3754:	09 c0       	rjmp	.+18     	; 0x3768 <__floatsisf+0x12>

00003756 <__floatsisf>:
    3756:	97 fb       	bst	r25, 7
    3758:	3e f4       	brtc	.+14     	; 0x3768 <__floatsisf+0x12>
    375a:	90 95       	com	r25
    375c:	80 95       	com	r24
    375e:	70 95       	com	r23
    3760:	61 95       	neg	r22
    3762:	7f 4f       	sbci	r23, 0xFF	; 255
    3764:	8f 4f       	sbci	r24, 0xFF	; 255
    3766:	9f 4f       	sbci	r25, 0xFF	; 255
    3768:	99 23       	and	r25, r25
    376a:	a9 f0       	breq	.+42     	; 0x3796 <__floatsisf+0x40>
    376c:	f9 2f       	mov	r31, r25
    376e:	96 e9       	ldi	r25, 0x96	; 150
    3770:	bb 27       	eor	r27, r27
    3772:	93 95       	inc	r25
    3774:	f6 95       	lsr	r31
    3776:	87 95       	ror	r24
    3778:	77 95       	ror	r23
    377a:	67 95       	ror	r22
    377c:	b7 95       	ror	r27
    377e:	f1 11       	cpse	r31, r1
    3780:	f8 cf       	rjmp	.-16     	; 0x3772 <__floatsisf+0x1c>
    3782:	fa f4       	brpl	.+62     	; 0x37c2 <__floatsisf+0x6c>
    3784:	bb 0f       	add	r27, r27
    3786:	11 f4       	brne	.+4      	; 0x378c <__floatsisf+0x36>
    3788:	60 ff       	sbrs	r22, 0
    378a:	1b c0       	rjmp	.+54     	; 0x37c2 <__floatsisf+0x6c>
    378c:	6f 5f       	subi	r22, 0xFF	; 255
    378e:	7f 4f       	sbci	r23, 0xFF	; 255
    3790:	8f 4f       	sbci	r24, 0xFF	; 255
    3792:	9f 4f       	sbci	r25, 0xFF	; 255
    3794:	16 c0       	rjmp	.+44     	; 0x37c2 <__floatsisf+0x6c>
    3796:	88 23       	and	r24, r24
    3798:	11 f0       	breq	.+4      	; 0x379e <__floatsisf+0x48>
    379a:	96 e9       	ldi	r25, 0x96	; 150
    379c:	11 c0       	rjmp	.+34     	; 0x37c0 <__floatsisf+0x6a>
    379e:	77 23       	and	r23, r23
    37a0:	21 f0       	breq	.+8      	; 0x37aa <__floatsisf+0x54>
    37a2:	9e e8       	ldi	r25, 0x8E	; 142
    37a4:	87 2f       	mov	r24, r23
    37a6:	76 2f       	mov	r23, r22
    37a8:	05 c0       	rjmp	.+10     	; 0x37b4 <__floatsisf+0x5e>
    37aa:	66 23       	and	r22, r22
    37ac:	71 f0       	breq	.+28     	; 0x37ca <__floatsisf+0x74>
    37ae:	96 e8       	ldi	r25, 0x86	; 134
    37b0:	86 2f       	mov	r24, r22
    37b2:	70 e0       	ldi	r23, 0x00	; 0
    37b4:	60 e0       	ldi	r22, 0x00	; 0
    37b6:	2a f0       	brmi	.+10     	; 0x37c2 <__floatsisf+0x6c>
    37b8:	9a 95       	dec	r25
    37ba:	66 0f       	add	r22, r22
    37bc:	77 1f       	adc	r23, r23
    37be:	88 1f       	adc	r24, r24
    37c0:	da f7       	brpl	.-10     	; 0x37b8 <__floatsisf+0x62>
    37c2:	88 0f       	add	r24, r24
    37c4:	96 95       	lsr	r25
    37c6:	87 95       	ror	r24
    37c8:	97 f9       	bld	r25, 7
    37ca:	08 95       	ret

000037cc <floor>:
    37cc:	85 d0       	rcall	.+266    	; 0x38d8 <__fp_trunc>
    37ce:	80 f0       	brcs	.+32     	; 0x37f0 <floor+0x24>
    37d0:	9f 37       	cpi	r25, 0x7F	; 127
    37d2:	40 f4       	brcc	.+16     	; 0x37e4 <floor+0x18>
    37d4:	91 11       	cpse	r25, r1
    37d6:	0e f0       	brts	.+2      	; 0x37da <floor+0xe>
    37d8:	97 c0       	rjmp	.+302    	; 0x3908 <__fp_szero>
    37da:	60 e0       	ldi	r22, 0x00	; 0
    37dc:	70 e0       	ldi	r23, 0x00	; 0
    37de:	80 e8       	ldi	r24, 0x80	; 128
    37e0:	9f eb       	ldi	r25, 0xBF	; 191
    37e2:	08 95       	ret
    37e4:	26 f4       	brtc	.+8      	; 0x37ee <floor+0x22>
    37e6:	1b 16       	cp	r1, r27
    37e8:	61 1d       	adc	r22, r1
    37ea:	71 1d       	adc	r23, r1
    37ec:	81 1d       	adc	r24, r1
    37ee:	07 c0       	rjmp	.+14     	; 0x37fe <__fp_mintl>
    37f0:	21 c0       	rjmp	.+66     	; 0x3834 <__fp_mpack>

000037f2 <__fp_inf>:
    37f2:	97 f9       	bld	r25, 7
    37f4:	9f 67       	ori	r25, 0x7F	; 127
    37f6:	80 e8       	ldi	r24, 0x80	; 128
    37f8:	70 e0       	ldi	r23, 0x00	; 0
    37fa:	60 e0       	ldi	r22, 0x00	; 0
    37fc:	08 95       	ret

000037fe <__fp_mintl>:
    37fe:	88 23       	and	r24, r24
    3800:	71 f4       	brne	.+28     	; 0x381e <__fp_mintl+0x20>
    3802:	77 23       	and	r23, r23
    3804:	21 f0       	breq	.+8      	; 0x380e <__fp_mintl+0x10>
    3806:	98 50       	subi	r25, 0x08	; 8
    3808:	87 2b       	or	r24, r23
    380a:	76 2f       	mov	r23, r22
    380c:	07 c0       	rjmp	.+14     	; 0x381c <__fp_mintl+0x1e>
    380e:	66 23       	and	r22, r22
    3810:	11 f4       	brne	.+4      	; 0x3816 <__fp_mintl+0x18>
    3812:	99 27       	eor	r25, r25
    3814:	0d c0       	rjmp	.+26     	; 0x3830 <__fp_mintl+0x32>
    3816:	90 51       	subi	r25, 0x10	; 16
    3818:	86 2b       	or	r24, r22
    381a:	70 e0       	ldi	r23, 0x00	; 0
    381c:	60 e0       	ldi	r22, 0x00	; 0
    381e:	2a f0       	brmi	.+10     	; 0x382a <__fp_mintl+0x2c>
    3820:	9a 95       	dec	r25
    3822:	66 0f       	add	r22, r22
    3824:	77 1f       	adc	r23, r23
    3826:	88 1f       	adc	r24, r24
    3828:	da f7       	brpl	.-10     	; 0x3820 <__fp_mintl+0x22>
    382a:	88 0f       	add	r24, r24
    382c:	96 95       	lsr	r25
    382e:	87 95       	ror	r24
    3830:	97 f9       	bld	r25, 7
    3832:	08 95       	ret

00003834 <__fp_mpack>:
    3834:	9f 3f       	cpi	r25, 0xFF	; 255
    3836:	31 f0       	breq	.+12     	; 0x3844 <__fp_mpack_finite+0xc>

00003838 <__fp_mpack_finite>:
    3838:	91 50       	subi	r25, 0x01	; 1
    383a:	20 f4       	brcc	.+8      	; 0x3844 <__fp_mpack_finite+0xc>
    383c:	87 95       	ror	r24
    383e:	77 95       	ror	r23
    3840:	67 95       	ror	r22
    3842:	b7 95       	ror	r27
    3844:	88 0f       	add	r24, r24
    3846:	91 1d       	adc	r25, r1
    3848:	96 95       	lsr	r25
    384a:	87 95       	ror	r24
    384c:	97 f9       	bld	r25, 7
    384e:	08 95       	ret

00003850 <__fp_nan>:
    3850:	9f ef       	ldi	r25, 0xFF	; 255
    3852:	80 ec       	ldi	r24, 0xC0	; 192
    3854:	08 95       	ret

00003856 <__fp_pscA>:
    3856:	00 24       	eor	r0, r0
    3858:	0a 94       	dec	r0
    385a:	16 16       	cp	r1, r22
    385c:	17 06       	cpc	r1, r23
    385e:	18 06       	cpc	r1, r24
    3860:	09 06       	cpc	r0, r25
    3862:	08 95       	ret

00003864 <__fp_pscB>:
    3864:	00 24       	eor	r0, r0
    3866:	0a 94       	dec	r0
    3868:	12 16       	cp	r1, r18
    386a:	13 06       	cpc	r1, r19
    386c:	14 06       	cpc	r1, r20
    386e:	05 06       	cpc	r0, r21
    3870:	08 95       	ret

00003872 <__fp_round>:
    3872:	09 2e       	mov	r0, r25
    3874:	03 94       	inc	r0
    3876:	00 0c       	add	r0, r0
    3878:	11 f4       	brne	.+4      	; 0x387e <__fp_round+0xc>
    387a:	88 23       	and	r24, r24
    387c:	52 f0       	brmi	.+20     	; 0x3892 <__fp_round+0x20>
    387e:	bb 0f       	add	r27, r27
    3880:	40 f4       	brcc	.+16     	; 0x3892 <__fp_round+0x20>
    3882:	bf 2b       	or	r27, r31
    3884:	11 f4       	brne	.+4      	; 0x388a <__fp_round+0x18>
    3886:	60 ff       	sbrs	r22, 0
    3888:	04 c0       	rjmp	.+8      	; 0x3892 <__fp_round+0x20>
    388a:	6f 5f       	subi	r22, 0xFF	; 255
    388c:	7f 4f       	sbci	r23, 0xFF	; 255
    388e:	8f 4f       	sbci	r24, 0xFF	; 255
    3890:	9f 4f       	sbci	r25, 0xFF	; 255
    3892:	08 95       	ret

00003894 <__fp_split3>:
    3894:	57 fd       	sbrc	r21, 7
    3896:	90 58       	subi	r25, 0x80	; 128
    3898:	44 0f       	add	r20, r20
    389a:	55 1f       	adc	r21, r21
    389c:	59 f0       	breq	.+22     	; 0x38b4 <__fp_splitA+0x10>
    389e:	5f 3f       	cpi	r21, 0xFF	; 255
    38a0:	71 f0       	breq	.+28     	; 0x38be <__fp_splitA+0x1a>
    38a2:	47 95       	ror	r20

000038a4 <__fp_splitA>:
    38a4:	88 0f       	add	r24, r24
    38a6:	97 fb       	bst	r25, 7
    38a8:	99 1f       	adc	r25, r25
    38aa:	61 f0       	breq	.+24     	; 0x38c4 <__fp_splitA+0x20>
    38ac:	9f 3f       	cpi	r25, 0xFF	; 255
    38ae:	79 f0       	breq	.+30     	; 0x38ce <__fp_splitA+0x2a>
    38b0:	87 95       	ror	r24
    38b2:	08 95       	ret
    38b4:	12 16       	cp	r1, r18
    38b6:	13 06       	cpc	r1, r19
    38b8:	14 06       	cpc	r1, r20
    38ba:	55 1f       	adc	r21, r21
    38bc:	f2 cf       	rjmp	.-28     	; 0x38a2 <__fp_split3+0xe>
    38be:	46 95       	lsr	r20
    38c0:	f1 df       	rcall	.-30     	; 0x38a4 <__fp_splitA>
    38c2:	08 c0       	rjmp	.+16     	; 0x38d4 <__fp_splitA+0x30>
    38c4:	16 16       	cp	r1, r22
    38c6:	17 06       	cpc	r1, r23
    38c8:	18 06       	cpc	r1, r24
    38ca:	99 1f       	adc	r25, r25
    38cc:	f1 cf       	rjmp	.-30     	; 0x38b0 <__fp_splitA+0xc>
    38ce:	86 95       	lsr	r24
    38d0:	71 05       	cpc	r23, r1
    38d2:	61 05       	cpc	r22, r1
    38d4:	08 94       	sec
    38d6:	08 95       	ret

000038d8 <__fp_trunc>:
    38d8:	e5 df       	rcall	.-54     	; 0x38a4 <__fp_splitA>
    38da:	a0 f0       	brcs	.+40     	; 0x3904 <__fp_trunc+0x2c>
    38dc:	be e7       	ldi	r27, 0x7E	; 126
    38de:	b9 17       	cp	r27, r25
    38e0:	88 f4       	brcc	.+34     	; 0x3904 <__fp_trunc+0x2c>
    38e2:	bb 27       	eor	r27, r27
    38e4:	9f 38       	cpi	r25, 0x8F	; 143
    38e6:	60 f4       	brcc	.+24     	; 0x3900 <__fp_trunc+0x28>
    38e8:	16 16       	cp	r1, r22
    38ea:	b1 1d       	adc	r27, r1
    38ec:	67 2f       	mov	r22, r23
    38ee:	78 2f       	mov	r23, r24
    38f0:	88 27       	eor	r24, r24
    38f2:	98 5f       	subi	r25, 0xF8	; 248
    38f4:	f7 cf       	rjmp	.-18     	; 0x38e4 <__fp_trunc+0xc>
    38f6:	86 95       	lsr	r24
    38f8:	77 95       	ror	r23
    38fa:	67 95       	ror	r22
    38fc:	b1 1d       	adc	r27, r1
    38fe:	93 95       	inc	r25
    3900:	96 39       	cpi	r25, 0x96	; 150
    3902:	c8 f3       	brcs	.-14     	; 0x38f6 <__fp_trunc+0x1e>
    3904:	08 95       	ret

00003906 <__fp_zero>:
    3906:	e8 94       	clt

00003908 <__fp_szero>:
    3908:	bb 27       	eor	r27, r27
    390a:	66 27       	eor	r22, r22
    390c:	77 27       	eor	r23, r23
    390e:	cb 01       	movw	r24, r22
    3910:	97 f9       	bld	r25, 7
    3912:	08 95       	ret

00003914 <__mulsf3>:
    3914:	0b d0       	rcall	.+22     	; 0x392c <__mulsf3x>
    3916:	ad cf       	rjmp	.-166    	; 0x3872 <__fp_round>
    3918:	9e df       	rcall	.-196    	; 0x3856 <__fp_pscA>
    391a:	28 f0       	brcs	.+10     	; 0x3926 <__mulsf3+0x12>
    391c:	a3 df       	rcall	.-186    	; 0x3864 <__fp_pscB>
    391e:	18 f0       	brcs	.+6      	; 0x3926 <__mulsf3+0x12>
    3920:	95 23       	and	r25, r21
    3922:	09 f0       	breq	.+2      	; 0x3926 <__mulsf3+0x12>
    3924:	66 cf       	rjmp	.-308    	; 0x37f2 <__fp_inf>
    3926:	94 cf       	rjmp	.-216    	; 0x3850 <__fp_nan>
    3928:	11 24       	eor	r1, r1
    392a:	ee cf       	rjmp	.-36     	; 0x3908 <__fp_szero>

0000392c <__mulsf3x>:
    392c:	b3 df       	rcall	.-154    	; 0x3894 <__fp_split3>
    392e:	a0 f3       	brcs	.-24     	; 0x3918 <__mulsf3+0x4>

00003930 <__mulsf3_pse>:
    3930:	95 9f       	mul	r25, r21
    3932:	d1 f3       	breq	.-12     	; 0x3928 <__mulsf3+0x14>
    3934:	95 0f       	add	r25, r21
    3936:	50 e0       	ldi	r21, 0x00	; 0
    3938:	55 1f       	adc	r21, r21
    393a:	62 9f       	mul	r22, r18
    393c:	f0 01       	movw	r30, r0
    393e:	72 9f       	mul	r23, r18
    3940:	bb 27       	eor	r27, r27
    3942:	f0 0d       	add	r31, r0
    3944:	b1 1d       	adc	r27, r1
    3946:	63 9f       	mul	r22, r19
    3948:	aa 27       	eor	r26, r26
    394a:	f0 0d       	add	r31, r0
    394c:	b1 1d       	adc	r27, r1
    394e:	aa 1f       	adc	r26, r26
    3950:	64 9f       	mul	r22, r20
    3952:	66 27       	eor	r22, r22
    3954:	b0 0d       	add	r27, r0
    3956:	a1 1d       	adc	r26, r1
    3958:	66 1f       	adc	r22, r22
    395a:	82 9f       	mul	r24, r18
    395c:	22 27       	eor	r18, r18
    395e:	b0 0d       	add	r27, r0
    3960:	a1 1d       	adc	r26, r1
    3962:	62 1f       	adc	r22, r18
    3964:	73 9f       	mul	r23, r19
    3966:	b0 0d       	add	r27, r0
    3968:	a1 1d       	adc	r26, r1
    396a:	62 1f       	adc	r22, r18
    396c:	83 9f       	mul	r24, r19
    396e:	a0 0d       	add	r26, r0
    3970:	61 1d       	adc	r22, r1
    3972:	22 1f       	adc	r18, r18
    3974:	74 9f       	mul	r23, r20
    3976:	33 27       	eor	r19, r19
    3978:	a0 0d       	add	r26, r0
    397a:	61 1d       	adc	r22, r1
    397c:	23 1f       	adc	r18, r19
    397e:	84 9f       	mul	r24, r20
    3980:	60 0d       	add	r22, r0
    3982:	21 1d       	adc	r18, r1
    3984:	82 2f       	mov	r24, r18
    3986:	76 2f       	mov	r23, r22
    3988:	6a 2f       	mov	r22, r26
    398a:	11 24       	eor	r1, r1
    398c:	9f 57       	subi	r25, 0x7F	; 127
    398e:	50 40       	sbci	r21, 0x00	; 0
    3990:	8a f0       	brmi	.+34     	; 0x39b4 <__mulsf3_pse+0x84>
    3992:	e1 f0       	breq	.+56     	; 0x39cc <__mulsf3_pse+0x9c>
    3994:	88 23       	and	r24, r24
    3996:	4a f0       	brmi	.+18     	; 0x39aa <__mulsf3_pse+0x7a>
    3998:	ee 0f       	add	r30, r30
    399a:	ff 1f       	adc	r31, r31
    399c:	bb 1f       	adc	r27, r27
    399e:	66 1f       	adc	r22, r22
    39a0:	77 1f       	adc	r23, r23
    39a2:	88 1f       	adc	r24, r24
    39a4:	91 50       	subi	r25, 0x01	; 1
    39a6:	50 40       	sbci	r21, 0x00	; 0
    39a8:	a9 f7       	brne	.-22     	; 0x3994 <__mulsf3_pse+0x64>
    39aa:	9e 3f       	cpi	r25, 0xFE	; 254
    39ac:	51 05       	cpc	r21, r1
    39ae:	70 f0       	brcs	.+28     	; 0x39cc <__mulsf3_pse+0x9c>
    39b0:	20 cf       	rjmp	.-448    	; 0x37f2 <__fp_inf>
    39b2:	aa cf       	rjmp	.-172    	; 0x3908 <__fp_szero>
    39b4:	5f 3f       	cpi	r21, 0xFF	; 255
    39b6:	ec f3       	brlt	.-6      	; 0x39b2 <__mulsf3_pse+0x82>
    39b8:	98 3e       	cpi	r25, 0xE8	; 232
    39ba:	dc f3       	brlt	.-10     	; 0x39b2 <__mulsf3_pse+0x82>
    39bc:	86 95       	lsr	r24
    39be:	77 95       	ror	r23
    39c0:	67 95       	ror	r22
    39c2:	b7 95       	ror	r27
    39c4:	f7 95       	ror	r31
    39c6:	e7 95       	ror	r30
    39c8:	9f 5f       	subi	r25, 0xFF	; 255
    39ca:	c1 f7       	brne	.-16     	; 0x39bc <__mulsf3_pse+0x8c>
    39cc:	fe 2b       	or	r31, r30
    39ce:	88 0f       	add	r24, r24
    39d0:	91 1d       	adc	r25, r1
    39d2:	96 95       	lsr	r25
    39d4:	87 95       	ror	r24
    39d6:	97 f9       	bld	r25, 7
    39d8:	08 95       	ret

000039da <pow>:
    39da:	fa 01       	movw	r30, r20
    39dc:	ee 0f       	add	r30, r30
    39de:	ff 1f       	adc	r31, r31
    39e0:	30 96       	adiw	r30, 0x00	; 0
    39e2:	21 05       	cpc	r18, r1
    39e4:	31 05       	cpc	r19, r1
    39e6:	99 f1       	breq	.+102    	; 0x3a4e <pow+0x74>
    39e8:	61 15       	cp	r22, r1
    39ea:	71 05       	cpc	r23, r1
    39ec:	61 f4       	brne	.+24     	; 0x3a06 <pow+0x2c>
    39ee:	80 38       	cpi	r24, 0x80	; 128
    39f0:	bf e3       	ldi	r27, 0x3F	; 63
    39f2:	9b 07       	cpc	r25, r27
    39f4:	49 f1       	breq	.+82     	; 0x3a48 <pow+0x6e>
    39f6:	68 94       	set
    39f8:	90 38       	cpi	r25, 0x80	; 128
    39fa:	81 05       	cpc	r24, r1
    39fc:	61 f0       	breq	.+24     	; 0x3a16 <pow+0x3c>
    39fe:	80 38       	cpi	r24, 0x80	; 128
    3a00:	bf ef       	ldi	r27, 0xFF	; 255
    3a02:	9b 07       	cpc	r25, r27
    3a04:	41 f0       	breq	.+16     	; 0x3a16 <pow+0x3c>
    3a06:	99 23       	and	r25, r25
    3a08:	42 f5       	brpl	.+80     	; 0x3a5a <pow+0x80>
    3a0a:	ff 3f       	cpi	r31, 0xFF	; 255
    3a0c:	e1 05       	cpc	r30, r1
    3a0e:	31 05       	cpc	r19, r1
    3a10:	21 05       	cpc	r18, r1
    3a12:	11 f1       	breq	.+68     	; 0x3a58 <pow+0x7e>
    3a14:	e8 94       	clt
    3a16:	08 94       	sec
    3a18:	e7 95       	ror	r30
    3a1a:	d9 01       	movw	r26, r18
    3a1c:	aa 23       	and	r26, r26
    3a1e:	29 f4       	brne	.+10     	; 0x3a2a <pow+0x50>
    3a20:	ab 2f       	mov	r26, r27
    3a22:	be 2f       	mov	r27, r30
    3a24:	f8 5f       	subi	r31, 0xF8	; 248
    3a26:	d0 f3       	brcs	.-12     	; 0x3a1c <pow+0x42>
    3a28:	10 c0       	rjmp	.+32     	; 0x3a4a <pow+0x70>
    3a2a:	ff 5f       	subi	r31, 0xFF	; 255
    3a2c:	70 f4       	brcc	.+28     	; 0x3a4a <pow+0x70>
    3a2e:	a6 95       	lsr	r26
    3a30:	e0 f7       	brcc	.-8      	; 0x3a2a <pow+0x50>
    3a32:	f7 39       	cpi	r31, 0x97	; 151
    3a34:	50 f0       	brcs	.+20     	; 0x3a4a <pow+0x70>
    3a36:	19 f0       	breq	.+6      	; 0x3a3e <pow+0x64>
    3a38:	ff 3a       	cpi	r31, 0xAF	; 175
    3a3a:	38 f4       	brcc	.+14     	; 0x3a4a <pow+0x70>
    3a3c:	9f 77       	andi	r25, 0x7F	; 127
    3a3e:	9f 93       	push	r25
    3a40:	0c d0       	rcall	.+24     	; 0x3a5a <pow+0x80>
    3a42:	0f 90       	pop	r0
    3a44:	07 fc       	sbrc	r0, 7
    3a46:	90 58       	subi	r25, 0x80	; 128
    3a48:	08 95       	ret
    3a4a:	3e f0       	brts	.+14     	; 0x3a5a <pow+0x80>
    3a4c:	01 cf       	rjmp	.-510    	; 0x3850 <__fp_nan>
    3a4e:	60 e0       	ldi	r22, 0x00	; 0
    3a50:	70 e0       	ldi	r23, 0x00	; 0
    3a52:	80 e8       	ldi	r24, 0x80	; 128
    3a54:	9f e3       	ldi	r25, 0x3F	; 63
    3a56:	08 95       	ret
    3a58:	4f e7       	ldi	r20, 0x7F	; 127
    3a5a:	9f 77       	andi	r25, 0x7F	; 127
    3a5c:	5f 93       	push	r21
    3a5e:	4f 93       	push	r20
    3a60:	3f 93       	push	r19
    3a62:	2f 93       	push	r18
    3a64:	9e d0       	rcall	.+316    	; 0x3ba2 <log>
    3a66:	2f 91       	pop	r18
    3a68:	3f 91       	pop	r19
    3a6a:	4f 91       	pop	r20
    3a6c:	5f 91       	pop	r21
    3a6e:	52 df       	rcall	.-348    	; 0x3914 <__mulsf3>
    3a70:	05 c0       	rjmp	.+10     	; 0x3a7c <exp>
    3a72:	19 f4       	brne	.+6      	; 0x3a7a <pow+0xa0>
    3a74:	0e f0       	brts	.+2      	; 0x3a78 <pow+0x9e>
    3a76:	bd ce       	rjmp	.-646    	; 0x37f2 <__fp_inf>
    3a78:	46 cf       	rjmp	.-372    	; 0x3906 <__fp_zero>
    3a7a:	ea ce       	rjmp	.-556    	; 0x3850 <__fp_nan>

00003a7c <exp>:
    3a7c:	13 df       	rcall	.-474    	; 0x38a4 <__fp_splitA>
    3a7e:	c8 f3       	brcs	.-14     	; 0x3a72 <pow+0x98>
    3a80:	96 38       	cpi	r25, 0x86	; 134
    3a82:	c0 f7       	brcc	.-16     	; 0x3a74 <pow+0x9a>
    3a84:	07 f8       	bld	r0, 7
    3a86:	0f 92       	push	r0
    3a88:	e8 94       	clt
    3a8a:	2b e3       	ldi	r18, 0x3B	; 59
    3a8c:	3a ea       	ldi	r19, 0xAA	; 170
    3a8e:	48 eb       	ldi	r20, 0xB8	; 184
    3a90:	5f e7       	ldi	r21, 0x7F	; 127
    3a92:	4e df       	rcall	.-356    	; 0x3930 <__mulsf3_pse>
    3a94:	0f 92       	push	r0
    3a96:	0f 92       	push	r0
    3a98:	0f 92       	push	r0
    3a9a:	4d b7       	in	r20, 0x3d	; 61
    3a9c:	5e b7       	in	r21, 0x3e	; 62
    3a9e:	0f 92       	push	r0
    3aa0:	c0 d0       	rcall	.+384    	; 0x3c22 <modf>
    3aa2:	e8 ef       	ldi	r30, 0xF8	; 248
    3aa4:	f0 e0       	ldi	r31, 0x00	; 0
    3aa6:	16 d0       	rcall	.+44     	; 0x3ad4 <__fp_powser>
    3aa8:	4f 91       	pop	r20
    3aaa:	5f 91       	pop	r21
    3aac:	ef 91       	pop	r30
    3aae:	ff 91       	pop	r31
    3ab0:	e5 95       	asr	r30
    3ab2:	ee 1f       	adc	r30, r30
    3ab4:	ff 1f       	adc	r31, r31
    3ab6:	49 f0       	breq	.+18     	; 0x3aca <exp+0x4e>
    3ab8:	fe 57       	subi	r31, 0x7E	; 126
    3aba:	e0 68       	ori	r30, 0x80	; 128
    3abc:	44 27       	eor	r20, r20
    3abe:	ee 0f       	add	r30, r30
    3ac0:	44 1f       	adc	r20, r20
    3ac2:	fa 95       	dec	r31
    3ac4:	e1 f7       	brne	.-8      	; 0x3abe <exp+0x42>
    3ac6:	41 95       	neg	r20
    3ac8:	55 0b       	sbc	r21, r21
    3aca:	32 d0       	rcall	.+100    	; 0x3b30 <ldexp>
    3acc:	0f 90       	pop	r0
    3ace:	07 fe       	sbrs	r0, 7
    3ad0:	26 c0       	rjmp	.+76     	; 0x3b1e <inverse>
    3ad2:	08 95       	ret

00003ad4 <__fp_powser>:
    3ad4:	df 93       	push	r29
    3ad6:	cf 93       	push	r28
    3ad8:	1f 93       	push	r17
    3ada:	0f 93       	push	r16
    3adc:	ff 92       	push	r15
    3ade:	ef 92       	push	r14
    3ae0:	df 92       	push	r13
    3ae2:	7b 01       	movw	r14, r22
    3ae4:	8c 01       	movw	r16, r24
    3ae6:	68 94       	set
    3ae8:	05 c0       	rjmp	.+10     	; 0x3af4 <__fp_powser+0x20>
    3aea:	da 2e       	mov	r13, r26
    3aec:	ef 01       	movw	r28, r30
    3aee:	1e df       	rcall	.-452    	; 0x392c <__mulsf3x>
    3af0:	fe 01       	movw	r30, r28
    3af2:	e8 94       	clt
    3af4:	a5 91       	lpm	r26, Z+
    3af6:	25 91       	lpm	r18, Z+
    3af8:	35 91       	lpm	r19, Z+
    3afa:	45 91       	lpm	r20, Z+
    3afc:	55 91       	lpm	r21, Z+
    3afe:	ae f3       	brts	.-22     	; 0x3aea <__fp_powser+0x16>
    3b00:	ef 01       	movw	r28, r30
    3b02:	3b dd       	rcall	.-1418   	; 0x357a <__addsf3x>
    3b04:	fe 01       	movw	r30, r28
    3b06:	97 01       	movw	r18, r14
    3b08:	a8 01       	movw	r20, r16
    3b0a:	da 94       	dec	r13
    3b0c:	79 f7       	brne	.-34     	; 0x3aec <__fp_powser+0x18>
    3b0e:	df 90       	pop	r13
    3b10:	ef 90       	pop	r14
    3b12:	ff 90       	pop	r15
    3b14:	0f 91       	pop	r16
    3b16:	1f 91       	pop	r17
    3b18:	cf 91       	pop	r28
    3b1a:	df 91       	pop	r29
    3b1c:	08 95       	ret

00003b1e <inverse>:
    3b1e:	9b 01       	movw	r18, r22
    3b20:	ac 01       	movw	r20, r24
    3b22:	60 e0       	ldi	r22, 0x00	; 0
    3b24:	70 e0       	ldi	r23, 0x00	; 0
    3b26:	80 e8       	ldi	r24, 0x80	; 128
    3b28:	9f e3       	ldi	r25, 0x3F	; 63
    3b2a:	7a cd       	rjmp	.-1292   	; 0x3620 <__divsf3>
    3b2c:	62 ce       	rjmp	.-828    	; 0x37f2 <__fp_inf>
    3b2e:	82 ce       	rjmp	.-764    	; 0x3834 <__fp_mpack>

00003b30 <ldexp>:
    3b30:	b9 de       	rcall	.-654    	; 0x38a4 <__fp_splitA>
    3b32:	e8 f3       	brcs	.-6      	; 0x3b2e <inverse+0x10>
    3b34:	99 23       	and	r25, r25
    3b36:	d9 f3       	breq	.-10     	; 0x3b2e <inverse+0x10>
    3b38:	94 0f       	add	r25, r20
    3b3a:	51 1d       	adc	r21, r1
    3b3c:	bb f3       	brvs	.-18     	; 0x3b2c <inverse+0xe>
    3b3e:	91 50       	subi	r25, 0x01	; 1
    3b40:	50 40       	sbci	r21, 0x00	; 0
    3b42:	94 f0       	brlt	.+36     	; 0x3b68 <ldexp+0x38>
    3b44:	59 f0       	breq	.+22     	; 0x3b5c <ldexp+0x2c>
    3b46:	88 23       	and	r24, r24
    3b48:	32 f0       	brmi	.+12     	; 0x3b56 <ldexp+0x26>
    3b4a:	66 0f       	add	r22, r22
    3b4c:	77 1f       	adc	r23, r23
    3b4e:	88 1f       	adc	r24, r24
    3b50:	91 50       	subi	r25, 0x01	; 1
    3b52:	50 40       	sbci	r21, 0x00	; 0
    3b54:	c1 f7       	brne	.-16     	; 0x3b46 <ldexp+0x16>
    3b56:	9e 3f       	cpi	r25, 0xFE	; 254
    3b58:	51 05       	cpc	r21, r1
    3b5a:	44 f7       	brge	.-48     	; 0x3b2c <inverse+0xe>
    3b5c:	88 0f       	add	r24, r24
    3b5e:	91 1d       	adc	r25, r1
    3b60:	96 95       	lsr	r25
    3b62:	87 95       	ror	r24
    3b64:	97 f9       	bld	r25, 7
    3b66:	08 95       	ret
    3b68:	5f 3f       	cpi	r21, 0xFF	; 255
    3b6a:	ac f0       	brlt	.+42     	; 0x3b96 <ldexp+0x66>
    3b6c:	98 3e       	cpi	r25, 0xE8	; 232
    3b6e:	9c f0       	brlt	.+38     	; 0x3b96 <ldexp+0x66>
    3b70:	bb 27       	eor	r27, r27
    3b72:	86 95       	lsr	r24
    3b74:	77 95       	ror	r23
    3b76:	67 95       	ror	r22
    3b78:	b7 95       	ror	r27
    3b7a:	08 f4       	brcc	.+2      	; 0x3b7e <ldexp+0x4e>
    3b7c:	b1 60       	ori	r27, 0x01	; 1
    3b7e:	93 95       	inc	r25
    3b80:	c1 f7       	brne	.-16     	; 0x3b72 <ldexp+0x42>
    3b82:	bb 0f       	add	r27, r27
    3b84:	58 f7       	brcc	.-42     	; 0x3b5c <ldexp+0x2c>
    3b86:	11 f4       	brne	.+4      	; 0x3b8c <ldexp+0x5c>
    3b88:	60 ff       	sbrs	r22, 0
    3b8a:	e8 cf       	rjmp	.-48     	; 0x3b5c <ldexp+0x2c>
    3b8c:	6f 5f       	subi	r22, 0xFF	; 255
    3b8e:	7f 4f       	sbci	r23, 0xFF	; 255
    3b90:	8f 4f       	sbci	r24, 0xFF	; 255
    3b92:	9f 4f       	sbci	r25, 0xFF	; 255
    3b94:	e3 cf       	rjmp	.-58     	; 0x3b5c <ldexp+0x2c>
    3b96:	b8 ce       	rjmp	.-656    	; 0x3908 <__fp_szero>
    3b98:	0e f0       	brts	.+2      	; 0x3b9c <ldexp+0x6c>
    3b9a:	4c ce       	rjmp	.-872    	; 0x3834 <__fp_mpack>
    3b9c:	59 ce       	rjmp	.-846    	; 0x3850 <__fp_nan>
    3b9e:	68 94       	set
    3ba0:	28 ce       	rjmp	.-944    	; 0x37f2 <__fp_inf>

00003ba2 <log>:
    3ba2:	80 de       	rcall	.-768    	; 0x38a4 <__fp_splitA>
    3ba4:	c8 f3       	brcs	.-14     	; 0x3b98 <ldexp+0x68>
    3ba6:	99 23       	and	r25, r25
    3ba8:	d1 f3       	breq	.-12     	; 0x3b9e <ldexp+0x6e>
    3baa:	c6 f3       	brts	.-16     	; 0x3b9c <ldexp+0x6c>
    3bac:	df 93       	push	r29
    3bae:	cf 93       	push	r28
    3bb0:	1f 93       	push	r17
    3bb2:	0f 93       	push	r16
    3bb4:	ff 92       	push	r15
    3bb6:	c9 2f       	mov	r28, r25
    3bb8:	dd 27       	eor	r29, r29
    3bba:	88 23       	and	r24, r24
    3bbc:	2a f0       	brmi	.+10     	; 0x3bc8 <log+0x26>
    3bbe:	21 97       	sbiw	r28, 0x01	; 1
    3bc0:	66 0f       	add	r22, r22
    3bc2:	77 1f       	adc	r23, r23
    3bc4:	88 1f       	adc	r24, r24
    3bc6:	da f7       	brpl	.-10     	; 0x3bbe <log+0x1c>
    3bc8:	20 e0       	ldi	r18, 0x00	; 0
    3bca:	30 e0       	ldi	r19, 0x00	; 0
    3bcc:	40 e8       	ldi	r20, 0x80	; 128
    3bce:	5f eb       	ldi	r21, 0xBF	; 191
    3bd0:	9f e3       	ldi	r25, 0x3F	; 63
    3bd2:	88 39       	cpi	r24, 0x98	; 152
    3bd4:	20 f0       	brcs	.+8      	; 0x3bde <log+0x3c>
    3bd6:	80 3e       	cpi	r24, 0xE0	; 224
    3bd8:	30 f0       	brcs	.+12     	; 0x3be6 <log+0x44>
    3bda:	21 96       	adiw	r28, 0x01	; 1
    3bdc:	8f 77       	andi	r24, 0x7F	; 127
    3bde:	bc dc       	rcall	.-1672   	; 0x3558 <__addsf3>
    3be0:	e0 e2       	ldi	r30, 0x20	; 32
    3be2:	f1 e0       	ldi	r31, 0x01	; 1
    3be4:	03 c0       	rjmp	.+6      	; 0x3bec <log+0x4a>
    3be6:	b8 dc       	rcall	.-1680   	; 0x3558 <__addsf3>
    3be8:	ed e4       	ldi	r30, 0x4D	; 77
    3bea:	f1 e0       	ldi	r31, 0x01	; 1
    3bec:	73 df       	rcall	.-282    	; 0x3ad4 <__fp_powser>
    3bee:	8b 01       	movw	r16, r22
    3bf0:	be 01       	movw	r22, r28
    3bf2:	ec 01       	movw	r28, r24
    3bf4:	fb 2e       	mov	r15, r27
    3bf6:	6f 57       	subi	r22, 0x7F	; 127
    3bf8:	71 09       	sbc	r23, r1
    3bfa:	75 95       	asr	r23
    3bfc:	77 1f       	adc	r23, r23
    3bfe:	88 0b       	sbc	r24, r24
    3c00:	99 0b       	sbc	r25, r25
    3c02:	a9 dd       	rcall	.-1198   	; 0x3756 <__floatsisf>
    3c04:	28 e1       	ldi	r18, 0x18	; 24
    3c06:	32 e7       	ldi	r19, 0x72	; 114
    3c08:	41 e3       	ldi	r20, 0x31	; 49
    3c0a:	5f e3       	ldi	r21, 0x3F	; 63
    3c0c:	8f de       	rcall	.-738    	; 0x392c <__mulsf3x>
    3c0e:	af 2d       	mov	r26, r15
    3c10:	98 01       	movw	r18, r16
    3c12:	ae 01       	movw	r20, r28
    3c14:	ff 90       	pop	r15
    3c16:	0f 91       	pop	r16
    3c18:	1f 91       	pop	r17
    3c1a:	cf 91       	pop	r28
    3c1c:	df 91       	pop	r29
    3c1e:	ad dc       	rcall	.-1702   	; 0x357a <__addsf3x>
    3c20:	28 ce       	rjmp	.-944    	; 0x3872 <__fp_round>

00003c22 <modf>:
    3c22:	fa 01       	movw	r30, r20
    3c24:	dc 01       	movw	r26, r24
    3c26:	aa 0f       	add	r26, r26
    3c28:	bb 1f       	adc	r27, r27
    3c2a:	9b 01       	movw	r18, r22
    3c2c:	ac 01       	movw	r20, r24
    3c2e:	bf 57       	subi	r27, 0x7F	; 127
    3c30:	28 f4       	brcc	.+10     	; 0x3c3c <modf+0x1a>
    3c32:	22 27       	eor	r18, r18
    3c34:	33 27       	eor	r19, r19
    3c36:	44 27       	eor	r20, r20
    3c38:	50 78       	andi	r21, 0x80	; 128
    3c3a:	1f c0       	rjmp	.+62     	; 0x3c7a <modf+0x58>
    3c3c:	b7 51       	subi	r27, 0x17	; 23
    3c3e:	88 f4       	brcc	.+34     	; 0x3c62 <modf+0x40>
    3c40:	ab 2f       	mov	r26, r27
    3c42:	00 24       	eor	r0, r0
    3c44:	46 95       	lsr	r20
    3c46:	37 95       	ror	r19
    3c48:	27 95       	ror	r18
    3c4a:	01 1c       	adc	r0, r1
    3c4c:	a3 95       	inc	r26
    3c4e:	d2 f3       	brmi	.-12     	; 0x3c44 <modf+0x22>
    3c50:	00 20       	and	r0, r0
    3c52:	69 f0       	breq	.+26     	; 0x3c6e <modf+0x4c>
    3c54:	22 0f       	add	r18, r18
    3c56:	33 1f       	adc	r19, r19
    3c58:	44 1f       	adc	r20, r20
    3c5a:	b3 95       	inc	r27
    3c5c:	da f3       	brmi	.-10     	; 0x3c54 <modf+0x32>
    3c5e:	0d d0       	rcall	.+26     	; 0x3c7a <modf+0x58>
    3c60:	7a cc       	rjmp	.-1804   	; 0x3556 <__subsf3>
    3c62:	61 30       	cpi	r22, 0x01	; 1
    3c64:	71 05       	cpc	r23, r1
    3c66:	a0 e8       	ldi	r26, 0x80	; 128
    3c68:	8a 07       	cpc	r24, r26
    3c6a:	b9 46       	sbci	r27, 0x69	; 105
    3c6c:	30 f4       	brcc	.+12     	; 0x3c7a <modf+0x58>
    3c6e:	9b 01       	movw	r18, r22
    3c70:	ac 01       	movw	r20, r24
    3c72:	66 27       	eor	r22, r22
    3c74:	77 27       	eor	r23, r23
    3c76:	88 27       	eor	r24, r24
    3c78:	90 78       	andi	r25, 0x80	; 128
    3c7a:	30 96       	adiw	r30, 0x00	; 0
    3c7c:	21 f0       	breq	.+8      	; 0x3c86 <modf+0x64>
    3c7e:	20 83       	st	Z, r18
    3c80:	31 83       	std	Z+1, r19	; 0x01
    3c82:	42 83       	std	Z+2, r20	; 0x02
    3c84:	53 83       	std	Z+3, r21	; 0x03
    3c86:	08 95       	ret

00003c88 <__divmodhi4>:
    3c88:	97 fb       	bst	r25, 7
    3c8a:	07 2e       	mov	r0, r23
    3c8c:	16 f4       	brtc	.+4      	; 0x3c92 <__divmodhi4+0xa>
    3c8e:	00 94       	com	r0
    3c90:	06 d0       	rcall	.+12     	; 0x3c9e <__divmodhi4_neg1>
    3c92:	77 fd       	sbrc	r23, 7
    3c94:	08 d0       	rcall	.+16     	; 0x3ca6 <__divmodhi4_neg2>
    3c96:	13 d0       	rcall	.+38     	; 0x3cbe <__udivmodhi4>
    3c98:	07 fc       	sbrc	r0, 7
    3c9a:	05 d0       	rcall	.+10     	; 0x3ca6 <__divmodhi4_neg2>
    3c9c:	3e f4       	brtc	.+14     	; 0x3cac <__divmodhi4_exit>

00003c9e <__divmodhi4_neg1>:
    3c9e:	90 95       	com	r25
    3ca0:	81 95       	neg	r24
    3ca2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ca4:	08 95       	ret

00003ca6 <__divmodhi4_neg2>:
    3ca6:	70 95       	com	r23
    3ca8:	61 95       	neg	r22
    3caa:	7f 4f       	sbci	r23, 0xFF	; 255

00003cac <__divmodhi4_exit>:
    3cac:	08 95       	ret

00003cae <__tablejump2__>:
    3cae:	ee 0f       	add	r30, r30
    3cb0:	ff 1f       	adc	r31, r31
    3cb2:	88 1f       	adc	r24, r24
    3cb4:	8b bf       	out	0x3b, r24	; 59
    3cb6:	07 90       	elpm	r0, Z+
    3cb8:	f6 91       	elpm	r31, Z
    3cba:	e0 2d       	mov	r30, r0
    3cbc:	19 94       	eijmp

00003cbe <__udivmodhi4>:
    3cbe:	aa 1b       	sub	r26, r26
    3cc0:	bb 1b       	sub	r27, r27
    3cc2:	51 e1       	ldi	r21, 0x11	; 17
    3cc4:	07 c0       	rjmp	.+14     	; 0x3cd4 <__udivmodhi4_ep>

00003cc6 <__udivmodhi4_loop>:
    3cc6:	aa 1f       	adc	r26, r26
    3cc8:	bb 1f       	adc	r27, r27
    3cca:	a6 17       	cp	r26, r22
    3ccc:	b7 07       	cpc	r27, r23
    3cce:	10 f0       	brcs	.+4      	; 0x3cd4 <__udivmodhi4_ep>
    3cd0:	a6 1b       	sub	r26, r22
    3cd2:	b7 0b       	sbc	r27, r23

00003cd4 <__udivmodhi4_ep>:
    3cd4:	88 1f       	adc	r24, r24
    3cd6:	99 1f       	adc	r25, r25
    3cd8:	5a 95       	dec	r21
    3cda:	a9 f7       	brne	.-22     	; 0x3cc6 <__udivmodhi4_loop>
    3cdc:	80 95       	com	r24
    3cde:	90 95       	com	r25
    3ce0:	bc 01       	movw	r22, r24
    3ce2:	cd 01       	movw	r24, r26
    3ce4:	08 95       	ret

00003ce6 <calloc>:
    3ce6:	0f 93       	push	r16
    3ce8:	1f 93       	push	r17
    3cea:	cf 93       	push	r28
    3cec:	df 93       	push	r29
    3cee:	86 9f       	mul	r24, r22
    3cf0:	80 01       	movw	r16, r0
    3cf2:	87 9f       	mul	r24, r23
    3cf4:	10 0d       	add	r17, r0
    3cf6:	96 9f       	mul	r25, r22
    3cf8:	10 0d       	add	r17, r0
    3cfa:	11 24       	eor	r1, r1
    3cfc:	c8 01       	movw	r24, r16
    3cfe:	0d d0       	rcall	.+26     	; 0x3d1a <malloc>
    3d00:	ec 01       	movw	r28, r24
    3d02:	00 97       	sbiw	r24, 0x00	; 0
    3d04:	21 f0       	breq	.+8      	; 0x3d0e <calloc+0x28>
    3d06:	a8 01       	movw	r20, r16
    3d08:	60 e0       	ldi	r22, 0x00	; 0
    3d0a:	70 e0       	ldi	r23, 0x00	; 0
    3d0c:	34 d1       	rcall	.+616    	; 0x3f76 <memset>
    3d0e:	ce 01       	movw	r24, r28
    3d10:	df 91       	pop	r29
    3d12:	cf 91       	pop	r28
    3d14:	1f 91       	pop	r17
    3d16:	0f 91       	pop	r16
    3d18:	08 95       	ret

00003d1a <malloc>:
    3d1a:	0f 93       	push	r16
    3d1c:	1f 93       	push	r17
    3d1e:	cf 93       	push	r28
    3d20:	df 93       	push	r29
    3d22:	82 30       	cpi	r24, 0x02	; 2
    3d24:	91 05       	cpc	r25, r1
    3d26:	10 f4       	brcc	.+4      	; 0x3d2c <malloc+0x12>
    3d28:	82 e0       	ldi	r24, 0x02	; 2
    3d2a:	90 e0       	ldi	r25, 0x00	; 0
    3d2c:	e0 91 b0 0e 	lds	r30, 0x0EB0	; 0x800eb0 <__flp>
    3d30:	f0 91 b1 0e 	lds	r31, 0x0EB1	; 0x800eb1 <__flp+0x1>
    3d34:	20 e0       	ldi	r18, 0x00	; 0
    3d36:	30 e0       	ldi	r19, 0x00	; 0
    3d38:	a0 e0       	ldi	r26, 0x00	; 0
    3d3a:	b0 e0       	ldi	r27, 0x00	; 0
    3d3c:	30 97       	sbiw	r30, 0x00	; 0
    3d3e:	19 f1       	breq	.+70     	; 0x3d86 <malloc+0x6c>
    3d40:	40 81       	ld	r20, Z
    3d42:	51 81       	ldd	r21, Z+1	; 0x01
    3d44:	02 81       	ldd	r16, Z+2	; 0x02
    3d46:	13 81       	ldd	r17, Z+3	; 0x03
    3d48:	48 17       	cp	r20, r24
    3d4a:	59 07       	cpc	r21, r25
    3d4c:	c8 f0       	brcs	.+50     	; 0x3d80 <malloc+0x66>
    3d4e:	84 17       	cp	r24, r20
    3d50:	95 07       	cpc	r25, r21
    3d52:	69 f4       	brne	.+26     	; 0x3d6e <malloc+0x54>
    3d54:	10 97       	sbiw	r26, 0x00	; 0
    3d56:	31 f0       	breq	.+12     	; 0x3d64 <malloc+0x4a>
    3d58:	12 96       	adiw	r26, 0x02	; 2
    3d5a:	0c 93       	st	X, r16
    3d5c:	12 97       	sbiw	r26, 0x02	; 2
    3d5e:	13 96       	adiw	r26, 0x03	; 3
    3d60:	1c 93       	st	X, r17
    3d62:	27 c0       	rjmp	.+78     	; 0x3db2 <malloc+0x98>
    3d64:	00 93 b0 0e 	sts	0x0EB0, r16	; 0x800eb0 <__flp>
    3d68:	10 93 b1 0e 	sts	0x0EB1, r17	; 0x800eb1 <__flp+0x1>
    3d6c:	22 c0       	rjmp	.+68     	; 0x3db2 <malloc+0x98>
    3d6e:	21 15       	cp	r18, r1
    3d70:	31 05       	cpc	r19, r1
    3d72:	19 f0       	breq	.+6      	; 0x3d7a <malloc+0x60>
    3d74:	42 17       	cp	r20, r18
    3d76:	53 07       	cpc	r21, r19
    3d78:	18 f4       	brcc	.+6      	; 0x3d80 <malloc+0x66>
    3d7a:	9a 01       	movw	r18, r20
    3d7c:	bd 01       	movw	r22, r26
    3d7e:	ef 01       	movw	r28, r30
    3d80:	df 01       	movw	r26, r30
    3d82:	f8 01       	movw	r30, r16
    3d84:	db cf       	rjmp	.-74     	; 0x3d3c <malloc+0x22>
    3d86:	21 15       	cp	r18, r1
    3d88:	31 05       	cpc	r19, r1
    3d8a:	f9 f0       	breq	.+62     	; 0x3dca <malloc+0xb0>
    3d8c:	28 1b       	sub	r18, r24
    3d8e:	39 0b       	sbc	r19, r25
    3d90:	24 30       	cpi	r18, 0x04	; 4
    3d92:	31 05       	cpc	r19, r1
    3d94:	80 f4       	brcc	.+32     	; 0x3db6 <malloc+0x9c>
    3d96:	8a 81       	ldd	r24, Y+2	; 0x02
    3d98:	9b 81       	ldd	r25, Y+3	; 0x03
    3d9a:	61 15       	cp	r22, r1
    3d9c:	71 05       	cpc	r23, r1
    3d9e:	21 f0       	breq	.+8      	; 0x3da8 <malloc+0x8e>
    3da0:	fb 01       	movw	r30, r22
    3da2:	93 83       	std	Z+3, r25	; 0x03
    3da4:	82 83       	std	Z+2, r24	; 0x02
    3da6:	04 c0       	rjmp	.+8      	; 0x3db0 <malloc+0x96>
    3da8:	90 93 b1 0e 	sts	0x0EB1, r25	; 0x800eb1 <__flp+0x1>
    3dac:	80 93 b0 0e 	sts	0x0EB0, r24	; 0x800eb0 <__flp>
    3db0:	fe 01       	movw	r30, r28
    3db2:	32 96       	adiw	r30, 0x02	; 2
    3db4:	44 c0       	rjmp	.+136    	; 0x3e3e <malloc+0x124>
    3db6:	fe 01       	movw	r30, r28
    3db8:	e2 0f       	add	r30, r18
    3dba:	f3 1f       	adc	r31, r19
    3dbc:	81 93       	st	Z+, r24
    3dbe:	91 93       	st	Z+, r25
    3dc0:	22 50       	subi	r18, 0x02	; 2
    3dc2:	31 09       	sbc	r19, r1
    3dc4:	39 83       	std	Y+1, r19	; 0x01
    3dc6:	28 83       	st	Y, r18
    3dc8:	3a c0       	rjmp	.+116    	; 0x3e3e <malloc+0x124>
    3dca:	20 91 ae 0e 	lds	r18, 0x0EAE	; 0x800eae <__brkval>
    3dce:	30 91 af 0e 	lds	r19, 0x0EAF	; 0x800eaf <__brkval+0x1>
    3dd2:	23 2b       	or	r18, r19
    3dd4:	41 f4       	brne	.+16     	; 0x3de6 <malloc+0xcc>
    3dd6:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    3dda:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    3dde:	30 93 af 0e 	sts	0x0EAF, r19	; 0x800eaf <__brkval+0x1>
    3de2:	20 93 ae 0e 	sts	0x0EAE, r18	; 0x800eae <__brkval>
    3de6:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    3dea:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    3dee:	21 15       	cp	r18, r1
    3df0:	31 05       	cpc	r19, r1
    3df2:	41 f4       	brne	.+16     	; 0x3e04 <malloc+0xea>
    3df4:	2d b7       	in	r18, 0x3d	; 61
    3df6:	3e b7       	in	r19, 0x3e	; 62
    3df8:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    3dfc:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    3e00:	24 1b       	sub	r18, r20
    3e02:	35 0b       	sbc	r19, r21
    3e04:	e0 91 ae 0e 	lds	r30, 0x0EAE	; 0x800eae <__brkval>
    3e08:	f0 91 af 0e 	lds	r31, 0x0EAF	; 0x800eaf <__brkval+0x1>
    3e0c:	e2 17       	cp	r30, r18
    3e0e:	f3 07       	cpc	r31, r19
    3e10:	a0 f4       	brcc	.+40     	; 0x3e3a <malloc+0x120>
    3e12:	2e 1b       	sub	r18, r30
    3e14:	3f 0b       	sbc	r19, r31
    3e16:	28 17       	cp	r18, r24
    3e18:	39 07       	cpc	r19, r25
    3e1a:	78 f0       	brcs	.+30     	; 0x3e3a <malloc+0x120>
    3e1c:	ac 01       	movw	r20, r24
    3e1e:	4e 5f       	subi	r20, 0xFE	; 254
    3e20:	5f 4f       	sbci	r21, 0xFF	; 255
    3e22:	24 17       	cp	r18, r20
    3e24:	35 07       	cpc	r19, r21
    3e26:	48 f0       	brcs	.+18     	; 0x3e3a <malloc+0x120>
    3e28:	4e 0f       	add	r20, r30
    3e2a:	5f 1f       	adc	r21, r31
    3e2c:	50 93 af 0e 	sts	0x0EAF, r21	; 0x800eaf <__brkval+0x1>
    3e30:	40 93 ae 0e 	sts	0x0EAE, r20	; 0x800eae <__brkval>
    3e34:	81 93       	st	Z+, r24
    3e36:	91 93       	st	Z+, r25
    3e38:	02 c0       	rjmp	.+4      	; 0x3e3e <malloc+0x124>
    3e3a:	e0 e0       	ldi	r30, 0x00	; 0
    3e3c:	f0 e0       	ldi	r31, 0x00	; 0
    3e3e:	cf 01       	movw	r24, r30
    3e40:	df 91       	pop	r29
    3e42:	cf 91       	pop	r28
    3e44:	1f 91       	pop	r17
    3e46:	0f 91       	pop	r16
    3e48:	08 95       	ret

00003e4a <free>:
    3e4a:	cf 93       	push	r28
    3e4c:	df 93       	push	r29
    3e4e:	00 97       	sbiw	r24, 0x00	; 0
    3e50:	09 f4       	brne	.+2      	; 0x3e54 <free+0xa>
    3e52:	81 c0       	rjmp	.+258    	; 0x3f56 <free+0x10c>
    3e54:	fc 01       	movw	r30, r24
    3e56:	32 97       	sbiw	r30, 0x02	; 2
    3e58:	13 82       	std	Z+3, r1	; 0x03
    3e5a:	12 82       	std	Z+2, r1	; 0x02
    3e5c:	a0 91 b0 0e 	lds	r26, 0x0EB0	; 0x800eb0 <__flp>
    3e60:	b0 91 b1 0e 	lds	r27, 0x0EB1	; 0x800eb1 <__flp+0x1>
    3e64:	10 97       	sbiw	r26, 0x00	; 0
    3e66:	81 f4       	brne	.+32     	; 0x3e88 <free+0x3e>
    3e68:	20 81       	ld	r18, Z
    3e6a:	31 81       	ldd	r19, Z+1	; 0x01
    3e6c:	82 0f       	add	r24, r18
    3e6e:	93 1f       	adc	r25, r19
    3e70:	20 91 ae 0e 	lds	r18, 0x0EAE	; 0x800eae <__brkval>
    3e74:	30 91 af 0e 	lds	r19, 0x0EAF	; 0x800eaf <__brkval+0x1>
    3e78:	28 17       	cp	r18, r24
    3e7a:	39 07       	cpc	r19, r25
    3e7c:	51 f5       	brne	.+84     	; 0x3ed2 <free+0x88>
    3e7e:	f0 93 af 0e 	sts	0x0EAF, r31	; 0x800eaf <__brkval+0x1>
    3e82:	e0 93 ae 0e 	sts	0x0EAE, r30	; 0x800eae <__brkval>
    3e86:	67 c0       	rjmp	.+206    	; 0x3f56 <free+0x10c>
    3e88:	ed 01       	movw	r28, r26
    3e8a:	20 e0       	ldi	r18, 0x00	; 0
    3e8c:	30 e0       	ldi	r19, 0x00	; 0
    3e8e:	ce 17       	cp	r28, r30
    3e90:	df 07       	cpc	r29, r31
    3e92:	40 f4       	brcc	.+16     	; 0x3ea4 <free+0x5a>
    3e94:	4a 81       	ldd	r20, Y+2	; 0x02
    3e96:	5b 81       	ldd	r21, Y+3	; 0x03
    3e98:	9e 01       	movw	r18, r28
    3e9a:	41 15       	cp	r20, r1
    3e9c:	51 05       	cpc	r21, r1
    3e9e:	f1 f0       	breq	.+60     	; 0x3edc <free+0x92>
    3ea0:	ea 01       	movw	r28, r20
    3ea2:	f5 cf       	rjmp	.-22     	; 0x3e8e <free+0x44>
    3ea4:	d3 83       	std	Z+3, r29	; 0x03
    3ea6:	c2 83       	std	Z+2, r28	; 0x02
    3ea8:	40 81       	ld	r20, Z
    3eaa:	51 81       	ldd	r21, Z+1	; 0x01
    3eac:	84 0f       	add	r24, r20
    3eae:	95 1f       	adc	r25, r21
    3eb0:	c8 17       	cp	r28, r24
    3eb2:	d9 07       	cpc	r29, r25
    3eb4:	59 f4       	brne	.+22     	; 0x3ecc <free+0x82>
    3eb6:	88 81       	ld	r24, Y
    3eb8:	99 81       	ldd	r25, Y+1	; 0x01
    3eba:	84 0f       	add	r24, r20
    3ebc:	95 1f       	adc	r25, r21
    3ebe:	02 96       	adiw	r24, 0x02	; 2
    3ec0:	91 83       	std	Z+1, r25	; 0x01
    3ec2:	80 83       	st	Z, r24
    3ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ec6:	9b 81       	ldd	r25, Y+3	; 0x03
    3ec8:	93 83       	std	Z+3, r25	; 0x03
    3eca:	82 83       	std	Z+2, r24	; 0x02
    3ecc:	21 15       	cp	r18, r1
    3ece:	31 05       	cpc	r19, r1
    3ed0:	29 f4       	brne	.+10     	; 0x3edc <free+0x92>
    3ed2:	f0 93 b1 0e 	sts	0x0EB1, r31	; 0x800eb1 <__flp+0x1>
    3ed6:	e0 93 b0 0e 	sts	0x0EB0, r30	; 0x800eb0 <__flp>
    3eda:	3d c0       	rjmp	.+122    	; 0x3f56 <free+0x10c>
    3edc:	e9 01       	movw	r28, r18
    3ede:	fb 83       	std	Y+3, r31	; 0x03
    3ee0:	ea 83       	std	Y+2, r30	; 0x02
    3ee2:	49 91       	ld	r20, Y+
    3ee4:	59 91       	ld	r21, Y+
    3ee6:	c4 0f       	add	r28, r20
    3ee8:	d5 1f       	adc	r29, r21
    3eea:	ec 17       	cp	r30, r28
    3eec:	fd 07       	cpc	r31, r29
    3eee:	61 f4       	brne	.+24     	; 0x3f08 <free+0xbe>
    3ef0:	80 81       	ld	r24, Z
    3ef2:	91 81       	ldd	r25, Z+1	; 0x01
    3ef4:	84 0f       	add	r24, r20
    3ef6:	95 1f       	adc	r25, r21
    3ef8:	02 96       	adiw	r24, 0x02	; 2
    3efa:	e9 01       	movw	r28, r18
    3efc:	99 83       	std	Y+1, r25	; 0x01
    3efe:	88 83       	st	Y, r24
    3f00:	82 81       	ldd	r24, Z+2	; 0x02
    3f02:	93 81       	ldd	r25, Z+3	; 0x03
    3f04:	9b 83       	std	Y+3, r25	; 0x03
    3f06:	8a 83       	std	Y+2, r24	; 0x02
    3f08:	e0 e0       	ldi	r30, 0x00	; 0
    3f0a:	f0 e0       	ldi	r31, 0x00	; 0
    3f0c:	12 96       	adiw	r26, 0x02	; 2
    3f0e:	8d 91       	ld	r24, X+
    3f10:	9c 91       	ld	r25, X
    3f12:	13 97       	sbiw	r26, 0x03	; 3
    3f14:	00 97       	sbiw	r24, 0x00	; 0
    3f16:	19 f0       	breq	.+6      	; 0x3f1e <free+0xd4>
    3f18:	fd 01       	movw	r30, r26
    3f1a:	dc 01       	movw	r26, r24
    3f1c:	f7 cf       	rjmp	.-18     	; 0x3f0c <free+0xc2>
    3f1e:	8d 91       	ld	r24, X+
    3f20:	9c 91       	ld	r25, X
    3f22:	11 97       	sbiw	r26, 0x01	; 1
    3f24:	9d 01       	movw	r18, r26
    3f26:	2e 5f       	subi	r18, 0xFE	; 254
    3f28:	3f 4f       	sbci	r19, 0xFF	; 255
    3f2a:	82 0f       	add	r24, r18
    3f2c:	93 1f       	adc	r25, r19
    3f2e:	20 91 ae 0e 	lds	r18, 0x0EAE	; 0x800eae <__brkval>
    3f32:	30 91 af 0e 	lds	r19, 0x0EAF	; 0x800eaf <__brkval+0x1>
    3f36:	28 17       	cp	r18, r24
    3f38:	39 07       	cpc	r19, r25
    3f3a:	69 f4       	brne	.+26     	; 0x3f56 <free+0x10c>
    3f3c:	30 97       	sbiw	r30, 0x00	; 0
    3f3e:	29 f4       	brne	.+10     	; 0x3f4a <free+0x100>
    3f40:	10 92 b1 0e 	sts	0x0EB1, r1	; 0x800eb1 <__flp+0x1>
    3f44:	10 92 b0 0e 	sts	0x0EB0, r1	; 0x800eb0 <__flp>
    3f48:	02 c0       	rjmp	.+4      	; 0x3f4e <free+0x104>
    3f4a:	13 82       	std	Z+3, r1	; 0x03
    3f4c:	12 82       	std	Z+2, r1	; 0x02
    3f4e:	b0 93 af 0e 	sts	0x0EAF, r27	; 0x800eaf <__brkval+0x1>
    3f52:	a0 93 ae 0e 	sts	0x0EAE, r26	; 0x800eae <__brkval>
    3f56:	df 91       	pop	r29
    3f58:	cf 91       	pop	r28
    3f5a:	08 95       	ret

00003f5c <abort>:
    3f5c:	81 e0       	ldi	r24, 0x01	; 1
    3f5e:	90 e0       	ldi	r25, 0x00	; 0
    3f60:	f8 94       	cli
    3f62:	00 c3       	rjmp	.+1536   	; 0x4564 <_exit>

00003f64 <memcpy>:
    3f64:	fb 01       	movw	r30, r22
    3f66:	dc 01       	movw	r26, r24
    3f68:	02 c0       	rjmp	.+4      	; 0x3f6e <memcpy+0xa>
    3f6a:	01 90       	ld	r0, Z+
    3f6c:	0d 92       	st	X+, r0
    3f6e:	41 50       	subi	r20, 0x01	; 1
    3f70:	50 40       	sbci	r21, 0x00	; 0
    3f72:	d8 f7       	brcc	.-10     	; 0x3f6a <memcpy+0x6>
    3f74:	08 95       	ret

00003f76 <memset>:
    3f76:	dc 01       	movw	r26, r24
    3f78:	01 c0       	rjmp	.+2      	; 0x3f7c <memset+0x6>
    3f7a:	6d 93       	st	X+, r22
    3f7c:	41 50       	subi	r20, 0x01	; 1
    3f7e:	50 40       	sbci	r21, 0x00	; 0
    3f80:	e0 f7       	brcc	.-8      	; 0x3f7a <memset+0x4>
    3f82:	08 95       	ret

00003f84 <printf>:
    3f84:	cf 93       	push	r28
    3f86:	df 93       	push	r29
    3f88:	cd b7       	in	r28, 0x3d	; 61
    3f8a:	de b7       	in	r29, 0x3e	; 62
    3f8c:	ae 01       	movw	r20, r28
    3f8e:	4a 5f       	subi	r20, 0xFA	; 250
    3f90:	5f 4f       	sbci	r21, 0xFF	; 255
    3f92:	fa 01       	movw	r30, r20
    3f94:	61 91       	ld	r22, Z+
    3f96:	71 91       	ld	r23, Z+
    3f98:	af 01       	movw	r20, r30
    3f9a:	80 91 b4 0e 	lds	r24, 0x0EB4	; 0x800eb4 <__iob+0x2>
    3f9e:	90 91 b5 0e 	lds	r25, 0x0EB5	; 0x800eb5 <__iob+0x3>
    3fa2:	33 d0       	rcall	.+102    	; 0x400a <vfprintf>
    3fa4:	df 91       	pop	r29
    3fa6:	cf 91       	pop	r28
    3fa8:	08 95       	ret

00003faa <puts>:
    3faa:	0f 93       	push	r16
    3fac:	1f 93       	push	r17
    3fae:	cf 93       	push	r28
    3fb0:	df 93       	push	r29
    3fb2:	e0 91 b4 0e 	lds	r30, 0x0EB4	; 0x800eb4 <__iob+0x2>
    3fb6:	f0 91 b5 0e 	lds	r31, 0x0EB5	; 0x800eb5 <__iob+0x3>
    3fba:	23 81       	ldd	r18, Z+3	; 0x03
    3fbc:	21 ff       	sbrs	r18, 1
    3fbe:	1b c0       	rjmp	.+54     	; 0x3ff6 <puts+0x4c>
    3fc0:	8c 01       	movw	r16, r24
    3fc2:	d0 e0       	ldi	r29, 0x00	; 0
    3fc4:	c0 e0       	ldi	r28, 0x00	; 0
    3fc6:	f8 01       	movw	r30, r16
    3fc8:	81 91       	ld	r24, Z+
    3fca:	8f 01       	movw	r16, r30
    3fcc:	60 91 b4 0e 	lds	r22, 0x0EB4	; 0x800eb4 <__iob+0x2>
    3fd0:	70 91 b5 0e 	lds	r23, 0x0EB5	; 0x800eb5 <__iob+0x3>
    3fd4:	db 01       	movw	r26, r22
    3fd6:	18 96       	adiw	r26, 0x08	; 8
    3fd8:	ed 91       	ld	r30, X+
    3fda:	fc 91       	ld	r31, X
    3fdc:	19 97       	sbiw	r26, 0x09	; 9
    3fde:	88 23       	and	r24, r24
    3fe0:	31 f0       	breq	.+12     	; 0x3fee <puts+0x44>
    3fe2:	19 95       	eicall
    3fe4:	89 2b       	or	r24, r25
    3fe6:	79 f3       	breq	.-34     	; 0x3fc6 <puts+0x1c>
    3fe8:	df ef       	ldi	r29, 0xFF	; 255
    3fea:	cf ef       	ldi	r28, 0xFF	; 255
    3fec:	ec cf       	rjmp	.-40     	; 0x3fc6 <puts+0x1c>
    3fee:	8a e0       	ldi	r24, 0x0A	; 10
    3ff0:	19 95       	eicall
    3ff2:	89 2b       	or	r24, r25
    3ff4:	19 f0       	breq	.+6      	; 0x3ffc <puts+0x52>
    3ff6:	8f ef       	ldi	r24, 0xFF	; 255
    3ff8:	9f ef       	ldi	r25, 0xFF	; 255
    3ffa:	02 c0       	rjmp	.+4      	; 0x4000 <puts+0x56>
    3ffc:	8d 2f       	mov	r24, r29
    3ffe:	9c 2f       	mov	r25, r28
    4000:	df 91       	pop	r29
    4002:	cf 91       	pop	r28
    4004:	1f 91       	pop	r17
    4006:	0f 91       	pop	r16
    4008:	08 95       	ret

0000400a <vfprintf>:
    400a:	2f 92       	push	r2
    400c:	3f 92       	push	r3
    400e:	4f 92       	push	r4
    4010:	5f 92       	push	r5
    4012:	6f 92       	push	r6
    4014:	7f 92       	push	r7
    4016:	8f 92       	push	r8
    4018:	9f 92       	push	r9
    401a:	af 92       	push	r10
    401c:	bf 92       	push	r11
    401e:	cf 92       	push	r12
    4020:	df 92       	push	r13
    4022:	ef 92       	push	r14
    4024:	ff 92       	push	r15
    4026:	0f 93       	push	r16
    4028:	1f 93       	push	r17
    402a:	cf 93       	push	r28
    402c:	df 93       	push	r29
    402e:	cd b7       	in	r28, 0x3d	; 61
    4030:	de b7       	in	r29, 0x3e	; 62
    4032:	2b 97       	sbiw	r28, 0x0b	; 11
    4034:	0f b6       	in	r0, 0x3f	; 63
    4036:	f8 94       	cli
    4038:	de bf       	out	0x3e, r29	; 62
    403a:	0f be       	out	0x3f, r0	; 63
    403c:	cd bf       	out	0x3d, r28	; 61
    403e:	6c 01       	movw	r12, r24
    4040:	7b 01       	movw	r14, r22
    4042:	8a 01       	movw	r16, r20
    4044:	fc 01       	movw	r30, r24
    4046:	17 82       	std	Z+7, r1	; 0x07
    4048:	16 82       	std	Z+6, r1	; 0x06
    404a:	83 81       	ldd	r24, Z+3	; 0x03
    404c:	81 ff       	sbrs	r24, 1
    404e:	bf c1       	rjmp	.+894    	; 0x43ce <vfprintf+0x3c4>
    4050:	ce 01       	movw	r24, r28
    4052:	01 96       	adiw	r24, 0x01	; 1
    4054:	3c 01       	movw	r6, r24
    4056:	f6 01       	movw	r30, r12
    4058:	93 81       	ldd	r25, Z+3	; 0x03
    405a:	f7 01       	movw	r30, r14
    405c:	93 fd       	sbrc	r25, 3
    405e:	85 91       	lpm	r24, Z+
    4060:	93 ff       	sbrs	r25, 3
    4062:	81 91       	ld	r24, Z+
    4064:	7f 01       	movw	r14, r30
    4066:	88 23       	and	r24, r24
    4068:	09 f4       	brne	.+2      	; 0x406c <vfprintf+0x62>
    406a:	ad c1       	rjmp	.+858    	; 0x43c6 <vfprintf+0x3bc>
    406c:	85 32       	cpi	r24, 0x25	; 37
    406e:	39 f4       	brne	.+14     	; 0x407e <vfprintf+0x74>
    4070:	93 fd       	sbrc	r25, 3
    4072:	85 91       	lpm	r24, Z+
    4074:	93 ff       	sbrs	r25, 3
    4076:	81 91       	ld	r24, Z+
    4078:	7f 01       	movw	r14, r30
    407a:	85 32       	cpi	r24, 0x25	; 37
    407c:	21 f4       	brne	.+8      	; 0x4086 <vfprintf+0x7c>
    407e:	b6 01       	movw	r22, r12
    4080:	90 e0       	ldi	r25, 0x00	; 0
    4082:	d6 d1       	rcall	.+940    	; 0x4430 <fputc>
    4084:	e8 cf       	rjmp	.-48     	; 0x4056 <vfprintf+0x4c>
    4086:	91 2c       	mov	r9, r1
    4088:	21 2c       	mov	r2, r1
    408a:	31 2c       	mov	r3, r1
    408c:	ff e1       	ldi	r31, 0x1F	; 31
    408e:	f3 15       	cp	r31, r3
    4090:	d8 f0       	brcs	.+54     	; 0x40c8 <vfprintf+0xbe>
    4092:	8b 32       	cpi	r24, 0x2B	; 43
    4094:	79 f0       	breq	.+30     	; 0x40b4 <vfprintf+0xaa>
    4096:	38 f4       	brcc	.+14     	; 0x40a6 <vfprintf+0x9c>
    4098:	80 32       	cpi	r24, 0x20	; 32
    409a:	79 f0       	breq	.+30     	; 0x40ba <vfprintf+0xb0>
    409c:	83 32       	cpi	r24, 0x23	; 35
    409e:	a1 f4       	brne	.+40     	; 0x40c8 <vfprintf+0xbe>
    40a0:	23 2d       	mov	r18, r3
    40a2:	20 61       	ori	r18, 0x10	; 16
    40a4:	1d c0       	rjmp	.+58     	; 0x40e0 <vfprintf+0xd6>
    40a6:	8d 32       	cpi	r24, 0x2D	; 45
    40a8:	61 f0       	breq	.+24     	; 0x40c2 <vfprintf+0xb8>
    40aa:	80 33       	cpi	r24, 0x30	; 48
    40ac:	69 f4       	brne	.+26     	; 0x40c8 <vfprintf+0xbe>
    40ae:	23 2d       	mov	r18, r3
    40b0:	21 60       	ori	r18, 0x01	; 1
    40b2:	16 c0       	rjmp	.+44     	; 0x40e0 <vfprintf+0xd6>
    40b4:	83 2d       	mov	r24, r3
    40b6:	82 60       	ori	r24, 0x02	; 2
    40b8:	38 2e       	mov	r3, r24
    40ba:	e3 2d       	mov	r30, r3
    40bc:	e4 60       	ori	r30, 0x04	; 4
    40be:	3e 2e       	mov	r3, r30
    40c0:	2a c0       	rjmp	.+84     	; 0x4116 <vfprintf+0x10c>
    40c2:	f3 2d       	mov	r31, r3
    40c4:	f8 60       	ori	r31, 0x08	; 8
    40c6:	1d c0       	rjmp	.+58     	; 0x4102 <vfprintf+0xf8>
    40c8:	37 fc       	sbrc	r3, 7
    40ca:	2d c0       	rjmp	.+90     	; 0x4126 <vfprintf+0x11c>
    40cc:	20 ed       	ldi	r18, 0xD0	; 208
    40ce:	28 0f       	add	r18, r24
    40d0:	2a 30       	cpi	r18, 0x0A	; 10
    40d2:	40 f0       	brcs	.+16     	; 0x40e4 <vfprintf+0xda>
    40d4:	8e 32       	cpi	r24, 0x2E	; 46
    40d6:	b9 f4       	brne	.+46     	; 0x4106 <vfprintf+0xfc>
    40d8:	36 fc       	sbrc	r3, 6
    40da:	75 c1       	rjmp	.+746    	; 0x43c6 <vfprintf+0x3bc>
    40dc:	23 2d       	mov	r18, r3
    40de:	20 64       	ori	r18, 0x40	; 64
    40e0:	32 2e       	mov	r3, r18
    40e2:	19 c0       	rjmp	.+50     	; 0x4116 <vfprintf+0x10c>
    40e4:	36 fe       	sbrs	r3, 6
    40e6:	06 c0       	rjmp	.+12     	; 0x40f4 <vfprintf+0xea>
    40e8:	8a e0       	ldi	r24, 0x0A	; 10
    40ea:	98 9e       	mul	r9, r24
    40ec:	20 0d       	add	r18, r0
    40ee:	11 24       	eor	r1, r1
    40f0:	92 2e       	mov	r9, r18
    40f2:	11 c0       	rjmp	.+34     	; 0x4116 <vfprintf+0x10c>
    40f4:	ea e0       	ldi	r30, 0x0A	; 10
    40f6:	2e 9e       	mul	r2, r30
    40f8:	20 0d       	add	r18, r0
    40fa:	11 24       	eor	r1, r1
    40fc:	22 2e       	mov	r2, r18
    40fe:	f3 2d       	mov	r31, r3
    4100:	f0 62       	ori	r31, 0x20	; 32
    4102:	3f 2e       	mov	r3, r31
    4104:	08 c0       	rjmp	.+16     	; 0x4116 <vfprintf+0x10c>
    4106:	8c 36       	cpi	r24, 0x6C	; 108
    4108:	21 f4       	brne	.+8      	; 0x4112 <vfprintf+0x108>
    410a:	83 2d       	mov	r24, r3
    410c:	80 68       	ori	r24, 0x80	; 128
    410e:	38 2e       	mov	r3, r24
    4110:	02 c0       	rjmp	.+4      	; 0x4116 <vfprintf+0x10c>
    4112:	88 36       	cpi	r24, 0x68	; 104
    4114:	41 f4       	brne	.+16     	; 0x4126 <vfprintf+0x11c>
    4116:	f7 01       	movw	r30, r14
    4118:	93 fd       	sbrc	r25, 3
    411a:	85 91       	lpm	r24, Z+
    411c:	93 ff       	sbrs	r25, 3
    411e:	81 91       	ld	r24, Z+
    4120:	7f 01       	movw	r14, r30
    4122:	81 11       	cpse	r24, r1
    4124:	b3 cf       	rjmp	.-154    	; 0x408c <vfprintf+0x82>
    4126:	98 2f       	mov	r25, r24
    4128:	9f 7d       	andi	r25, 0xDF	; 223
    412a:	95 54       	subi	r25, 0x45	; 69
    412c:	93 30       	cpi	r25, 0x03	; 3
    412e:	28 f4       	brcc	.+10     	; 0x413a <vfprintf+0x130>
    4130:	0c 5f       	subi	r16, 0xFC	; 252
    4132:	1f 4f       	sbci	r17, 0xFF	; 255
    4134:	9f e3       	ldi	r25, 0x3F	; 63
    4136:	99 83       	std	Y+1, r25	; 0x01
    4138:	0d c0       	rjmp	.+26     	; 0x4154 <vfprintf+0x14a>
    413a:	83 36       	cpi	r24, 0x63	; 99
    413c:	31 f0       	breq	.+12     	; 0x414a <vfprintf+0x140>
    413e:	83 37       	cpi	r24, 0x73	; 115
    4140:	71 f0       	breq	.+28     	; 0x415e <vfprintf+0x154>
    4142:	83 35       	cpi	r24, 0x53	; 83
    4144:	09 f0       	breq	.+2      	; 0x4148 <vfprintf+0x13e>
    4146:	55 c0       	rjmp	.+170    	; 0x41f2 <vfprintf+0x1e8>
    4148:	20 c0       	rjmp	.+64     	; 0x418a <vfprintf+0x180>
    414a:	f8 01       	movw	r30, r16
    414c:	80 81       	ld	r24, Z
    414e:	89 83       	std	Y+1, r24	; 0x01
    4150:	0e 5f       	subi	r16, 0xFE	; 254
    4152:	1f 4f       	sbci	r17, 0xFF	; 255
    4154:	88 24       	eor	r8, r8
    4156:	83 94       	inc	r8
    4158:	91 2c       	mov	r9, r1
    415a:	53 01       	movw	r10, r6
    415c:	12 c0       	rjmp	.+36     	; 0x4182 <vfprintf+0x178>
    415e:	28 01       	movw	r4, r16
    4160:	f2 e0       	ldi	r31, 0x02	; 2
    4162:	4f 0e       	add	r4, r31
    4164:	51 1c       	adc	r5, r1
    4166:	f8 01       	movw	r30, r16
    4168:	a0 80       	ld	r10, Z
    416a:	b1 80       	ldd	r11, Z+1	; 0x01
    416c:	36 fe       	sbrs	r3, 6
    416e:	03 c0       	rjmp	.+6      	; 0x4176 <vfprintf+0x16c>
    4170:	69 2d       	mov	r22, r9
    4172:	70 e0       	ldi	r23, 0x00	; 0
    4174:	02 c0       	rjmp	.+4      	; 0x417a <vfprintf+0x170>
    4176:	6f ef       	ldi	r22, 0xFF	; 255
    4178:	7f ef       	ldi	r23, 0xFF	; 255
    417a:	c5 01       	movw	r24, r10
    417c:	4e d1       	rcall	.+668    	; 0x441a <strnlen>
    417e:	4c 01       	movw	r8, r24
    4180:	82 01       	movw	r16, r4
    4182:	f3 2d       	mov	r31, r3
    4184:	ff 77       	andi	r31, 0x7F	; 127
    4186:	3f 2e       	mov	r3, r31
    4188:	15 c0       	rjmp	.+42     	; 0x41b4 <vfprintf+0x1aa>
    418a:	28 01       	movw	r4, r16
    418c:	22 e0       	ldi	r18, 0x02	; 2
    418e:	42 0e       	add	r4, r18
    4190:	51 1c       	adc	r5, r1
    4192:	f8 01       	movw	r30, r16
    4194:	a0 80       	ld	r10, Z
    4196:	b1 80       	ldd	r11, Z+1	; 0x01
    4198:	36 fe       	sbrs	r3, 6
    419a:	03 c0       	rjmp	.+6      	; 0x41a2 <vfprintf+0x198>
    419c:	69 2d       	mov	r22, r9
    419e:	70 e0       	ldi	r23, 0x00	; 0
    41a0:	02 c0       	rjmp	.+4      	; 0x41a6 <vfprintf+0x19c>
    41a2:	6f ef       	ldi	r22, 0xFF	; 255
    41a4:	7f ef       	ldi	r23, 0xFF	; 255
    41a6:	c5 01       	movw	r24, r10
    41a8:	2d d1       	rcall	.+602    	; 0x4404 <strnlen_P>
    41aa:	4c 01       	movw	r8, r24
    41ac:	f3 2d       	mov	r31, r3
    41ae:	f0 68       	ori	r31, 0x80	; 128
    41b0:	3f 2e       	mov	r3, r31
    41b2:	82 01       	movw	r16, r4
    41b4:	33 fc       	sbrc	r3, 3
    41b6:	19 c0       	rjmp	.+50     	; 0x41ea <vfprintf+0x1e0>
    41b8:	82 2d       	mov	r24, r2
    41ba:	90 e0       	ldi	r25, 0x00	; 0
    41bc:	88 16       	cp	r8, r24
    41be:	99 06       	cpc	r9, r25
    41c0:	a0 f4       	brcc	.+40     	; 0x41ea <vfprintf+0x1e0>
    41c2:	b6 01       	movw	r22, r12
    41c4:	80 e2       	ldi	r24, 0x20	; 32
    41c6:	90 e0       	ldi	r25, 0x00	; 0
    41c8:	33 d1       	rcall	.+614    	; 0x4430 <fputc>
    41ca:	2a 94       	dec	r2
    41cc:	f5 cf       	rjmp	.-22     	; 0x41b8 <vfprintf+0x1ae>
    41ce:	f5 01       	movw	r30, r10
    41d0:	37 fc       	sbrc	r3, 7
    41d2:	85 91       	lpm	r24, Z+
    41d4:	37 fe       	sbrs	r3, 7
    41d6:	81 91       	ld	r24, Z+
    41d8:	5f 01       	movw	r10, r30
    41da:	b6 01       	movw	r22, r12
    41dc:	90 e0       	ldi	r25, 0x00	; 0
    41de:	28 d1       	rcall	.+592    	; 0x4430 <fputc>
    41e0:	21 10       	cpse	r2, r1
    41e2:	2a 94       	dec	r2
    41e4:	21 e0       	ldi	r18, 0x01	; 1
    41e6:	82 1a       	sub	r8, r18
    41e8:	91 08       	sbc	r9, r1
    41ea:	81 14       	cp	r8, r1
    41ec:	91 04       	cpc	r9, r1
    41ee:	79 f7       	brne	.-34     	; 0x41ce <vfprintf+0x1c4>
    41f0:	e1 c0       	rjmp	.+450    	; 0x43b4 <vfprintf+0x3aa>
    41f2:	84 36       	cpi	r24, 0x64	; 100
    41f4:	11 f0       	breq	.+4      	; 0x41fa <vfprintf+0x1f0>
    41f6:	89 36       	cpi	r24, 0x69	; 105
    41f8:	39 f5       	brne	.+78     	; 0x4248 <vfprintf+0x23e>
    41fa:	f8 01       	movw	r30, r16
    41fc:	37 fe       	sbrs	r3, 7
    41fe:	07 c0       	rjmp	.+14     	; 0x420e <vfprintf+0x204>
    4200:	60 81       	ld	r22, Z
    4202:	71 81       	ldd	r23, Z+1	; 0x01
    4204:	82 81       	ldd	r24, Z+2	; 0x02
    4206:	93 81       	ldd	r25, Z+3	; 0x03
    4208:	0c 5f       	subi	r16, 0xFC	; 252
    420a:	1f 4f       	sbci	r17, 0xFF	; 255
    420c:	08 c0       	rjmp	.+16     	; 0x421e <vfprintf+0x214>
    420e:	60 81       	ld	r22, Z
    4210:	71 81       	ldd	r23, Z+1	; 0x01
    4212:	07 2e       	mov	r0, r23
    4214:	00 0c       	add	r0, r0
    4216:	88 0b       	sbc	r24, r24
    4218:	99 0b       	sbc	r25, r25
    421a:	0e 5f       	subi	r16, 0xFE	; 254
    421c:	1f 4f       	sbci	r17, 0xFF	; 255
    421e:	f3 2d       	mov	r31, r3
    4220:	ff 76       	andi	r31, 0x6F	; 111
    4222:	3f 2e       	mov	r3, r31
    4224:	97 ff       	sbrs	r25, 7
    4226:	09 c0       	rjmp	.+18     	; 0x423a <vfprintf+0x230>
    4228:	90 95       	com	r25
    422a:	80 95       	com	r24
    422c:	70 95       	com	r23
    422e:	61 95       	neg	r22
    4230:	7f 4f       	sbci	r23, 0xFF	; 255
    4232:	8f 4f       	sbci	r24, 0xFF	; 255
    4234:	9f 4f       	sbci	r25, 0xFF	; 255
    4236:	f0 68       	ori	r31, 0x80	; 128
    4238:	3f 2e       	mov	r3, r31
    423a:	2a e0       	ldi	r18, 0x0A	; 10
    423c:	30 e0       	ldi	r19, 0x00	; 0
    423e:	a3 01       	movw	r20, r6
    4240:	33 d1       	rcall	.+614    	; 0x44a8 <__ultoa_invert>
    4242:	88 2e       	mov	r8, r24
    4244:	86 18       	sub	r8, r6
    4246:	44 c0       	rjmp	.+136    	; 0x42d0 <vfprintf+0x2c6>
    4248:	85 37       	cpi	r24, 0x75	; 117
    424a:	31 f4       	brne	.+12     	; 0x4258 <vfprintf+0x24e>
    424c:	23 2d       	mov	r18, r3
    424e:	2f 7e       	andi	r18, 0xEF	; 239
    4250:	b2 2e       	mov	r11, r18
    4252:	2a e0       	ldi	r18, 0x0A	; 10
    4254:	30 e0       	ldi	r19, 0x00	; 0
    4256:	25 c0       	rjmp	.+74     	; 0x42a2 <vfprintf+0x298>
    4258:	93 2d       	mov	r25, r3
    425a:	99 7f       	andi	r25, 0xF9	; 249
    425c:	b9 2e       	mov	r11, r25
    425e:	8f 36       	cpi	r24, 0x6F	; 111
    4260:	c1 f0       	breq	.+48     	; 0x4292 <vfprintf+0x288>
    4262:	18 f4       	brcc	.+6      	; 0x426a <vfprintf+0x260>
    4264:	88 35       	cpi	r24, 0x58	; 88
    4266:	79 f0       	breq	.+30     	; 0x4286 <vfprintf+0x27c>
    4268:	ae c0       	rjmp	.+348    	; 0x43c6 <vfprintf+0x3bc>
    426a:	80 37       	cpi	r24, 0x70	; 112
    426c:	19 f0       	breq	.+6      	; 0x4274 <vfprintf+0x26a>
    426e:	88 37       	cpi	r24, 0x78	; 120
    4270:	21 f0       	breq	.+8      	; 0x427a <vfprintf+0x270>
    4272:	a9 c0       	rjmp	.+338    	; 0x43c6 <vfprintf+0x3bc>
    4274:	e9 2f       	mov	r30, r25
    4276:	e0 61       	ori	r30, 0x10	; 16
    4278:	be 2e       	mov	r11, r30
    427a:	b4 fe       	sbrs	r11, 4
    427c:	0d c0       	rjmp	.+26     	; 0x4298 <vfprintf+0x28e>
    427e:	fb 2d       	mov	r31, r11
    4280:	f4 60       	ori	r31, 0x04	; 4
    4282:	bf 2e       	mov	r11, r31
    4284:	09 c0       	rjmp	.+18     	; 0x4298 <vfprintf+0x28e>
    4286:	34 fe       	sbrs	r3, 4
    4288:	0a c0       	rjmp	.+20     	; 0x429e <vfprintf+0x294>
    428a:	29 2f       	mov	r18, r25
    428c:	26 60       	ori	r18, 0x06	; 6
    428e:	b2 2e       	mov	r11, r18
    4290:	06 c0       	rjmp	.+12     	; 0x429e <vfprintf+0x294>
    4292:	28 e0       	ldi	r18, 0x08	; 8
    4294:	30 e0       	ldi	r19, 0x00	; 0
    4296:	05 c0       	rjmp	.+10     	; 0x42a2 <vfprintf+0x298>
    4298:	20 e1       	ldi	r18, 0x10	; 16
    429a:	30 e0       	ldi	r19, 0x00	; 0
    429c:	02 c0       	rjmp	.+4      	; 0x42a2 <vfprintf+0x298>
    429e:	20 e1       	ldi	r18, 0x10	; 16
    42a0:	32 e0       	ldi	r19, 0x02	; 2
    42a2:	f8 01       	movw	r30, r16
    42a4:	b7 fe       	sbrs	r11, 7
    42a6:	07 c0       	rjmp	.+14     	; 0x42b6 <vfprintf+0x2ac>
    42a8:	60 81       	ld	r22, Z
    42aa:	71 81       	ldd	r23, Z+1	; 0x01
    42ac:	82 81       	ldd	r24, Z+2	; 0x02
    42ae:	93 81       	ldd	r25, Z+3	; 0x03
    42b0:	0c 5f       	subi	r16, 0xFC	; 252
    42b2:	1f 4f       	sbci	r17, 0xFF	; 255
    42b4:	06 c0       	rjmp	.+12     	; 0x42c2 <vfprintf+0x2b8>
    42b6:	60 81       	ld	r22, Z
    42b8:	71 81       	ldd	r23, Z+1	; 0x01
    42ba:	80 e0       	ldi	r24, 0x00	; 0
    42bc:	90 e0       	ldi	r25, 0x00	; 0
    42be:	0e 5f       	subi	r16, 0xFE	; 254
    42c0:	1f 4f       	sbci	r17, 0xFF	; 255
    42c2:	a3 01       	movw	r20, r6
    42c4:	f1 d0       	rcall	.+482    	; 0x44a8 <__ultoa_invert>
    42c6:	88 2e       	mov	r8, r24
    42c8:	86 18       	sub	r8, r6
    42ca:	fb 2d       	mov	r31, r11
    42cc:	ff 77       	andi	r31, 0x7F	; 127
    42ce:	3f 2e       	mov	r3, r31
    42d0:	36 fe       	sbrs	r3, 6
    42d2:	0d c0       	rjmp	.+26     	; 0x42ee <vfprintf+0x2e4>
    42d4:	23 2d       	mov	r18, r3
    42d6:	2e 7f       	andi	r18, 0xFE	; 254
    42d8:	a2 2e       	mov	r10, r18
    42da:	89 14       	cp	r8, r9
    42dc:	58 f4       	brcc	.+22     	; 0x42f4 <vfprintf+0x2ea>
    42de:	34 fe       	sbrs	r3, 4
    42e0:	0b c0       	rjmp	.+22     	; 0x42f8 <vfprintf+0x2ee>
    42e2:	32 fc       	sbrc	r3, 2
    42e4:	09 c0       	rjmp	.+18     	; 0x42f8 <vfprintf+0x2ee>
    42e6:	83 2d       	mov	r24, r3
    42e8:	8e 7e       	andi	r24, 0xEE	; 238
    42ea:	a8 2e       	mov	r10, r24
    42ec:	05 c0       	rjmp	.+10     	; 0x42f8 <vfprintf+0x2ee>
    42ee:	b8 2c       	mov	r11, r8
    42f0:	a3 2c       	mov	r10, r3
    42f2:	03 c0       	rjmp	.+6      	; 0x42fa <vfprintf+0x2f0>
    42f4:	b8 2c       	mov	r11, r8
    42f6:	01 c0       	rjmp	.+2      	; 0x42fa <vfprintf+0x2f0>
    42f8:	b9 2c       	mov	r11, r9
    42fa:	a4 fe       	sbrs	r10, 4
    42fc:	0f c0       	rjmp	.+30     	; 0x431c <vfprintf+0x312>
    42fe:	fe 01       	movw	r30, r28
    4300:	e8 0d       	add	r30, r8
    4302:	f1 1d       	adc	r31, r1
    4304:	80 81       	ld	r24, Z
    4306:	80 33       	cpi	r24, 0x30	; 48
    4308:	21 f4       	brne	.+8      	; 0x4312 <vfprintf+0x308>
    430a:	9a 2d       	mov	r25, r10
    430c:	99 7e       	andi	r25, 0xE9	; 233
    430e:	a9 2e       	mov	r10, r25
    4310:	09 c0       	rjmp	.+18     	; 0x4324 <vfprintf+0x31a>
    4312:	a2 fe       	sbrs	r10, 2
    4314:	06 c0       	rjmp	.+12     	; 0x4322 <vfprintf+0x318>
    4316:	b3 94       	inc	r11
    4318:	b3 94       	inc	r11
    431a:	04 c0       	rjmp	.+8      	; 0x4324 <vfprintf+0x31a>
    431c:	8a 2d       	mov	r24, r10
    431e:	86 78       	andi	r24, 0x86	; 134
    4320:	09 f0       	breq	.+2      	; 0x4324 <vfprintf+0x31a>
    4322:	b3 94       	inc	r11
    4324:	a3 fc       	sbrc	r10, 3
    4326:	10 c0       	rjmp	.+32     	; 0x4348 <vfprintf+0x33e>
    4328:	a0 fe       	sbrs	r10, 0
    432a:	06 c0       	rjmp	.+12     	; 0x4338 <vfprintf+0x32e>
    432c:	b2 14       	cp	r11, r2
    432e:	80 f4       	brcc	.+32     	; 0x4350 <vfprintf+0x346>
    4330:	28 0c       	add	r2, r8
    4332:	92 2c       	mov	r9, r2
    4334:	9b 18       	sub	r9, r11
    4336:	0d c0       	rjmp	.+26     	; 0x4352 <vfprintf+0x348>
    4338:	b2 14       	cp	r11, r2
    433a:	58 f4       	brcc	.+22     	; 0x4352 <vfprintf+0x348>
    433c:	b6 01       	movw	r22, r12
    433e:	80 e2       	ldi	r24, 0x20	; 32
    4340:	90 e0       	ldi	r25, 0x00	; 0
    4342:	76 d0       	rcall	.+236    	; 0x4430 <fputc>
    4344:	b3 94       	inc	r11
    4346:	f8 cf       	rjmp	.-16     	; 0x4338 <vfprintf+0x32e>
    4348:	b2 14       	cp	r11, r2
    434a:	18 f4       	brcc	.+6      	; 0x4352 <vfprintf+0x348>
    434c:	2b 18       	sub	r2, r11
    434e:	02 c0       	rjmp	.+4      	; 0x4354 <vfprintf+0x34a>
    4350:	98 2c       	mov	r9, r8
    4352:	21 2c       	mov	r2, r1
    4354:	a4 fe       	sbrs	r10, 4
    4356:	0f c0       	rjmp	.+30     	; 0x4376 <vfprintf+0x36c>
    4358:	b6 01       	movw	r22, r12
    435a:	80 e3       	ldi	r24, 0x30	; 48
    435c:	90 e0       	ldi	r25, 0x00	; 0
    435e:	68 d0       	rcall	.+208    	; 0x4430 <fputc>
    4360:	a2 fe       	sbrs	r10, 2
    4362:	16 c0       	rjmp	.+44     	; 0x4390 <vfprintf+0x386>
    4364:	a1 fc       	sbrc	r10, 1
    4366:	03 c0       	rjmp	.+6      	; 0x436e <vfprintf+0x364>
    4368:	88 e7       	ldi	r24, 0x78	; 120
    436a:	90 e0       	ldi	r25, 0x00	; 0
    436c:	02 c0       	rjmp	.+4      	; 0x4372 <vfprintf+0x368>
    436e:	88 e5       	ldi	r24, 0x58	; 88
    4370:	90 e0       	ldi	r25, 0x00	; 0
    4372:	b6 01       	movw	r22, r12
    4374:	0c c0       	rjmp	.+24     	; 0x438e <vfprintf+0x384>
    4376:	8a 2d       	mov	r24, r10
    4378:	86 78       	andi	r24, 0x86	; 134
    437a:	51 f0       	breq	.+20     	; 0x4390 <vfprintf+0x386>
    437c:	a1 fe       	sbrs	r10, 1
    437e:	02 c0       	rjmp	.+4      	; 0x4384 <vfprintf+0x37a>
    4380:	8b e2       	ldi	r24, 0x2B	; 43
    4382:	01 c0       	rjmp	.+2      	; 0x4386 <vfprintf+0x37c>
    4384:	80 e2       	ldi	r24, 0x20	; 32
    4386:	a7 fc       	sbrc	r10, 7
    4388:	8d e2       	ldi	r24, 0x2D	; 45
    438a:	b6 01       	movw	r22, r12
    438c:	90 e0       	ldi	r25, 0x00	; 0
    438e:	50 d0       	rcall	.+160    	; 0x4430 <fputc>
    4390:	89 14       	cp	r8, r9
    4392:	30 f4       	brcc	.+12     	; 0x43a0 <vfprintf+0x396>
    4394:	b6 01       	movw	r22, r12
    4396:	80 e3       	ldi	r24, 0x30	; 48
    4398:	90 e0       	ldi	r25, 0x00	; 0
    439a:	4a d0       	rcall	.+148    	; 0x4430 <fputc>
    439c:	9a 94       	dec	r9
    439e:	f8 cf       	rjmp	.-16     	; 0x4390 <vfprintf+0x386>
    43a0:	8a 94       	dec	r8
    43a2:	f3 01       	movw	r30, r6
    43a4:	e8 0d       	add	r30, r8
    43a6:	f1 1d       	adc	r31, r1
    43a8:	80 81       	ld	r24, Z
    43aa:	b6 01       	movw	r22, r12
    43ac:	90 e0       	ldi	r25, 0x00	; 0
    43ae:	40 d0       	rcall	.+128    	; 0x4430 <fputc>
    43b0:	81 10       	cpse	r8, r1
    43b2:	f6 cf       	rjmp	.-20     	; 0x43a0 <vfprintf+0x396>
    43b4:	22 20       	and	r2, r2
    43b6:	09 f4       	brne	.+2      	; 0x43ba <vfprintf+0x3b0>
    43b8:	4e ce       	rjmp	.-868    	; 0x4056 <vfprintf+0x4c>
    43ba:	b6 01       	movw	r22, r12
    43bc:	80 e2       	ldi	r24, 0x20	; 32
    43be:	90 e0       	ldi	r25, 0x00	; 0
    43c0:	37 d0       	rcall	.+110    	; 0x4430 <fputc>
    43c2:	2a 94       	dec	r2
    43c4:	f7 cf       	rjmp	.-18     	; 0x43b4 <vfprintf+0x3aa>
    43c6:	f6 01       	movw	r30, r12
    43c8:	86 81       	ldd	r24, Z+6	; 0x06
    43ca:	97 81       	ldd	r25, Z+7	; 0x07
    43cc:	02 c0       	rjmp	.+4      	; 0x43d2 <vfprintf+0x3c8>
    43ce:	8f ef       	ldi	r24, 0xFF	; 255
    43d0:	9f ef       	ldi	r25, 0xFF	; 255
    43d2:	2b 96       	adiw	r28, 0x0b	; 11
    43d4:	0f b6       	in	r0, 0x3f	; 63
    43d6:	f8 94       	cli
    43d8:	de bf       	out	0x3e, r29	; 62
    43da:	0f be       	out	0x3f, r0	; 63
    43dc:	cd bf       	out	0x3d, r28	; 61
    43de:	df 91       	pop	r29
    43e0:	cf 91       	pop	r28
    43e2:	1f 91       	pop	r17
    43e4:	0f 91       	pop	r16
    43e6:	ff 90       	pop	r15
    43e8:	ef 90       	pop	r14
    43ea:	df 90       	pop	r13
    43ec:	cf 90       	pop	r12
    43ee:	bf 90       	pop	r11
    43f0:	af 90       	pop	r10
    43f2:	9f 90       	pop	r9
    43f4:	8f 90       	pop	r8
    43f6:	7f 90       	pop	r7
    43f8:	6f 90       	pop	r6
    43fa:	5f 90       	pop	r5
    43fc:	4f 90       	pop	r4
    43fe:	3f 90       	pop	r3
    4400:	2f 90       	pop	r2
    4402:	08 95       	ret

00004404 <strnlen_P>:
    4404:	fc 01       	movw	r30, r24
    4406:	05 90       	lpm	r0, Z+
    4408:	61 50       	subi	r22, 0x01	; 1
    440a:	70 40       	sbci	r23, 0x00	; 0
    440c:	01 10       	cpse	r0, r1
    440e:	d8 f7       	brcc	.-10     	; 0x4406 <strnlen_P+0x2>
    4410:	80 95       	com	r24
    4412:	90 95       	com	r25
    4414:	8e 0f       	add	r24, r30
    4416:	9f 1f       	adc	r25, r31
    4418:	08 95       	ret

0000441a <strnlen>:
    441a:	fc 01       	movw	r30, r24
    441c:	61 50       	subi	r22, 0x01	; 1
    441e:	70 40       	sbci	r23, 0x00	; 0
    4420:	01 90       	ld	r0, Z+
    4422:	01 10       	cpse	r0, r1
    4424:	d8 f7       	brcc	.-10     	; 0x441c <strnlen+0x2>
    4426:	80 95       	com	r24
    4428:	90 95       	com	r25
    442a:	8e 0f       	add	r24, r30
    442c:	9f 1f       	adc	r25, r31
    442e:	08 95       	ret

00004430 <fputc>:
    4430:	0f 93       	push	r16
    4432:	1f 93       	push	r17
    4434:	cf 93       	push	r28
    4436:	df 93       	push	r29
    4438:	fb 01       	movw	r30, r22
    443a:	23 81       	ldd	r18, Z+3	; 0x03
    443c:	21 fd       	sbrc	r18, 1
    443e:	03 c0       	rjmp	.+6      	; 0x4446 <fputc+0x16>
    4440:	8f ef       	ldi	r24, 0xFF	; 255
    4442:	9f ef       	ldi	r25, 0xFF	; 255
    4444:	2c c0       	rjmp	.+88     	; 0x449e <fputc+0x6e>
    4446:	22 ff       	sbrs	r18, 2
    4448:	16 c0       	rjmp	.+44     	; 0x4476 <fputc+0x46>
    444a:	46 81       	ldd	r20, Z+6	; 0x06
    444c:	57 81       	ldd	r21, Z+7	; 0x07
    444e:	24 81       	ldd	r18, Z+4	; 0x04
    4450:	35 81       	ldd	r19, Z+5	; 0x05
    4452:	42 17       	cp	r20, r18
    4454:	53 07       	cpc	r21, r19
    4456:	44 f4       	brge	.+16     	; 0x4468 <fputc+0x38>
    4458:	a0 81       	ld	r26, Z
    445a:	b1 81       	ldd	r27, Z+1	; 0x01
    445c:	9d 01       	movw	r18, r26
    445e:	2f 5f       	subi	r18, 0xFF	; 255
    4460:	3f 4f       	sbci	r19, 0xFF	; 255
    4462:	31 83       	std	Z+1, r19	; 0x01
    4464:	20 83       	st	Z, r18
    4466:	8c 93       	st	X, r24
    4468:	26 81       	ldd	r18, Z+6	; 0x06
    446a:	37 81       	ldd	r19, Z+7	; 0x07
    446c:	2f 5f       	subi	r18, 0xFF	; 255
    446e:	3f 4f       	sbci	r19, 0xFF	; 255
    4470:	37 83       	std	Z+7, r19	; 0x07
    4472:	26 83       	std	Z+6, r18	; 0x06
    4474:	14 c0       	rjmp	.+40     	; 0x449e <fputc+0x6e>
    4476:	8b 01       	movw	r16, r22
    4478:	ec 01       	movw	r28, r24
    447a:	fb 01       	movw	r30, r22
    447c:	00 84       	ldd	r0, Z+8	; 0x08
    447e:	f1 85       	ldd	r31, Z+9	; 0x09
    4480:	e0 2d       	mov	r30, r0
    4482:	19 95       	eicall
    4484:	89 2b       	or	r24, r25
    4486:	e1 f6       	brne	.-72     	; 0x4440 <fputc+0x10>
    4488:	d8 01       	movw	r26, r16
    448a:	16 96       	adiw	r26, 0x06	; 6
    448c:	8d 91       	ld	r24, X+
    448e:	9c 91       	ld	r25, X
    4490:	17 97       	sbiw	r26, 0x07	; 7
    4492:	01 96       	adiw	r24, 0x01	; 1
    4494:	17 96       	adiw	r26, 0x07	; 7
    4496:	9c 93       	st	X, r25
    4498:	8e 93       	st	-X, r24
    449a:	16 97       	sbiw	r26, 0x06	; 6
    449c:	ce 01       	movw	r24, r28
    449e:	df 91       	pop	r29
    44a0:	cf 91       	pop	r28
    44a2:	1f 91       	pop	r17
    44a4:	0f 91       	pop	r16
    44a6:	08 95       	ret

000044a8 <__ultoa_invert>:
    44a8:	fa 01       	movw	r30, r20
    44aa:	aa 27       	eor	r26, r26
    44ac:	28 30       	cpi	r18, 0x08	; 8
    44ae:	51 f1       	breq	.+84     	; 0x4504 <__ultoa_invert+0x5c>
    44b0:	20 31       	cpi	r18, 0x10	; 16
    44b2:	81 f1       	breq	.+96     	; 0x4514 <__ultoa_invert+0x6c>
    44b4:	e8 94       	clt
    44b6:	6f 93       	push	r22
    44b8:	6e 7f       	andi	r22, 0xFE	; 254
    44ba:	6e 5f       	subi	r22, 0xFE	; 254
    44bc:	7f 4f       	sbci	r23, 0xFF	; 255
    44be:	8f 4f       	sbci	r24, 0xFF	; 255
    44c0:	9f 4f       	sbci	r25, 0xFF	; 255
    44c2:	af 4f       	sbci	r26, 0xFF	; 255
    44c4:	b1 e0       	ldi	r27, 0x01	; 1
    44c6:	3e d0       	rcall	.+124    	; 0x4544 <__ultoa_invert+0x9c>
    44c8:	b4 e0       	ldi	r27, 0x04	; 4
    44ca:	3c d0       	rcall	.+120    	; 0x4544 <__ultoa_invert+0x9c>
    44cc:	67 0f       	add	r22, r23
    44ce:	78 1f       	adc	r23, r24
    44d0:	89 1f       	adc	r24, r25
    44d2:	9a 1f       	adc	r25, r26
    44d4:	a1 1d       	adc	r26, r1
    44d6:	68 0f       	add	r22, r24
    44d8:	79 1f       	adc	r23, r25
    44da:	8a 1f       	adc	r24, r26
    44dc:	91 1d       	adc	r25, r1
    44de:	a1 1d       	adc	r26, r1
    44e0:	6a 0f       	add	r22, r26
    44e2:	71 1d       	adc	r23, r1
    44e4:	81 1d       	adc	r24, r1
    44e6:	91 1d       	adc	r25, r1
    44e8:	a1 1d       	adc	r26, r1
    44ea:	20 d0       	rcall	.+64     	; 0x452c <__ultoa_invert+0x84>
    44ec:	09 f4       	brne	.+2      	; 0x44f0 <__ultoa_invert+0x48>
    44ee:	68 94       	set
    44f0:	3f 91       	pop	r19
    44f2:	2a e0       	ldi	r18, 0x0A	; 10
    44f4:	26 9f       	mul	r18, r22
    44f6:	11 24       	eor	r1, r1
    44f8:	30 19       	sub	r19, r0
    44fa:	30 5d       	subi	r19, 0xD0	; 208
    44fc:	31 93       	st	Z+, r19
    44fe:	de f6       	brtc	.-74     	; 0x44b6 <__ultoa_invert+0xe>
    4500:	cf 01       	movw	r24, r30
    4502:	08 95       	ret
    4504:	46 2f       	mov	r20, r22
    4506:	47 70       	andi	r20, 0x07	; 7
    4508:	40 5d       	subi	r20, 0xD0	; 208
    450a:	41 93       	st	Z+, r20
    450c:	b3 e0       	ldi	r27, 0x03	; 3
    450e:	0f d0       	rcall	.+30     	; 0x452e <__ultoa_invert+0x86>
    4510:	c9 f7       	brne	.-14     	; 0x4504 <__ultoa_invert+0x5c>
    4512:	f6 cf       	rjmp	.-20     	; 0x4500 <__ultoa_invert+0x58>
    4514:	46 2f       	mov	r20, r22
    4516:	4f 70       	andi	r20, 0x0F	; 15
    4518:	40 5d       	subi	r20, 0xD0	; 208
    451a:	4a 33       	cpi	r20, 0x3A	; 58
    451c:	18 f0       	brcs	.+6      	; 0x4524 <__ultoa_invert+0x7c>
    451e:	49 5d       	subi	r20, 0xD9	; 217
    4520:	31 fd       	sbrc	r19, 1
    4522:	40 52       	subi	r20, 0x20	; 32
    4524:	41 93       	st	Z+, r20
    4526:	02 d0       	rcall	.+4      	; 0x452c <__ultoa_invert+0x84>
    4528:	a9 f7       	brne	.-22     	; 0x4514 <__ultoa_invert+0x6c>
    452a:	ea cf       	rjmp	.-44     	; 0x4500 <__ultoa_invert+0x58>
    452c:	b4 e0       	ldi	r27, 0x04	; 4
    452e:	a6 95       	lsr	r26
    4530:	97 95       	ror	r25
    4532:	87 95       	ror	r24
    4534:	77 95       	ror	r23
    4536:	67 95       	ror	r22
    4538:	ba 95       	dec	r27
    453a:	c9 f7       	brne	.-14     	; 0x452e <__ultoa_invert+0x86>
    453c:	00 97       	sbiw	r24, 0x00	; 0
    453e:	61 05       	cpc	r22, r1
    4540:	71 05       	cpc	r23, r1
    4542:	08 95       	ret
    4544:	9b 01       	movw	r18, r22
    4546:	ac 01       	movw	r20, r24
    4548:	0a 2e       	mov	r0, r26
    454a:	06 94       	lsr	r0
    454c:	57 95       	ror	r21
    454e:	47 95       	ror	r20
    4550:	37 95       	ror	r19
    4552:	27 95       	ror	r18
    4554:	ba 95       	dec	r27
    4556:	c9 f7       	brne	.-14     	; 0x454a <__ultoa_invert+0xa2>
    4558:	62 0f       	add	r22, r18
    455a:	73 1f       	adc	r23, r19
    455c:	84 1f       	adc	r24, r20
    455e:	95 1f       	adc	r25, r21
    4560:	a0 1d       	adc	r26, r0
    4562:	08 95       	ret

00004564 <_exit>:
    4564:	f8 94       	cli

00004566 <__stop_program>:
    4566:	ff cf       	rjmp	.-2      	; 0x4566 <__stop_program>

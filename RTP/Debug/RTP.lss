
RTP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800200  0000353e  000035d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000353e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000acb  00800252  00800252  00003624  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003624  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003680  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000638  00000000  00000000  000036c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007c3a  00000000  00000000  00003cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ff9  00000000  00000000  0000b932  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000413e  00000000  00000000  0000d92b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000016bc  00000000  00000000  00011a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000282f  00000000  00000000  00013128  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000074c8  00000000  00000000  00015957  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000618  00000000  00000000  0001ce1f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	93 c0       	rjmp	.+294    	; 0x128 <__ctors_end>
       2:	00 00       	nop
       4:	b1 c0       	rjmp	.+354    	; 0x168 <__bad_interrupt>
       6:	00 00       	nop
       8:	af c0       	rjmp	.+350    	; 0x168 <__bad_interrupt>
       a:	00 00       	nop
       c:	ad c0       	rjmp	.+346    	; 0x168 <__bad_interrupt>
       e:	00 00       	nop
      10:	ab c0       	rjmp	.+342    	; 0x168 <__bad_interrupt>
      12:	00 00       	nop
      14:	a9 c0       	rjmp	.+338    	; 0x168 <__bad_interrupt>
      16:	00 00       	nop
      18:	a7 c0       	rjmp	.+334    	; 0x168 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a5 c0       	rjmp	.+330    	; 0x168 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a3 c0       	rjmp	.+326    	; 0x168 <__bad_interrupt>
      22:	00 00       	nop
      24:	a1 c0       	rjmp	.+322    	; 0x168 <__bad_interrupt>
      26:	00 00       	nop
      28:	9f c0       	rjmp	.+318    	; 0x168 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	9d c0       	rjmp	.+314    	; 0x168 <__bad_interrupt>
      2e:	00 00       	nop
      30:	df c3       	rjmp	.+1982   	; 0x7f0 <__vector_12>
      32:	00 00       	nop
      34:	99 c0       	rjmp	.+306    	; 0x168 <__bad_interrupt>
      36:	00 00       	nop
      38:	97 c0       	rjmp	.+302    	; 0x168 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	95 c0       	rjmp	.+298    	; 0x168 <__bad_interrupt>
      3e:	00 00       	nop
      40:	93 c0       	rjmp	.+294    	; 0x168 <__bad_interrupt>
      42:	00 00       	nop
      44:	91 c0       	rjmp	.+290    	; 0x168 <__bad_interrupt>
      46:	00 00       	nop
      48:	8f c0       	rjmp	.+286    	; 0x168 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8d c0       	rjmp	.+282    	; 0x168 <__bad_interrupt>
      4e:	00 00       	nop
      50:	8b c0       	rjmp	.+278    	; 0x168 <__bad_interrupt>
      52:	00 00       	nop
      54:	89 c0       	rjmp	.+274    	; 0x168 <__bad_interrupt>
      56:	00 00       	nop
      58:	87 c0       	rjmp	.+270    	; 0x168 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	85 c0       	rjmp	.+266    	; 0x168 <__bad_interrupt>
      5e:	00 00       	nop
      60:	83 c0       	rjmp	.+262    	; 0x168 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 12 12 	jmp	0x2424	; 0x2424 <__vector_25>
      68:	0c 94 64 12 	jmp	0x24c8	; 0x24c8 <__vector_26>
      6c:	7d c0       	rjmp	.+250    	; 0x168 <__bad_interrupt>
      6e:	00 00       	nop
      70:	7b c0       	rjmp	.+246    	; 0x168 <__bad_interrupt>
      72:	00 00       	nop
      74:	79 c0       	rjmp	.+242    	; 0x168 <__bad_interrupt>
      76:	00 00       	nop
      78:	77 c0       	rjmp	.+238    	; 0x168 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	75 c0       	rjmp	.+234    	; 0x168 <__bad_interrupt>
      7e:	00 00       	nop
      80:	73 c0       	rjmp	.+230    	; 0x168 <__bad_interrupt>
      82:	00 00       	nop
      84:	71 c0       	rjmp	.+226    	; 0x168 <__bad_interrupt>
      86:	00 00       	nop
      88:	6f c0       	rjmp	.+222    	; 0x168 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6d c0       	rjmp	.+218    	; 0x168 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 a8 12 	jmp	0x2550	; 0x2550 <__vector_36>
      94:	0c 94 fa 12 	jmp	0x25f4	; 0x25f4 <__vector_37>
      98:	67 c0       	rjmp	.+206    	; 0x168 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	65 c0       	rjmp	.+202    	; 0x168 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	63 c0       	rjmp	.+198    	; 0x168 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	61 c0       	rjmp	.+194    	; 0x168 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	5f c0       	rjmp	.+190    	; 0x168 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	5d c0       	rjmp	.+186    	; 0x168 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	5b c0       	rjmp	.+182    	; 0x168 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	59 c0       	rjmp	.+178    	; 0x168 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	57 c0       	rjmp	.+174    	; 0x168 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	55 c0       	rjmp	.+170    	; 0x168 <__bad_interrupt>
      be:	00 00       	nop
      c0:	53 c0       	rjmp	.+166    	; 0x168 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	51 c0       	rjmp	.+162    	; 0x168 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	4f c0       	rjmp	.+158    	; 0x168 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 3e 13 	jmp	0x267c	; 0x267c <__vector_51>
      d0:	0c 94 90 13 	jmp	0x2720	; 0x2720 <__vector_52>
      d4:	49 c0       	rjmp	.+146    	; 0x168 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 d4 13 	jmp	0x27a8	; 0x27a8 <__vector_54>
      dc:	0c 94 26 14 	jmp	0x284c	; 0x284c <__vector_55>
      e0:	43 c0       	rjmp	.+134    	; 0x168 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	43 10       	cpse	r4, r3
      e6:	43 10       	cpse	r4, r3
      e8:	43 10       	cpse	r4, r3
      ea:	7a 10       	cpse	r7, r10
      ec:	82 10       	cpse	r8, r2
      ee:	97 10       	cpse	r9, r7
      f0:	43 10       	cpse	r4, r3
      f2:	43 10       	cpse	r4, r3
      f4:	7a 10       	cpse	r7, r10
      f6:	82 10       	cpse	r8, r2

000000f8 <prvIdleTask>:
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
      f8:	6c d7       	rcall	.+3800   	; 0xfd2 <prvCheckTasksWaitingTermination>
      fa:	80 91 77 0c 	lds	r24, 0x0C77	; 0x800c77 <pxReadyTasksLists>
      fe:	82 30       	cpi	r24, 0x02	; 2
     100:	08 f0       	brcs	.+2      	; 0x104 <prvIdleTask+0xc>
     102:	b2 d2       	rcall	.+1380   	; 0x668 <vPortYield>
     104:	0e 94 c0 10 	call	0x2180	; 0x2180 <vApplicationIdleHook>
     108:	f7 cf       	rjmp	.-18     	; 0xf8 <prvIdleTask>

0000010a <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     10a:	cf 93       	push	r28
     10c:	df 93       	push	r29
     10e:	1f 92       	push	r1
     110:	cd b7       	in	r28, 0x3d	; 61
     112:	de b7       	in	r29, 0x3e	; 62
     114:	ce 01       	movw	r24, r28
     116:	01 96       	adiw	r24, 0x01	; 1
     118:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <prvGetNextExpireTime>
     11c:	49 81       	ldd	r20, Y+1	; 0x01
     11e:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <prvProcessTimerOrBlockTask>
     122:	0e 94 0d 10 	call	0x201a	; 0x201a <prvProcessReceivedCommands>
     126:	f6 cf       	rjmp	.-20     	; 0x114 <prvTimerTask+0xa>

00000128 <__ctors_end>:
     128:	11 24       	eor	r1, r1
     12a:	1f be       	out	0x3f, r1	; 63
     12c:	cf ef       	ldi	r28, 0xFF	; 255
     12e:	d1 e2       	ldi	r29, 0x21	; 33
     130:	de bf       	out	0x3e, r29	; 62
     132:	cd bf       	out	0x3d, r28	; 61
     134:	00 e0       	ldi	r16, 0x00	; 0
     136:	0c bf       	out	0x3c, r16	; 60

00000138 <__do_copy_data>:
     138:	12 e0       	ldi	r17, 0x02	; 2
     13a:	a0 e0       	ldi	r26, 0x00	; 0
     13c:	b2 e0       	ldi	r27, 0x02	; 2
     13e:	ee e3       	ldi	r30, 0x3E	; 62
     140:	f5 e3       	ldi	r31, 0x35	; 53
     142:	00 e0       	ldi	r16, 0x00	; 0
     144:	0b bf       	out	0x3b, r16	; 59
     146:	02 c0       	rjmp	.+4      	; 0x14c <__do_copy_data+0x14>
     148:	07 90       	elpm	r0, Z+
     14a:	0d 92       	st	X+, r0
     14c:	a2 35       	cpi	r26, 0x52	; 82
     14e:	b1 07       	cpc	r27, r17
     150:	d9 f7       	brne	.-10     	; 0x148 <__do_copy_data+0x10>

00000152 <__do_clear_bss>:
     152:	2d e0       	ldi	r18, 0x0D	; 13
     154:	a2 e5       	ldi	r26, 0x52	; 82
     156:	b2 e0       	ldi	r27, 0x02	; 2
     158:	01 c0       	rjmp	.+2      	; 0x15c <.do_clear_bss_start>

0000015a <.do_clear_bss_loop>:
     15a:	1d 92       	st	X+, r1

0000015c <.do_clear_bss_start>:
     15c:	ad 31       	cpi	r26, 0x1D	; 29
     15e:	b2 07       	cpc	r27, r18
     160:	e1 f7       	brne	.-8      	; 0x15a <.do_clear_bss_loop>
     162:	46 d0       	rcall	.+140    	; 0x1f0 <main>
     164:	0c 94 9d 1a 	jmp	0x353a	; 0x353a <_exit>

00000168 <__bad_interrupt>:
     168:	4b cf       	rjmp	.-362    	; 0x0 <__vectors>

0000016a <messenger>:
	xTaskCreate(messenger, "Sample Task", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
}

void messenger(void *pvParameters)
{		
	PORTA = PORTA & 0b11111010;
     16a:	82 b1       	in	r24, 0x02	; 2
     16c:	8a 7f       	andi	r24, 0xFA	; 250
     16e:	82 b9       	out	0x02, r24	; 2
	vTaskDelay(14);
     170:	6e e0       	ldi	r22, 0x0E	; 14
     172:	70 e0       	ldi	r23, 0x00	; 0
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	0e 94 4e 0b 	call	0x169c	; 0x169c <vTaskDelay>
	PORTA = PORTA & 0b00000101;
     17c:	82 b1       	in	r24, 0x02	; 2
     17e:	85 70       	andi	r24, 0x05	; 5
     180:	82 b9       	out	0x02, r24	; 2
	
	for(;;)
	{
		vTaskDelay(14);
     182:	6e e0       	ldi	r22, 0x0E	; 14
     184:	70 e0       	ldi	r23, 0x00	; 0
     186:	80 e0       	ldi	r24, 0x00	; 0
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	0e 94 4e 0b 	call	0x169c	; 0x169c <vTaskDelay>
		
		printf("Sending\n\r");
     18e:	8d e1       	ldi	r24, 0x1D	; 29
     190:	92 e0       	ldi	r25, 0x02	; 2
     192:	9f 93       	push	r25
     194:	8f 93       	push	r24
     196:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <printf>
		
			PORTA = PORTA & 0b11111010;
     19a:	82 b1       	in	r24, 0x02	; 2
     19c:	8a 7f       	andi	r24, 0xFA	; 250
     19e:	82 b9       	out	0x02, r24	; 2
			vTaskDelay(14);
     1a0:	6e e0       	ldi	r22, 0x0E	; 14
     1a2:	70 e0       	ldi	r23, 0x00	; 0
     1a4:	80 e0       	ldi	r24, 0x00	; 0
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	0e 94 4e 0b 	call	0x169c	; 0x169c <vTaskDelay>
			PORTA = PORTA & 0b00000101;
     1ac:	82 b1       	in	r24, 0x02	; 2
     1ae:	85 70       	andi	r24, 0x05	; 5
     1b0:	82 b9       	out	0x02, r24	; 2
     1b2:	0f 90       	pop	r0
     1b4:	0f 90       	pop	r0
     1b6:	e5 cf       	rjmp	.-54     	; 0x182 <messenger+0x18>

000001b8 <create_tasks_and_semaphores>:
#include <display_7seg.h>

void messenger(void *pvParameters);

void create_tasks_and_semaphores(void)
{
     1b8:	ef 92       	push	r14
     1ba:	ff 92       	push	r15
     1bc:	0f 93       	push	r16
	xTaskCreate(messenger, "Sample Task", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
     1be:	e1 2c       	mov	r14, r1
     1c0:	f1 2c       	mov	r15, r1
     1c2:	01 e0       	ldi	r16, 0x01	; 1
     1c4:	20 e0       	ldi	r18, 0x00	; 0
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	40 ec       	ldi	r20, 0xC0	; 192
     1ca:	50 e0       	ldi	r21, 0x00	; 0
     1cc:	67 e2       	ldi	r22, 0x27	; 39
     1ce:	72 e0       	ldi	r23, 0x02	; 2
     1d0:	85 eb       	ldi	r24, 0xB5	; 181
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	c1 d7       	rcall	.+3970   	; 0x1158 <xTaskCreate>
}
     1d6:	0f 91       	pop	r16
     1d8:	ff 90       	pop	r15
     1da:	ef 90       	pop	r14
     1dc:	08 95       	ret

000001de <initialiseSystem>:
	}
}

void initialiseSystem()
{
	DDRA = 0b00000101;
     1de:	85 e0       	ldi	r24, 0x05	; 5
     1e0:	81 b9       	out	0x01, r24	; 1
	PORTA = 0b00001010;
     1e2:	8a e0       	ldi	r24, 0x0A	; 10
     1e4:	82 b9       	out	0x02, r24	; 2
	stdio_initialise(ser_USART0);
     1e6:	80 e0       	ldi	r24, 0x00	; 0
     1e8:	0e 94 02 11 	call	0x2204	; 0x2204 <stdio_initialise>
	create_tasks_and_semaphores();
     1ec:	e5 cf       	rjmp	.-54     	; 0x1b8 <create_tasks_and_semaphores>
     1ee:	08 95       	ret

000001f0 <main>:
}

 int main(void)
{	
	initialiseSystem();
     1f0:	f6 df       	rcall	.-20     	; 0x1de <initialiseSystem>
	printf("Program Started.\r\n");
     1f2:	83 e3       	ldi	r24, 0x33	; 51
     1f4:	92 e0       	ldi	r25, 0x02	; 2
     1f6:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <puts>
	vTaskStartScheduler();
     1fa:	f7 d7       	rcall	.+4078   	; 0x11ea <vTaskStartScheduler>
     1fc:	ff cf       	rjmp	.-2      	; 0x1fc <main+0xc>

000001fe <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     1fe:	e8 e0       	ldi	r30, 0x08	; 8
     200:	f1 e0       	ldi	r31, 0x01	; 1
     202:	90 81       	ld	r25, Z
     204:	90 7f       	andi	r25, 0xF0	; 240
     206:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     208:	90 81       	ld	r25, Z
     20a:	8f 70       	andi	r24, 0x0F	; 15
     20c:	98 2b       	or	r25, r24
     20e:	90 83       	st	Z, r25
     210:	08 95       	ret

00000212 <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     212:	e8 e0       	ldi	r30, 0x08	; 8
     214:	f1 e0       	ldi	r31, 0x01	; 1
     216:	80 81       	ld	r24, Z
     218:	80 7f       	andi	r24, 0xF0	; 240
     21a:	80 83       	st	Z, r24
     21c:	08 95       	ret

0000021e <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     21e:	ee e5       	ldi	r30, 0x5E	; 94
     220:	f2 e0       	ldi	r31, 0x02	; 2
     222:	a2 e6       	ldi	r26, 0x62	; 98
     224:	b2 e0       	ldi	r27, 0x02	; 2
     226:	b1 83       	std	Z+1, r27	; 0x01
     228:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     22a:	13 82       	std	Z+3, r1	; 0x03
     22c:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     22e:	e2 e2       	ldi	r30, 0x22	; 34
     230:	fc e0       	ldi	r31, 0x0C	; 12
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     232:	f0 93 5d 02 	sts	0x025D, r31	; 0x80025d <pxEnd+0x1>
     236:	e0 93 5c 02 	sts	0x025C, r30	; 0x80025c <pxEnd>
    pxEnd->xBlockSize = 0;
     23a:	13 82       	std	Z+3, r1	; 0x03
     23c:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     23e:	11 82       	std	Z+1, r1	; 0x01
     240:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     242:	80 ec       	ldi	r24, 0xC0	; 192
     244:	99 e0       	ldi	r25, 0x09	; 9
     246:	13 96       	adiw	r26, 0x03	; 3
     248:	9c 93       	st	X, r25
     24a:	8e 93       	st	-X, r24
     24c:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     24e:	ed 93       	st	X+, r30
     250:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     252:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <xMinimumEverFreeBytesRemaining+0x1>
     256:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     25a:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <xFreeBytesRemaining+0x1>
     25e:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     262:	80 e0       	ldi	r24, 0x00	; 0
     264:	90 e8       	ldi	r25, 0x80	; 128
     266:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <__data_end+0x1>
     26a:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <__data_end>
     26e:	08 95       	ret

00000270 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     270:	cf 93       	push	r28
     272:	df 93       	push	r29
     274:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     276:	ae e5       	ldi	r26, 0x5E	; 94
     278:	b2 e0       	ldi	r27, 0x02	; 2
     27a:	01 c0       	rjmp	.+2      	; 0x27e <prvInsertBlockIntoFreeList+0xe>
     27c:	df 01       	movw	r26, r30
     27e:	ed 91       	ld	r30, X+
     280:	fc 91       	ld	r31, X
     282:	11 97       	sbiw	r26, 0x01	; 1
     284:	ec 17       	cp	r30, r28
     286:	fd 07       	cpc	r31, r29
     288:	c8 f3       	brcs	.-14     	; 0x27c <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     28a:	12 96       	adiw	r26, 0x02	; 2
     28c:	8d 91       	ld	r24, X+
     28e:	9c 91       	ld	r25, X
     290:	13 97       	sbiw	r26, 0x03	; 3
     292:	9d 01       	movw	r18, r26
     294:	28 0f       	add	r18, r24
     296:	39 1f       	adc	r19, r25
     298:	c2 17       	cp	r28, r18
     29a:	d3 07       	cpc	r29, r19
     29c:	49 f4       	brne	.+18     	; 0x2b0 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     29e:	2a 81       	ldd	r18, Y+2	; 0x02
     2a0:	3b 81       	ldd	r19, Y+3	; 0x03
     2a2:	82 0f       	add	r24, r18
     2a4:	93 1f       	adc	r25, r19
     2a6:	13 96       	adiw	r26, 0x03	; 3
     2a8:	9c 93       	st	X, r25
     2aa:	8e 93       	st	-X, r24
     2ac:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     2ae:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     2b0:	8a 81       	ldd	r24, Y+2	; 0x02
     2b2:	9b 81       	ldd	r25, Y+3	; 0x03
     2b4:	9e 01       	movw	r18, r28
     2b6:	28 0f       	add	r18, r24
     2b8:	39 1f       	adc	r19, r25
     2ba:	e2 17       	cp	r30, r18
     2bc:	f3 07       	cpc	r31, r19
     2be:	c1 f4       	brne	.+48     	; 0x2f0 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     2c0:	20 91 5c 02 	lds	r18, 0x025C	; 0x80025c <pxEnd>
     2c4:	30 91 5d 02 	lds	r19, 0x025D	; 0x80025d <pxEnd+0x1>
     2c8:	e2 17       	cp	r30, r18
     2ca:	f3 07       	cpc	r31, r19
     2cc:	71 f0       	breq	.+28     	; 0x2ea <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     2ce:	22 81       	ldd	r18, Z+2	; 0x02
     2d0:	33 81       	ldd	r19, Z+3	; 0x03
     2d2:	82 0f       	add	r24, r18
     2d4:	93 1f       	adc	r25, r19
     2d6:	9b 83       	std	Y+3, r25	; 0x03
     2d8:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     2da:	ed 91       	ld	r30, X+
     2dc:	fc 91       	ld	r31, X
     2de:	11 97       	sbiw	r26, 0x01	; 1
     2e0:	80 81       	ld	r24, Z
     2e2:	91 81       	ldd	r25, Z+1	; 0x01
     2e4:	99 83       	std	Y+1, r25	; 0x01
     2e6:	88 83       	st	Y, r24
     2e8:	05 c0       	rjmp	.+10     	; 0x2f4 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     2ea:	39 83       	std	Y+1, r19	; 0x01
     2ec:	28 83       	st	Y, r18
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     2f0:	f9 83       	std	Y+1, r31	; 0x01
     2f2:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     2f4:	ca 17       	cp	r28, r26
     2f6:	db 07       	cpc	r29, r27
     2f8:	11 f0       	breq	.+4      	; 0x2fe <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     2fa:	cd 93       	st	X+, r28
     2fc:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	08 95       	ret

00000304 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     304:	ef 92       	push	r14
     306:	ff 92       	push	r15
     308:	0f 93       	push	r16
     30a:	1f 93       	push	r17
     30c:	cf 93       	push	r28
     30e:	df 93       	push	r29
     310:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     312:	a8 d7       	rcall	.+3920   	; 0x1264 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     314:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <pxEnd>
     318:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <pxEnd+0x1>
     31c:	89 2b       	or	r24, r25
        {
            prvHeapInit();
     31e:	09 f4       	brne	.+2      	; 0x322 <pvPortMalloc+0x1e>
     320:	7e df       	rcall	.-260    	; 0x21e <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     322:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <__data_end>
     326:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <__data_end+0x1>
     32a:	80 23       	and	r24, r16
     32c:	91 23       	and	r25, r17
     32e:	89 2b       	or	r24, r25
     330:	09 f0       	breq	.+2      	; 0x334 <pvPortMalloc+0x30>
     332:	76 c0       	rjmp	.+236    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     334:	01 15       	cp	r16, r1
     336:	11 05       	cpc	r17, r1
     338:	49 f0       	breq	.+18     	; 0x34c <pvPortMalloc+0x48>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     33a:	c8 01       	movw	r24, r16
     33c:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     33e:	08 17       	cp	r16, r24
     340:	19 07       	cpc	r17, r25
     342:	18 f0       	brcs	.+6      	; 0x34a <pvPortMalloc+0x46>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     344:	00 e0       	ldi	r16, 0x00	; 0
     346:	10 e0       	ldi	r17, 0x00	; 0
     348:	01 c0       	rjmp	.+2      	; 0x34c <pvPortMalloc+0x48>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     34a:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     34c:	01 15       	cp	r16, r1
     34e:	11 05       	cpc	r17, r1
     350:	09 f4       	brne	.+2      	; 0x354 <pvPortMalloc+0x50>
     352:	69 c0       	rjmp	.+210    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     354:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <xFreeBytesRemaining>
     358:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <xFreeBytesRemaining+0x1>
     35c:	80 17       	cp	r24, r16
     35e:	91 07       	cpc	r25, r17
     360:	08 f4       	brcc	.+2      	; 0x364 <pvPortMalloc+0x60>
     362:	64 c0       	rjmp	.+200    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     364:	c0 91 5e 02 	lds	r28, 0x025E	; 0x80025e <xStart>
     368:	d0 91 5f 02 	lds	r29, 0x025F	; 0x80025f <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     36c:	ee e5       	ldi	r30, 0x5E	; 94
     36e:	f2 e0       	ldi	r31, 0x02	; 2
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     370:	02 c0       	rjmp	.+4      	; 0x376 <pvPortMalloc+0x72>
                {
                    pxPreviousBlock = pxBlock;
     372:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     374:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     376:	8a 81       	ldd	r24, Y+2	; 0x02
     378:	9b 81       	ldd	r25, Y+3	; 0x03
     37a:	80 17       	cp	r24, r16
     37c:	91 07       	cpc	r25, r17
     37e:	20 f4       	brcc	.+8      	; 0x388 <pvPortMalloc+0x84>
     380:	88 81       	ld	r24, Y
     382:	99 81       	ldd	r25, Y+1	; 0x01
     384:	00 97       	sbiw	r24, 0x00	; 0
     386:	a9 f7       	brne	.-22     	; 0x372 <pvPortMalloc+0x6e>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     388:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <pxEnd>
     38c:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <pxEnd+0x1>
     390:	c8 17       	cp	r28, r24
     392:	d9 07       	cpc	r29, r25
     394:	09 f4       	brne	.+2      	; 0x398 <pvPortMalloc+0x94>
     396:	4d c0       	rjmp	.+154    	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     398:	e0 80       	ld	r14, Z
     39a:	f1 80       	ldd	r15, Z+1	; 0x01
     39c:	84 e0       	ldi	r24, 0x04	; 4
     39e:	e8 0e       	add	r14, r24
     3a0:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     3a2:	88 81       	ld	r24, Y
     3a4:	99 81       	ldd	r25, Y+1	; 0x01
     3a6:	91 83       	std	Z+1, r25	; 0x01
     3a8:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     3aa:	2a 81       	ldd	r18, Y+2	; 0x02
     3ac:	3b 81       	ldd	r19, Y+3	; 0x03
     3ae:	20 1b       	sub	r18, r16
     3b0:	31 0b       	sbc	r19, r17
     3b2:	29 30       	cpi	r18, 0x09	; 9
     3b4:	31 05       	cpc	r19, r1
     3b6:	48 f0       	brcs	.+18     	; 0x3ca <pvPortMalloc+0xc6>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     3b8:	ce 01       	movw	r24, r28
     3ba:	80 0f       	add	r24, r16
     3bc:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     3be:	fc 01       	movw	r30, r24
     3c0:	33 83       	std	Z+3, r19	; 0x03
     3c2:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     3c4:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     3c6:	0a 83       	std	Y+2, r16	; 0x02
     3c8:	53 df       	rcall	.-346    	; 0x270 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     3ca:	2a 81       	ldd	r18, Y+2	; 0x02
     3cc:	3b 81       	ldd	r19, Y+3	; 0x03
     3ce:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <xFreeBytesRemaining>
     3d2:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <xFreeBytesRemaining+0x1>
     3d6:	82 1b       	sub	r24, r18
     3d8:	93 0b       	sbc	r25, r19
     3da:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <xFreeBytesRemaining+0x1>
     3de:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     3e2:	40 91 58 02 	lds	r20, 0x0258	; 0x800258 <xMinimumEverFreeBytesRemaining>
     3e6:	50 91 59 02 	lds	r21, 0x0259	; 0x800259 <xMinimumEverFreeBytesRemaining+0x1>
     3ea:	84 17       	cp	r24, r20
     3ec:	95 07       	cpc	r25, r21
     3ee:	20 f4       	brcc	.+8      	; 0x3f8 <pvPortMalloc+0xf4>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     3f0:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <xMinimumEverFreeBytesRemaining+0x1>
     3f4:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     3f8:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <__data_end>
     3fc:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <__data_end+0x1>
     400:	28 2b       	or	r18, r24
     402:	39 2b       	or	r19, r25
     404:	3b 83       	std	Y+3, r19	; 0x03
     406:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     408:	19 82       	std	Y+1, r1	; 0x01
     40a:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     40c:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <xNumberOfSuccessfulAllocations>
     410:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <xNumberOfSuccessfulAllocations+0x1>
     414:	01 96       	adiw	r24, 0x01	; 1
     416:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <xNumberOfSuccessfulAllocations+0x1>
     41a:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <xNumberOfSuccessfulAllocations>
     41e:	0b c0       	rjmp	.+22     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     420:	e1 2c       	mov	r14, r1
     422:	f1 2c       	mov	r15, r1
     424:	08 c0       	rjmp	.+16     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     426:	e1 2c       	mov	r14, r1
     428:	f1 2c       	mov	r15, r1
     42a:	05 c0       	rjmp	.+10     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     42c:	e1 2c       	mov	r14, r1
     42e:	f1 2c       	mov	r15, r1
     430:	02 c0       	rjmp	.+4      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     432:	e1 2c       	mov	r14, r1
     434:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     436:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     43a:	e1 14       	cp	r14, r1
     43c:	f1 04       	cpc	r15, r1
     43e:	11 f4       	brne	.+4      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     440:	0e 94 cc 10 	call	0x2198	; 0x2198 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     444:	c7 01       	movw	r24, r14
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	1f 91       	pop	r17
     44c:	0f 91       	pop	r16
     44e:	ff 90       	pop	r15
     450:	ef 90       	pop	r14
     452:	08 95       	ret

00000454 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     454:	0f 93       	push	r16
     456:	1f 93       	push	r17
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     45c:	00 97       	sbiw	r24, 0x00	; 0
     45e:	89 f1       	breq	.+98     	; 0x4c2 <vPortFree+0x6e>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     460:	ec 01       	movw	r28, r24
     462:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     464:	4a 81       	ldd	r20, Y+2	; 0x02
     466:	5b 81       	ldd	r21, Y+3	; 0x03
     468:	20 91 52 02 	lds	r18, 0x0252	; 0x800252 <__data_end>
     46c:	30 91 53 02 	lds	r19, 0x0253	; 0x800253 <__data_end+0x1>
     470:	ba 01       	movw	r22, r20
     472:	62 23       	and	r22, r18
     474:	73 23       	and	r23, r19
     476:	67 2b       	or	r22, r23
     478:	21 f1       	breq	.+72     	; 0x4c2 <vPortFree+0x6e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     47a:	68 81       	ld	r22, Y
     47c:	79 81       	ldd	r23, Y+1	; 0x01
     47e:	67 2b       	or	r22, r23
     480:	01 f5       	brne	.+64     	; 0x4c2 <vPortFree+0x6e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     482:	20 95       	com	r18
     484:	30 95       	com	r19
     486:	24 23       	and	r18, r20
     488:	35 23       	and	r19, r21
     48a:	3b 83       	std	Y+3, r19	; 0x03
     48c:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     48e:	ea d6       	rcall	.+3540   	; 0x1264 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     490:	8a 81       	ldd	r24, Y+2	; 0x02
     492:	9b 81       	ldd	r25, Y+3	; 0x03
     494:	20 91 5a 02 	lds	r18, 0x025A	; 0x80025a <xFreeBytesRemaining>
     498:	30 91 5b 02 	lds	r19, 0x025B	; 0x80025b <xFreeBytesRemaining+0x1>
     49c:	82 0f       	add	r24, r18
     49e:	93 1f       	adc	r25, r19
     4a0:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <xFreeBytesRemaining+0x1>
     4a4:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     4a8:	ce 01       	movw	r24, r28
     4aa:	e2 de       	rcall	.-572    	; 0x270 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     4ac:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <xNumberOfSuccessfulFrees>
     4b0:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <xNumberOfSuccessfulFrees+0x1>
     4b4:	01 96       	adiw	r24, 0x01	; 1
     4b6:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <xNumberOfSuccessfulFrees+0x1>
     4ba:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     4be:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	1f 91       	pop	r17
     4c8:	0f 91       	pop	r16
     4ca:	08 95       	ret

000004cc <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     4cc:	fc 01       	movw	r30, r24
     4ce:	03 96       	adiw	r24, 0x03	; 3
     4d0:	92 83       	std	Z+2, r25	; 0x02
     4d2:	81 83       	std	Z+1, r24	; 0x01
     4d4:	4f ef       	ldi	r20, 0xFF	; 255
     4d6:	5f ef       	ldi	r21, 0xFF	; 255
     4d8:	ba 01       	movw	r22, r20
     4da:	43 83       	std	Z+3, r20	; 0x03
     4dc:	54 83       	std	Z+4, r21	; 0x04
     4de:	65 83       	std	Z+5, r22	; 0x05
     4e0:	76 83       	std	Z+6, r23	; 0x06
     4e2:	90 87       	std	Z+8, r25	; 0x08
     4e4:	87 83       	std	Z+7, r24	; 0x07
     4e6:	92 87       	std	Z+10, r25	; 0x0a
     4e8:	81 87       	std	Z+9, r24	; 0x09
     4ea:	10 82       	st	Z, r1
     4ec:	08 95       	ret

000004ee <vListInitialiseItem>:
     4ee:	fc 01       	movw	r30, r24
     4f0:	13 86       	std	Z+11, r1	; 0x0b
     4f2:	12 86       	std	Z+10, r1	; 0x0a
     4f4:	08 95       	ret

000004f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     4f6:	0f 93       	push	r16
     4f8:	1f 93       	push	r17
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
     4fe:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     500:	08 81       	ld	r16, Y
     502:	19 81       	ldd	r17, Y+1	; 0x01
     504:	2a 81       	ldd	r18, Y+2	; 0x02
     506:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     508:	0f 3f       	cpi	r16, 0xFF	; 255
     50a:	4f ef       	ldi	r20, 0xFF	; 255
     50c:	14 07       	cpc	r17, r20
     50e:	24 07       	cpc	r18, r20
     510:	34 07       	cpc	r19, r20
     512:	21 f4       	brne	.+8      	; 0x51c <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     514:	fc 01       	movw	r30, r24
     516:	a1 85       	ldd	r26, Z+9	; 0x09
     518:	b2 85       	ldd	r27, Z+10	; 0x0a
     51a:	11 c0       	rjmp	.+34     	; 0x53e <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     51c:	dc 01       	movw	r26, r24
     51e:	13 96       	adiw	r26, 0x03	; 3
     520:	01 c0       	rjmp	.+2      	; 0x524 <vListInsert+0x2e>
     522:	df 01       	movw	r26, r30
     524:	14 96       	adiw	r26, 0x04	; 4
     526:	ed 91       	ld	r30, X+
     528:	fc 91       	ld	r31, X
     52a:	15 97       	sbiw	r26, 0x05	; 5
     52c:	40 81       	ld	r20, Z
     52e:	51 81       	ldd	r21, Z+1	; 0x01
     530:	62 81       	ldd	r22, Z+2	; 0x02
     532:	73 81       	ldd	r23, Z+3	; 0x03
     534:	04 17       	cp	r16, r20
     536:	15 07       	cpc	r17, r21
     538:	26 07       	cpc	r18, r22
     53a:	37 07       	cpc	r19, r23
     53c:	90 f7       	brcc	.-28     	; 0x522 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     53e:	14 96       	adiw	r26, 0x04	; 4
     540:	ed 91       	ld	r30, X+
     542:	fc 91       	ld	r31, X
     544:	15 97       	sbiw	r26, 0x05	; 5
     546:	fd 83       	std	Y+5, r31	; 0x05
     548:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     54a:	d7 83       	std	Z+7, r29	; 0x07
     54c:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     54e:	bf 83       	std	Y+7, r27	; 0x07
     550:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     552:	15 96       	adiw	r26, 0x05	; 5
     554:	dc 93       	st	X, r29
     556:	ce 93       	st	-X, r28
     558:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     55a:	9b 87       	std	Y+11, r25	; 0x0b
     55c:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     55e:	fc 01       	movw	r30, r24
     560:	20 81       	ld	r18, Z
     562:	2f 5f       	subi	r18, 0xFF	; 255
     564:	20 83       	st	Z, r18
}
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	1f 91       	pop	r17
     56c:	0f 91       	pop	r16
     56e:	08 95       	ret

00000570 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     570:	cf 93       	push	r28
     572:	df 93       	push	r29
     574:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     576:	a2 85       	ldd	r26, Z+10	; 0x0a
     578:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     57a:	c4 81       	ldd	r28, Z+4	; 0x04
     57c:	d5 81       	ldd	r29, Z+5	; 0x05
     57e:	86 81       	ldd	r24, Z+6	; 0x06
     580:	97 81       	ldd	r25, Z+7	; 0x07
     582:	9f 83       	std	Y+7, r25	; 0x07
     584:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     586:	c6 81       	ldd	r28, Z+6	; 0x06
     588:	d7 81       	ldd	r29, Z+7	; 0x07
     58a:	84 81       	ldd	r24, Z+4	; 0x04
     58c:	95 81       	ldd	r25, Z+5	; 0x05
     58e:	9d 83       	std	Y+5, r25	; 0x05
     590:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     592:	11 96       	adiw	r26, 0x01	; 1
     594:	8d 91       	ld	r24, X+
     596:	9c 91       	ld	r25, X
     598:	12 97       	sbiw	r26, 0x02	; 2
     59a:	e8 17       	cp	r30, r24
     59c:	f9 07       	cpc	r31, r25
     59e:	31 f4       	brne	.+12     	; 0x5ac <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     5a0:	86 81       	ldd	r24, Z+6	; 0x06
     5a2:	97 81       	ldd	r25, Z+7	; 0x07
     5a4:	12 96       	adiw	r26, 0x02	; 2
     5a6:	9c 93       	st	X, r25
     5a8:	8e 93       	st	-X, r24
     5aa:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     5ac:	13 86       	std	Z+11, r1	; 0x0b
     5ae:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     5b0:	8c 91       	ld	r24, X
     5b2:	81 50       	subi	r24, 0x01	; 1
     5b4:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     5b6:	8c 91       	ld	r24, X
}
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	08 95       	ret

000005be <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     5be:	a8 95       	wdr
     5c0:	90 ec       	ldi	r25, 0xC0	; 192
     5c2:	88 e1       	ldi	r24, 0x18	; 24
     5c4:	0f b6       	in	r0, 0x3f	; 63
     5c6:	f8 94       	cli
     5c8:	a8 95       	wdr
     5ca:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     5ce:	0f be       	out	0x3f, r0	; 63
     5d0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     5d4:	08 95       	ret

000005d6 <pxPortInitialiseStack>:
     5d6:	fc 01       	movw	r30, r24
     5d8:	60 83       	st	Z, r22
     5da:	31 97       	sbiw	r30, 0x01	; 1
     5dc:	70 83       	st	Z, r23
     5de:	31 97       	sbiw	r30, 0x01	; 1
     5e0:	10 82       	st	Z, r1
     5e2:	31 97       	sbiw	r30, 0x01	; 1
     5e4:	10 82       	st	Z, r1
     5e6:	31 97       	sbiw	r30, 0x01	; 1
     5e8:	20 e8       	ldi	r18, 0x80	; 128
     5ea:	20 83       	st	Z, r18
     5ec:	31 97       	sbiw	r30, 0x01	; 1
     5ee:	10 82       	st	Z, r1
     5f0:	31 97       	sbiw	r30, 0x01	; 1
     5f2:	10 82       	st	Z, r1
     5f4:	31 97       	sbiw	r30, 0x01	; 1
     5f6:	10 82       	st	Z, r1
     5f8:	77 97       	sbiw	r30, 0x17	; 23
     5fa:	40 83       	st	Z, r20
     5fc:	31 97       	sbiw	r30, 0x01	; 1
     5fe:	50 83       	st	Z, r21
     600:	86 97       	sbiw	r24, 0x26	; 38
     602:	08 95       	ret

00000604 <xPortStartScheduler>:
     604:	dc df       	rcall	.-72     	; 0x5be <prvSetupTimerInterrupt>
     606:	a0 91 e5 0c 	lds	r26, 0x0CE5	; 0x800ce5 <pxCurrentTCB>
     60a:	b0 91 e6 0c 	lds	r27, 0x0CE6	; 0x800ce6 <pxCurrentTCB+0x1>
     60e:	cd 91       	ld	r28, X+
     610:	cd bf       	out	0x3d, r28	; 61
     612:	dd 91       	ld	r29, X+
     614:	de bf       	out	0x3e, r29	; 62
     616:	ff 91       	pop	r31
     618:	ef 91       	pop	r30
     61a:	df 91       	pop	r29
     61c:	cf 91       	pop	r28
     61e:	bf 91       	pop	r27
     620:	af 91       	pop	r26
     622:	9f 91       	pop	r25
     624:	8f 91       	pop	r24
     626:	7f 91       	pop	r23
     628:	6f 91       	pop	r22
     62a:	5f 91       	pop	r21
     62c:	4f 91       	pop	r20
     62e:	3f 91       	pop	r19
     630:	2f 91       	pop	r18
     632:	1f 91       	pop	r17
     634:	0f 91       	pop	r16
     636:	ff 90       	pop	r15
     638:	ef 90       	pop	r14
     63a:	df 90       	pop	r13
     63c:	cf 90       	pop	r12
     63e:	bf 90       	pop	r11
     640:	af 90       	pop	r10
     642:	9f 90       	pop	r9
     644:	8f 90       	pop	r8
     646:	7f 90       	pop	r7
     648:	6f 90       	pop	r6
     64a:	5f 90       	pop	r5
     64c:	4f 90       	pop	r4
     64e:	3f 90       	pop	r3
     650:	2f 90       	pop	r2
     652:	1f 90       	pop	r1
     654:	0f 90       	pop	r0
     656:	0c be       	out	0x3c, r0	; 60
     658:	0f 90       	pop	r0
     65a:	0b be       	out	0x3b, r0	; 59
     65c:	0f 90       	pop	r0
     65e:	0f be       	out	0x3f, r0	; 63
     660:	0f 90       	pop	r0
     662:	08 95       	ret
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	08 95       	ret

00000668 <vPortYield>:
     668:	0f 92       	push	r0
     66a:	0f b6       	in	r0, 0x3f	; 63
     66c:	f8 94       	cli
     66e:	0f 92       	push	r0
     670:	0b b6       	in	r0, 0x3b	; 59
     672:	0f 92       	push	r0
     674:	0c b6       	in	r0, 0x3c	; 60
     676:	0f 92       	push	r0
     678:	1f 92       	push	r1
     67a:	11 24       	eor	r1, r1
     67c:	2f 92       	push	r2
     67e:	3f 92       	push	r3
     680:	4f 92       	push	r4
     682:	5f 92       	push	r5
     684:	6f 92       	push	r6
     686:	7f 92       	push	r7
     688:	8f 92       	push	r8
     68a:	9f 92       	push	r9
     68c:	af 92       	push	r10
     68e:	bf 92       	push	r11
     690:	cf 92       	push	r12
     692:	df 92       	push	r13
     694:	ef 92       	push	r14
     696:	ff 92       	push	r15
     698:	0f 93       	push	r16
     69a:	1f 93       	push	r17
     69c:	2f 93       	push	r18
     69e:	3f 93       	push	r19
     6a0:	4f 93       	push	r20
     6a2:	5f 93       	push	r21
     6a4:	6f 93       	push	r22
     6a6:	7f 93       	push	r23
     6a8:	8f 93       	push	r24
     6aa:	9f 93       	push	r25
     6ac:	af 93       	push	r26
     6ae:	bf 93       	push	r27
     6b0:	cf 93       	push	r28
     6b2:	df 93       	push	r29
     6b4:	ef 93       	push	r30
     6b6:	ff 93       	push	r31
     6b8:	a0 91 e5 0c 	lds	r26, 0x0CE5	; 0x800ce5 <pxCurrentTCB>
     6bc:	b0 91 e6 0c 	lds	r27, 0x0CE6	; 0x800ce6 <pxCurrentTCB+0x1>
     6c0:	0d b6       	in	r0, 0x3d	; 61
     6c2:	0d 92       	st	X+, r0
     6c4:	0e b6       	in	r0, 0x3e	; 62
     6c6:	0d 92       	st	X+, r0
     6c8:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <vTaskSwitchContext>
     6cc:	a0 91 e5 0c 	lds	r26, 0x0CE5	; 0x800ce5 <pxCurrentTCB>
     6d0:	b0 91 e6 0c 	lds	r27, 0x0CE6	; 0x800ce6 <pxCurrentTCB+0x1>
     6d4:	cd 91       	ld	r28, X+
     6d6:	cd bf       	out	0x3d, r28	; 61
     6d8:	dd 91       	ld	r29, X+
     6da:	de bf       	out	0x3e, r29	; 62
     6dc:	ff 91       	pop	r31
     6de:	ef 91       	pop	r30
     6e0:	df 91       	pop	r29
     6e2:	cf 91       	pop	r28
     6e4:	bf 91       	pop	r27
     6e6:	af 91       	pop	r26
     6e8:	9f 91       	pop	r25
     6ea:	8f 91       	pop	r24
     6ec:	7f 91       	pop	r23
     6ee:	6f 91       	pop	r22
     6f0:	5f 91       	pop	r21
     6f2:	4f 91       	pop	r20
     6f4:	3f 91       	pop	r19
     6f6:	2f 91       	pop	r18
     6f8:	1f 91       	pop	r17
     6fa:	0f 91       	pop	r16
     6fc:	ff 90       	pop	r15
     6fe:	ef 90       	pop	r14
     700:	df 90       	pop	r13
     702:	cf 90       	pop	r12
     704:	bf 90       	pop	r11
     706:	af 90       	pop	r10
     708:	9f 90       	pop	r9
     70a:	8f 90       	pop	r8
     70c:	7f 90       	pop	r7
     70e:	6f 90       	pop	r6
     710:	5f 90       	pop	r5
     712:	4f 90       	pop	r4
     714:	3f 90       	pop	r3
     716:	2f 90       	pop	r2
     718:	1f 90       	pop	r1
     71a:	0f 90       	pop	r0
     71c:	0c be       	out	0x3c, r0	; 60
     71e:	0f 90       	pop	r0
     720:	0b be       	out	0x3b, r0	; 59
     722:	0f 90       	pop	r0
     724:	0f be       	out	0x3f, r0	; 63
     726:	0f 90       	pop	r0
     728:	08 95       	ret

0000072a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     72a:	0f 92       	push	r0
     72c:	0f b6       	in	r0, 0x3f	; 63
     72e:	f8 94       	cli
     730:	0f 92       	push	r0
     732:	0b b6       	in	r0, 0x3b	; 59
     734:	0f 92       	push	r0
     736:	0c b6       	in	r0, 0x3c	; 60
     738:	0f 92       	push	r0
     73a:	1f 92       	push	r1
     73c:	11 24       	eor	r1, r1
     73e:	2f 92       	push	r2
     740:	3f 92       	push	r3
     742:	4f 92       	push	r4
     744:	5f 92       	push	r5
     746:	6f 92       	push	r6
     748:	7f 92       	push	r7
     74a:	8f 92       	push	r8
     74c:	9f 92       	push	r9
     74e:	af 92       	push	r10
     750:	bf 92       	push	r11
     752:	cf 92       	push	r12
     754:	df 92       	push	r13
     756:	ef 92       	push	r14
     758:	ff 92       	push	r15
     75a:	0f 93       	push	r16
     75c:	1f 93       	push	r17
     75e:	2f 93       	push	r18
     760:	3f 93       	push	r19
     762:	4f 93       	push	r20
     764:	5f 93       	push	r21
     766:	6f 93       	push	r22
     768:	7f 93       	push	r23
     76a:	8f 93       	push	r24
     76c:	9f 93       	push	r25
     76e:	af 93       	push	r26
     770:	bf 93       	push	r27
     772:	cf 93       	push	r28
     774:	df 93       	push	r29
     776:	ef 93       	push	r30
     778:	ff 93       	push	r31
     77a:	a0 91 e5 0c 	lds	r26, 0x0CE5	; 0x800ce5 <pxCurrentTCB>
     77e:	b0 91 e6 0c 	lds	r27, 0x0CE6	; 0x800ce6 <pxCurrentTCB+0x1>
     782:	0d b6       	in	r0, 0x3d	; 61
     784:	0d 92       	st	X+, r0
     786:	0e b6       	in	r0, 0x3e	; 62
     788:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     78a:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     78c:	7f d5       	rcall	.+2814   	; 0x128c <xTaskIncrementTick>
     78e:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     790:	a0 d7       	rcall	.+3904   	; 0x16d2 <vTaskSwitchContext>
     792:	a0 91 e5 0c 	lds	r26, 0x0CE5	; 0x800ce5 <pxCurrentTCB>
    }
    portRESTORE_CONTEXT();
     796:	b0 91 e6 0c 	lds	r27, 0x0CE6	; 0x800ce6 <pxCurrentTCB+0x1>
     79a:	cd 91       	ld	r28, X+
     79c:	cd bf       	out	0x3d, r28	; 61
     79e:	dd 91       	ld	r29, X+
     7a0:	de bf       	out	0x3e, r29	; 62
     7a2:	ff 91       	pop	r31
     7a4:	ef 91       	pop	r30
     7a6:	df 91       	pop	r29
     7a8:	cf 91       	pop	r28
     7aa:	bf 91       	pop	r27
     7ac:	af 91       	pop	r26
     7ae:	9f 91       	pop	r25
     7b0:	8f 91       	pop	r24
     7b2:	7f 91       	pop	r23
     7b4:	6f 91       	pop	r22
     7b6:	5f 91       	pop	r21
     7b8:	4f 91       	pop	r20
     7ba:	3f 91       	pop	r19
     7bc:	2f 91       	pop	r18
     7be:	1f 91       	pop	r17
     7c0:	0f 91       	pop	r16
     7c2:	ff 90       	pop	r15
     7c4:	ef 90       	pop	r14
     7c6:	df 90       	pop	r13
     7c8:	cf 90       	pop	r12
     7ca:	bf 90       	pop	r11
     7cc:	af 90       	pop	r10
     7ce:	9f 90       	pop	r9
     7d0:	8f 90       	pop	r8
     7d2:	7f 90       	pop	r7
     7d4:	6f 90       	pop	r6
     7d6:	5f 90       	pop	r5
     7d8:	4f 90       	pop	r4
     7da:	3f 90       	pop	r3
     7dc:	2f 90       	pop	r2
     7de:	1f 90       	pop	r1
     7e0:	0f 90       	pop	r0
     7e2:	0c be       	out	0x3c, r0	; 60
     7e4:	0f 90       	pop	r0
     7e6:	0b be       	out	0x3b, r0	; 59
     7e8:	0f 90       	pop	r0
     7ea:	0f be       	out	0x3f, r0	; 63
     7ec:	0f 90       	pop	r0
     7ee:	08 95       	ret

000007f0 <__vector_12>:

    __asm__ __volatile__ ( "ret" );
     7f0:	9c df       	rcall	.-200    	; 0x72a <vPortYieldFromTick>
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
        __asm__ __volatile__ ( "reti" );
     7f2:	18 95       	reti

000007f4 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     7f4:	0f b6       	in	r0, 0x3f	; 63
     7f6:	f8 94       	cli
     7f8:	0f 92       	push	r0
     7fa:	fc 01       	movw	r30, r24
     7fc:	86 8d       	ldd	r24, Z+30	; 0x1e
     7fe:	81 11       	cpse	r24, r1
     800:	02 c0       	rjmp	.+4      	; 0x806 <prvIsQueueEmpty+0x12>
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	01 c0       	rjmp	.+2      	; 0x808 <prvIsQueueEmpty+0x14>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	0f 90       	pop	r0
     80a:	0f be       	out	0x3f, r0	; 63
     80c:	08 95       	ret

0000080e <prvIsQueueFull>:
     80e:	0f b6       	in	r0, 0x3f	; 63
     810:	f8 94       	cli
     812:	0f 92       	push	r0
     814:	fc 01       	movw	r30, r24
     816:	26 8d       	ldd	r18, Z+30	; 0x1e
     818:	87 8d       	ldd	r24, Z+31	; 0x1f
     81a:	28 13       	cpse	r18, r24
     81c:	02 c0       	rjmp	.+4      	; 0x822 <prvIsQueueFull+0x14>
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	01 c0       	rjmp	.+2      	; 0x824 <prvIsQueueFull+0x16>
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	0f 90       	pop	r0
     826:	0f be       	out	0x3f, r0	; 63
     828:	08 95       	ret

0000082a <prvCopyDataToQueue>:
     82a:	0f 93       	push	r16
     82c:	1f 93       	push	r17
     82e:	cf 93       	push	r28
     830:	df 93       	push	r29
     832:	ec 01       	movw	r28, r24
     834:	04 2f       	mov	r16, r20
     836:	1e 8d       	ldd	r17, Y+30	; 0x1e
     838:	48 a1       	ldd	r20, Y+32	; 0x20
     83a:	41 11       	cpse	r20, r1
     83c:	0c c0       	rjmp	.+24     	; 0x856 <prvCopyDataToQueue+0x2c>
     83e:	88 81       	ld	r24, Y
     840:	99 81       	ldd	r25, Y+1	; 0x01
     842:	89 2b       	or	r24, r25
     844:	09 f0       	breq	.+2      	; 0x848 <prvCopyDataToQueue+0x1e>
     846:	42 c0       	rjmp	.+132    	; 0x8cc <prvCopyDataToQueue+0xa2>
     848:	8c 81       	ldd	r24, Y+4	; 0x04
     84a:	9d 81       	ldd	r25, Y+5	; 0x05
     84c:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <xTaskPriorityDisinherit>
     850:	1d 82       	std	Y+5, r1	; 0x05
     852:	1c 82       	std	Y+4, r1	; 0x04
     854:	42 c0       	rjmp	.+132    	; 0x8da <prvCopyDataToQueue+0xb0>
     856:	01 11       	cpse	r16, r1
     858:	17 c0       	rjmp	.+46     	; 0x888 <prvCopyDataToQueue+0x5e>
     85a:	50 e0       	ldi	r21, 0x00	; 0
     85c:	8a 81       	ldd	r24, Y+2	; 0x02
     85e:	9b 81       	ldd	r25, Y+3	; 0x03
     860:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <memcpy>
     864:	28 a1       	ldd	r18, Y+32	; 0x20
     866:	8a 81       	ldd	r24, Y+2	; 0x02
     868:	9b 81       	ldd	r25, Y+3	; 0x03
     86a:	82 0f       	add	r24, r18
     86c:	91 1d       	adc	r25, r1
     86e:	9b 83       	std	Y+3, r25	; 0x03
     870:	8a 83       	std	Y+2, r24	; 0x02
     872:	2c 81       	ldd	r18, Y+4	; 0x04
     874:	3d 81       	ldd	r19, Y+5	; 0x05
     876:	82 17       	cp	r24, r18
     878:	93 07       	cpc	r25, r19
     87a:	50 f1       	brcs	.+84     	; 0x8d0 <prvCopyDataToQueue+0xa6>
     87c:	88 81       	ld	r24, Y
     87e:	99 81       	ldd	r25, Y+1	; 0x01
     880:	9b 83       	std	Y+3, r25	; 0x03
     882:	8a 83       	std	Y+2, r24	; 0x02
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	29 c0       	rjmp	.+82     	; 0x8da <prvCopyDataToQueue+0xb0>
     888:	50 e0       	ldi	r21, 0x00	; 0
     88a:	8e 81       	ldd	r24, Y+6	; 0x06
     88c:	9f 81       	ldd	r25, Y+7	; 0x07
     88e:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <memcpy>
     892:	88 a1       	ldd	r24, Y+32	; 0x20
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	91 95       	neg	r25
     898:	81 95       	neg	r24
     89a:	91 09       	sbc	r25, r1
     89c:	2e 81       	ldd	r18, Y+6	; 0x06
     89e:	3f 81       	ldd	r19, Y+7	; 0x07
     8a0:	28 0f       	add	r18, r24
     8a2:	39 1f       	adc	r19, r25
     8a4:	3f 83       	std	Y+7, r19	; 0x07
     8a6:	2e 83       	std	Y+6, r18	; 0x06
     8a8:	48 81       	ld	r20, Y
     8aa:	59 81       	ldd	r21, Y+1	; 0x01
     8ac:	24 17       	cp	r18, r20
     8ae:	35 07       	cpc	r19, r21
     8b0:	30 f4       	brcc	.+12     	; 0x8be <prvCopyDataToQueue+0x94>
     8b2:	2c 81       	ldd	r18, Y+4	; 0x04
     8b4:	3d 81       	ldd	r19, Y+5	; 0x05
     8b6:	82 0f       	add	r24, r18
     8b8:	93 1f       	adc	r25, r19
     8ba:	9f 83       	std	Y+7, r25	; 0x07
     8bc:	8e 83       	std	Y+6, r24	; 0x06
     8be:	02 30       	cpi	r16, 0x02	; 2
     8c0:	49 f4       	brne	.+18     	; 0x8d4 <prvCopyDataToQueue+0xaa>
     8c2:	11 23       	and	r17, r17
     8c4:	49 f0       	breq	.+18     	; 0x8d8 <prvCopyDataToQueue+0xae>
     8c6:	11 50       	subi	r17, 0x01	; 1
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	07 c0       	rjmp	.+14     	; 0x8da <prvCopyDataToQueue+0xb0>
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	05 c0       	rjmp	.+10     	; 0x8da <prvCopyDataToQueue+0xb0>
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	03 c0       	rjmp	.+6      	; 0x8da <prvCopyDataToQueue+0xb0>
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	01 c0       	rjmp	.+2      	; 0x8da <prvCopyDataToQueue+0xb0>
     8d8:	80 e0       	ldi	r24, 0x00	; 0
     8da:	1f 5f       	subi	r17, 0xFF	; 255
     8dc:	1e 8f       	std	Y+30, r17	; 0x1e
     8de:	df 91       	pop	r29
     8e0:	cf 91       	pop	r28
     8e2:	1f 91       	pop	r17
     8e4:	0f 91       	pop	r16
     8e6:	08 95       	ret

000008e8 <prvCopyDataFromQueue>:
     8e8:	fc 01       	movw	r30, r24
     8ea:	40 a1       	ldd	r20, Z+32	; 0x20
     8ec:	44 23       	and	r20, r20
     8ee:	a9 f0       	breq	.+42     	; 0x91a <prvCopyDataFromQueue+0x32>
     8f0:	50 e0       	ldi	r21, 0x00	; 0
     8f2:	26 81       	ldd	r18, Z+6	; 0x06
     8f4:	37 81       	ldd	r19, Z+7	; 0x07
     8f6:	24 0f       	add	r18, r20
     8f8:	35 1f       	adc	r19, r21
     8fa:	37 83       	std	Z+7, r19	; 0x07
     8fc:	26 83       	std	Z+6, r18	; 0x06
     8fe:	84 81       	ldd	r24, Z+4	; 0x04
     900:	95 81       	ldd	r25, Z+5	; 0x05
     902:	28 17       	cp	r18, r24
     904:	39 07       	cpc	r19, r25
     906:	20 f0       	brcs	.+8      	; 0x910 <prvCopyDataFromQueue+0x28>
     908:	80 81       	ld	r24, Z
     90a:	91 81       	ldd	r25, Z+1	; 0x01
     90c:	97 83       	std	Z+7, r25	; 0x07
     90e:	86 83       	std	Z+6, r24	; 0x06
     910:	cb 01       	movw	r24, r22
     912:	66 81       	ldd	r22, Z+6	; 0x06
     914:	77 81       	ldd	r23, Z+7	; 0x07
     916:	0c 94 9d 17 	jmp	0x2f3a	; 0x2f3a <memcpy>
     91a:	08 95       	ret

0000091c <prvUnlockQueue>:
     91c:	1f 93       	push	r17
     91e:	cf 93       	push	r28
     920:	df 93       	push	r29
     922:	ec 01       	movw	r28, r24
     924:	0f b6       	in	r0, 0x3f	; 63
     926:	f8 94       	cli
     928:	0f 92       	push	r0
     92a:	1a a1       	ldd	r17, Y+34	; 0x22
     92c:	0a c0       	rjmp	.+20     	; 0x942 <prvUnlockQueue+0x26>
     92e:	8b 89       	ldd	r24, Y+19	; 0x13
     930:	88 23       	and	r24, r24
     932:	49 f0       	breq	.+18     	; 0x946 <prvUnlockQueue+0x2a>
     934:	ce 01       	movw	r24, r28
     936:	43 96       	adiw	r24, 0x13	; 19
     938:	97 d7       	rcall	.+3886   	; 0x1868 <xTaskRemoveFromEventList>
     93a:	81 11       	cpse	r24, r1
     93c:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <vTaskMissedYield>
     940:	11 50       	subi	r17, 0x01	; 1
     942:	11 16       	cp	r1, r17
     944:	a4 f3       	brlt	.-24     	; 0x92e <prvUnlockQueue+0x12>
     946:	8f ef       	ldi	r24, 0xFF	; 255
     948:	8a a3       	std	Y+34, r24	; 0x22
     94a:	0f 90       	pop	r0
     94c:	0f be       	out	0x3f, r0	; 63
     94e:	0f b6       	in	r0, 0x3f	; 63
     950:	f8 94       	cli
     952:	0f 92       	push	r0
     954:	19 a1       	ldd	r17, Y+33	; 0x21
     956:	0a c0       	rjmp	.+20     	; 0x96c <prvUnlockQueue+0x50>
     958:	88 85       	ldd	r24, Y+8	; 0x08
     95a:	88 23       	and	r24, r24
     95c:	49 f0       	breq	.+18     	; 0x970 <prvUnlockQueue+0x54>
     95e:	ce 01       	movw	r24, r28
     960:	08 96       	adiw	r24, 0x08	; 8
     962:	82 d7       	rcall	.+3844   	; 0x1868 <xTaskRemoveFromEventList>
     964:	81 11       	cpse	r24, r1
     966:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <vTaskMissedYield>
     96a:	11 50       	subi	r17, 0x01	; 1
     96c:	11 16       	cp	r1, r17
     96e:	a4 f3       	brlt	.-24     	; 0x958 <prvUnlockQueue+0x3c>
     970:	8f ef       	ldi	r24, 0xFF	; 255
     972:	89 a3       	std	Y+33, r24	; 0x21
     974:	0f 90       	pop	r0
     976:	0f be       	out	0x3f, r0	; 63
     978:	df 91       	pop	r29
     97a:	cf 91       	pop	r28
     97c:	1f 91       	pop	r17
     97e:	08 95       	ret

00000980 <xQueueGenericReset>:
     980:	cf 93       	push	r28
     982:	df 93       	push	r29
     984:	ec 01       	movw	r28, r24
     986:	0f b6       	in	r0, 0x3f	; 63
     988:	f8 94       	cli
     98a:	0f 92       	push	r0
     98c:	e8 81       	ld	r30, Y
     98e:	f9 81       	ldd	r31, Y+1	; 0x01
     990:	8f 8d       	ldd	r24, Y+31	; 0x1f
     992:	28 a1       	ldd	r18, Y+32	; 0x20
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	30 e0       	ldi	r19, 0x00	; 0
     998:	82 9f       	mul	r24, r18
     99a:	a0 01       	movw	r20, r0
     99c:	83 9f       	mul	r24, r19
     99e:	50 0d       	add	r21, r0
     9a0:	92 9f       	mul	r25, r18
     9a2:	50 0d       	add	r21, r0
     9a4:	11 24       	eor	r1, r1
     9a6:	4e 0f       	add	r20, r30
     9a8:	5f 1f       	adc	r21, r31
     9aa:	5d 83       	std	Y+5, r21	; 0x05
     9ac:	4c 83       	std	Y+4, r20	; 0x04
     9ae:	1e 8e       	std	Y+30, r1	; 0x1e
     9b0:	fb 83       	std	Y+3, r31	; 0x03
     9b2:	ea 83       	std	Y+2, r30	; 0x02
     9b4:	01 97       	sbiw	r24, 0x01	; 1
     9b6:	28 9f       	mul	r18, r24
     9b8:	a0 01       	movw	r20, r0
     9ba:	29 9f       	mul	r18, r25
     9bc:	50 0d       	add	r21, r0
     9be:	38 9f       	mul	r19, r24
     9c0:	50 0d       	add	r21, r0
     9c2:	11 24       	eor	r1, r1
     9c4:	cf 01       	movw	r24, r30
     9c6:	84 0f       	add	r24, r20
     9c8:	95 1f       	adc	r25, r21
     9ca:	9f 83       	std	Y+7, r25	; 0x07
     9cc:	8e 83       	std	Y+6, r24	; 0x06
     9ce:	8f ef       	ldi	r24, 0xFF	; 255
     9d0:	89 a3       	std	Y+33, r24	; 0x21
     9d2:	8a a3       	std	Y+34, r24	; 0x22
     9d4:	61 11       	cpse	r22, r1
     9d6:	0a c0       	rjmp	.+20     	; 0x9ec <xQueueGenericReset+0x6c>
     9d8:	88 85       	ldd	r24, Y+8	; 0x08
     9da:	88 23       	and	r24, r24
     9dc:	69 f0       	breq	.+26     	; 0x9f8 <xQueueGenericReset+0x78>
     9de:	ce 01       	movw	r24, r28
     9e0:	08 96       	adiw	r24, 0x08	; 8
     9e2:	42 d7       	rcall	.+3716   	; 0x1868 <xTaskRemoveFromEventList>
     9e4:	88 23       	and	r24, r24
     9e6:	41 f0       	breq	.+16     	; 0x9f8 <xQueueGenericReset+0x78>
     9e8:	3f de       	rcall	.-898    	; 0x668 <vPortYield>
     9ea:	06 c0       	rjmp	.+12     	; 0x9f8 <xQueueGenericReset+0x78>
     9ec:	ce 01       	movw	r24, r28
     9ee:	08 96       	adiw	r24, 0x08	; 8
     9f0:	6d dd       	rcall	.-1318   	; 0x4cc <vListInitialise>
     9f2:	ce 01       	movw	r24, r28
     9f4:	43 96       	adiw	r24, 0x13	; 19
     9f6:	6a dd       	rcall	.-1324   	; 0x4cc <vListInitialise>
     9f8:	0f 90       	pop	r0
     9fa:	0f be       	out	0x3f, r0	; 63
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	df 91       	pop	r29
     a00:	cf 91       	pop	r28
     a02:	08 95       	ret

00000a04 <prvInitialiseNewQueue>:
     a04:	0f 93       	push	r16
     a06:	1f 93       	push	r17
     a08:	f8 01       	movw	r30, r16
     a0a:	61 11       	cpse	r22, r1
     a0c:	03 c0       	rjmp	.+6      	; 0xa14 <prvInitialiseNewQueue+0x10>
     a0e:	11 83       	std	Z+1, r17	; 0x01
     a10:	00 83       	st	Z, r16
     a12:	02 c0       	rjmp	.+4      	; 0xa18 <prvInitialiseNewQueue+0x14>
     a14:	51 83       	std	Z+1, r21	; 0x01
     a16:	40 83       	st	Z, r20
     a18:	87 8f       	std	Z+31, r24	; 0x1f
     a1a:	60 a3       	std	Z+32, r22	; 0x20
     a1c:	61 e0       	ldi	r22, 0x01	; 1
     a1e:	cf 01       	movw	r24, r30
     a20:	af df       	rcall	.-162    	; 0x980 <xQueueGenericReset>
     a22:	1f 91       	pop	r17
     a24:	0f 91       	pop	r16
     a26:	08 95       	ret

00000a28 <xQueueGenericCreate>:
     a28:	df 92       	push	r13
     a2a:	ef 92       	push	r14
     a2c:	ff 92       	push	r15
     a2e:	0f 93       	push	r16
     a30:	1f 93       	push	r17
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
     a36:	f8 2e       	mov	r15, r24
     a38:	e6 2e       	mov	r14, r22
     a3a:	d4 2e       	mov	r13, r20
     a3c:	86 9f       	mul	r24, r22
     a3e:	c0 01       	movw	r24, r0
     a40:	11 24       	eor	r1, r1
     a42:	83 96       	adiw	r24, 0x23	; 35
     a44:	5f dc       	rcall	.-1858   	; 0x304 <pvPortMalloc>
     a46:	ec 01       	movw	r28, r24
     a48:	00 97       	sbiw	r24, 0x00	; 0
     a4a:	41 f0       	breq	.+16     	; 0xa5c <xQueueGenericCreate+0x34>
     a4c:	8c 01       	movw	r16, r24
     a4e:	2d 2d       	mov	r18, r13
     a50:	ac 01       	movw	r20, r24
     a52:	4d 5d       	subi	r20, 0xDD	; 221
     a54:	5f 4f       	sbci	r21, 0xFF	; 255
     a56:	6e 2d       	mov	r22, r14
     a58:	8f 2d       	mov	r24, r15
     a5a:	d4 df       	rcall	.-88     	; 0xa04 <prvInitialiseNewQueue>
     a5c:	ce 01       	movw	r24, r28
     a5e:	df 91       	pop	r29
     a60:	cf 91       	pop	r28
     a62:	1f 91       	pop	r17
     a64:	0f 91       	pop	r16
     a66:	ff 90       	pop	r15
     a68:	ef 90       	pop	r14
     a6a:	df 90       	pop	r13
     a6c:	08 95       	ret

00000a6e <xQueueGenericSend>:
     a6e:	cf 92       	push	r12
     a70:	df 92       	push	r13
     a72:	ef 92       	push	r14
     a74:	ff 92       	push	r15
     a76:	0f 93       	push	r16
     a78:	1f 93       	push	r17
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
     a7e:	cd b7       	in	r28, 0x3d	; 61
     a80:	de b7       	in	r29, 0x3e	; 62
     a82:	29 97       	sbiw	r28, 0x09	; 9
     a84:	0f b6       	in	r0, 0x3f	; 63
     a86:	f8 94       	cli
     a88:	de bf       	out	0x3e, r29	; 62
     a8a:	0f be       	out	0x3f, r0	; 63
     a8c:	cd bf       	out	0x3d, r28	; 61
     a8e:	7c 01       	movw	r14, r24
     a90:	6b 01       	movw	r12, r22
     a92:	2e 83       	std	Y+6, r18	; 0x06
     a94:	3f 83       	std	Y+7, r19	; 0x07
     a96:	48 87       	std	Y+8, r20	; 0x08
     a98:	59 87       	std	Y+9, r21	; 0x09
     a9a:	10 e0       	ldi	r17, 0x00	; 0
     a9c:	0f b6       	in	r0, 0x3f	; 63
     a9e:	f8 94       	cli
     aa0:	0f 92       	push	r0
     aa2:	f7 01       	movw	r30, r14
     aa4:	96 8d       	ldd	r25, Z+30	; 0x1e
     aa6:	87 8d       	ldd	r24, Z+31	; 0x1f
     aa8:	98 17       	cp	r25, r24
     aaa:	10 f0       	brcs	.+4      	; 0xab0 <xQueueGenericSend+0x42>
     aac:	02 30       	cpi	r16, 0x02	; 2
     aae:	a9 f4       	brne	.+42     	; 0xada <xQueueGenericSend+0x6c>
     ab0:	40 2f       	mov	r20, r16
     ab2:	b6 01       	movw	r22, r12
     ab4:	c7 01       	movw	r24, r14
     ab6:	b9 de       	rcall	.-654    	; 0x82a <prvCopyDataToQueue>
     ab8:	f7 01       	movw	r30, r14
     aba:	93 89       	ldd	r25, Z+19	; 0x13
     abc:	99 23       	and	r25, r25
     abe:	39 f0       	breq	.+14     	; 0xace <xQueueGenericSend+0x60>
     ac0:	c7 01       	movw	r24, r14
     ac2:	43 96       	adiw	r24, 0x13	; 19
     ac4:	d1 d6       	rcall	.+3490   	; 0x1868 <xTaskRemoveFromEventList>
     ac6:	88 23       	and	r24, r24
     ac8:	21 f0       	breq	.+8      	; 0xad2 <xQueueGenericSend+0x64>
     aca:	ce dd       	rcall	.-1124   	; 0x668 <vPortYield>
     acc:	02 c0       	rjmp	.+4      	; 0xad2 <xQueueGenericSend+0x64>
     ace:	81 11       	cpse	r24, r1
     ad0:	cb dd       	rcall	.-1130   	; 0x668 <vPortYield>
     ad2:	0f 90       	pop	r0
     ad4:	0f be       	out	0x3f, r0	; 63
     ad6:	81 e0       	ldi	r24, 0x01	; 1
     ad8:	46 c0       	rjmp	.+140    	; 0xb66 <xQueueGenericSend+0xf8>
     ada:	8e 81       	ldd	r24, Y+6	; 0x06
     adc:	9f 81       	ldd	r25, Y+7	; 0x07
     ade:	a8 85       	ldd	r26, Y+8	; 0x08
     ae0:	b9 85       	ldd	r27, Y+9	; 0x09
     ae2:	89 2b       	or	r24, r25
     ae4:	8a 2b       	or	r24, r26
     ae6:	8b 2b       	or	r24, r27
     ae8:	21 f4       	brne	.+8      	; 0xaf2 <xQueueGenericSend+0x84>
     aea:	0f 90       	pop	r0
     aec:	0f be       	out	0x3f, r0	; 63
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	3a c0       	rjmp	.+116    	; 0xb66 <xQueueGenericSend+0xf8>
     af2:	11 11       	cpse	r17, r1
     af4:	04 c0       	rjmp	.+8      	; 0xafe <xQueueGenericSend+0x90>
     af6:	ce 01       	movw	r24, r28
     af8:	01 96       	adiw	r24, 0x01	; 1
     afa:	65 d7       	rcall	.+3786   	; 0x19c6 <vTaskInternalSetTimeOutState>
     afc:	11 e0       	ldi	r17, 0x01	; 1
     afe:	0f 90       	pop	r0
     b00:	0f be       	out	0x3f, r0	; 63
     b02:	b0 d3       	rcall	.+1888   	; 0x1264 <vTaskSuspendAll>
     b04:	0f b6       	in	r0, 0x3f	; 63
     b06:	f8 94       	cli
     b08:	0f 92       	push	r0
     b0a:	f7 01       	movw	r30, r14
     b0c:	81 a1       	ldd	r24, Z+33	; 0x21
     b0e:	8f 3f       	cpi	r24, 0xFF	; 255
     b10:	09 f4       	brne	.+2      	; 0xb14 <xQueueGenericSend+0xa6>
     b12:	11 a2       	std	Z+33, r1	; 0x21
     b14:	f7 01       	movw	r30, r14
     b16:	82 a1       	ldd	r24, Z+34	; 0x22
     b18:	8f 3f       	cpi	r24, 0xFF	; 255
     b1a:	09 f4       	brne	.+2      	; 0xb1e <xQueueGenericSend+0xb0>
     b1c:	12 a2       	std	Z+34, r1	; 0x22
     b1e:	0f 90       	pop	r0
     b20:	0f be       	out	0x3f, r0	; 63
     b22:	be 01       	movw	r22, r28
     b24:	6a 5f       	subi	r22, 0xFA	; 250
     b26:	7f 4f       	sbci	r23, 0xFF	; 255
     b28:	ce 01       	movw	r24, r28
     b2a:	01 96       	adiw	r24, 0x01	; 1
     b2c:	5d d7       	rcall	.+3770   	; 0x19e8 <xTaskCheckForTimeOut>
     b2e:	81 11       	cpse	r24, r1
     b30:	16 c0       	rjmp	.+44     	; 0xb5e <xQueueGenericSend+0xf0>
     b32:	c7 01       	movw	r24, r14
     b34:	6c de       	rcall	.-808    	; 0x80e <prvIsQueueFull>
     b36:	88 23       	and	r24, r24
     b38:	71 f0       	breq	.+28     	; 0xb56 <xQueueGenericSend+0xe8>
     b3a:	4e 81       	ldd	r20, Y+6	; 0x06
     b3c:	5f 81       	ldd	r21, Y+7	; 0x07
     b3e:	68 85       	ldd	r22, Y+8	; 0x08
     b40:	79 85       	ldd	r23, Y+9	; 0x09
     b42:	c7 01       	movw	r24, r14
     b44:	08 96       	adiw	r24, 0x08	; 8
     b46:	37 d6       	rcall	.+3182   	; 0x17b6 <vTaskPlaceOnEventList>
     b48:	c7 01       	movw	r24, r14
     b4a:	e8 de       	rcall	.-560    	; 0x91c <prvUnlockQueue>
     b4c:	cb d4       	rcall	.+2454   	; 0x14e4 <xTaskResumeAll>
     b4e:	81 11       	cpse	r24, r1
     b50:	a5 cf       	rjmp	.-182    	; 0xa9c <xQueueGenericSend+0x2e>
     b52:	8a dd       	rcall	.-1260   	; 0x668 <vPortYield>
     b54:	a3 cf       	rjmp	.-186    	; 0xa9c <xQueueGenericSend+0x2e>
     b56:	c7 01       	movw	r24, r14
     b58:	e1 de       	rcall	.-574    	; 0x91c <prvUnlockQueue>
     b5a:	c4 d4       	rcall	.+2440   	; 0x14e4 <xTaskResumeAll>
     b5c:	9f cf       	rjmp	.-194    	; 0xa9c <xQueueGenericSend+0x2e>
     b5e:	c7 01       	movw	r24, r14
     b60:	dd de       	rcall	.-582    	; 0x91c <prvUnlockQueue>
     b62:	c0 d4       	rcall	.+2432   	; 0x14e4 <xTaskResumeAll>
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	29 96       	adiw	r28, 0x09	; 9
     b68:	0f b6       	in	r0, 0x3f	; 63
     b6a:	f8 94       	cli
     b6c:	de bf       	out	0x3e, r29	; 62
     b6e:	0f be       	out	0x3f, r0	; 63
     b70:	cd bf       	out	0x3d, r28	; 61
     b72:	df 91       	pop	r29
     b74:	cf 91       	pop	r28
     b76:	1f 91       	pop	r17
     b78:	0f 91       	pop	r16
     b7a:	ff 90       	pop	r15
     b7c:	ef 90       	pop	r14
     b7e:	df 90       	pop	r13
     b80:	cf 90       	pop	r12
     b82:	08 95       	ret

00000b84 <xQueueGenericSendFromISR>:
     b84:	ef 92       	push	r14
     b86:	ff 92       	push	r15
     b88:	0f 93       	push	r16
     b8a:	1f 93       	push	r17
     b8c:	cf 93       	push	r28
     b8e:	df 93       	push	r29
     b90:	8a 01       	movw	r16, r20
     b92:	fc 01       	movw	r30, r24
     b94:	56 8d       	ldd	r21, Z+30	; 0x1e
     b96:	37 8d       	ldd	r19, Z+31	; 0x1f
     b98:	53 17       	cp	r21, r19
     b9a:	10 f0       	brcs	.+4      	; 0xba0 <xQueueGenericSendFromISR+0x1c>
     b9c:	22 30       	cpi	r18, 0x02	; 2
     b9e:	f1 f4       	brne	.+60     	; 0xbdc <xQueueGenericSendFromISR+0x58>
     ba0:	42 2f       	mov	r20, r18
     ba2:	78 01       	movw	r14, r16
     ba4:	ec 01       	movw	r28, r24
     ba6:	1a a1       	ldd	r17, Y+34	; 0x22
     ba8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     baa:	ce 01       	movw	r24, r28
     bac:	3e de       	rcall	.-900    	; 0x82a <prvCopyDataToQueue>
     bae:	1f 3f       	cpi	r17, 0xFF	; 255
     bb0:	79 f4       	brne	.+30     	; 0xbd0 <xQueueGenericSendFromISR+0x4c>
     bb2:	8b 89       	ldd	r24, Y+19	; 0x13
     bb4:	88 23       	and	r24, r24
     bb6:	a1 f0       	breq	.+40     	; 0xbe0 <xQueueGenericSendFromISR+0x5c>
     bb8:	ce 01       	movw	r24, r28
     bba:	43 96       	adiw	r24, 0x13	; 19
     bbc:	55 d6       	rcall	.+3242   	; 0x1868 <xTaskRemoveFromEventList>
     bbe:	88 23       	and	r24, r24
     bc0:	89 f0       	breq	.+34     	; 0xbe4 <xQueueGenericSendFromISR+0x60>
     bc2:	e1 14       	cp	r14, r1
     bc4:	f1 04       	cpc	r15, r1
     bc6:	81 f0       	breq	.+32     	; 0xbe8 <xQueueGenericSendFromISR+0x64>
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	f7 01       	movw	r30, r14
     bcc:	80 83       	st	Z, r24
     bce:	0d c0       	rjmp	.+26     	; 0xbea <xQueueGenericSendFromISR+0x66>
     bd0:	ff 24       	eor	r15, r15
     bd2:	f3 94       	inc	r15
     bd4:	f1 0e       	add	r15, r17
     bd6:	fa a2       	std	Y+34, r15	; 0x22
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	07 c0       	rjmp	.+14     	; 0xbea <xQueueGenericSendFromISR+0x66>
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	05 c0       	rjmp	.+10     	; 0xbea <xQueueGenericSendFromISR+0x66>
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	03 c0       	rjmp	.+6      	; 0xbea <xQueueGenericSendFromISR+0x66>
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	01 c0       	rjmp	.+2      	; 0xbea <xQueueGenericSendFromISR+0x66>
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	df 91       	pop	r29
     bec:	cf 91       	pop	r28
     bee:	1f 91       	pop	r17
     bf0:	0f 91       	pop	r16
     bf2:	ff 90       	pop	r15
     bf4:	ef 90       	pop	r14
     bf6:	08 95       	ret

00000bf8 <xQueueReceive>:
     bf8:	cf 92       	push	r12
     bfa:	df 92       	push	r13
     bfc:	ef 92       	push	r14
     bfe:	ff 92       	push	r15
     c00:	0f 93       	push	r16
     c02:	1f 93       	push	r17
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	cd b7       	in	r28, 0x3d	; 61
     c0a:	de b7       	in	r29, 0x3e	; 62
     c0c:	29 97       	sbiw	r28, 0x09	; 9
     c0e:	0f b6       	in	r0, 0x3f	; 63
     c10:	f8 94       	cli
     c12:	de bf       	out	0x3e, r29	; 62
     c14:	0f be       	out	0x3f, r0	; 63
     c16:	cd bf       	out	0x3d, r28	; 61
     c18:	8c 01       	movw	r16, r24
     c1a:	6b 01       	movw	r12, r22
     c1c:	2e 83       	std	Y+6, r18	; 0x06
     c1e:	3f 83       	std	Y+7, r19	; 0x07
     c20:	48 87       	std	Y+8, r20	; 0x08
     c22:	59 87       	std	Y+9, r21	; 0x09
     c24:	e1 2c       	mov	r14, r1
     c26:	0f b6       	in	r0, 0x3f	; 63
     c28:	f8 94       	cli
     c2a:	0f 92       	push	r0
     c2c:	f8 01       	movw	r30, r16
     c2e:	f6 8c       	ldd	r15, Z+30	; 0x1e
     c30:	ff 20       	and	r15, r15
     c32:	91 f0       	breq	.+36     	; 0xc58 <xQueueReceive+0x60>
     c34:	b6 01       	movw	r22, r12
     c36:	c8 01       	movw	r24, r16
     c38:	57 de       	rcall	.-850    	; 0x8e8 <prvCopyDataFromQueue>
     c3a:	fa 94       	dec	r15
     c3c:	f8 01       	movw	r30, r16
     c3e:	f6 8e       	std	Z+30, r15	; 0x1e
     c40:	80 85       	ldd	r24, Z+8	; 0x08
     c42:	88 23       	and	r24, r24
     c44:	29 f0       	breq	.+10     	; 0xc50 <xQueueReceive+0x58>
     c46:	c8 01       	movw	r24, r16
     c48:	08 96       	adiw	r24, 0x08	; 8
     c4a:	0e d6       	rcall	.+3100   	; 0x1868 <xTaskRemoveFromEventList>
     c4c:	81 11       	cpse	r24, r1
     c4e:	0c dd       	rcall	.-1512   	; 0x668 <vPortYield>
     c50:	0f 90       	pop	r0
     c52:	0f be       	out	0x3f, r0	; 63
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	4c c0       	rjmp	.+152    	; 0xcf0 <xQueueReceive+0xf8>
     c58:	8e 81       	ldd	r24, Y+6	; 0x06
     c5a:	9f 81       	ldd	r25, Y+7	; 0x07
     c5c:	a8 85       	ldd	r26, Y+8	; 0x08
     c5e:	b9 85       	ldd	r27, Y+9	; 0x09
     c60:	89 2b       	or	r24, r25
     c62:	8a 2b       	or	r24, r26
     c64:	8b 2b       	or	r24, r27
     c66:	21 f4       	brne	.+8      	; 0xc70 <xQueueReceive+0x78>
     c68:	0f 90       	pop	r0
     c6a:	0f be       	out	0x3f, r0	; 63
     c6c:	80 e0       	ldi	r24, 0x00	; 0
     c6e:	40 c0       	rjmp	.+128    	; 0xcf0 <xQueueReceive+0xf8>
     c70:	e1 10       	cpse	r14, r1
     c72:	05 c0       	rjmp	.+10     	; 0xc7e <xQueueReceive+0x86>
     c74:	ce 01       	movw	r24, r28
     c76:	01 96       	adiw	r24, 0x01	; 1
     c78:	a6 d6       	rcall	.+3404   	; 0x19c6 <vTaskInternalSetTimeOutState>
     c7a:	ee 24       	eor	r14, r14
     c7c:	e3 94       	inc	r14
     c7e:	0f 90       	pop	r0
     c80:	0f be       	out	0x3f, r0	; 63
     c82:	f0 d2       	rcall	.+1504   	; 0x1264 <vTaskSuspendAll>
     c84:	0f b6       	in	r0, 0x3f	; 63
     c86:	f8 94       	cli
     c88:	0f 92       	push	r0
     c8a:	f8 01       	movw	r30, r16
     c8c:	81 a1       	ldd	r24, Z+33	; 0x21
     c8e:	8f 3f       	cpi	r24, 0xFF	; 255
     c90:	09 f4       	brne	.+2      	; 0xc94 <xQueueReceive+0x9c>
     c92:	11 a2       	std	Z+33, r1	; 0x21
     c94:	f8 01       	movw	r30, r16
     c96:	82 a1       	ldd	r24, Z+34	; 0x22
     c98:	8f 3f       	cpi	r24, 0xFF	; 255
     c9a:	09 f4       	brne	.+2      	; 0xc9e <xQueueReceive+0xa6>
     c9c:	12 a2       	std	Z+34, r1	; 0x22
     c9e:	0f 90       	pop	r0
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	be 01       	movw	r22, r28
     ca4:	6a 5f       	subi	r22, 0xFA	; 250
     ca6:	7f 4f       	sbci	r23, 0xFF	; 255
     ca8:	ce 01       	movw	r24, r28
     caa:	01 96       	adiw	r24, 0x01	; 1
     cac:	9d d6       	rcall	.+3386   	; 0x19e8 <xTaskCheckForTimeOut>
     cae:	81 11       	cpse	r24, r1
     cb0:	16 c0       	rjmp	.+44     	; 0xcde <xQueueReceive+0xe6>
     cb2:	c8 01       	movw	r24, r16
     cb4:	9f dd       	rcall	.-1218   	; 0x7f4 <prvIsQueueEmpty>
     cb6:	88 23       	and	r24, r24
     cb8:	71 f0       	breq	.+28     	; 0xcd6 <xQueueReceive+0xde>
     cba:	4e 81       	ldd	r20, Y+6	; 0x06
     cbc:	5f 81       	ldd	r21, Y+7	; 0x07
     cbe:	68 85       	ldd	r22, Y+8	; 0x08
     cc0:	79 85       	ldd	r23, Y+9	; 0x09
     cc2:	c8 01       	movw	r24, r16
     cc4:	43 96       	adiw	r24, 0x13	; 19
     cc6:	77 d5       	rcall	.+2798   	; 0x17b6 <vTaskPlaceOnEventList>
     cc8:	c8 01       	movw	r24, r16
     cca:	28 de       	rcall	.-944    	; 0x91c <prvUnlockQueue>
     ccc:	0b d4       	rcall	.+2070   	; 0x14e4 <xTaskResumeAll>
     cce:	81 11       	cpse	r24, r1
     cd0:	aa cf       	rjmp	.-172    	; 0xc26 <xQueueReceive+0x2e>
     cd2:	ca dc       	rcall	.-1644   	; 0x668 <vPortYield>
     cd4:	a8 cf       	rjmp	.-176    	; 0xc26 <xQueueReceive+0x2e>
     cd6:	c8 01       	movw	r24, r16
     cd8:	21 de       	rcall	.-958    	; 0x91c <prvUnlockQueue>
     cda:	04 d4       	rcall	.+2056   	; 0x14e4 <xTaskResumeAll>
     cdc:	a4 cf       	rjmp	.-184    	; 0xc26 <xQueueReceive+0x2e>
     cde:	c8 01       	movw	r24, r16
     ce0:	1d de       	rcall	.-966    	; 0x91c <prvUnlockQueue>
     ce2:	00 d4       	rcall	.+2048   	; 0x14e4 <xTaskResumeAll>
     ce4:	c8 01       	movw	r24, r16
     ce6:	86 dd       	rcall	.-1268   	; 0x7f4 <prvIsQueueEmpty>
     ce8:	88 23       	and	r24, r24
     cea:	09 f4       	brne	.+2      	; 0xcee <xQueueReceive+0xf6>
     cec:	9c cf       	rjmp	.-200    	; 0xc26 <xQueueReceive+0x2e>
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	29 96       	adiw	r28, 0x09	; 9
     cf2:	0f b6       	in	r0, 0x3f	; 63
     cf4:	f8 94       	cli
     cf6:	de bf       	out	0x3e, r29	; 62
     cf8:	0f be       	out	0x3f, r0	; 63
     cfa:	cd bf       	out	0x3d, r28	; 61
     cfc:	df 91       	pop	r29
     cfe:	cf 91       	pop	r28
     d00:	1f 91       	pop	r17
     d02:	0f 91       	pop	r16
     d04:	ff 90       	pop	r15
     d06:	ef 90       	pop	r14
     d08:	df 90       	pop	r13
     d0a:	cf 90       	pop	r12
     d0c:	08 95       	ret

00000d0e <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     d0e:	cf 93       	push	r28
     d10:	df 93       	push	r29
     d12:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     d14:	0f b6       	in	r0, 0x3f	; 63
     d16:	f8 94       	cli
     d18:	0f 92       	push	r0
     d1a:	89 a1       	ldd	r24, Y+33	; 0x21
     d1c:	8f 3f       	cpi	r24, 0xFF	; 255
     d1e:	09 f4       	brne	.+2      	; 0xd22 <vQueueWaitForMessageRestricted+0x14>
     d20:	19 a2       	std	Y+33, r1	; 0x21
     d22:	8a a1       	ldd	r24, Y+34	; 0x22
     d24:	8f 3f       	cpi	r24, 0xFF	; 255
     d26:	09 f4       	brne	.+2      	; 0xd2a <vQueueWaitForMessageRestricted+0x1c>
     d28:	1a a2       	std	Y+34, r1	; 0x22
     d2a:	0f 90       	pop	r0
     d2c:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     d2e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d30:	81 11       	cpse	r24, r1
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     d34:	ce 01       	movw	r24, r28
     d36:	43 96       	adiw	r24, 0x13	; 19
     d38:	55 d5       	rcall	.+2730   	; 0x17e4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     d3a:	ce 01       	movw	r24, r28
     d3c:	ef dd       	rcall	.-1058   	; 0x91c <prvUnlockQueue>
    }
     d3e:	df 91       	pop	r29
     d40:	cf 91       	pop	r28
     d42:	08 95       	ret

00000d44 <prvResetNextTaskUnblockTime>:
     d44:	e0 91 5f 0c 	lds	r30, 0x0C5F	; 0x800c5f <pxDelayedTaskList>
     d48:	f0 91 60 0c 	lds	r31, 0x0C60	; 0x800c60 <pxDelayedTaskList+0x1>
     d4c:	80 81       	ld	r24, Z
     d4e:	81 11       	cpse	r24, r1
     d50:	0c c0       	rjmp	.+24     	; 0xd6a <prvResetNextTaskUnblockTime+0x26>
     d52:	8f ef       	ldi	r24, 0xFF	; 255
     d54:	9f ef       	ldi	r25, 0xFF	; 255
     d56:	dc 01       	movw	r26, r24
     d58:	80 93 29 0c 	sts	0x0C29, r24	; 0x800c29 <xNextTaskUnblockTime>
     d5c:	90 93 2a 0c 	sts	0x0C2A, r25	; 0x800c2a <xNextTaskUnblockTime+0x1>
     d60:	a0 93 2b 0c 	sts	0x0C2B, r26	; 0x800c2b <xNextTaskUnblockTime+0x2>
     d64:	b0 93 2c 0c 	sts	0x0C2C, r27	; 0x800c2c <xNextTaskUnblockTime+0x3>
     d68:	08 95       	ret
     d6a:	e0 91 5f 0c 	lds	r30, 0x0C5F	; 0x800c5f <pxDelayedTaskList>
     d6e:	f0 91 60 0c 	lds	r31, 0x0C60	; 0x800c60 <pxDelayedTaskList+0x1>
     d72:	07 80       	ldd	r0, Z+7	; 0x07
     d74:	f0 85       	ldd	r31, Z+8	; 0x08
     d76:	e0 2d       	mov	r30, r0
     d78:	80 81       	ld	r24, Z
     d7a:	91 81       	ldd	r25, Z+1	; 0x01
     d7c:	a2 81       	ldd	r26, Z+2	; 0x02
     d7e:	b3 81       	ldd	r27, Z+3	; 0x03
     d80:	80 93 29 0c 	sts	0x0C29, r24	; 0x800c29 <xNextTaskUnblockTime>
     d84:	90 93 2a 0c 	sts	0x0C2A, r25	; 0x800c2a <xNextTaskUnblockTime+0x1>
     d88:	a0 93 2b 0c 	sts	0x0C2B, r26	; 0x800c2b <xNextTaskUnblockTime+0x2>
     d8c:	b0 93 2c 0c 	sts	0x0C2C, r27	; 0x800c2c <xNextTaskUnblockTime+0x3>
     d90:	08 95       	ret

00000d92 <prvDeleteTCB>:
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
     d96:	ec 01       	movw	r28, r24
     d98:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d9c:	5b db       	rcall	.-2378   	; 0x454 <vPortFree>
     d9e:	ce 01       	movw	r24, r28
     da0:	59 db       	rcall	.-2382   	; 0x454 <vPortFree>
     da2:	df 91       	pop	r29
     da4:	cf 91       	pop	r28
     da6:	08 95       	ret

00000da8 <prvInitialiseNewTask>:
     da8:	4f 92       	push	r4
     daa:	5f 92       	push	r5
     dac:	6f 92       	push	r6
     dae:	7f 92       	push	r7
     db0:	8f 92       	push	r8
     db2:	9f 92       	push	r9
     db4:	af 92       	push	r10
     db6:	bf 92       	push	r11
     db8:	cf 92       	push	r12
     dba:	df 92       	push	r13
     dbc:	ef 92       	push	r14
     dbe:	ff 92       	push	r15
     dc0:	0f 93       	push	r16
     dc2:	cf 93       	push	r28
     dc4:	df 93       	push	r29
     dc6:	2c 01       	movw	r4, r24
     dc8:	5b 01       	movw	r10, r22
     dca:	4a 01       	movw	r8, r20
     dcc:	39 01       	movw	r6, r18
     dce:	e6 01       	movw	r28, r12
     dd0:	65 ea       	ldi	r22, 0xA5	; 165
     dd2:	70 e0       	ldi	r23, 0x00	; 0
     dd4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dd6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dd8:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <memset>
     ddc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dde:	9c 8d       	ldd	r25, Y+28	; 0x1c
     de0:	21 e0       	ldi	r18, 0x01	; 1
     de2:	82 1a       	sub	r8, r18
     de4:	91 08       	sbc	r9, r1
     de6:	88 0e       	add	r8, r24
     de8:	99 1e       	adc	r9, r25
     dea:	a1 14       	cp	r10, r1
     dec:	b1 04       	cpc	r11, r1
     dee:	89 f4       	brne	.+34     	; 0xe12 <prvInitialiseNewTask+0x6a>
     df0:	15 c0       	rjmp	.+42     	; 0xe1c <prvInitialiseNewTask+0x74>
     df2:	82 2f       	mov	r24, r18
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	f5 01       	movw	r30, r10
     df8:	e8 0f       	add	r30, r24
     dfa:	f9 1f       	adc	r31, r25
     dfc:	30 81       	ld	r19, Z
     dfe:	de 01       	movw	r26, r28
     e00:	a8 0f       	add	r26, r24
     e02:	b9 1f       	adc	r27, r25
     e04:	5d 96       	adiw	r26, 0x1d	; 29
     e06:	3c 93       	st	X, r19
     e08:	80 81       	ld	r24, Z
     e0a:	88 23       	and	r24, r24
     e0c:	29 f0       	breq	.+10     	; 0xe18 <prvInitialiseNewTask+0x70>
     e0e:	2f 5f       	subi	r18, 0xFF	; 255
     e10:	01 c0       	rjmp	.+2      	; 0xe14 <prvInitialiseNewTask+0x6c>
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	20 31       	cpi	r18, 0x10	; 16
     e16:	68 f3       	brcs	.-38     	; 0xdf2 <prvInitialiseNewTask+0x4a>
     e18:	1c a6       	std	Y+44, r1	; 0x2c
     e1a:	01 c0       	rjmp	.+2      	; 0xe1e <prvInitialiseNewTask+0x76>
     e1c:	1d 8e       	std	Y+29, r1	; 0x1d
     e1e:	0a 30       	cpi	r16, 0x0A	; 10
     e20:	08 f0       	brcs	.+2      	; 0xe24 <prvInitialiseNewTask+0x7c>
     e22:	09 e0       	ldi	r16, 0x09	; 9
     e24:	0a 8f       	std	Y+26, r16	; 0x1a
     e26:	0d a7       	std	Y+45, r16	; 0x2d
     e28:	1e a6       	std	Y+46, r1	; 0x2e
     e2a:	ce 01       	movw	r24, r28
     e2c:	02 96       	adiw	r24, 0x02	; 2
     e2e:	5f db       	rcall	.-2370   	; 0x4ee <vListInitialiseItem>
     e30:	ce 01       	movw	r24, r28
     e32:	0e 96       	adiw	r24, 0x0e	; 14
     e34:	5c db       	rcall	.-2376   	; 0x4ee <vListInitialiseItem>
     e36:	db 87       	std	Y+11, r29	; 0x0b
     e38:	ca 87       	std	Y+10, r28	; 0x0a
     e3a:	8a e0       	ldi	r24, 0x0A	; 10
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	a0 e0       	ldi	r26, 0x00	; 0
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	80 1b       	sub	r24, r16
     e44:	91 09       	sbc	r25, r1
     e46:	a1 09       	sbc	r26, r1
     e48:	b1 09       	sbc	r27, r1
     e4a:	8e 87       	std	Y+14, r24	; 0x0e
     e4c:	9f 87       	std	Y+15, r25	; 0x0f
     e4e:	a8 8b       	std	Y+16, r26	; 0x10
     e50:	b9 8b       	std	Y+17, r27	; 0x11
     e52:	df 8b       	std	Y+23, r29	; 0x17
     e54:	ce 8b       	std	Y+22, r28	; 0x16
     e56:	18 aa       	std	Y+48, r1	; 0x30
     e58:	1f a6       	std	Y+47, r1	; 0x2f
     e5a:	84 e0       	ldi	r24, 0x04	; 4
     e5c:	fe 01       	movw	r30, r28
     e5e:	f1 96       	adiw	r30, 0x31	; 49
     e60:	df 01       	movw	r26, r30
     e62:	1d 92       	st	X+, r1
     e64:	8a 95       	dec	r24
     e66:	e9 f7       	brne	.-6      	; 0xe62 <prvInitialiseNewTask+0xba>
     e68:	1d aa       	std	Y+53, r1	; 0x35
     e6a:	a3 01       	movw	r20, r6
     e6c:	b2 01       	movw	r22, r4
     e6e:	c4 01       	movw	r24, r8
     e70:	b2 db       	rcall	.-2204   	; 0x5d6 <pxPortInitialiseStack>
     e72:	99 83       	std	Y+1, r25	; 0x01
     e74:	88 83       	st	Y, r24
     e76:	e1 14       	cp	r14, r1
     e78:	f1 04       	cpc	r15, r1
     e7a:	19 f0       	breq	.+6      	; 0xe82 <prvInitialiseNewTask+0xda>
     e7c:	f7 01       	movw	r30, r14
     e7e:	d1 83       	std	Z+1, r29	; 0x01
     e80:	c0 83       	st	Z, r28
     e82:	df 91       	pop	r29
     e84:	cf 91       	pop	r28
     e86:	0f 91       	pop	r16
     e88:	ff 90       	pop	r15
     e8a:	ef 90       	pop	r14
     e8c:	df 90       	pop	r13
     e8e:	cf 90       	pop	r12
     e90:	bf 90       	pop	r11
     e92:	af 90       	pop	r10
     e94:	9f 90       	pop	r9
     e96:	8f 90       	pop	r8
     e98:	7f 90       	pop	r7
     e9a:	6f 90       	pop	r6
     e9c:	5f 90       	pop	r5
     e9e:	4f 90       	pop	r4
     ea0:	08 95       	ret

00000ea2 <prvInitialiseTaskLists>:
     ea2:	cf 93       	push	r28
     ea4:	c0 e0       	ldi	r28, 0x00	; 0
     ea6:	08 c0       	rjmp	.+16     	; 0xeb8 <prvInitialiseTaskLists+0x16>
     ea8:	2b e0       	ldi	r18, 0x0B	; 11
     eaa:	c2 9f       	mul	r28, r18
     eac:	c0 01       	movw	r24, r0
     eae:	11 24       	eor	r1, r1
     eb0:	89 58       	subi	r24, 0x89	; 137
     eb2:	93 4f       	sbci	r25, 0xF3	; 243
     eb4:	0b db       	rcall	.-2538   	; 0x4cc <vListInitialise>
     eb6:	cf 5f       	subi	r28, 0xFF	; 255
     eb8:	ca 30       	cpi	r28, 0x0A	; 10
     eba:	b0 f3       	brcs	.-20     	; 0xea8 <prvInitialiseTaskLists+0x6>
     ebc:	8c e6       	ldi	r24, 0x6C	; 108
     ebe:	9c e0       	ldi	r25, 0x0C	; 12
     ec0:	05 db       	rcall	.-2550   	; 0x4cc <vListInitialise>
     ec2:	81 e6       	ldi	r24, 0x61	; 97
     ec4:	9c e0       	ldi	r25, 0x0C	; 12
     ec6:	02 db       	rcall	.-2556   	; 0x4cc <vListInitialise>
     ec8:	82 e5       	ldi	r24, 0x52	; 82
     eca:	9c e0       	ldi	r25, 0x0C	; 12
     ecc:	ff da       	rcall	.-2562   	; 0x4cc <vListInitialise>
     ece:	87 e4       	ldi	r24, 0x47	; 71
     ed0:	9c e0       	ldi	r25, 0x0C	; 12
     ed2:	fc da       	rcall	.-2568   	; 0x4cc <vListInitialise>
     ed4:	8b e3       	ldi	r24, 0x3B	; 59
     ed6:	9c e0       	ldi	r25, 0x0C	; 12
     ed8:	f9 da       	rcall	.-2574   	; 0x4cc <vListInitialise>
     eda:	8c e6       	ldi	r24, 0x6C	; 108
     edc:	9c e0       	ldi	r25, 0x0C	; 12
     ede:	90 93 60 0c 	sts	0x0C60, r25	; 0x800c60 <pxDelayedTaskList+0x1>
     ee2:	80 93 5f 0c 	sts	0x0C5F, r24	; 0x800c5f <pxDelayedTaskList>
     ee6:	81 e6       	ldi	r24, 0x61	; 97
     ee8:	9c e0       	ldi	r25, 0x0C	; 12
     eea:	90 93 5e 0c 	sts	0x0C5E, r25	; 0x800c5e <pxOverflowDelayedTaskList+0x1>
     eee:	80 93 5d 0c 	sts	0x0C5D, r24	; 0x800c5d <pxOverflowDelayedTaskList>
     ef2:	cf 91       	pop	r28
     ef4:	08 95       	ret

00000ef6 <prvAddNewTaskToReadyList>:
     ef6:	cf 93       	push	r28
     ef8:	df 93       	push	r29
     efa:	ec 01       	movw	r28, r24
     efc:	0f b6       	in	r0, 0x3f	; 63
     efe:	f8 94       	cli
     f00:	0f 92       	push	r0
     f02:	80 91 3a 0c 	lds	r24, 0x0C3A	; 0x800c3a <uxCurrentNumberOfTasks>
     f06:	8f 5f       	subi	r24, 0xFF	; 255
     f08:	80 93 3a 0c 	sts	0x0C3A, r24	; 0x800c3a <uxCurrentNumberOfTasks>
     f0c:	80 91 e5 0c 	lds	r24, 0x0CE5	; 0x800ce5 <pxCurrentTCB>
     f10:	90 91 e6 0c 	lds	r25, 0x0CE6	; 0x800ce6 <pxCurrentTCB+0x1>
     f14:	89 2b       	or	r24, r25
     f16:	51 f4       	brne	.+20     	; 0xf2c <prvAddNewTaskToReadyList+0x36>
     f18:	d0 93 e6 0c 	sts	0x0CE6, r29	; 0x800ce6 <pxCurrentTCB+0x1>
     f1c:	c0 93 e5 0c 	sts	0x0CE5, r28	; 0x800ce5 <pxCurrentTCB>
     f20:	80 91 3a 0c 	lds	r24, 0x0C3A	; 0x800c3a <uxCurrentNumberOfTasks>
     f24:	81 30       	cpi	r24, 0x01	; 1
     f26:	91 f4       	brne	.+36     	; 0xf4c <prvAddNewTaskToReadyList+0x56>
     f28:	bc df       	rcall	.-136    	; 0xea2 <prvInitialiseTaskLists>
     f2a:	10 c0       	rjmp	.+32     	; 0xf4c <prvAddNewTaskToReadyList+0x56>
     f2c:	80 91 34 0c 	lds	r24, 0x0C34	; 0x800c34 <xSchedulerRunning>
     f30:	81 11       	cpse	r24, r1
     f32:	0c c0       	rjmp	.+24     	; 0xf4c <prvAddNewTaskToReadyList+0x56>
     f34:	e0 91 e5 0c 	lds	r30, 0x0CE5	; 0x800ce5 <pxCurrentTCB>
     f38:	f0 91 e6 0c 	lds	r31, 0x0CE6	; 0x800ce6 <pxCurrentTCB+0x1>
     f3c:	92 8d       	ldd	r25, Z+26	; 0x1a
     f3e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f40:	89 17       	cp	r24, r25
     f42:	20 f0       	brcs	.+8      	; 0xf4c <prvAddNewTaskToReadyList+0x56>
     f44:	d0 93 e6 0c 	sts	0x0CE6, r29	; 0x800ce6 <pxCurrentTCB+0x1>
     f48:	c0 93 e5 0c 	sts	0x0CE5, r28	; 0x800ce5 <pxCurrentTCB>
     f4c:	80 91 2d 0c 	lds	r24, 0x0C2D	; 0x800c2d <uxTaskNumber>
     f50:	8f 5f       	subi	r24, 0xFF	; 255
     f52:	80 93 2d 0c 	sts	0x0C2D, r24	; 0x800c2d <uxTaskNumber>
     f56:	ea 8d       	ldd	r30, Y+26	; 0x1a
     f58:	80 91 35 0c 	lds	r24, 0x0C35	; 0x800c35 <uxTopReadyPriority>
     f5c:	8e 17       	cp	r24, r30
     f5e:	10 f4       	brcc	.+4      	; 0xf64 <prvAddNewTaskToReadyList+0x6e>
     f60:	e0 93 35 0c 	sts	0x0C35, r30	; 0x800c35 <uxTopReadyPriority>
     f64:	8b e0       	ldi	r24, 0x0B	; 11
     f66:	8e 9f       	mul	r24, r30
     f68:	f0 01       	movw	r30, r0
     f6a:	11 24       	eor	r1, r1
     f6c:	e9 58       	subi	r30, 0x89	; 137
     f6e:	f3 4f       	sbci	r31, 0xF3	; 243
     f70:	01 80       	ldd	r0, Z+1	; 0x01
     f72:	f2 81       	ldd	r31, Z+2	; 0x02
     f74:	e0 2d       	mov	r30, r0
     f76:	ff 83       	std	Y+7, r31	; 0x07
     f78:	ee 83       	std	Y+6, r30	; 0x06
     f7a:	26 81       	ldd	r18, Z+6	; 0x06
     f7c:	37 81       	ldd	r19, Z+7	; 0x07
     f7e:	39 87       	std	Y+9, r19	; 0x09
     f80:	28 87       	std	Y+8, r18	; 0x08
     f82:	a6 81       	ldd	r26, Z+6	; 0x06
     f84:	b7 81       	ldd	r27, Z+7	; 0x07
     f86:	9e 01       	movw	r18, r28
     f88:	2e 5f       	subi	r18, 0xFE	; 254
     f8a:	3f 4f       	sbci	r19, 0xFF	; 255
     f8c:	15 96       	adiw	r26, 0x05	; 5
     f8e:	3c 93       	st	X, r19
     f90:	2e 93       	st	-X, r18
     f92:	14 97       	sbiw	r26, 0x04	; 4
     f94:	37 83       	std	Z+7, r19	; 0x07
     f96:	26 83       	std	Z+6, r18	; 0x06
     f98:	ea 8d       	ldd	r30, Y+26	; 0x1a
     f9a:	8e 9f       	mul	r24, r30
     f9c:	f0 01       	movw	r30, r0
     f9e:	11 24       	eor	r1, r1
     fa0:	e9 58       	subi	r30, 0x89	; 137
     fa2:	f3 4f       	sbci	r31, 0xF3	; 243
     fa4:	fd 87       	std	Y+13, r31	; 0x0d
     fa6:	ec 87       	std	Y+12, r30	; 0x0c
     fa8:	80 81       	ld	r24, Z
     faa:	8f 5f       	subi	r24, 0xFF	; 255
     fac:	80 83       	st	Z, r24
     fae:	0f 90       	pop	r0
     fb0:	0f be       	out	0x3f, r0	; 63
     fb2:	80 91 34 0c 	lds	r24, 0x0C34	; 0x800c34 <xSchedulerRunning>
     fb6:	88 23       	and	r24, r24
     fb8:	49 f0       	breq	.+18     	; 0xfcc <prvAddNewTaskToReadyList+0xd6>
     fba:	e0 91 e5 0c 	lds	r30, 0x0CE5	; 0x800ce5 <pxCurrentTCB>
     fbe:	f0 91 e6 0c 	lds	r31, 0x0CE6	; 0x800ce6 <pxCurrentTCB+0x1>
     fc2:	92 8d       	ldd	r25, Z+26	; 0x1a
     fc4:	8a 8d       	ldd	r24, Y+26	; 0x1a
     fc6:	98 17       	cp	r25, r24
     fc8:	08 f4       	brcc	.+2      	; 0xfcc <prvAddNewTaskToReadyList+0xd6>
     fca:	4e db       	rcall	.-2404   	; 0x668 <vPortYield>
     fcc:	df 91       	pop	r29
     fce:	cf 91       	pop	r28
     fd0:	08 95       	ret

00000fd2 <prvCheckTasksWaitingTermination>:
     fd2:	cf 93       	push	r28
     fd4:	df 93       	push	r29
     fd6:	1a c0       	rjmp	.+52     	; 0x100c <__EEPROM_REGION_LENGTH__+0xc>
     fd8:	0f b6       	in	r0, 0x3f	; 63
     fda:	f8 94       	cli
     fdc:	0f 92       	push	r0
     fde:	e0 91 4e 0c 	lds	r30, 0x0C4E	; 0x800c4e <xTasksWaitingTermination+0x7>
     fe2:	f0 91 4f 0c 	lds	r31, 0x0C4F	; 0x800c4f <xTasksWaitingTermination+0x8>
     fe6:	c0 85       	ldd	r28, Z+8	; 0x08
     fe8:	d1 85       	ldd	r29, Z+9	; 0x09
     fea:	ce 01       	movw	r24, r28
     fec:	02 96       	adiw	r24, 0x02	; 2
     fee:	c0 da       	rcall	.-2688   	; 0x570 <uxListRemove>
     ff0:	80 91 3a 0c 	lds	r24, 0x0C3A	; 0x800c3a <uxCurrentNumberOfTasks>
     ff4:	81 50       	subi	r24, 0x01	; 1
     ff6:	80 93 3a 0c 	sts	0x0C3A, r24	; 0x800c3a <uxCurrentNumberOfTasks>
     ffa:	80 91 46 0c 	lds	r24, 0x0C46	; 0x800c46 <uxDeletedTasksWaitingCleanUp>
     ffe:	81 50       	subi	r24, 0x01	; 1
    1000:	80 93 46 0c 	sts	0x0C46, r24	; 0x800c46 <uxDeletedTasksWaitingCleanUp>
    1004:	0f 90       	pop	r0
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	ce 01       	movw	r24, r28
    100a:	c3 de       	rcall	.-634    	; 0xd92 <prvDeleteTCB>
    100c:	80 91 46 0c 	lds	r24, 0x0C46	; 0x800c46 <uxDeletedTasksWaitingCleanUp>
    1010:	81 11       	cpse	r24, r1
    1012:	e2 cf       	rjmp	.-60     	; 0xfd8 <prvCheckTasksWaitingTermination+0x6>
    1014:	df 91       	pop	r29
    1016:	cf 91       	pop	r28
    1018:	08 95       	ret

0000101a <prvAddCurrentTaskToDelayedList>:
    101a:	8f 92       	push	r8
    101c:	9f 92       	push	r9
    101e:	af 92       	push	r10
    1020:	bf 92       	push	r11
    1022:	cf 92       	push	r12
    1024:	df 92       	push	r13
    1026:	ef 92       	push	r14
    1028:	ff 92       	push	r15
    102a:	cf 93       	push	r28
    102c:	df 93       	push	r29
    102e:	6b 01       	movw	r12, r22
    1030:	7c 01       	movw	r14, r24
    1032:	c4 2f       	mov	r28, r20
    1034:	80 90 36 0c 	lds	r8, 0x0C36	; 0x800c36 <xTickCount>
    1038:	90 90 37 0c 	lds	r9, 0x0C37	; 0x800c37 <xTickCount+0x1>
    103c:	a0 90 38 0c 	lds	r10, 0x0C38	; 0x800c38 <xTickCount+0x2>
    1040:	b0 90 39 0c 	lds	r11, 0x0C39	; 0x800c39 <xTickCount+0x3>
    1044:	80 91 e5 0c 	lds	r24, 0x0CE5	; 0x800ce5 <pxCurrentTCB>
    1048:	90 91 e6 0c 	lds	r25, 0x0CE6	; 0x800ce6 <pxCurrentTCB+0x1>
    104c:	02 96       	adiw	r24, 0x02	; 2
    104e:	90 da       	rcall	.-2784   	; 0x570 <uxListRemove>
    1050:	8f ef       	ldi	r24, 0xFF	; 255
    1052:	c8 16       	cp	r12, r24
    1054:	d8 06       	cpc	r13, r24
    1056:	e8 06       	cpc	r14, r24
    1058:	f8 06       	cpc	r15, r24
    105a:	b1 f5       	brne	.+108    	; 0x10c8 <prvAddCurrentTaskToDelayedList+0xae>
    105c:	cc 23       	and	r28, r28
    105e:	a1 f1       	breq	.+104    	; 0x10c8 <prvAddCurrentTaskToDelayedList+0xae>
    1060:	eb e3       	ldi	r30, 0x3B	; 59
    1062:	fc e0       	ldi	r31, 0x0C	; 12
    1064:	a1 81       	ldd	r26, Z+1	; 0x01
    1066:	b2 81       	ldd	r27, Z+2	; 0x02
    1068:	c0 91 e5 0c 	lds	r28, 0x0CE5	; 0x800ce5 <pxCurrentTCB>
    106c:	d0 91 e6 0c 	lds	r29, 0x0CE6	; 0x800ce6 <pxCurrentTCB+0x1>
    1070:	bf 83       	std	Y+7, r27	; 0x07
    1072:	ae 83       	std	Y+6, r26	; 0x06
    1074:	c0 91 e5 0c 	lds	r28, 0x0CE5	; 0x800ce5 <pxCurrentTCB>
    1078:	d0 91 e6 0c 	lds	r29, 0x0CE6	; 0x800ce6 <pxCurrentTCB+0x1>
    107c:	16 96       	adiw	r26, 0x06	; 6
    107e:	8d 91       	ld	r24, X+
    1080:	9c 91       	ld	r25, X
    1082:	17 97       	sbiw	r26, 0x07	; 7
    1084:	99 87       	std	Y+9, r25	; 0x09
    1086:	88 87       	std	Y+8, r24	; 0x08
    1088:	16 96       	adiw	r26, 0x06	; 6
    108a:	cd 91       	ld	r28, X+
    108c:	dc 91       	ld	r29, X
    108e:	17 97       	sbiw	r26, 0x07	; 7
    1090:	80 91 e5 0c 	lds	r24, 0x0CE5	; 0x800ce5 <pxCurrentTCB>
    1094:	90 91 e6 0c 	lds	r25, 0x0CE6	; 0x800ce6 <pxCurrentTCB+0x1>
    1098:	02 96       	adiw	r24, 0x02	; 2
    109a:	9d 83       	std	Y+5, r25	; 0x05
    109c:	8c 83       	std	Y+4, r24	; 0x04
    109e:	80 91 e5 0c 	lds	r24, 0x0CE5	; 0x800ce5 <pxCurrentTCB>
    10a2:	90 91 e6 0c 	lds	r25, 0x0CE6	; 0x800ce6 <pxCurrentTCB+0x1>
    10a6:	02 96       	adiw	r24, 0x02	; 2
    10a8:	17 96       	adiw	r26, 0x07	; 7
    10aa:	9c 93       	st	X, r25
    10ac:	8e 93       	st	-X, r24
    10ae:	16 97       	sbiw	r26, 0x06	; 6
    10b0:	a0 91 e5 0c 	lds	r26, 0x0CE5	; 0x800ce5 <pxCurrentTCB>
    10b4:	b0 91 e6 0c 	lds	r27, 0x0CE6	; 0x800ce6 <pxCurrentTCB+0x1>
    10b8:	1d 96       	adiw	r26, 0x0d	; 13
    10ba:	fc 93       	st	X, r31
    10bc:	ee 93       	st	-X, r30
    10be:	1c 97       	sbiw	r26, 0x0c	; 12
    10c0:	80 81       	ld	r24, Z
    10c2:	8f 5f       	subi	r24, 0xFF	; 255
    10c4:	80 83       	st	Z, r24
    10c6:	3d c0       	rjmp	.+122    	; 0x1142 <prvAddCurrentTaskToDelayedList+0x128>
    10c8:	c8 0c       	add	r12, r8
    10ca:	d9 1c       	adc	r13, r9
    10cc:	ea 1c       	adc	r14, r10
    10ce:	fb 1c       	adc	r15, r11
    10d0:	e0 91 e5 0c 	lds	r30, 0x0CE5	; 0x800ce5 <pxCurrentTCB>
    10d4:	f0 91 e6 0c 	lds	r31, 0x0CE6	; 0x800ce6 <pxCurrentTCB+0x1>
    10d8:	c2 82       	std	Z+2, r12	; 0x02
    10da:	d3 82       	std	Z+3, r13	; 0x03
    10dc:	e4 82       	std	Z+4, r14	; 0x04
    10de:	f5 82       	std	Z+5, r15	; 0x05
    10e0:	c8 14       	cp	r12, r8
    10e2:	d9 04       	cpc	r13, r9
    10e4:	ea 04       	cpc	r14, r10
    10e6:	fb 04       	cpc	r15, r11
    10e8:	60 f4       	brcc	.+24     	; 0x1102 <prvAddCurrentTaskToDelayedList+0xe8>
    10ea:	60 91 e5 0c 	lds	r22, 0x0CE5	; 0x800ce5 <pxCurrentTCB>
    10ee:	70 91 e6 0c 	lds	r23, 0x0CE6	; 0x800ce6 <pxCurrentTCB+0x1>
    10f2:	80 91 5d 0c 	lds	r24, 0x0C5D	; 0x800c5d <pxOverflowDelayedTaskList>
    10f6:	90 91 5e 0c 	lds	r25, 0x0C5E	; 0x800c5e <pxOverflowDelayedTaskList+0x1>
    10fa:	6e 5f       	subi	r22, 0xFE	; 254
    10fc:	7f 4f       	sbci	r23, 0xFF	; 255
    10fe:	fb d9       	rcall	.-3082   	; 0x4f6 <vListInsert>
    1100:	20 c0       	rjmp	.+64     	; 0x1142 <prvAddCurrentTaskToDelayedList+0x128>
    1102:	60 91 e5 0c 	lds	r22, 0x0CE5	; 0x800ce5 <pxCurrentTCB>
    1106:	70 91 e6 0c 	lds	r23, 0x0CE6	; 0x800ce6 <pxCurrentTCB+0x1>
    110a:	80 91 5f 0c 	lds	r24, 0x0C5F	; 0x800c5f <pxDelayedTaskList>
    110e:	90 91 60 0c 	lds	r25, 0x0C60	; 0x800c60 <pxDelayedTaskList+0x1>
    1112:	6e 5f       	subi	r22, 0xFE	; 254
    1114:	7f 4f       	sbci	r23, 0xFF	; 255
    1116:	ef d9       	rcall	.-3106   	; 0x4f6 <vListInsert>
    1118:	80 91 29 0c 	lds	r24, 0x0C29	; 0x800c29 <xNextTaskUnblockTime>
    111c:	90 91 2a 0c 	lds	r25, 0x0C2A	; 0x800c2a <xNextTaskUnblockTime+0x1>
    1120:	a0 91 2b 0c 	lds	r26, 0x0C2B	; 0x800c2b <xNextTaskUnblockTime+0x2>
    1124:	b0 91 2c 0c 	lds	r27, 0x0C2C	; 0x800c2c <xNextTaskUnblockTime+0x3>
    1128:	c8 16       	cp	r12, r24
    112a:	d9 06       	cpc	r13, r25
    112c:	ea 06       	cpc	r14, r26
    112e:	fb 06       	cpc	r15, r27
    1130:	40 f4       	brcc	.+16     	; 0x1142 <prvAddCurrentTaskToDelayedList+0x128>
    1132:	c0 92 29 0c 	sts	0x0C29, r12	; 0x800c29 <xNextTaskUnblockTime>
    1136:	d0 92 2a 0c 	sts	0x0C2A, r13	; 0x800c2a <xNextTaskUnblockTime+0x1>
    113a:	e0 92 2b 0c 	sts	0x0C2B, r14	; 0x800c2b <xNextTaskUnblockTime+0x2>
    113e:	f0 92 2c 0c 	sts	0x0C2C, r15	; 0x800c2c <xNextTaskUnblockTime+0x3>
    1142:	df 91       	pop	r29
    1144:	cf 91       	pop	r28
    1146:	ff 90       	pop	r15
    1148:	ef 90       	pop	r14
    114a:	df 90       	pop	r13
    114c:	cf 90       	pop	r12
    114e:	bf 90       	pop	r11
    1150:	af 90       	pop	r10
    1152:	9f 90       	pop	r9
    1154:	8f 90       	pop	r8
    1156:	08 95       	ret

00001158 <xTaskCreate>:
    1158:	2f 92       	push	r2
    115a:	3f 92       	push	r3
    115c:	4f 92       	push	r4
    115e:	5f 92       	push	r5
    1160:	6f 92       	push	r6
    1162:	7f 92       	push	r7
    1164:	8f 92       	push	r8
    1166:	9f 92       	push	r9
    1168:	af 92       	push	r10
    116a:	bf 92       	push	r11
    116c:	cf 92       	push	r12
    116e:	df 92       	push	r13
    1170:	ef 92       	push	r14
    1172:	ff 92       	push	r15
    1174:	0f 93       	push	r16
    1176:	cf 93       	push	r28
    1178:	df 93       	push	r29
    117a:	3c 01       	movw	r6, r24
    117c:	1b 01       	movw	r2, r22
    117e:	4a 01       	movw	r8, r20
    1180:	29 01       	movw	r4, r18
    1182:	ca 01       	movw	r24, r20
    1184:	bf d8       	rcall	.-3714   	; 0x304 <pvPortMalloc>
    1186:	6c 01       	movw	r12, r24
    1188:	89 2b       	or	r24, r25
    118a:	61 f0       	breq	.+24     	; 0x11a4 <xTaskCreate+0x4c>
    118c:	86 e3       	ldi	r24, 0x36	; 54
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	b9 d8       	rcall	.-3726   	; 0x304 <pvPortMalloc>
    1192:	ec 01       	movw	r28, r24
    1194:	89 2b       	or	r24, r25
    1196:	19 f0       	breq	.+6      	; 0x119e <xTaskCreate+0x46>
    1198:	dc 8e       	std	Y+28, r13	; 0x1c
    119a:	cb 8e       	std	Y+27, r12	; 0x1b
    119c:	05 c0       	rjmp	.+10     	; 0x11a8 <xTaskCreate+0x50>
    119e:	c6 01       	movw	r24, r12
    11a0:	59 d9       	rcall	.-3406   	; 0x454 <vPortFree>
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <xTaskCreate+0x50>
    11a4:	c0 e0       	ldi	r28, 0x00	; 0
    11a6:	d0 e0       	ldi	r29, 0x00	; 0
    11a8:	20 97       	sbiw	r28, 0x00	; 0
    11aa:	61 f0       	breq	.+24     	; 0x11c4 <xTaskCreate+0x6c>
    11ac:	a1 2c       	mov	r10, r1
    11ae:	b1 2c       	mov	r11, r1
    11b0:	6e 01       	movw	r12, r28
    11b2:	92 01       	movw	r18, r4
    11b4:	a4 01       	movw	r20, r8
    11b6:	b1 01       	movw	r22, r2
    11b8:	c3 01       	movw	r24, r6
    11ba:	f6 dd       	rcall	.-1044   	; 0xda8 <prvInitialiseNewTask>
    11bc:	ce 01       	movw	r24, r28
    11be:	9b de       	rcall	.-714    	; 0xef6 <prvAddNewTaskToReadyList>
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	01 c0       	rjmp	.+2      	; 0x11c6 <xTaskCreate+0x6e>
    11c4:	8f ef       	ldi	r24, 0xFF	; 255
    11c6:	df 91       	pop	r29
    11c8:	cf 91       	pop	r28
    11ca:	0f 91       	pop	r16
    11cc:	ff 90       	pop	r15
    11ce:	ef 90       	pop	r14
    11d0:	df 90       	pop	r13
    11d2:	cf 90       	pop	r12
    11d4:	bf 90       	pop	r11
    11d6:	af 90       	pop	r10
    11d8:	9f 90       	pop	r9
    11da:	8f 90       	pop	r8
    11dc:	7f 90       	pop	r7
    11de:	6f 90       	pop	r6
    11e0:	5f 90       	pop	r5
    11e2:	4f 90       	pop	r4
    11e4:	3f 90       	pop	r3
    11e6:	2f 90       	pop	r2
    11e8:	08 95       	ret

000011ea <vTaskStartScheduler>:
    11ea:	ef 92       	push	r14
    11ec:	ff 92       	push	r15
    11ee:	0f 93       	push	r16
    11f0:	0f 2e       	mov	r0, r31
    11f2:	f7 e2       	ldi	r31, 0x27	; 39
    11f4:	ef 2e       	mov	r14, r31
    11f6:	fc e0       	ldi	r31, 0x0C	; 12
    11f8:	ff 2e       	mov	r15, r31
    11fa:	f0 2d       	mov	r31, r0
    11fc:	00 e0       	ldi	r16, 0x00	; 0
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	40 ec       	ldi	r20, 0xC0	; 192
    1204:	50 e0       	ldi	r21, 0x00	; 0
    1206:	65 e4       	ldi	r22, 0x45	; 69
    1208:	72 e0       	ldi	r23, 0x02	; 2
    120a:	8c e7       	ldi	r24, 0x7C	; 124
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	a4 df       	rcall	.-184    	; 0x1158 <xTaskCreate>
    1210:	81 30       	cpi	r24, 0x01	; 1
    1212:	09 f4       	brne	.+2      	; 0x1216 <vTaskStartScheduler+0x2c>
    1214:	46 d5       	rcall	.+2700   	; 0x1ca2 <xTimerCreateTimerTask>
    1216:	81 30       	cpi	r24, 0x01	; 1
    1218:	f9 f4       	brne	.+62     	; 0x1258 <vTaskStartScheduler+0x6e>
    121a:	f8 94       	cli
    121c:	8f ef       	ldi	r24, 0xFF	; 255
    121e:	9f ef       	ldi	r25, 0xFF	; 255
    1220:	dc 01       	movw	r26, r24
    1222:	80 93 29 0c 	sts	0x0C29, r24	; 0x800c29 <xNextTaskUnblockTime>
    1226:	90 93 2a 0c 	sts	0x0C2A, r25	; 0x800c2a <xNextTaskUnblockTime+0x1>
    122a:	a0 93 2b 0c 	sts	0x0C2B, r26	; 0x800c2b <xNextTaskUnblockTime+0x2>
    122e:	b0 93 2c 0c 	sts	0x0C2C, r27	; 0x800c2c <xNextTaskUnblockTime+0x3>
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	80 93 34 0c 	sts	0x0C34, r24	; 0x800c34 <xSchedulerRunning>
    1238:	10 92 36 0c 	sts	0x0C36, r1	; 0x800c36 <xTickCount>
    123c:	10 92 37 0c 	sts	0x0C37, r1	; 0x800c37 <xTickCount+0x1>
    1240:	10 92 38 0c 	sts	0x0C38, r1	; 0x800c38 <xTickCount+0x2>
    1244:	10 92 39 0c 	sts	0x0C39, r1	; 0x800c39 <xTickCount+0x3>
    1248:	e0 91 e5 0c 	lds	r30, 0x0CE5	; 0x800ce5 <pxCurrentTCB>
    124c:	f0 91 e6 0c 	lds	r31, 0x0CE6	; 0x800ce6 <pxCurrentTCB+0x1>
    1250:	87 a5       	ldd	r24, Z+47	; 0x2f
    1252:	0e 94 ff 00 	call	0x1fe	; 0x1fe <task_switch_in>
    1256:	d6 d9       	rcall	.-3156   	; 0x604 <xPortStartScheduler>
    1258:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    125c:	0f 91       	pop	r16
    125e:	ff 90       	pop	r15
    1260:	ef 90       	pop	r14
    1262:	08 95       	ret

00001264 <vTaskSuspendAll>:
    1264:	80 91 26 0c 	lds	r24, 0x0C26	; 0x800c26 <uxSchedulerSuspended>
    1268:	8f 5f       	subi	r24, 0xFF	; 255
    126a:	80 93 26 0c 	sts	0x0C26, r24	; 0x800c26 <uxSchedulerSuspended>
    126e:	08 95       	ret

00001270 <xTaskGetTickCount>:
    1270:	0f b6       	in	r0, 0x3f	; 63
    1272:	f8 94       	cli
    1274:	0f 92       	push	r0
    1276:	60 91 36 0c 	lds	r22, 0x0C36	; 0x800c36 <xTickCount>
    127a:	70 91 37 0c 	lds	r23, 0x0C37	; 0x800c37 <xTickCount+0x1>
    127e:	80 91 38 0c 	lds	r24, 0x0C38	; 0x800c38 <xTickCount+0x2>
    1282:	90 91 39 0c 	lds	r25, 0x0C39	; 0x800c39 <xTickCount+0x3>
    1286:	0f 90       	pop	r0
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	08 95       	ret

0000128c <xTaskIncrementTick>:
    128c:	cf 92       	push	r12
    128e:	df 92       	push	r13
    1290:	ef 92       	push	r14
    1292:	ff 92       	push	r15
    1294:	cf 93       	push	r28
    1296:	df 93       	push	r29
    1298:	80 91 26 0c 	lds	r24, 0x0C26	; 0x800c26 <uxSchedulerSuspended>
    129c:	81 11       	cpse	r24, r1
    129e:	05 c1       	rjmp	.+522    	; 0x14aa <xTaskIncrementTick+0x21e>
    12a0:	c0 90 36 0c 	lds	r12, 0x0C36	; 0x800c36 <xTickCount>
    12a4:	d0 90 37 0c 	lds	r13, 0x0C37	; 0x800c37 <xTickCount+0x1>
    12a8:	e0 90 38 0c 	lds	r14, 0x0C38	; 0x800c38 <xTickCount+0x2>
    12ac:	f0 90 39 0c 	lds	r15, 0x0C39	; 0x800c39 <xTickCount+0x3>
    12b0:	8f ef       	ldi	r24, 0xFF	; 255
    12b2:	c8 1a       	sub	r12, r24
    12b4:	d8 0a       	sbc	r13, r24
    12b6:	e8 0a       	sbc	r14, r24
    12b8:	f8 0a       	sbc	r15, r24
    12ba:	c0 92 36 0c 	sts	0x0C36, r12	; 0x800c36 <xTickCount>
    12be:	d0 92 37 0c 	sts	0x0C37, r13	; 0x800c37 <xTickCount+0x1>
    12c2:	e0 92 38 0c 	sts	0x0C38, r14	; 0x800c38 <xTickCount+0x2>
    12c6:	f0 92 39 0c 	sts	0x0C39, r15	; 0x800c39 <xTickCount+0x3>
    12ca:	c1 14       	cp	r12, r1
    12cc:	d1 04       	cpc	r13, r1
    12ce:	e1 04       	cpc	r14, r1
    12d0:	f1 04       	cpc	r15, r1
    12d2:	b1 f4       	brne	.+44     	; 0x1300 <xTaskIncrementTick+0x74>
    12d4:	80 91 5f 0c 	lds	r24, 0x0C5F	; 0x800c5f <pxDelayedTaskList>
    12d8:	90 91 60 0c 	lds	r25, 0x0C60	; 0x800c60 <pxDelayedTaskList+0x1>
    12dc:	20 91 5d 0c 	lds	r18, 0x0C5D	; 0x800c5d <pxOverflowDelayedTaskList>
    12e0:	30 91 5e 0c 	lds	r19, 0x0C5E	; 0x800c5e <pxOverflowDelayedTaskList+0x1>
    12e4:	30 93 60 0c 	sts	0x0C60, r19	; 0x800c60 <pxDelayedTaskList+0x1>
    12e8:	20 93 5f 0c 	sts	0x0C5F, r18	; 0x800c5f <pxDelayedTaskList>
    12ec:	90 93 5e 0c 	sts	0x0C5E, r25	; 0x800c5e <pxOverflowDelayedTaskList+0x1>
    12f0:	80 93 5d 0c 	sts	0x0C5D, r24	; 0x800c5d <pxOverflowDelayedTaskList>
    12f4:	80 91 2e 0c 	lds	r24, 0x0C2E	; 0x800c2e <xNumOfOverflows>
    12f8:	8f 5f       	subi	r24, 0xFF	; 255
    12fa:	80 93 2e 0c 	sts	0x0C2E, r24	; 0x800c2e <xNumOfOverflows>
    12fe:	22 dd       	rcall	.-1468   	; 0xd44 <prvResetNextTaskUnblockTime>
    1300:	80 91 29 0c 	lds	r24, 0x0C29	; 0x800c29 <xNextTaskUnblockTime>
    1304:	90 91 2a 0c 	lds	r25, 0x0C2A	; 0x800c2a <xNextTaskUnblockTime+0x1>
    1308:	a0 91 2b 0c 	lds	r26, 0x0C2B	; 0x800c2b <xNextTaskUnblockTime+0x2>
    130c:	b0 91 2c 0c 	lds	r27, 0x0C2C	; 0x800c2c <xNextTaskUnblockTime+0x3>
    1310:	c8 16       	cp	r12, r24
    1312:	d9 06       	cpc	r13, r25
    1314:	ea 06       	cpc	r14, r26
    1316:	fb 06       	cpc	r15, r27
    1318:	20 f4       	brcc	.+8      	; 0x1322 <xTaskIncrementTick+0x96>
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	b2 c0       	rjmp	.+356    	; 0x1482 <xTaskIncrementTick+0x1f6>
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	01 c0       	rjmp	.+2      	; 0x1324 <xTaskIncrementTick+0x98>
    1322:	80 e0       	ldi	r24, 0x00	; 0
    1324:	e0 91 5f 0c 	lds	r30, 0x0C5F	; 0x800c5f <pxDelayedTaskList>
    1328:	f0 91 60 0c 	lds	r31, 0x0C60	; 0x800c60 <pxDelayedTaskList+0x1>
    132c:	90 81       	ld	r25, Z
    132e:	91 11       	cpse	r25, r1
    1330:	0c c0       	rjmp	.+24     	; 0x134a <xTaskIncrementTick+0xbe>
    1332:	4f ef       	ldi	r20, 0xFF	; 255
    1334:	5f ef       	ldi	r21, 0xFF	; 255
    1336:	ba 01       	movw	r22, r20
    1338:	40 93 29 0c 	sts	0x0C29, r20	; 0x800c29 <xNextTaskUnblockTime>
    133c:	50 93 2a 0c 	sts	0x0C2A, r21	; 0x800c2a <xNextTaskUnblockTime+0x1>
    1340:	60 93 2b 0c 	sts	0x0C2B, r22	; 0x800c2b <xNextTaskUnblockTime+0x2>
    1344:	70 93 2c 0c 	sts	0x0C2C, r23	; 0x800c2c <xNextTaskUnblockTime+0x3>
    1348:	9c c0       	rjmp	.+312    	; 0x1482 <xTaskIncrementTick+0x1f6>
    134a:	e0 91 5f 0c 	lds	r30, 0x0C5F	; 0x800c5f <pxDelayedTaskList>
    134e:	f0 91 60 0c 	lds	r31, 0x0C60	; 0x800c60 <pxDelayedTaskList+0x1>
    1352:	07 80       	ldd	r0, Z+7	; 0x07
    1354:	f0 85       	ldd	r31, Z+8	; 0x08
    1356:	e0 2d       	mov	r30, r0
    1358:	00 84       	ldd	r0, Z+8	; 0x08
    135a:	f1 85       	ldd	r31, Z+9	; 0x09
    135c:	e0 2d       	mov	r30, r0
    135e:	42 81       	ldd	r20, Z+2	; 0x02
    1360:	53 81       	ldd	r21, Z+3	; 0x03
    1362:	64 81       	ldd	r22, Z+4	; 0x04
    1364:	75 81       	ldd	r23, Z+5	; 0x05
    1366:	c4 16       	cp	r12, r20
    1368:	d5 06       	cpc	r13, r21
    136a:	e6 06       	cpc	r14, r22
    136c:	f7 06       	cpc	r15, r23
    136e:	48 f4       	brcc	.+18     	; 0x1382 <xTaskIncrementTick+0xf6>
    1370:	40 93 29 0c 	sts	0x0C29, r20	; 0x800c29 <xNextTaskUnblockTime>
    1374:	50 93 2a 0c 	sts	0x0C2A, r21	; 0x800c2a <xNextTaskUnblockTime+0x1>
    1378:	60 93 2b 0c 	sts	0x0C2B, r22	; 0x800c2b <xNextTaskUnblockTime+0x2>
    137c:	70 93 2c 0c 	sts	0x0C2C, r23	; 0x800c2c <xNextTaskUnblockTime+0x3>
    1380:	80 c0       	rjmp	.+256    	; 0x1482 <xTaskIncrementTick+0x1f6>
    1382:	a4 85       	ldd	r26, Z+12	; 0x0c
    1384:	b5 85       	ldd	r27, Z+13	; 0x0d
    1386:	c6 81       	ldd	r28, Z+6	; 0x06
    1388:	d7 81       	ldd	r29, Z+7	; 0x07
    138a:	20 85       	ldd	r18, Z+8	; 0x08
    138c:	31 85       	ldd	r19, Z+9	; 0x09
    138e:	3f 83       	std	Y+7, r19	; 0x07
    1390:	2e 83       	std	Y+6, r18	; 0x06
    1392:	c0 85       	ldd	r28, Z+8	; 0x08
    1394:	d1 85       	ldd	r29, Z+9	; 0x09
    1396:	26 81       	ldd	r18, Z+6	; 0x06
    1398:	37 81       	ldd	r19, Z+7	; 0x07
    139a:	3d 83       	std	Y+5, r19	; 0x05
    139c:	2c 83       	std	Y+4, r18	; 0x04
    139e:	11 96       	adiw	r26, 0x01	; 1
    13a0:	4d 91       	ld	r20, X+
    13a2:	5c 91       	ld	r21, X
    13a4:	12 97       	sbiw	r26, 0x02	; 2
    13a6:	9f 01       	movw	r18, r30
    13a8:	2e 5f       	subi	r18, 0xFE	; 254
    13aa:	3f 4f       	sbci	r19, 0xFF	; 255
    13ac:	42 17       	cp	r20, r18
    13ae:	53 07       	cpc	r21, r19
    13b0:	31 f4       	brne	.+12     	; 0x13be <xTaskIncrementTick+0x132>
    13b2:	40 85       	ldd	r20, Z+8	; 0x08
    13b4:	51 85       	ldd	r21, Z+9	; 0x09
    13b6:	12 96       	adiw	r26, 0x02	; 2
    13b8:	5c 93       	st	X, r21
    13ba:	4e 93       	st	-X, r20
    13bc:	11 97       	sbiw	r26, 0x01	; 1
    13be:	15 86       	std	Z+13, r1	; 0x0d
    13c0:	14 86       	std	Z+12, r1	; 0x0c
    13c2:	9c 91       	ld	r25, X
    13c4:	91 50       	subi	r25, 0x01	; 1
    13c6:	9c 93       	st	X, r25
    13c8:	a0 8d       	ldd	r26, Z+24	; 0x18
    13ca:	b1 8d       	ldd	r27, Z+25	; 0x19
    13cc:	10 97       	sbiw	r26, 0x00	; 0
    13ce:	09 f1       	breq	.+66     	; 0x1412 <xTaskIncrementTick+0x186>
    13d0:	c2 89       	ldd	r28, Z+18	; 0x12
    13d2:	d3 89       	ldd	r29, Z+19	; 0x13
    13d4:	44 89       	ldd	r20, Z+20	; 0x14
    13d6:	55 89       	ldd	r21, Z+21	; 0x15
    13d8:	5f 83       	std	Y+7, r21	; 0x07
    13da:	4e 83       	std	Y+6, r20	; 0x06
    13dc:	c4 89       	ldd	r28, Z+20	; 0x14
    13de:	d5 89       	ldd	r29, Z+21	; 0x15
    13e0:	42 89       	ldd	r20, Z+18	; 0x12
    13e2:	53 89       	ldd	r21, Z+19	; 0x13
    13e4:	5d 83       	std	Y+5, r21	; 0x05
    13e6:	4c 83       	std	Y+4, r20	; 0x04
    13e8:	11 96       	adiw	r26, 0x01	; 1
    13ea:	6d 91       	ld	r22, X+
    13ec:	7c 91       	ld	r23, X
    13ee:	12 97       	sbiw	r26, 0x02	; 2
    13f0:	af 01       	movw	r20, r30
    13f2:	42 5f       	subi	r20, 0xF2	; 242
    13f4:	5f 4f       	sbci	r21, 0xFF	; 255
    13f6:	64 17       	cp	r22, r20
    13f8:	75 07       	cpc	r23, r21
    13fa:	31 f4       	brne	.+12     	; 0x1408 <xTaskIncrementTick+0x17c>
    13fc:	44 89       	ldd	r20, Z+20	; 0x14
    13fe:	55 89       	ldd	r21, Z+21	; 0x15
    1400:	12 96       	adiw	r26, 0x02	; 2
    1402:	5c 93       	st	X, r21
    1404:	4e 93       	st	-X, r20
    1406:	11 97       	sbiw	r26, 0x01	; 1
    1408:	11 8e       	std	Z+25, r1	; 0x19
    140a:	10 8e       	std	Z+24, r1	; 0x18
    140c:	9c 91       	ld	r25, X
    140e:	91 50       	subi	r25, 0x01	; 1
    1410:	9c 93       	st	X, r25
    1412:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1414:	90 91 35 0c 	lds	r25, 0x0C35	; 0x800c35 <uxTopReadyPriority>
    1418:	9a 17       	cp	r25, r26
    141a:	10 f4       	brcc	.+4      	; 0x1420 <xTaskIncrementTick+0x194>
    141c:	a0 93 35 0c 	sts	0x0C35, r26	; 0x800c35 <uxTopReadyPriority>
    1420:	9b e0       	ldi	r25, 0x0B	; 11
    1422:	9a 9f       	mul	r25, r26
    1424:	d0 01       	movw	r26, r0
    1426:	11 24       	eor	r1, r1
    1428:	a9 58       	subi	r26, 0x89	; 137
    142a:	b3 4f       	sbci	r27, 0xF3	; 243
    142c:	11 96       	adiw	r26, 0x01	; 1
    142e:	0d 90       	ld	r0, X+
    1430:	bc 91       	ld	r27, X
    1432:	a0 2d       	mov	r26, r0
    1434:	b7 83       	std	Z+7, r27	; 0x07
    1436:	a6 83       	std	Z+6, r26	; 0x06
    1438:	16 96       	adiw	r26, 0x06	; 6
    143a:	4d 91       	ld	r20, X+
    143c:	5c 91       	ld	r21, X
    143e:	17 97       	sbiw	r26, 0x07	; 7
    1440:	51 87       	std	Z+9, r21	; 0x09
    1442:	40 87       	std	Z+8, r20	; 0x08
    1444:	16 96       	adiw	r26, 0x06	; 6
    1446:	cd 91       	ld	r28, X+
    1448:	dc 91       	ld	r29, X
    144a:	17 97       	sbiw	r26, 0x07	; 7
    144c:	3d 83       	std	Y+5, r19	; 0x05
    144e:	2c 83       	std	Y+4, r18	; 0x04
    1450:	17 96       	adiw	r26, 0x07	; 7
    1452:	3c 93       	st	X, r19
    1454:	2e 93       	st	-X, r18
    1456:	16 97       	sbiw	r26, 0x06	; 6
    1458:	a2 8d       	ldd	r26, Z+26	; 0x1a
    145a:	9a 9f       	mul	r25, r26
    145c:	d0 01       	movw	r26, r0
    145e:	11 24       	eor	r1, r1
    1460:	a9 58       	subi	r26, 0x89	; 137
    1462:	b3 4f       	sbci	r27, 0xF3	; 243
    1464:	b5 87       	std	Z+13, r27	; 0x0d
    1466:	a4 87       	std	Z+12, r26	; 0x0c
    1468:	9c 91       	ld	r25, X
    146a:	9f 5f       	subi	r25, 0xFF	; 255
    146c:	9c 93       	st	X, r25
    146e:	22 8d       	ldd	r18, Z+26	; 0x1a
    1470:	e0 91 e5 0c 	lds	r30, 0x0CE5	; 0x800ce5 <pxCurrentTCB>
    1474:	f0 91 e6 0c 	lds	r31, 0x0CE6	; 0x800ce6 <pxCurrentTCB+0x1>
    1478:	92 8d       	ldd	r25, Z+26	; 0x1a
    147a:	29 17       	cp	r18, r25
    147c:	08 f0       	brcs	.+2      	; 0x1480 <xTaskIncrementTick+0x1f4>
    147e:	4f cf       	rjmp	.-354    	; 0x131e <xTaskIncrementTick+0x92>
    1480:	51 cf       	rjmp	.-350    	; 0x1324 <xTaskIncrementTick+0x98>
    1482:	e0 91 e5 0c 	lds	r30, 0x0CE5	; 0x800ce5 <pxCurrentTCB>
    1486:	f0 91 e6 0c 	lds	r31, 0x0CE6	; 0x800ce6 <pxCurrentTCB+0x1>
    148a:	e2 8d       	ldd	r30, Z+26	; 0x1a
    148c:	9b e0       	ldi	r25, 0x0B	; 11
    148e:	e9 9f       	mul	r30, r25
    1490:	f0 01       	movw	r30, r0
    1492:	11 24       	eor	r1, r1
    1494:	e9 58       	subi	r30, 0x89	; 137
    1496:	f3 4f       	sbci	r31, 0xF3	; 243
    1498:	90 81       	ld	r25, Z
    149a:	92 30       	cpi	r25, 0x02	; 2
    149c:	08 f0       	brcs	.+2      	; 0x14a0 <xTaskIncrementTick+0x214>
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	90 91 2f 0c 	lds	r25, 0x0C2F	; 0x800c2f <xYieldPending>
    14a4:	91 11       	cpse	r25, r1
    14a6:	16 c0       	rjmp	.+44     	; 0x14d4 <xTaskIncrementTick+0x248>
    14a8:	16 c0       	rjmp	.+44     	; 0x14d6 <xTaskIncrementTick+0x24a>
    14aa:	80 91 30 0c 	lds	r24, 0x0C30	; 0x800c30 <xPendedTicks>
    14ae:	90 91 31 0c 	lds	r25, 0x0C31	; 0x800c31 <xPendedTicks+0x1>
    14b2:	a0 91 32 0c 	lds	r26, 0x0C32	; 0x800c32 <xPendedTicks+0x2>
    14b6:	b0 91 33 0c 	lds	r27, 0x0C33	; 0x800c33 <xPendedTicks+0x3>
    14ba:	01 96       	adiw	r24, 0x01	; 1
    14bc:	a1 1d       	adc	r26, r1
    14be:	b1 1d       	adc	r27, r1
    14c0:	80 93 30 0c 	sts	0x0C30, r24	; 0x800c30 <xPendedTicks>
    14c4:	90 93 31 0c 	sts	0x0C31, r25	; 0x800c31 <xPendedTicks+0x1>
    14c8:	a0 93 32 0c 	sts	0x0C32, r26	; 0x800c32 <xPendedTicks+0x2>
    14cc:	b0 93 33 0c 	sts	0x0C33, r27	; 0x800c33 <xPendedTicks+0x3>
    14d0:	80 e0       	ldi	r24, 0x00	; 0
    14d2:	01 c0       	rjmp	.+2      	; 0x14d6 <xTaskIncrementTick+0x24a>
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	df 91       	pop	r29
    14d8:	cf 91       	pop	r28
    14da:	ff 90       	pop	r15
    14dc:	ef 90       	pop	r14
    14de:	df 90       	pop	r13
    14e0:	cf 90       	pop	r12
    14e2:	08 95       	ret

000014e4 <xTaskResumeAll>:
    14e4:	cf 92       	push	r12
    14e6:	df 92       	push	r13
    14e8:	ef 92       	push	r14
    14ea:	ff 92       	push	r15
    14ec:	cf 93       	push	r28
    14ee:	df 93       	push	r29
    14f0:	0f b6       	in	r0, 0x3f	; 63
    14f2:	f8 94       	cli
    14f4:	0f 92       	push	r0
    14f6:	80 91 26 0c 	lds	r24, 0x0C26	; 0x800c26 <uxSchedulerSuspended>
    14fa:	81 50       	subi	r24, 0x01	; 1
    14fc:	80 93 26 0c 	sts	0x0C26, r24	; 0x800c26 <uxSchedulerSuspended>
    1500:	80 91 26 0c 	lds	r24, 0x0C26	; 0x800c26 <uxSchedulerSuspended>
    1504:	81 11       	cpse	r24, r1
    1506:	be c0       	rjmp	.+380    	; 0x1684 <xTaskResumeAll+0x1a0>
    1508:	80 91 3a 0c 	lds	r24, 0x0C3A	; 0x800c3a <uxCurrentNumberOfTasks>
    150c:	81 11       	cpse	r24, r1
    150e:	88 c0       	rjmp	.+272    	; 0x1620 <xTaskResumeAll+0x13c>
    1510:	bc c0       	rjmp	.+376    	; 0x168a <xTaskResumeAll+0x1a6>
    1512:	e0 91 59 0c 	lds	r30, 0x0C59	; 0x800c59 <xPendingReadyList+0x7>
    1516:	f0 91 5a 0c 	lds	r31, 0x0C5A	; 0x800c5a <xPendingReadyList+0x8>
    151a:	00 84       	ldd	r0, Z+8	; 0x08
    151c:	f1 85       	ldd	r31, Z+9	; 0x09
    151e:	e0 2d       	mov	r30, r0
    1520:	a0 8d       	ldd	r26, Z+24	; 0x18
    1522:	b1 8d       	ldd	r27, Z+25	; 0x19
    1524:	c2 89       	ldd	r28, Z+18	; 0x12
    1526:	d3 89       	ldd	r29, Z+19	; 0x13
    1528:	84 89       	ldd	r24, Z+20	; 0x14
    152a:	95 89       	ldd	r25, Z+21	; 0x15
    152c:	9f 83       	std	Y+7, r25	; 0x07
    152e:	8e 83       	std	Y+6, r24	; 0x06
    1530:	c4 89       	ldd	r28, Z+20	; 0x14
    1532:	d5 89       	ldd	r29, Z+21	; 0x15
    1534:	82 89       	ldd	r24, Z+18	; 0x12
    1536:	93 89       	ldd	r25, Z+19	; 0x13
    1538:	9d 83       	std	Y+5, r25	; 0x05
    153a:	8c 83       	std	Y+4, r24	; 0x04
    153c:	11 96       	adiw	r26, 0x01	; 1
    153e:	2d 91       	ld	r18, X+
    1540:	3c 91       	ld	r19, X
    1542:	12 97       	sbiw	r26, 0x02	; 2
    1544:	cf 01       	movw	r24, r30
    1546:	0e 96       	adiw	r24, 0x0e	; 14
    1548:	28 17       	cp	r18, r24
    154a:	39 07       	cpc	r19, r25
    154c:	31 f4       	brne	.+12     	; 0x155a <xTaskResumeAll+0x76>
    154e:	84 89       	ldd	r24, Z+20	; 0x14
    1550:	95 89       	ldd	r25, Z+21	; 0x15
    1552:	12 96       	adiw	r26, 0x02	; 2
    1554:	9c 93       	st	X, r25
    1556:	8e 93       	st	-X, r24
    1558:	11 97       	sbiw	r26, 0x01	; 1
    155a:	11 8e       	std	Z+25, r1	; 0x19
    155c:	10 8e       	std	Z+24, r1	; 0x18
    155e:	8c 91       	ld	r24, X
    1560:	81 50       	subi	r24, 0x01	; 1
    1562:	8c 93       	st	X, r24
    1564:	a4 85       	ldd	r26, Z+12	; 0x0c
    1566:	b5 85       	ldd	r27, Z+13	; 0x0d
    1568:	c6 81       	ldd	r28, Z+6	; 0x06
    156a:	d7 81       	ldd	r29, Z+7	; 0x07
    156c:	80 85       	ldd	r24, Z+8	; 0x08
    156e:	91 85       	ldd	r25, Z+9	; 0x09
    1570:	9f 83       	std	Y+7, r25	; 0x07
    1572:	8e 83       	std	Y+6, r24	; 0x06
    1574:	c0 85       	ldd	r28, Z+8	; 0x08
    1576:	d1 85       	ldd	r29, Z+9	; 0x09
    1578:	86 81       	ldd	r24, Z+6	; 0x06
    157a:	97 81       	ldd	r25, Z+7	; 0x07
    157c:	9d 83       	std	Y+5, r25	; 0x05
    157e:	8c 83       	std	Y+4, r24	; 0x04
    1580:	11 96       	adiw	r26, 0x01	; 1
    1582:	8d 91       	ld	r24, X+
    1584:	9c 91       	ld	r25, X
    1586:	12 97       	sbiw	r26, 0x02	; 2
    1588:	9f 01       	movw	r18, r30
    158a:	2e 5f       	subi	r18, 0xFE	; 254
    158c:	3f 4f       	sbci	r19, 0xFF	; 255
    158e:	82 17       	cp	r24, r18
    1590:	93 07       	cpc	r25, r19
    1592:	31 f4       	brne	.+12     	; 0x15a0 <xTaskResumeAll+0xbc>
    1594:	80 85       	ldd	r24, Z+8	; 0x08
    1596:	91 85       	ldd	r25, Z+9	; 0x09
    1598:	12 96       	adiw	r26, 0x02	; 2
    159a:	9c 93       	st	X, r25
    159c:	8e 93       	st	-X, r24
    159e:	11 97       	sbiw	r26, 0x01	; 1
    15a0:	15 86       	std	Z+13, r1	; 0x0d
    15a2:	14 86       	std	Z+12, r1	; 0x0c
    15a4:	8c 91       	ld	r24, X
    15a6:	81 50       	subi	r24, 0x01	; 1
    15a8:	8c 93       	st	X, r24
    15aa:	a2 8d       	ldd	r26, Z+26	; 0x1a
    15ac:	80 91 35 0c 	lds	r24, 0x0C35	; 0x800c35 <uxTopReadyPriority>
    15b0:	8a 17       	cp	r24, r26
    15b2:	10 f4       	brcc	.+4      	; 0x15b8 <xTaskResumeAll+0xd4>
    15b4:	a0 93 35 0c 	sts	0x0C35, r26	; 0x800c35 <uxTopReadyPriority>
    15b8:	8b e0       	ldi	r24, 0x0B	; 11
    15ba:	8a 9f       	mul	r24, r26
    15bc:	d0 01       	movw	r26, r0
    15be:	11 24       	eor	r1, r1
    15c0:	a9 58       	subi	r26, 0x89	; 137
    15c2:	b3 4f       	sbci	r27, 0xF3	; 243
    15c4:	11 96       	adiw	r26, 0x01	; 1
    15c6:	0d 90       	ld	r0, X+
    15c8:	bc 91       	ld	r27, X
    15ca:	a0 2d       	mov	r26, r0
    15cc:	b7 83       	std	Z+7, r27	; 0x07
    15ce:	a6 83       	std	Z+6, r26	; 0x06
    15d0:	16 96       	adiw	r26, 0x06	; 6
    15d2:	4d 91       	ld	r20, X+
    15d4:	5c 91       	ld	r21, X
    15d6:	17 97       	sbiw	r26, 0x07	; 7
    15d8:	51 87       	std	Z+9, r21	; 0x09
    15da:	40 87       	std	Z+8, r20	; 0x08
    15dc:	16 96       	adiw	r26, 0x06	; 6
    15de:	cd 91       	ld	r28, X+
    15e0:	dc 91       	ld	r29, X
    15e2:	17 97       	sbiw	r26, 0x07	; 7
    15e4:	3d 83       	std	Y+5, r19	; 0x05
    15e6:	2c 83       	std	Y+4, r18	; 0x04
    15e8:	17 96       	adiw	r26, 0x07	; 7
    15ea:	3c 93       	st	X, r19
    15ec:	2e 93       	st	-X, r18
    15ee:	16 97       	sbiw	r26, 0x06	; 6
    15f0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    15f2:	8a 9f       	mul	r24, r26
    15f4:	d0 01       	movw	r26, r0
    15f6:	11 24       	eor	r1, r1
    15f8:	a9 58       	subi	r26, 0x89	; 137
    15fa:	b3 4f       	sbci	r27, 0xF3	; 243
    15fc:	b5 87       	std	Z+13, r27	; 0x0d
    15fe:	a4 87       	std	Z+12, r26	; 0x0c
    1600:	8c 91       	ld	r24, X
    1602:	8f 5f       	subi	r24, 0xFF	; 255
    1604:	8c 93       	st	X, r24
    1606:	92 8d       	ldd	r25, Z+26	; 0x1a
    1608:	a0 91 e5 0c 	lds	r26, 0x0CE5	; 0x800ce5 <pxCurrentTCB>
    160c:	b0 91 e6 0c 	lds	r27, 0x0CE6	; 0x800ce6 <pxCurrentTCB+0x1>
    1610:	5a 96       	adiw	r26, 0x1a	; 26
    1612:	8c 91       	ld	r24, X
    1614:	98 17       	cp	r25, r24
    1616:	30 f0       	brcs	.+12     	; 0x1624 <xTaskResumeAll+0x140>
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	80 93 2f 0c 	sts	0x0C2F, r24	; 0x800c2f <xYieldPending>
    161e:	02 c0       	rjmp	.+4      	; 0x1624 <xTaskResumeAll+0x140>
    1620:	e0 e0       	ldi	r30, 0x00	; 0
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 91 52 0c 	lds	r24, 0x0C52	; 0x800c52 <xPendingReadyList>
    1628:	81 11       	cpse	r24, r1
    162a:	73 cf       	rjmp	.-282    	; 0x1512 <xTaskResumeAll+0x2e>
    162c:	ef 2b       	or	r30, r31
    162e:	09 f0       	breq	.+2      	; 0x1632 <xTaskResumeAll+0x14e>
    1630:	89 db       	rcall	.-2286   	; 0xd44 <prvResetNextTaskUnblockTime>
    1632:	c0 90 30 0c 	lds	r12, 0x0C30	; 0x800c30 <xPendedTicks>
    1636:	d0 90 31 0c 	lds	r13, 0x0C31	; 0x800c31 <xPendedTicks+0x1>
    163a:	e0 90 32 0c 	lds	r14, 0x0C32	; 0x800c32 <xPendedTicks+0x2>
    163e:	f0 90 33 0c 	lds	r15, 0x0C33	; 0x800c33 <xPendedTicks+0x3>
    1642:	c1 14       	cp	r12, r1
    1644:	d1 04       	cpc	r13, r1
    1646:	e1 04       	cpc	r14, r1
    1648:	f1 04       	cpc	r15, r1
    164a:	a1 f0       	breq	.+40     	; 0x1674 <xTaskResumeAll+0x190>
    164c:	1f de       	rcall	.-962    	; 0x128c <xTaskIncrementTick>
    164e:	88 23       	and	r24, r24
    1650:	19 f0       	breq	.+6      	; 0x1658 <xTaskResumeAll+0x174>
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	80 93 2f 0c 	sts	0x0C2F, r24	; 0x800c2f <xYieldPending>
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	c8 1a       	sub	r12, r24
    165c:	d1 08       	sbc	r13, r1
    165e:	e1 08       	sbc	r14, r1
    1660:	f1 08       	sbc	r15, r1
    1662:	a1 f7       	brne	.-24     	; 0x164c <xTaskResumeAll+0x168>
    1664:	10 92 30 0c 	sts	0x0C30, r1	; 0x800c30 <xPendedTicks>
    1668:	10 92 31 0c 	sts	0x0C31, r1	; 0x800c31 <xPendedTicks+0x1>
    166c:	10 92 32 0c 	sts	0x0C32, r1	; 0x800c32 <xPendedTicks+0x2>
    1670:	10 92 33 0c 	sts	0x0C33, r1	; 0x800c33 <xPendedTicks+0x3>
    1674:	80 91 2f 0c 	lds	r24, 0x0C2F	; 0x800c2f <xYieldPending>
    1678:	88 23       	and	r24, r24
    167a:	31 f0       	breq	.+12     	; 0x1688 <xTaskResumeAll+0x1a4>
    167c:	0e 94 34 03 	call	0x668	; 0x668 <vPortYield>
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	03 c0       	rjmp	.+6      	; 0x168a <xTaskResumeAll+0x1a6>
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	01 c0       	rjmp	.+2      	; 0x168a <xTaskResumeAll+0x1a6>
    1688:	80 e0       	ldi	r24, 0x00	; 0
    168a:	0f 90       	pop	r0
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	df 91       	pop	r29
    1690:	cf 91       	pop	r28
    1692:	ff 90       	pop	r15
    1694:	ef 90       	pop	r14
    1696:	df 90       	pop	r13
    1698:	cf 90       	pop	r12
    169a:	08 95       	ret

0000169c <vTaskDelay>:
    169c:	cf 92       	push	r12
    169e:	df 92       	push	r13
    16a0:	ef 92       	push	r14
    16a2:	ff 92       	push	r15
    16a4:	6b 01       	movw	r12, r22
    16a6:	7c 01       	movw	r14, r24
    16a8:	67 2b       	or	r22, r23
    16aa:	68 2b       	or	r22, r24
    16ac:	69 2b       	or	r22, r25
    16ae:	39 f0       	breq	.+14     	; 0x16be <vTaskDelay+0x22>
    16b0:	d9 dd       	rcall	.-1102   	; 0x1264 <vTaskSuspendAll>
    16b2:	40 e0       	ldi	r20, 0x00	; 0
    16b4:	c7 01       	movw	r24, r14
    16b6:	b6 01       	movw	r22, r12
    16b8:	b0 dc       	rcall	.-1696   	; 0x101a <prvAddCurrentTaskToDelayedList>
    16ba:	14 df       	rcall	.-472    	; 0x14e4 <xTaskResumeAll>
    16bc:	01 c0       	rjmp	.+2      	; 0x16c0 <vTaskDelay+0x24>
    16be:	80 e0       	ldi	r24, 0x00	; 0
    16c0:	81 11       	cpse	r24, r1
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <vTaskDelay+0x2c>
    16c4:	0e 94 34 03 	call	0x668	; 0x668 <vPortYield>
    16c8:	ff 90       	pop	r15
    16ca:	ef 90       	pop	r14
    16cc:	df 90       	pop	r13
    16ce:	cf 90       	pop	r12
    16d0:	08 95       	ret

000016d2 <vTaskSwitchContext>:
    16d2:	80 91 26 0c 	lds	r24, 0x0C26	; 0x800c26 <uxSchedulerSuspended>
    16d6:	88 23       	and	r24, r24
    16d8:	21 f0       	breq	.+8      	; 0x16e2 <vTaskSwitchContext+0x10>
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	80 93 2f 0c 	sts	0x0C2F, r24	; 0x800c2f <xYieldPending>
    16e0:	08 95       	ret
    16e2:	10 92 2f 0c 	sts	0x0C2F, r1	; 0x800c2f <xYieldPending>
    16e6:	e0 91 e5 0c 	lds	r30, 0x0CE5	; 0x800ce5 <pxCurrentTCB>
    16ea:	f0 91 e6 0c 	lds	r31, 0x0CE6	; 0x800ce6 <pxCurrentTCB+0x1>
    16ee:	87 a5       	ldd	r24, Z+47	; 0x2f
    16f0:	0e 94 09 01 	call	0x212	; 0x212 <task_switch_out>
    16f4:	e0 91 e5 0c 	lds	r30, 0x0CE5	; 0x800ce5 <pxCurrentTCB>
    16f8:	f0 91 e6 0c 	lds	r31, 0x0CE6	; 0x800ce6 <pxCurrentTCB+0x1>
    16fc:	20 81       	ld	r18, Z
    16fe:	31 81       	ldd	r19, Z+1	; 0x01
    1700:	e0 91 e5 0c 	lds	r30, 0x0CE5	; 0x800ce5 <pxCurrentTCB>
    1704:	f0 91 e6 0c 	lds	r31, 0x0CE6	; 0x800ce6 <pxCurrentTCB+0x1>
    1708:	83 8d       	ldd	r24, Z+27	; 0x1b
    170a:	94 8d       	ldd	r25, Z+28	; 0x1c
    170c:	82 17       	cp	r24, r18
    170e:	93 07       	cpc	r25, r19
    1710:	58 f0       	brcs	.+22     	; 0x1728 <vTaskSwitchContext+0x56>
    1712:	60 91 e5 0c 	lds	r22, 0x0CE5	; 0x800ce5 <pxCurrentTCB>
    1716:	70 91 e6 0c 	lds	r23, 0x0CE6	; 0x800ce6 <pxCurrentTCB+0x1>
    171a:	63 5e       	subi	r22, 0xE3	; 227
    171c:	7f 4f       	sbci	r23, 0xFF	; 255
    171e:	80 91 e5 0c 	lds	r24, 0x0CE5	; 0x800ce5 <pxCurrentTCB>
    1722:	90 91 e6 0c 	lds	r25, 0x0CE6	; 0x800ce6 <pxCurrentTCB+0x1>
    1726:	44 d5       	rcall	.+2696   	; 0x21b0 <vApplicationStackOverflowHook>
    1728:	80 91 35 0c 	lds	r24, 0x0C35	; 0x800c35 <uxTopReadyPriority>
    172c:	01 c0       	rjmp	.+2      	; 0x1730 <vTaskSwitchContext+0x5e>
    172e:	81 50       	subi	r24, 0x01	; 1
    1730:	28 2f       	mov	r18, r24
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	9b e0       	ldi	r25, 0x0B	; 11
    1736:	92 9f       	mul	r25, r18
    1738:	f0 01       	movw	r30, r0
    173a:	93 9f       	mul	r25, r19
    173c:	f0 0d       	add	r31, r0
    173e:	11 24       	eor	r1, r1
    1740:	e9 58       	subi	r30, 0x89	; 137
    1742:	f3 4f       	sbci	r31, 0xF3	; 243
    1744:	90 81       	ld	r25, Z
    1746:	99 23       	and	r25, r25
    1748:	91 f3       	breq	.-28     	; 0x172e <vTaskSwitchContext+0x5c>
    174a:	9b e0       	ldi	r25, 0x0B	; 11
    174c:	92 9f       	mul	r25, r18
    174e:	a0 01       	movw	r20, r0
    1750:	93 9f       	mul	r25, r19
    1752:	50 0d       	add	r21, r0
    1754:	11 24       	eor	r1, r1
    1756:	df 01       	movw	r26, r30
    1758:	01 80       	ldd	r0, Z+1	; 0x01
    175a:	f2 81       	ldd	r31, Z+2	; 0x02
    175c:	e0 2d       	mov	r30, r0
    175e:	04 80       	ldd	r0, Z+4	; 0x04
    1760:	f5 81       	ldd	r31, Z+5	; 0x05
    1762:	e0 2d       	mov	r30, r0
    1764:	12 96       	adiw	r26, 0x02	; 2
    1766:	fc 93       	st	X, r31
    1768:	ee 93       	st	-X, r30
    176a:	11 97       	sbiw	r26, 0x01	; 1
    176c:	46 58       	subi	r20, 0x86	; 134
    176e:	53 4f       	sbci	r21, 0xF3	; 243
    1770:	e4 17       	cp	r30, r20
    1772:	f5 07       	cpc	r31, r21
    1774:	29 f4       	brne	.+10     	; 0x1780 <vTaskSwitchContext+0xae>
    1776:	44 81       	ldd	r20, Z+4	; 0x04
    1778:	55 81       	ldd	r21, Z+5	; 0x05
    177a:	fd 01       	movw	r30, r26
    177c:	52 83       	std	Z+2, r21	; 0x02
    177e:	41 83       	std	Z+1, r20	; 0x01
    1780:	9b e0       	ldi	r25, 0x0B	; 11
    1782:	92 9f       	mul	r25, r18
    1784:	f0 01       	movw	r30, r0
    1786:	93 9f       	mul	r25, r19
    1788:	f0 0d       	add	r31, r0
    178a:	11 24       	eor	r1, r1
    178c:	e9 58       	subi	r30, 0x89	; 137
    178e:	f3 4f       	sbci	r31, 0xF3	; 243
    1790:	01 80       	ldd	r0, Z+1	; 0x01
    1792:	f2 81       	ldd	r31, Z+2	; 0x02
    1794:	e0 2d       	mov	r30, r0
    1796:	20 85       	ldd	r18, Z+8	; 0x08
    1798:	31 85       	ldd	r19, Z+9	; 0x09
    179a:	30 93 e6 0c 	sts	0x0CE6, r19	; 0x800ce6 <pxCurrentTCB+0x1>
    179e:	20 93 e5 0c 	sts	0x0CE5, r18	; 0x800ce5 <pxCurrentTCB>
    17a2:	80 93 35 0c 	sts	0x0C35, r24	; 0x800c35 <uxTopReadyPriority>
    17a6:	e0 91 e5 0c 	lds	r30, 0x0CE5	; 0x800ce5 <pxCurrentTCB>
    17aa:	f0 91 e6 0c 	lds	r31, 0x0CE6	; 0x800ce6 <pxCurrentTCB+0x1>
    17ae:	87 a5       	ldd	r24, Z+47	; 0x2f
    17b0:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <task_switch_in>
    17b4:	08 95       	ret

000017b6 <vTaskPlaceOnEventList>:
    17b6:	cf 92       	push	r12
    17b8:	df 92       	push	r13
    17ba:	ef 92       	push	r14
    17bc:	ff 92       	push	r15
    17be:	6a 01       	movw	r12, r20
    17c0:	7b 01       	movw	r14, r22
    17c2:	60 91 e5 0c 	lds	r22, 0x0CE5	; 0x800ce5 <pxCurrentTCB>
    17c6:	70 91 e6 0c 	lds	r23, 0x0CE6	; 0x800ce6 <pxCurrentTCB+0x1>
    17ca:	62 5f       	subi	r22, 0xF2	; 242
    17cc:	7f 4f       	sbci	r23, 0xFF	; 255
    17ce:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <vListInsert>
    17d2:	41 e0       	ldi	r20, 0x01	; 1
    17d4:	c7 01       	movw	r24, r14
    17d6:	b6 01       	movw	r22, r12
    17d8:	20 dc       	rcall	.-1984   	; 0x101a <prvAddCurrentTaskToDelayedList>
    17da:	ff 90       	pop	r15
    17dc:	ef 90       	pop	r14
    17de:	df 90       	pop	r13
    17e0:	cf 90       	pop	r12
    17e2:	08 95       	ret

000017e4 <vTaskPlaceOnEventListRestricted>:
    17e4:	cf 93       	push	r28
    17e6:	df 93       	push	r29
    17e8:	fc 01       	movw	r30, r24
    17ea:	cb 01       	movw	r24, r22
    17ec:	ba 01       	movw	r22, r20
    17ee:	a1 81       	ldd	r26, Z+1	; 0x01
    17f0:	b2 81       	ldd	r27, Z+2	; 0x02
    17f2:	c0 91 e5 0c 	lds	r28, 0x0CE5	; 0x800ce5 <pxCurrentTCB>
    17f6:	d0 91 e6 0c 	lds	r29, 0x0CE6	; 0x800ce6 <pxCurrentTCB+0x1>
    17fa:	bb 8b       	std	Y+19, r27	; 0x13
    17fc:	aa 8b       	std	Y+18, r26	; 0x12
    17fe:	c0 91 e5 0c 	lds	r28, 0x0CE5	; 0x800ce5 <pxCurrentTCB>
    1802:	d0 91 e6 0c 	lds	r29, 0x0CE6	; 0x800ce6 <pxCurrentTCB+0x1>
    1806:	16 96       	adiw	r26, 0x06	; 6
    1808:	4d 91       	ld	r20, X+
    180a:	5c 91       	ld	r21, X
    180c:	17 97       	sbiw	r26, 0x07	; 7
    180e:	5d 8b       	std	Y+21, r21	; 0x15
    1810:	4c 8b       	std	Y+20, r20	; 0x14
    1812:	16 96       	adiw	r26, 0x06	; 6
    1814:	cd 91       	ld	r28, X+
    1816:	dc 91       	ld	r29, X
    1818:	17 97       	sbiw	r26, 0x07	; 7
    181a:	40 91 e5 0c 	lds	r20, 0x0CE5	; 0x800ce5 <pxCurrentTCB>
    181e:	50 91 e6 0c 	lds	r21, 0x0CE6	; 0x800ce6 <pxCurrentTCB+0x1>
    1822:	42 5f       	subi	r20, 0xF2	; 242
    1824:	5f 4f       	sbci	r21, 0xFF	; 255
    1826:	5d 83       	std	Y+5, r21	; 0x05
    1828:	4c 83       	std	Y+4, r20	; 0x04
    182a:	40 91 e5 0c 	lds	r20, 0x0CE5	; 0x800ce5 <pxCurrentTCB>
    182e:	50 91 e6 0c 	lds	r21, 0x0CE6	; 0x800ce6 <pxCurrentTCB+0x1>
    1832:	42 5f       	subi	r20, 0xF2	; 242
    1834:	5f 4f       	sbci	r21, 0xFF	; 255
    1836:	17 96       	adiw	r26, 0x07	; 7
    1838:	5c 93       	st	X, r21
    183a:	4e 93       	st	-X, r20
    183c:	16 97       	sbiw	r26, 0x06	; 6
    183e:	a0 91 e5 0c 	lds	r26, 0x0CE5	; 0x800ce5 <pxCurrentTCB>
    1842:	b0 91 e6 0c 	lds	r27, 0x0CE6	; 0x800ce6 <pxCurrentTCB+0x1>
    1846:	59 96       	adiw	r26, 0x19	; 25
    1848:	fc 93       	st	X, r31
    184a:	ee 93       	st	-X, r30
    184c:	58 97       	sbiw	r26, 0x18	; 24
    184e:	30 81       	ld	r19, Z
    1850:	3f 5f       	subi	r19, 0xFF	; 255
    1852:	30 83       	st	Z, r19
    1854:	22 23       	and	r18, r18
    1856:	19 f0       	breq	.+6      	; 0x185e <vTaskPlaceOnEventListRestricted+0x7a>
    1858:	6f ef       	ldi	r22, 0xFF	; 255
    185a:	7f ef       	ldi	r23, 0xFF	; 255
    185c:	cb 01       	movw	r24, r22
    185e:	42 2f       	mov	r20, r18
    1860:	dc db       	rcall	.-2120   	; 0x101a <prvAddCurrentTaskToDelayedList>
    1862:	df 91       	pop	r29
    1864:	cf 91       	pop	r28
    1866:	08 95       	ret

00001868 <xTaskRemoveFromEventList>:
    1868:	cf 93       	push	r28
    186a:	df 93       	push	r29
    186c:	dc 01       	movw	r26, r24
    186e:	17 96       	adiw	r26, 0x07	; 7
    1870:	ed 91       	ld	r30, X+
    1872:	fc 91       	ld	r31, X
    1874:	18 97       	sbiw	r26, 0x08	; 8
    1876:	00 84       	ldd	r0, Z+8	; 0x08
    1878:	f1 85       	ldd	r31, Z+9	; 0x09
    187a:	e0 2d       	mov	r30, r0
    187c:	a0 8d       	ldd	r26, Z+24	; 0x18
    187e:	b1 8d       	ldd	r27, Z+25	; 0x19
    1880:	c2 89       	ldd	r28, Z+18	; 0x12
    1882:	d3 89       	ldd	r29, Z+19	; 0x13
    1884:	84 89       	ldd	r24, Z+20	; 0x14
    1886:	95 89       	ldd	r25, Z+21	; 0x15
    1888:	9f 83       	std	Y+7, r25	; 0x07
    188a:	8e 83       	std	Y+6, r24	; 0x06
    188c:	c4 89       	ldd	r28, Z+20	; 0x14
    188e:	d5 89       	ldd	r29, Z+21	; 0x15
    1890:	82 89       	ldd	r24, Z+18	; 0x12
    1892:	93 89       	ldd	r25, Z+19	; 0x13
    1894:	9d 83       	std	Y+5, r25	; 0x05
    1896:	8c 83       	std	Y+4, r24	; 0x04
    1898:	11 96       	adiw	r26, 0x01	; 1
    189a:	8d 91       	ld	r24, X+
    189c:	9c 91       	ld	r25, X
    189e:	12 97       	sbiw	r26, 0x02	; 2
    18a0:	9f 01       	movw	r18, r30
    18a2:	22 5f       	subi	r18, 0xF2	; 242
    18a4:	3f 4f       	sbci	r19, 0xFF	; 255
    18a6:	82 17       	cp	r24, r18
    18a8:	93 07       	cpc	r25, r19
    18aa:	31 f4       	brne	.+12     	; 0x18b8 <xTaskRemoveFromEventList+0x50>
    18ac:	84 89       	ldd	r24, Z+20	; 0x14
    18ae:	95 89       	ldd	r25, Z+21	; 0x15
    18b0:	12 96       	adiw	r26, 0x02	; 2
    18b2:	9c 93       	st	X, r25
    18b4:	8e 93       	st	-X, r24
    18b6:	11 97       	sbiw	r26, 0x01	; 1
    18b8:	11 8e       	std	Z+25, r1	; 0x19
    18ba:	10 8e       	std	Z+24, r1	; 0x18
    18bc:	8c 91       	ld	r24, X
    18be:	81 50       	subi	r24, 0x01	; 1
    18c0:	8c 93       	st	X, r24
    18c2:	80 91 26 0c 	lds	r24, 0x0C26	; 0x800c26 <uxSchedulerSuspended>
    18c6:	81 11       	cpse	r24, r1
    18c8:	52 c0       	rjmp	.+164    	; 0x196e <xTaskRemoveFromEventList+0x106>
    18ca:	a4 85       	ldd	r26, Z+12	; 0x0c
    18cc:	b5 85       	ldd	r27, Z+13	; 0x0d
    18ce:	c6 81       	ldd	r28, Z+6	; 0x06
    18d0:	d7 81       	ldd	r29, Z+7	; 0x07
    18d2:	80 85       	ldd	r24, Z+8	; 0x08
    18d4:	91 85       	ldd	r25, Z+9	; 0x09
    18d6:	9f 83       	std	Y+7, r25	; 0x07
    18d8:	8e 83       	std	Y+6, r24	; 0x06
    18da:	c0 85       	ldd	r28, Z+8	; 0x08
    18dc:	d1 85       	ldd	r29, Z+9	; 0x09
    18de:	86 81       	ldd	r24, Z+6	; 0x06
    18e0:	97 81       	ldd	r25, Z+7	; 0x07
    18e2:	9d 83       	std	Y+5, r25	; 0x05
    18e4:	8c 83       	std	Y+4, r24	; 0x04
    18e6:	11 96       	adiw	r26, 0x01	; 1
    18e8:	8d 91       	ld	r24, X+
    18ea:	9c 91       	ld	r25, X
    18ec:	12 97       	sbiw	r26, 0x02	; 2
    18ee:	9f 01       	movw	r18, r30
    18f0:	2e 5f       	subi	r18, 0xFE	; 254
    18f2:	3f 4f       	sbci	r19, 0xFF	; 255
    18f4:	82 17       	cp	r24, r18
    18f6:	93 07       	cpc	r25, r19
    18f8:	31 f4       	brne	.+12     	; 0x1906 <xTaskRemoveFromEventList+0x9e>
    18fa:	80 85       	ldd	r24, Z+8	; 0x08
    18fc:	91 85       	ldd	r25, Z+9	; 0x09
    18fe:	12 96       	adiw	r26, 0x02	; 2
    1900:	9c 93       	st	X, r25
    1902:	8e 93       	st	-X, r24
    1904:	11 97       	sbiw	r26, 0x01	; 1
    1906:	15 86       	std	Z+13, r1	; 0x0d
    1908:	14 86       	std	Z+12, r1	; 0x0c
    190a:	8c 91       	ld	r24, X
    190c:	81 50       	subi	r24, 0x01	; 1
    190e:	8c 93       	st	X, r24
    1910:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1912:	80 91 35 0c 	lds	r24, 0x0C35	; 0x800c35 <uxTopReadyPriority>
    1916:	8a 17       	cp	r24, r26
    1918:	10 f4       	brcc	.+4      	; 0x191e <xTaskRemoveFromEventList+0xb6>
    191a:	a0 93 35 0c 	sts	0x0C35, r26	; 0x800c35 <uxTopReadyPriority>
    191e:	8b e0       	ldi	r24, 0x0B	; 11
    1920:	8a 9f       	mul	r24, r26
    1922:	d0 01       	movw	r26, r0
    1924:	11 24       	eor	r1, r1
    1926:	a9 58       	subi	r26, 0x89	; 137
    1928:	b3 4f       	sbci	r27, 0xF3	; 243
    192a:	11 96       	adiw	r26, 0x01	; 1
    192c:	0d 90       	ld	r0, X+
    192e:	bc 91       	ld	r27, X
    1930:	a0 2d       	mov	r26, r0
    1932:	b7 83       	std	Z+7, r27	; 0x07
    1934:	a6 83       	std	Z+6, r26	; 0x06
    1936:	16 96       	adiw	r26, 0x06	; 6
    1938:	4d 91       	ld	r20, X+
    193a:	5c 91       	ld	r21, X
    193c:	17 97       	sbiw	r26, 0x07	; 7
    193e:	51 87       	std	Z+9, r21	; 0x09
    1940:	40 87       	std	Z+8, r20	; 0x08
    1942:	16 96       	adiw	r26, 0x06	; 6
    1944:	cd 91       	ld	r28, X+
    1946:	dc 91       	ld	r29, X
    1948:	17 97       	sbiw	r26, 0x07	; 7
    194a:	3d 83       	std	Y+5, r19	; 0x05
    194c:	2c 83       	std	Y+4, r18	; 0x04
    194e:	17 96       	adiw	r26, 0x07	; 7
    1950:	3c 93       	st	X, r19
    1952:	2e 93       	st	-X, r18
    1954:	16 97       	sbiw	r26, 0x06	; 6
    1956:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1958:	8a 9f       	mul	r24, r26
    195a:	d0 01       	movw	r26, r0
    195c:	11 24       	eor	r1, r1
    195e:	a9 58       	subi	r26, 0x89	; 137
    1960:	b3 4f       	sbci	r27, 0xF3	; 243
    1962:	b5 87       	std	Z+13, r27	; 0x0d
    1964:	a4 87       	std	Z+12, r26	; 0x0c
    1966:	8c 91       	ld	r24, X
    1968:	8f 5f       	subi	r24, 0xFF	; 255
    196a:	8c 93       	st	X, r24
    196c:	1c c0       	rjmp	.+56     	; 0x19a6 <xTaskRemoveFromEventList+0x13e>
    196e:	42 e5       	ldi	r20, 0x52	; 82
    1970:	5c e0       	ldi	r21, 0x0C	; 12
    1972:	da 01       	movw	r26, r20
    1974:	11 96       	adiw	r26, 0x01	; 1
    1976:	cd 91       	ld	r28, X+
    1978:	dc 91       	ld	r29, X
    197a:	12 97       	sbiw	r26, 0x02	; 2
    197c:	d3 8b       	std	Z+19, r29	; 0x13
    197e:	c2 8b       	std	Z+18, r28	; 0x12
    1980:	8e 81       	ldd	r24, Y+6	; 0x06
    1982:	9f 81       	ldd	r25, Y+7	; 0x07
    1984:	95 8b       	std	Z+21, r25	; 0x15
    1986:	84 8b       	std	Z+20, r24	; 0x14
    1988:	8e 81       	ldd	r24, Y+6	; 0x06
    198a:	9f 81       	ldd	r25, Y+7	; 0x07
    198c:	dc 01       	movw	r26, r24
    198e:	15 96       	adiw	r26, 0x05	; 5
    1990:	3c 93       	st	X, r19
    1992:	2e 93       	st	-X, r18
    1994:	14 97       	sbiw	r26, 0x04	; 4
    1996:	3f 83       	std	Y+7, r19	; 0x07
    1998:	2e 83       	std	Y+6, r18	; 0x06
    199a:	51 8f       	std	Z+25, r21	; 0x19
    199c:	40 8f       	std	Z+24, r20	; 0x18
    199e:	da 01       	movw	r26, r20
    19a0:	8c 91       	ld	r24, X
    19a2:	8f 5f       	subi	r24, 0xFF	; 255
    19a4:	8c 93       	st	X, r24
    19a6:	92 8d       	ldd	r25, Z+26	; 0x1a
    19a8:	e0 91 e5 0c 	lds	r30, 0x0CE5	; 0x800ce5 <pxCurrentTCB>
    19ac:	f0 91 e6 0c 	lds	r31, 0x0CE6	; 0x800ce6 <pxCurrentTCB+0x1>
    19b0:	82 8d       	ldd	r24, Z+26	; 0x1a
    19b2:	89 17       	cp	r24, r25
    19b4:	20 f4       	brcc	.+8      	; 0x19be <xTaskRemoveFromEventList+0x156>
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	80 93 2f 0c 	sts	0x0C2F, r24	; 0x800c2f <xYieldPending>
    19bc:	01 c0       	rjmp	.+2      	; 0x19c0 <xTaskRemoveFromEventList+0x158>
    19be:	80 e0       	ldi	r24, 0x00	; 0
    19c0:	df 91       	pop	r29
    19c2:	cf 91       	pop	r28
    19c4:	08 95       	ret

000019c6 <vTaskInternalSetTimeOutState>:
    19c6:	20 91 2e 0c 	lds	r18, 0x0C2E	; 0x800c2e <xNumOfOverflows>
    19ca:	fc 01       	movw	r30, r24
    19cc:	20 83       	st	Z, r18
    19ce:	40 91 36 0c 	lds	r20, 0x0C36	; 0x800c36 <xTickCount>
    19d2:	50 91 37 0c 	lds	r21, 0x0C37	; 0x800c37 <xTickCount+0x1>
    19d6:	60 91 38 0c 	lds	r22, 0x0C38	; 0x800c38 <xTickCount+0x2>
    19da:	70 91 39 0c 	lds	r23, 0x0C39	; 0x800c39 <xTickCount+0x3>
    19de:	41 83       	std	Z+1, r20	; 0x01
    19e0:	52 83       	std	Z+2, r21	; 0x02
    19e2:	63 83       	std	Z+3, r22	; 0x03
    19e4:	74 83       	std	Z+4, r23	; 0x04
    19e6:	08 95       	ret

000019e8 <xTaskCheckForTimeOut>:
    19e8:	8f 92       	push	r8
    19ea:	9f 92       	push	r9
    19ec:	af 92       	push	r10
    19ee:	bf 92       	push	r11
    19f0:	cf 92       	push	r12
    19f2:	df 92       	push	r13
    19f4:	ef 92       	push	r14
    19f6:	ff 92       	push	r15
    19f8:	0f 93       	push	r16
    19fa:	1f 93       	push	r17
    19fc:	cf 93       	push	r28
    19fe:	df 93       	push	r29
    1a00:	fb 01       	movw	r30, r22
    1a02:	0f b6       	in	r0, 0x3f	; 63
    1a04:	f8 94       	cli
    1a06:	0f 92       	push	r0
    1a08:	c0 90 36 0c 	lds	r12, 0x0C36	; 0x800c36 <xTickCount>
    1a0c:	d0 90 37 0c 	lds	r13, 0x0C37	; 0x800c37 <xTickCount+0x1>
    1a10:	e0 90 38 0c 	lds	r14, 0x0C38	; 0x800c38 <xTickCount+0x2>
    1a14:	f0 90 39 0c 	lds	r15, 0x0C39	; 0x800c39 <xTickCount+0x3>
    1a18:	dc 01       	movw	r26, r24
    1a1a:	11 96       	adiw	r26, 0x01	; 1
    1a1c:	0d 91       	ld	r16, X+
    1a1e:	1d 91       	ld	r17, X+
    1a20:	2d 91       	ld	r18, X+
    1a22:	3c 91       	ld	r19, X
    1a24:	14 97       	sbiw	r26, 0x04	; 4
    1a26:	46 01       	movw	r8, r12
    1a28:	57 01       	movw	r10, r14
    1a2a:	80 1a       	sub	r8, r16
    1a2c:	91 0a       	sbc	r9, r17
    1a2e:	a2 0a       	sbc	r10, r18
    1a30:	b3 0a       	sbc	r11, r19
    1a32:	40 81       	ld	r20, Z
    1a34:	51 81       	ldd	r21, Z+1	; 0x01
    1a36:	62 81       	ldd	r22, Z+2	; 0x02
    1a38:	73 81       	ldd	r23, Z+3	; 0x03
    1a3a:	4f 3f       	cpi	r20, 0xFF	; 255
    1a3c:	bf ef       	ldi	r27, 0xFF	; 255
    1a3e:	5b 07       	cpc	r21, r27
    1a40:	6b 07       	cpc	r22, r27
    1a42:	7b 07       	cpc	r23, r27
    1a44:	39 f1       	breq	.+78     	; 0x1a94 <xTaskCheckForTimeOut+0xac>
    1a46:	ec 01       	movw	r28, r24
    1a48:	b8 81       	ld	r27, Y
    1a4a:	a0 91 2e 0c 	lds	r26, 0x0C2E	; 0x800c2e <xNumOfOverflows>
    1a4e:	ba 17       	cp	r27, r26
    1a50:	59 f0       	breq	.+22     	; 0x1a68 <xTaskCheckForTimeOut+0x80>
    1a52:	c0 16       	cp	r12, r16
    1a54:	d1 06       	cpc	r13, r17
    1a56:	e2 06       	cpc	r14, r18
    1a58:	f3 06       	cpc	r15, r19
    1a5a:	30 f0       	brcs	.+12     	; 0x1a68 <xTaskCheckForTimeOut+0x80>
    1a5c:	10 82       	st	Z, r1
    1a5e:	11 82       	std	Z+1, r1	; 0x01
    1a60:	12 82       	std	Z+2, r1	; 0x02
    1a62:	13 82       	std	Z+3, r1	; 0x03
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	17 c0       	rjmp	.+46     	; 0x1a96 <xTaskCheckForTimeOut+0xae>
    1a68:	84 16       	cp	r8, r20
    1a6a:	95 06       	cpc	r9, r21
    1a6c:	a6 06       	cpc	r10, r22
    1a6e:	b7 06       	cpc	r11, r23
    1a70:	58 f4       	brcc	.+22     	; 0x1a88 <xTaskCheckForTimeOut+0xa0>
    1a72:	48 19       	sub	r20, r8
    1a74:	59 09       	sbc	r21, r9
    1a76:	6a 09       	sbc	r22, r10
    1a78:	7b 09       	sbc	r23, r11
    1a7a:	40 83       	st	Z, r20
    1a7c:	51 83       	std	Z+1, r21	; 0x01
    1a7e:	62 83       	std	Z+2, r22	; 0x02
    1a80:	73 83       	std	Z+3, r23	; 0x03
    1a82:	a1 df       	rcall	.-190    	; 0x19c6 <vTaskInternalSetTimeOutState>
    1a84:	80 e0       	ldi	r24, 0x00	; 0
    1a86:	07 c0       	rjmp	.+14     	; 0x1a96 <xTaskCheckForTimeOut+0xae>
    1a88:	10 82       	st	Z, r1
    1a8a:	11 82       	std	Z+1, r1	; 0x01
    1a8c:	12 82       	std	Z+2, r1	; 0x02
    1a8e:	13 82       	std	Z+3, r1	; 0x03
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	01 c0       	rjmp	.+2      	; 0x1a96 <xTaskCheckForTimeOut+0xae>
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	0f 90       	pop	r0
    1a98:	0f be       	out	0x3f, r0	; 63
    1a9a:	df 91       	pop	r29
    1a9c:	cf 91       	pop	r28
    1a9e:	1f 91       	pop	r17
    1aa0:	0f 91       	pop	r16
    1aa2:	ff 90       	pop	r15
    1aa4:	ef 90       	pop	r14
    1aa6:	df 90       	pop	r13
    1aa8:	cf 90       	pop	r12
    1aaa:	bf 90       	pop	r11
    1aac:	af 90       	pop	r10
    1aae:	9f 90       	pop	r9
    1ab0:	8f 90       	pop	r8
    1ab2:	08 95       	ret

00001ab4 <vTaskMissedYield>:
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	80 93 2f 0c 	sts	0x0C2F, r24	; 0x800c2f <xYieldPending>
    1aba:	08 95       	ret

00001abc <xTaskGetSchedulerState>:
    1abc:	80 91 34 0c 	lds	r24, 0x0C34	; 0x800c34 <xSchedulerRunning>
    1ac0:	88 23       	and	r24, r24
    1ac2:	31 f0       	breq	.+12     	; 0x1ad0 <xTaskGetSchedulerState+0x14>
    1ac4:	80 91 26 0c 	lds	r24, 0x0C26	; 0x800c26 <uxSchedulerSuspended>
    1ac8:	81 11       	cpse	r24, r1
    1aca:	04 c0       	rjmp	.+8      	; 0x1ad4 <xTaskGetSchedulerState+0x18>
    1acc:	82 e0       	ldi	r24, 0x02	; 2
    1ace:	08 95       	ret
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	08 95       	ret
    1ad4:	80 e0       	ldi	r24, 0x00	; 0
    1ad6:	08 95       	ret

00001ad8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    1ad8:	0f 93       	push	r16
    1ada:	1f 93       	push	r17
    1adc:	cf 93       	push	r28
    1ade:	df 93       	push	r29
    1ae0:	fc 01       	movw	r30, r24
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;

        if( pxMutexHolder != NULL )
    1ae2:	89 2b       	or	r24, r25
    1ae4:	09 f4       	brne	.+2      	; 0x1ae8 <xTaskPriorityDisinherit+0x10>
    1ae6:	49 c0       	rjmp	.+146    	; 0x1b7a <xTaskPriorityDisinherit+0xa2>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
    1ae8:	86 a5       	ldd	r24, Z+46	; 0x2e
    1aea:	81 50       	subi	r24, 0x01	; 1
    1aec:	86 a7       	std	Z+46, r24	; 0x2e

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    1aee:	22 8d       	ldd	r18, Z+26	; 0x1a
    1af0:	95 a5       	ldd	r25, Z+45	; 0x2d
    1af2:	29 17       	cp	r18, r25
    1af4:	09 f4       	brne	.+2      	; 0x1af8 <xTaskPriorityDisinherit+0x20>
    1af6:	43 c0       	rjmp	.+134    	; 0x1b7e <xTaskPriorityDisinherit+0xa6>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    1af8:	81 11       	cpse	r24, r1
    1afa:	43 c0       	rjmp	.+134    	; 0x1b82 <xTaskPriorityDisinherit+0xaa>
    1afc:	ef 01       	movw	r28, r30
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1afe:	8f 01       	movw	r16, r30
    1b00:	0e 5f       	subi	r16, 0xFE	; 254
    1b02:	1f 4f       	sbci	r17, 0xFF	; 255
    1b04:	c8 01       	movw	r24, r16
    1b06:	0e 94 b8 02 	call	0x570	; 0x570 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
    1b0a:	ed a5       	ldd	r30, Y+45	; 0x2d
    1b0c:	ea 8f       	std	Y+26, r30	; 0x1a

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1b0e:	8a e0       	ldi	r24, 0x0A	; 10
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	a0 e0       	ldi	r26, 0x00	; 0
    1b14:	b0 e0       	ldi	r27, 0x00	; 0
    1b16:	8e 1b       	sub	r24, r30
    1b18:	91 09       	sbc	r25, r1
    1b1a:	a1 09       	sbc	r26, r1
    1b1c:	b1 09       	sbc	r27, r1
    1b1e:	8e 87       	std	Y+14, r24	; 0x0e
    1b20:	9f 87       	std	Y+15, r25	; 0x0f
    1b22:	a8 8b       	std	Y+16, r26	; 0x10
    1b24:	b9 8b       	std	Y+17, r27	; 0x11
                    prvAddTaskToReadyList( pxTCB );
    1b26:	80 91 35 0c 	lds	r24, 0x0C35	; 0x800c35 <uxTopReadyPriority>
    1b2a:	8e 17       	cp	r24, r30
    1b2c:	10 f4       	brcc	.+4      	; 0x1b32 <xTaskPriorityDisinherit+0x5a>
    1b2e:	e0 93 35 0c 	sts	0x0C35, r30	; 0x800c35 <uxTopReadyPriority>
    1b32:	8b e0       	ldi	r24, 0x0B	; 11
    1b34:	8e 9f       	mul	r24, r30
    1b36:	f0 01       	movw	r30, r0
    1b38:	11 24       	eor	r1, r1
    1b3a:	e9 58       	subi	r30, 0x89	; 137
    1b3c:	f3 4f       	sbci	r31, 0xF3	; 243
    1b3e:	01 80       	ldd	r0, Z+1	; 0x01
    1b40:	f2 81       	ldd	r31, Z+2	; 0x02
    1b42:	e0 2d       	mov	r30, r0
    1b44:	ff 83       	std	Y+7, r31	; 0x07
    1b46:	ee 83       	std	Y+6, r30	; 0x06
    1b48:	26 81       	ldd	r18, Z+6	; 0x06
    1b4a:	37 81       	ldd	r19, Z+7	; 0x07
    1b4c:	39 87       	std	Y+9, r19	; 0x09
    1b4e:	28 87       	std	Y+8, r18	; 0x08
    1b50:	a6 81       	ldd	r26, Z+6	; 0x06
    1b52:	b7 81       	ldd	r27, Z+7	; 0x07
    1b54:	15 96       	adiw	r26, 0x05	; 5
    1b56:	1c 93       	st	X, r17
    1b58:	0e 93       	st	-X, r16
    1b5a:	14 97       	sbiw	r26, 0x04	; 4
    1b5c:	17 83       	std	Z+7, r17	; 0x07
    1b5e:	06 83       	std	Z+6, r16	; 0x06
    1b60:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1b62:	8e 9f       	mul	r24, r30
    1b64:	f0 01       	movw	r30, r0
    1b66:	11 24       	eor	r1, r1
    1b68:	e9 58       	subi	r30, 0x89	; 137
    1b6a:	f3 4f       	sbci	r31, 0xF3	; 243
    1b6c:	fd 87       	std	Y+13, r31	; 0x0d
    1b6e:	ec 87       	std	Y+12, r30	; 0x0c
    1b70:	80 81       	ld	r24, Z
    1b72:	8f 5f       	subi	r24, 0xFF	; 255
    1b74:	80 83       	st	Z, r24
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	05 c0       	rjmp	.+10     	; 0x1b84 <xTaskPriorityDisinherit+0xac>
#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;
    1b7a:	80 e0       	ldi	r24, 0x00	; 0
    1b7c:	03 c0       	rjmp	.+6      	; 0x1b84 <xTaskPriorityDisinherit+0xac>
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	01 c0       	rjmp	.+2      	; 0x1b84 <xTaskPriorityDisinherit+0xac>
    1b82:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    1b84:	df 91       	pop	r29
    1b86:	cf 91       	pop	r28
    1b88:	1f 91       	pop	r17
    1b8a:	0f 91       	pop	r16
    1b8c:	08 95       	ret

00001b8e <prvGetNextExpireTime>:
    1b8e:	dc 01       	movw	r26, r24
    1b90:	e0 91 f1 0c 	lds	r30, 0x0CF1	; 0x800cf1 <pxCurrentTimerList>
    1b94:	f0 91 f2 0c 	lds	r31, 0x0CF2	; 0x800cf2 <pxCurrentTimerList+0x1>
    1b98:	80 81       	ld	r24, Z
    1b9a:	91 e0       	ldi	r25, 0x01	; 1
    1b9c:	81 11       	cpse	r24, r1
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	9c 93       	st	X, r25
    1ba2:	91 11       	cpse	r25, r1
    1ba4:	08 c0       	rjmp	.+16     	; 0x1bb6 <prvGetNextExpireTime+0x28>
    1ba6:	07 80       	ldd	r0, Z+7	; 0x07
    1ba8:	f0 85       	ldd	r31, Z+8	; 0x08
    1baa:	e0 2d       	mov	r30, r0
    1bac:	60 81       	ld	r22, Z
    1bae:	71 81       	ldd	r23, Z+1	; 0x01
    1bb0:	82 81       	ldd	r24, Z+2	; 0x02
    1bb2:	93 81       	ldd	r25, Z+3	; 0x03
    1bb4:	08 95       	ret
    1bb6:	60 e0       	ldi	r22, 0x00	; 0
    1bb8:	70 e0       	ldi	r23, 0x00	; 0
    1bba:	cb 01       	movw	r24, r22
    1bbc:	08 95       	ret

00001bbe <prvInsertTimerInActiveList>:
    1bbe:	cf 92       	push	r12
    1bc0:	df 92       	push	r13
    1bc2:	ef 92       	push	r14
    1bc4:	ff 92       	push	r15
    1bc6:	0f 93       	push	r16
    1bc8:	1f 93       	push	r17
    1bca:	fc 01       	movw	r30, r24
    1bcc:	42 83       	std	Z+2, r20	; 0x02
    1bce:	53 83       	std	Z+3, r21	; 0x03
    1bd0:	64 83       	std	Z+4, r22	; 0x04
    1bd2:	75 83       	std	Z+5, r23	; 0x05
    1bd4:	93 87       	std	Z+11, r25	; 0x0b
    1bd6:	82 87       	std	Z+10, r24	; 0x0a
    1bd8:	04 17       	cp	r16, r20
    1bda:	15 07       	cpc	r17, r21
    1bdc:	26 07       	cpc	r18, r22
    1bde:	37 07       	cpc	r19, r23
    1be0:	c0 f0       	brcs	.+48     	; 0x1c12 <prvInsertTimerInActiveList+0x54>
    1be2:	0c 19       	sub	r16, r12
    1be4:	1d 09       	sbc	r17, r13
    1be6:	2e 09       	sbc	r18, r14
    1be8:	3f 09       	sbc	r19, r15
    1bea:	86 85       	ldd	r24, Z+14	; 0x0e
    1bec:	97 85       	ldd	r25, Z+15	; 0x0f
    1bee:	a0 89       	ldd	r26, Z+16	; 0x10
    1bf0:	b1 89       	ldd	r27, Z+17	; 0x11
    1bf2:	08 17       	cp	r16, r24
    1bf4:	19 07       	cpc	r17, r25
    1bf6:	2a 07       	cpc	r18, r26
    1bf8:	3b 07       	cpc	r19, r27
    1bfa:	00 f5       	brcc	.+64     	; 0x1c3c <prvInsertTimerInActiveList+0x7e>
    1bfc:	bf 01       	movw	r22, r30
    1bfe:	6e 5f       	subi	r22, 0xFE	; 254
    1c00:	7f 4f       	sbci	r23, 0xFF	; 255
    1c02:	80 91 ef 0c 	lds	r24, 0x0CEF	; 0x800cef <pxOverflowTimerList>
    1c06:	90 91 f0 0c 	lds	r25, 0x0CF0	; 0x800cf0 <pxOverflowTimerList+0x1>
    1c0a:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <vListInsert>
    1c0e:	80 e0       	ldi	r24, 0x00	; 0
    1c10:	18 c0       	rjmp	.+48     	; 0x1c42 <prvInsertTimerInActiveList+0x84>
    1c12:	0c 15       	cp	r16, r12
    1c14:	1d 05       	cpc	r17, r13
    1c16:	2e 05       	cpc	r18, r14
    1c18:	3f 05       	cpc	r19, r15
    1c1a:	28 f4       	brcc	.+10     	; 0x1c26 <prvInsertTimerInActiveList+0x68>
    1c1c:	4c 15       	cp	r20, r12
    1c1e:	5d 05       	cpc	r21, r13
    1c20:	6e 05       	cpc	r22, r14
    1c22:	7f 05       	cpc	r23, r15
    1c24:	68 f4       	brcc	.+26     	; 0x1c40 <prvInsertTimerInActiveList+0x82>
    1c26:	bf 01       	movw	r22, r30
    1c28:	6e 5f       	subi	r22, 0xFE	; 254
    1c2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c2c:	80 91 f1 0c 	lds	r24, 0x0CF1	; 0x800cf1 <pxCurrentTimerList>
    1c30:	90 91 f2 0c 	lds	r25, 0x0CF2	; 0x800cf2 <pxCurrentTimerList+0x1>
    1c34:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <vListInsert>
    1c38:	80 e0       	ldi	r24, 0x00	; 0
    1c3a:	03 c0       	rjmp	.+6      	; 0x1c42 <prvInsertTimerInActiveList+0x84>
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	01 c0       	rjmp	.+2      	; 0x1c42 <prvInsertTimerInActiveList+0x84>
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	1f 91       	pop	r17
    1c44:	0f 91       	pop	r16
    1c46:	ff 90       	pop	r15
    1c48:	ef 90       	pop	r14
    1c4a:	df 90       	pop	r13
    1c4c:	cf 90       	pop	r12
    1c4e:	08 95       	ret

00001c50 <prvCheckForValidListAndQueue>:
    1c50:	0f b6       	in	r0, 0x3f	; 63
    1c52:	f8 94       	cli
    1c54:	0f 92       	push	r0
    1c56:	80 91 ed 0c 	lds	r24, 0x0CED	; 0x800ced <xTimerQueue>
    1c5a:	90 91 ee 0c 	lds	r25, 0x0CEE	; 0x800cee <xTimerQueue+0x1>
    1c5e:	89 2b       	or	r24, r25
    1c60:	e9 f4       	brne	.+58     	; 0x1c9c <prvCheckForValidListAndQueue+0x4c>
    1c62:	8e ef       	ldi	r24, 0xFE	; 254
    1c64:	9c e0       	ldi	r25, 0x0C	; 12
    1c66:	0e 94 66 02 	call	0x4cc	; 0x4cc <vListInitialise>
    1c6a:	83 ef       	ldi	r24, 0xF3	; 243
    1c6c:	9c e0       	ldi	r25, 0x0C	; 12
    1c6e:	0e 94 66 02 	call	0x4cc	; 0x4cc <vListInitialise>
    1c72:	8e ef       	ldi	r24, 0xFE	; 254
    1c74:	9c e0       	ldi	r25, 0x0C	; 12
    1c76:	90 93 f2 0c 	sts	0x0CF2, r25	; 0x800cf2 <pxCurrentTimerList+0x1>
    1c7a:	80 93 f1 0c 	sts	0x0CF1, r24	; 0x800cf1 <pxCurrentTimerList>
    1c7e:	83 ef       	ldi	r24, 0xF3	; 243
    1c80:	9c e0       	ldi	r25, 0x0C	; 12
    1c82:	90 93 f0 0c 	sts	0x0CF0, r25	; 0x800cf0 <pxOverflowTimerList+0x1>
    1c86:	80 93 ef 0c 	sts	0x0CEF, r24	; 0x800cef <pxOverflowTimerList>
    1c8a:	40 e0       	ldi	r20, 0x00	; 0
    1c8c:	67 e0       	ldi	r22, 0x07	; 7
    1c8e:	8a e0       	ldi	r24, 0x0A	; 10
    1c90:	0e 94 14 05 	call	0xa28	; 0xa28 <xQueueGenericCreate>
    1c94:	90 93 ee 0c 	sts	0x0CEE, r25	; 0x800cee <xTimerQueue+0x1>
    1c98:	80 93 ed 0c 	sts	0x0CED, r24	; 0x800ced <xTimerQueue>
    1c9c:	0f 90       	pop	r0
    1c9e:	0f be       	out	0x3f, r0	; 63
    1ca0:	08 95       	ret

00001ca2 <xTimerCreateTimerTask>:
    1ca2:	ef 92       	push	r14
    1ca4:	ff 92       	push	r15
    1ca6:	0f 93       	push	r16
    1ca8:	d3 df       	rcall	.-90     	; 0x1c50 <prvCheckForValidListAndQueue>
    1caa:	80 91 ed 0c 	lds	r24, 0x0CED	; 0x800ced <xTimerQueue>
    1cae:	90 91 ee 0c 	lds	r25, 0x0CEE	; 0x800cee <xTimerQueue+0x1>
    1cb2:	89 2b       	or	r24, r25
    1cb4:	89 f0       	breq	.+34     	; 0x1cd8 <xTimerCreateTimerTask+0x36>
    1cb6:	0f 2e       	mov	r0, r31
    1cb8:	fb ee       	ldi	r31, 0xEB	; 235
    1cba:	ef 2e       	mov	r14, r31
    1cbc:	fc e0       	ldi	r31, 0x0C	; 12
    1cbe:	ff 2e       	mov	r15, r31
    1cc0:	f0 2d       	mov	r31, r0
    1cc2:	03 e0       	ldi	r16, 0x03	; 3
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	40 ec       	ldi	r20, 0xC0	; 192
    1cca:	50 e0       	ldi	r21, 0x00	; 0
    1ccc:	6a e4       	ldi	r22, 0x4A	; 74
    1cce:	72 e0       	ldi	r23, 0x02	; 2
    1cd0:	85 e8       	ldi	r24, 0x85	; 133
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	41 da       	rcall	.-2942   	; 0x1158 <xTaskCreate>
    1cd6:	01 c0       	rjmp	.+2      	; 0x1cda <xTimerCreateTimerTask+0x38>
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	0f 91       	pop	r16
    1cdc:	ff 90       	pop	r15
    1cde:	ef 90       	pop	r14
    1ce0:	08 95       	ret

00001ce2 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    1ce2:	8f 92       	push	r8
    1ce4:	9f 92       	push	r9
    1ce6:	af 92       	push	r10
    1ce8:	bf 92       	push	r11
    1cea:	cf 92       	push	r12
    1cec:	df 92       	push	r13
    1cee:	ef 92       	push	r14
    1cf0:	ff 92       	push	r15
    1cf2:	0f 93       	push	r16
    1cf4:	1f 93       	push	r17
    1cf6:	cf 93       	push	r28
    1cf8:	df 93       	push	r29
    1cfa:	cd b7       	in	r28, 0x3d	; 61
    1cfc:	de b7       	in	r29, 0x3e	; 62
    1cfe:	27 97       	sbiw	r28, 0x07	; 7
    1d00:	0f b6       	in	r0, 0x3f	; 63
    1d02:	f8 94       	cli
    1d04:	de bf       	out	0x3e, r29	; 62
    1d06:	0f be       	out	0x3f, r0	; 63
    1d08:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    1d0a:	e0 91 ed 0c 	lds	r30, 0x0CED	; 0x800ced <xTimerQueue>
    1d0e:	f0 91 ee 0c 	lds	r31, 0x0CEE	; 0x800cee <xTimerQueue+0x1>
    1d12:	30 97       	sbiw	r30, 0x00	; 0
    1d14:	81 f1       	breq	.+96     	; 0x1d76 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    1d16:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    1d18:	2a 83       	std	Y+2, r18	; 0x02
    1d1a:	3b 83       	std	Y+3, r19	; 0x03
    1d1c:	4c 83       	std	Y+4, r20	; 0x04
    1d1e:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    1d20:	9f 83       	std	Y+7, r25	; 0x07
    1d22:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    1d24:	66 30       	cpi	r22, 0x06	; 6
    1d26:	f4 f4       	brge	.+60     	; 0x1d64 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    1d28:	c9 de       	rcall	.-622    	; 0x1abc <xTaskGetSchedulerState>
    1d2a:	82 30       	cpi	r24, 0x02	; 2
    1d2c:	69 f4       	brne	.+26     	; 0x1d48 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    1d2e:	00 e0       	ldi	r16, 0x00	; 0
    1d30:	a7 01       	movw	r20, r14
    1d32:	96 01       	movw	r18, r12
    1d34:	be 01       	movw	r22, r28
    1d36:	6f 5f       	subi	r22, 0xFF	; 255
    1d38:	7f 4f       	sbci	r23, 0xFF	; 255
    1d3a:	80 91 ed 0c 	lds	r24, 0x0CED	; 0x800ced <xTimerQueue>
    1d3e:	90 91 ee 0c 	lds	r25, 0x0CEE	; 0x800cee <xTimerQueue+0x1>
    1d42:	0e 94 37 05 	call	0xa6e	; 0xa6e <xQueueGenericSend>
    1d46:	18 c0       	rjmp	.+48     	; 0x1d78 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    1d48:	00 e0       	ldi	r16, 0x00	; 0
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	a9 01       	movw	r20, r18
    1d50:	be 01       	movw	r22, r28
    1d52:	6f 5f       	subi	r22, 0xFF	; 255
    1d54:	7f 4f       	sbci	r23, 0xFF	; 255
    1d56:	80 91 ed 0c 	lds	r24, 0x0CED	; 0x800ced <xTimerQueue>
    1d5a:	90 91 ee 0c 	lds	r25, 0x0CEE	; 0x800cee <xTimerQueue+0x1>
    1d5e:	0e 94 37 05 	call	0xa6e	; 0xa6e <xQueueGenericSend>
    1d62:	0a c0       	rjmp	.+20     	; 0x1d78 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	a8 01       	movw	r20, r16
    1d68:	be 01       	movw	r22, r28
    1d6a:	6f 5f       	subi	r22, 0xFF	; 255
    1d6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d6e:	cf 01       	movw	r24, r30
    1d70:	0e 94 c2 05 	call	0xb84	; 0xb84 <xQueueGenericSendFromISR>
    1d74:	01 c0       	rjmp	.+2      	; 0x1d78 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    1d76:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    1d78:	27 96       	adiw	r28, 0x07	; 7
    1d7a:	0f b6       	in	r0, 0x3f	; 63
    1d7c:	f8 94       	cli
    1d7e:	de bf       	out	0x3e, r29	; 62
    1d80:	0f be       	out	0x3f, r0	; 63
    1d82:	cd bf       	out	0x3d, r28	; 61
    1d84:	df 91       	pop	r29
    1d86:	cf 91       	pop	r28
    1d88:	1f 91       	pop	r17
    1d8a:	0f 91       	pop	r16
    1d8c:	ff 90       	pop	r15
    1d8e:	ef 90       	pop	r14
    1d90:	df 90       	pop	r13
    1d92:	cf 90       	pop	r12
    1d94:	bf 90       	pop	r11
    1d96:	af 90       	pop	r10
    1d98:	9f 90       	pop	r9
    1d9a:	8f 90       	pop	r8
    1d9c:	08 95       	ret

00001d9e <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    1d9e:	8f 92       	push	r8
    1da0:	9f 92       	push	r9
    1da2:	af 92       	push	r10
    1da4:	bf 92       	push	r11
    1da6:	cf 92       	push	r12
    1da8:	df 92       	push	r13
    1daa:	ef 92       	push	r14
    1dac:	ff 92       	push	r15
    1dae:	0f 93       	push	r16
    1db0:	1f 93       	push	r17
    1db2:	cf 93       	push	r28
    1db4:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    1db6:	3b c0       	rjmp	.+118    	; 0x1e2e <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    1db8:	07 80       	ldd	r0, Z+7	; 0x07
    1dba:	f0 85       	ldd	r31, Z+8	; 0x08
    1dbc:	e0 2d       	mov	r30, r0
    1dbe:	80 80       	ld	r8, Z
    1dc0:	91 80       	ldd	r9, Z+1	; 0x01
    1dc2:	a2 80       	ldd	r10, Z+2	; 0x02
    1dc4:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    1dc6:	c0 85       	ldd	r28, Z+8	; 0x08
    1dc8:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1dca:	8e 01       	movw	r16, r28
    1dcc:	0e 5f       	subi	r16, 0xFE	; 254
    1dce:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd0:	c8 01       	movw	r24, r16
    1dd2:	0e 94 b8 02 	call	0x570	; 0x570 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    1dd6:	ec 89       	ldd	r30, Y+20	; 0x14
    1dd8:	fd 89       	ldd	r31, Y+21	; 0x15
    1dda:	ce 01       	movw	r24, r28
    1ddc:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    1dde:	8e 89       	ldd	r24, Y+22	; 0x16
    1de0:	82 ff       	sbrs	r24, 2
    1de2:	25 c0       	rjmp	.+74     	; 0x1e2e <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    1de4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1de6:	9f 85       	ldd	r25, Y+15	; 0x0f
    1de8:	a8 89       	ldd	r26, Y+16	; 0x10
    1dea:	b9 89       	ldd	r27, Y+17	; 0x11
    1dec:	88 0d       	add	r24, r8
    1dee:	99 1d       	adc	r25, r9
    1df0:	aa 1d       	adc	r26, r10
    1df2:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    1df4:	88 16       	cp	r8, r24
    1df6:	99 06       	cpc	r9, r25
    1df8:	aa 06       	cpc	r10, r26
    1dfa:	bb 06       	cpc	r11, r27
    1dfc:	70 f4       	brcc	.+28     	; 0x1e1a <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    1dfe:	8a 83       	std	Y+2, r24	; 0x02
    1e00:	9b 83       	std	Y+3, r25	; 0x03
    1e02:	ac 83       	std	Y+4, r26	; 0x04
    1e04:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    1e06:	db 87       	std	Y+11, r29	; 0x0b
    1e08:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    1e0a:	b8 01       	movw	r22, r16
    1e0c:	80 91 f1 0c 	lds	r24, 0x0CF1	; 0x800cf1 <pxCurrentTimerList>
    1e10:	90 91 f2 0c 	lds	r25, 0x0CF2	; 0x800cf2 <pxCurrentTimerList+0x1>
    1e14:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <vListInsert>
    1e18:	0a c0       	rjmp	.+20     	; 0x1e2e <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    1e1a:	c1 2c       	mov	r12, r1
    1e1c:	d1 2c       	mov	r13, r1
    1e1e:	76 01       	movw	r14, r12
    1e20:	00 e0       	ldi	r16, 0x00	; 0
    1e22:	10 e0       	ldi	r17, 0x00	; 0
    1e24:	a5 01       	movw	r20, r10
    1e26:	94 01       	movw	r18, r8
    1e28:	60 e0       	ldi	r22, 0x00	; 0
    1e2a:	ce 01       	movw	r24, r28
    1e2c:	5a df       	rcall	.-332    	; 0x1ce2 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    1e2e:	e0 91 f1 0c 	lds	r30, 0x0CF1	; 0x800cf1 <pxCurrentTimerList>
    1e32:	f0 91 f2 0c 	lds	r31, 0x0CF2	; 0x800cf2 <pxCurrentTimerList+0x1>
    1e36:	80 81       	ld	r24, Z
    1e38:	81 11       	cpse	r24, r1
    1e3a:	be cf       	rjmp	.-132    	; 0x1db8 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    1e3c:	80 91 ef 0c 	lds	r24, 0x0CEF	; 0x800cef <pxOverflowTimerList>
    1e40:	90 91 f0 0c 	lds	r25, 0x0CF0	; 0x800cf0 <pxOverflowTimerList+0x1>
    1e44:	90 93 f2 0c 	sts	0x0CF2, r25	; 0x800cf2 <pxCurrentTimerList+0x1>
    1e48:	80 93 f1 0c 	sts	0x0CF1, r24	; 0x800cf1 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    1e4c:	f0 93 f0 0c 	sts	0x0CF0, r31	; 0x800cf0 <pxOverflowTimerList+0x1>
    1e50:	e0 93 ef 0c 	sts	0x0CEF, r30	; 0x800cef <pxOverflowTimerList>
    }
    1e54:	df 91       	pop	r29
    1e56:	cf 91       	pop	r28
    1e58:	1f 91       	pop	r17
    1e5a:	0f 91       	pop	r16
    1e5c:	ff 90       	pop	r15
    1e5e:	ef 90       	pop	r14
    1e60:	df 90       	pop	r13
    1e62:	cf 90       	pop	r12
    1e64:	bf 90       	pop	r11
    1e66:	af 90       	pop	r10
    1e68:	9f 90       	pop	r9
    1e6a:	8f 90       	pop	r8
    1e6c:	08 95       	ret

00001e6e <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    1e6e:	cf 92       	push	r12
    1e70:	df 92       	push	r13
    1e72:	ef 92       	push	r14
    1e74:	ff 92       	push	r15
    1e76:	cf 93       	push	r28
    1e78:	df 93       	push	r29
    1e7a:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    1e7c:	f9 d9       	rcall	.-3086   	; 0x1270 <xTaskGetTickCount>
    1e7e:	6b 01       	movw	r12, r22
    1e80:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    1e82:	80 91 e7 0c 	lds	r24, 0x0CE7	; 0x800ce7 <xLastTime.2448>
    1e86:	90 91 e8 0c 	lds	r25, 0x0CE8	; 0x800ce8 <xLastTime.2448+0x1>
    1e8a:	a0 91 e9 0c 	lds	r26, 0x0CE9	; 0x800ce9 <xLastTime.2448+0x2>
    1e8e:	b0 91 ea 0c 	lds	r27, 0x0CEA	; 0x800cea <xLastTime.2448+0x3>
    1e92:	c8 16       	cp	r12, r24
    1e94:	d9 06       	cpc	r13, r25
    1e96:	ea 06       	cpc	r14, r26
    1e98:	fb 06       	cpc	r15, r27
        {
            prvSwitchTimerLists();
    1e9a:	20 f4       	brcc	.+8      	; 0x1ea4 <prvSampleTimeNow+0x36>
    1e9c:	80 df       	rcall	.-256    	; 0x1d9e <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	88 83       	st	Y, r24
    1ea2:	01 c0       	rjmp	.+2      	; 0x1ea6 <prvSampleTimeNow+0x38>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    1ea4:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    1ea6:	c0 92 e7 0c 	sts	0x0CE7, r12	; 0x800ce7 <xLastTime.2448>
    1eaa:	d0 92 e8 0c 	sts	0x0CE8, r13	; 0x800ce8 <xLastTime.2448+0x1>
    1eae:	e0 92 e9 0c 	sts	0x0CE9, r14	; 0x800ce9 <xLastTime.2448+0x2>
    1eb2:	f0 92 ea 0c 	sts	0x0CEA, r15	; 0x800cea <xLastTime.2448+0x3>

        return xTimeNow;
    }
    1eb6:	c7 01       	movw	r24, r14
    1eb8:	b6 01       	movw	r22, r12
    1eba:	df 91       	pop	r29
    1ebc:	cf 91       	pop	r28
    1ebe:	ff 90       	pop	r15
    1ec0:	ef 90       	pop	r14
    1ec2:	df 90       	pop	r13
    1ec4:	cf 90       	pop	r12
    1ec6:	08 95       	ret

00001ec8 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    1ec8:	4f 92       	push	r4
    1eca:	5f 92       	push	r5
    1ecc:	6f 92       	push	r6
    1ece:	7f 92       	push	r7
    1ed0:	8f 92       	push	r8
    1ed2:	9f 92       	push	r9
    1ed4:	af 92       	push	r10
    1ed6:	bf 92       	push	r11
    1ed8:	cf 92       	push	r12
    1eda:	df 92       	push	r13
    1edc:	ef 92       	push	r14
    1ede:	ff 92       	push	r15
    1ee0:	0f 93       	push	r16
    1ee2:	1f 93       	push	r17
    1ee4:	cf 93       	push	r28
    1ee6:	df 93       	push	r29
    1ee8:	4b 01       	movw	r8, r22
    1eea:	5c 01       	movw	r10, r24
    1eec:	29 01       	movw	r4, r18
    1eee:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    1ef0:	e0 91 f1 0c 	lds	r30, 0x0CF1	; 0x800cf1 <pxCurrentTimerList>
    1ef4:	f0 91 f2 0c 	lds	r31, 0x0CF2	; 0x800cf2 <pxCurrentTimerList+0x1>
    1ef8:	07 80       	ldd	r0, Z+7	; 0x07
    1efa:	f0 85       	ldd	r31, Z+8	; 0x08
    1efc:	e0 2d       	mov	r30, r0
    1efe:	c0 85       	ldd	r28, Z+8	; 0x08
    1f00:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1f02:	ce 01       	movw	r24, r28
    1f04:	02 96       	adiw	r24, 0x02	; 2
    1f06:	0e 94 b8 02 	call	0x570	; 0x570 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    1f0a:	8e 89       	ldd	r24, Y+22	; 0x16
    1f0c:	82 ff       	sbrs	r24, 2
    1f0e:	1b c0       	rjmp	.+54     	; 0x1f46 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    1f10:	4e 85       	ldd	r20, Y+14	; 0x0e
    1f12:	5f 85       	ldd	r21, Y+15	; 0x0f
    1f14:	68 89       	ldd	r22, Y+16	; 0x10
    1f16:	79 89       	ldd	r23, Y+17	; 0x11
    1f18:	48 0d       	add	r20, r8
    1f1a:	59 1d       	adc	r21, r9
    1f1c:	6a 1d       	adc	r22, r10
    1f1e:	7b 1d       	adc	r23, r11
    1f20:	75 01       	movw	r14, r10
    1f22:	64 01       	movw	r12, r8
    1f24:	93 01       	movw	r18, r6
    1f26:	82 01       	movw	r16, r4
    1f28:	ce 01       	movw	r24, r28
    1f2a:	49 de       	rcall	.-878    	; 0x1bbe <prvInsertTimerInActiveList>
    1f2c:	88 23       	and	r24, r24
    1f2e:	69 f0       	breq	.+26     	; 0x1f4a <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    1f30:	c1 2c       	mov	r12, r1
    1f32:	d1 2c       	mov	r13, r1
    1f34:	76 01       	movw	r14, r12
    1f36:	00 e0       	ldi	r16, 0x00	; 0
    1f38:	10 e0       	ldi	r17, 0x00	; 0
    1f3a:	a5 01       	movw	r20, r10
    1f3c:	94 01       	movw	r18, r8
    1f3e:	60 e0       	ldi	r22, 0x00	; 0
    1f40:	ce 01       	movw	r24, r28
    1f42:	cf de       	rcall	.-610    	; 0x1ce2 <xTimerGenericCommand>
    1f44:	02 c0       	rjmp	.+4      	; 0x1f4a <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    1f46:	8e 7f       	andi	r24, 0xFE	; 254
    1f48:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    1f4a:	ec 89       	ldd	r30, Y+20	; 0x14
    1f4c:	fd 89       	ldd	r31, Y+21	; 0x15
    1f4e:	ce 01       	movw	r24, r28
    1f50:	19 95       	eicall
    }
    1f52:	df 91       	pop	r29
    1f54:	cf 91       	pop	r28
    1f56:	1f 91       	pop	r17
    1f58:	0f 91       	pop	r16
    1f5a:	ff 90       	pop	r15
    1f5c:	ef 90       	pop	r14
    1f5e:	df 90       	pop	r13
    1f60:	cf 90       	pop	r12
    1f62:	bf 90       	pop	r11
    1f64:	af 90       	pop	r10
    1f66:	9f 90       	pop	r9
    1f68:	8f 90       	pop	r8
    1f6a:	7f 90       	pop	r7
    1f6c:	6f 90       	pop	r6
    1f6e:	5f 90       	pop	r5
    1f70:	4f 90       	pop	r4
    1f72:	08 95       	ret

00001f74 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    1f74:	8f 92       	push	r8
    1f76:	9f 92       	push	r9
    1f78:	af 92       	push	r10
    1f7a:	bf 92       	push	r11
    1f7c:	cf 92       	push	r12
    1f7e:	df 92       	push	r13
    1f80:	ef 92       	push	r14
    1f82:	ff 92       	push	r15
    1f84:	1f 93       	push	r17
    1f86:	cf 93       	push	r28
    1f88:	df 93       	push	r29
    1f8a:	1f 92       	push	r1
    1f8c:	cd b7       	in	r28, 0x3d	; 61
    1f8e:	de b7       	in	r29, 0x3e	; 62
    1f90:	6b 01       	movw	r12, r22
    1f92:	7c 01       	movw	r14, r24
    1f94:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    1f96:	66 d9       	rcall	.-3380   	; 0x1264 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    1f98:	ce 01       	movw	r24, r28
    1f9a:	01 96       	adiw	r24, 0x01	; 1
    1f9c:	68 df       	rcall	.-304    	; 0x1e6e <prvSampleTimeNow>
    1f9e:	4b 01       	movw	r8, r22
    1fa0:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    1fa2:	89 81       	ldd	r24, Y+1	; 0x01
    1fa4:	81 11       	cpse	r24, r1
    1fa6:	2b c0       	rjmp	.+86     	; 0x1ffe <prvProcessTimerOrBlockTask+0x8a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    1fa8:	11 11       	cpse	r17, r1
    1faa:	0c c0       	rjmp	.+24     	; 0x1fc4 <prvProcessTimerOrBlockTask+0x50>
    1fac:	8c 14       	cp	r8, r12
    1fae:	9d 04       	cpc	r9, r13
    1fb0:	ae 04       	cpc	r10, r14
    1fb2:	bf 04       	cpc	r11, r15
                {
                    ( void ) xTaskResumeAll();
    1fb4:	38 f0       	brcs	.+14     	; 0x1fc4 <prvProcessTimerOrBlockTask+0x50>
    1fb6:	96 da       	rcall	.-2772   	; 0x14e4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    1fb8:	a5 01       	movw	r20, r10
    1fba:	94 01       	movw	r18, r8
    1fbc:	c7 01       	movw	r24, r14
    1fbe:	b6 01       	movw	r22, r12
    1fc0:	83 df       	rcall	.-250    	; 0x1ec8 <prvProcessExpiredTimer>
    1fc2:	1e c0       	rjmp	.+60     	; 0x2000 <__DATA_REGION_LENGTH__>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    1fc4:	11 23       	and	r17, r17
    1fc6:	41 f0       	breq	.+16     	; 0x1fd8 <prvProcessTimerOrBlockTask+0x64>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    1fc8:	e0 91 ef 0c 	lds	r30, 0x0CEF	; 0x800cef <pxOverflowTimerList>
    1fcc:	f0 91 f0 0c 	lds	r31, 0x0CF0	; 0x800cf0 <pxOverflowTimerList+0x1>
    1fd0:	80 81       	ld	r24, Z
    1fd2:	11 e0       	ldi	r17, 0x01	; 1
    1fd4:	81 11       	cpse	r24, r1
    1fd6:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    1fd8:	b7 01       	movw	r22, r14
    1fda:	a6 01       	movw	r20, r12
    1fdc:	48 19       	sub	r20, r8
    1fde:	59 09       	sbc	r21, r9
    1fe0:	6a 09       	sbc	r22, r10
    1fe2:	7b 09       	sbc	r23, r11
    1fe4:	21 2f       	mov	r18, r17
    1fe6:	80 91 ed 0c 	lds	r24, 0x0CED	; 0x800ced <xTimerQueue>
    1fea:	90 91 ee 0c 	lds	r25, 0x0CEE	; 0x800cee <xTimerQueue+0x1>
    1fee:	0e 94 87 06 	call	0xd0e	; 0xd0e <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    1ff2:	78 da       	rcall	.-2832   	; 0x14e4 <xTaskResumeAll>
    1ff4:	81 11       	cpse	r24, r1
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    1ff6:	04 c0       	rjmp	.+8      	; 0x2000 <__DATA_REGION_LENGTH__>
    1ff8:	0e 94 34 03 	call	0x668	; 0x668 <vPortYield>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    1ffc:	01 c0       	rjmp	.+2      	; 0x2000 <__DATA_REGION_LENGTH__>
    1ffe:	72 da       	rcall	.-2844   	; 0x14e4 <xTaskResumeAll>
            }
        }
    }
    2000:	0f 90       	pop	r0
    2002:	df 91       	pop	r29
    2004:	cf 91       	pop	r28
    2006:	1f 91       	pop	r17
    2008:	ff 90       	pop	r15
    200a:	ef 90       	pop	r14
    200c:	df 90       	pop	r13
    200e:	cf 90       	pop	r12
    2010:	bf 90       	pop	r11
    2012:	af 90       	pop	r10
    2014:	9f 90       	pop	r9
    2016:	8f 90       	pop	r8
    2018:	08 95       	ret

0000201a <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    201a:	af 92       	push	r10
    201c:	bf 92       	push	r11
    201e:	cf 92       	push	r12
    2020:	df 92       	push	r13
    2022:	ef 92       	push	r14
    2024:	ff 92       	push	r15
    2026:	0f 93       	push	r16
    2028:	1f 93       	push	r17
    202a:	cf 93       	push	r28
    202c:	df 93       	push	r29
    202e:	cd b7       	in	r28, 0x3d	; 61
    2030:	de b7       	in	r29, 0x3e	; 62
    2032:	28 97       	sbiw	r28, 0x08	; 8
    2034:	0f b6       	in	r0, 0x3f	; 63
    2036:	f8 94       	cli
    2038:	de bf       	out	0x3e, r29	; 62
    203a:	0f be       	out	0x3f, r0	; 63
    203c:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    203e:	81 c0       	rjmp	.+258    	; 0x2142 <prvProcessReceivedCommands+0x128>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2040:	89 81       	ldd	r24, Y+1	; 0x01
    2042:	88 23       	and	r24, r24
    2044:	0c f4       	brge	.+2      	; 0x2048 <prvProcessReceivedCommands+0x2e>
    2046:	7d c0       	rjmp	.+250    	; 0x2142 <prvProcessReceivedCommands+0x128>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2048:	ae 80       	ldd	r10, Y+6	; 0x06
    204a:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    204c:	d5 01       	movw	r26, r10
    204e:	1c 96       	adiw	r26, 0x0c	; 12
    2050:	8d 91       	ld	r24, X+
    2052:	9c 91       	ld	r25, X
    2054:	1d 97       	sbiw	r26, 0x0d	; 13
    2056:	89 2b       	or	r24, r25
    2058:	21 f0       	breq	.+8      	; 0x2062 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    205a:	c5 01       	movw	r24, r10
    205c:	02 96       	adiw	r24, 0x02	; 2
    205e:	0e 94 b8 02 	call	0x570	; 0x570 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2062:	ce 01       	movw	r24, r28
    2064:	08 96       	adiw	r24, 0x08	; 8
    2066:	03 df       	rcall	.-506    	; 0x1e6e <prvSampleTimeNow>
    2068:	8b 01       	movw	r16, r22
    206a:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    206c:	e9 81       	ldd	r30, Y+1	; 0x01
    206e:	0e 2e       	mov	r0, r30
    2070:	00 0c       	add	r0, r0
    2072:	ff 0b       	sbc	r31, r31
    2074:	ea 30       	cpi	r30, 0x0A	; 10
    2076:	f1 05       	cpc	r31, r1
    2078:	08 f0       	brcs	.+2      	; 0x207c <prvProcessReceivedCommands+0x62>
    207a:	63 c0       	rjmp	.+198    	; 0x2142 <prvProcessReceivedCommands+0x128>
    207c:	88 27       	eor	r24, r24
    207e:	ee 58       	subi	r30, 0x8E	; 142
    2080:	ff 4f       	sbci	r31, 0xFF	; 255
    2082:	8f 4f       	sbci	r24, 0xFF	; 255
    2084:	2d c6       	rjmp	.+3162   	; 0x2ce0 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2086:	f5 01       	movw	r30, r10
    2088:	86 89       	ldd	r24, Z+22	; 0x16
    208a:	81 60       	ori	r24, 0x01	; 1
    208c:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    208e:	ca 80       	ldd	r12, Y+2	; 0x02
    2090:	db 80       	ldd	r13, Y+3	; 0x03
    2092:	ec 80       	ldd	r14, Y+4	; 0x04
    2094:	fd 80       	ldd	r15, Y+5	; 0x05
    2096:	46 85       	ldd	r20, Z+14	; 0x0e
    2098:	57 85       	ldd	r21, Z+15	; 0x0f
    209a:	60 89       	ldd	r22, Z+16	; 0x10
    209c:	71 89       	ldd	r23, Z+17	; 0x11
    209e:	4c 0d       	add	r20, r12
    20a0:	5d 1d       	adc	r21, r13
    20a2:	6e 1d       	adc	r22, r14
    20a4:	7f 1d       	adc	r23, r15
    20a6:	c5 01       	movw	r24, r10
    20a8:	8a dd       	rcall	.-1260   	; 0x1bbe <prvInsertTimerInActiveList>
    20aa:	88 23       	and	r24, r24
    20ac:	09 f4       	brne	.+2      	; 0x20b0 <prvProcessReceivedCommands+0x96>
    20ae:	49 c0       	rjmp	.+146    	; 0x2142 <prvProcessReceivedCommands+0x128>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    20b0:	d5 01       	movw	r26, r10
    20b2:	54 96       	adiw	r26, 0x14	; 20
    20b4:	ed 91       	ld	r30, X+
    20b6:	fc 91       	ld	r31, X
    20b8:	55 97       	sbiw	r26, 0x15	; 21
    20ba:	c5 01       	movw	r24, r10
    20bc:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    20be:	f5 01       	movw	r30, r10
    20c0:	86 89       	ldd	r24, Z+22	; 0x16
    20c2:	82 ff       	sbrs	r24, 2
    20c4:	3e c0       	rjmp	.+124    	; 0x2142 <prvProcessReceivedCommands+0x128>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    20c6:	4a 81       	ldd	r20, Y+2	; 0x02
    20c8:	5b 81       	ldd	r21, Y+3	; 0x03
    20ca:	6c 81       	ldd	r22, Y+4	; 0x04
    20cc:	7d 81       	ldd	r23, Y+5	; 0x05
    20ce:	86 85       	ldd	r24, Z+14	; 0x0e
    20d0:	97 85       	ldd	r25, Z+15	; 0x0f
    20d2:	a0 89       	ldd	r26, Z+16	; 0x10
    20d4:	b1 89       	ldd	r27, Z+17	; 0x11
    20d6:	9a 01       	movw	r18, r20
    20d8:	ab 01       	movw	r20, r22
    20da:	28 0f       	add	r18, r24
    20dc:	39 1f       	adc	r19, r25
    20de:	4a 1f       	adc	r20, r26
    20e0:	5b 1f       	adc	r21, r27
    20e2:	c1 2c       	mov	r12, r1
    20e4:	d1 2c       	mov	r13, r1
    20e6:	76 01       	movw	r14, r12
    20e8:	00 e0       	ldi	r16, 0x00	; 0
    20ea:	10 e0       	ldi	r17, 0x00	; 0
    20ec:	60 e0       	ldi	r22, 0x00	; 0
    20ee:	c5 01       	movw	r24, r10
    20f0:	f8 dd       	rcall	.-1040   	; 0x1ce2 <xTimerGenericCommand>
    20f2:	27 c0       	rjmp	.+78     	; 0x2142 <prvProcessReceivedCommands+0x128>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    20f4:	d5 01       	movw	r26, r10
    20f6:	56 96       	adiw	r26, 0x16	; 22
    20f8:	8c 91       	ld	r24, X
    20fa:	56 97       	sbiw	r26, 0x16	; 22
    20fc:	8e 7f       	andi	r24, 0xFE	; 254
    20fe:	56 96       	adiw	r26, 0x16	; 22
    2100:	8c 93       	st	X, r24
                        break;
    2102:	1f c0       	rjmp	.+62     	; 0x2142 <prvProcessReceivedCommands+0x128>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2104:	f5 01       	movw	r30, r10
    2106:	86 89       	ldd	r24, Z+22	; 0x16
    2108:	81 60       	ori	r24, 0x01	; 1
    210a:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    210c:	4a 81       	ldd	r20, Y+2	; 0x02
    210e:	5b 81       	ldd	r21, Y+3	; 0x03
    2110:	6c 81       	ldd	r22, Y+4	; 0x04
    2112:	7d 81       	ldd	r23, Y+5	; 0x05
    2114:	46 87       	std	Z+14, r20	; 0x0e
    2116:	57 87       	std	Z+15, r21	; 0x0f
    2118:	60 8b       	std	Z+16, r22	; 0x10
    211a:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    211c:	40 0f       	add	r20, r16
    211e:	51 1f       	adc	r21, r17
    2120:	62 1f       	adc	r22, r18
    2122:	73 1f       	adc	r23, r19
    2124:	68 01       	movw	r12, r16
    2126:	79 01       	movw	r14, r18
    2128:	c5 01       	movw	r24, r10
    212a:	49 dd       	rcall	.-1390   	; 0x1bbe <prvInsertTimerInActiveList>
                        break;
    212c:	0a c0       	rjmp	.+20     	; 0x2142 <prvProcessReceivedCommands+0x128>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    212e:	f5 01       	movw	r30, r10
    2130:	86 89       	ldd	r24, Z+22	; 0x16
    2132:	81 fd       	sbrc	r24, 1
    2134:	04 c0       	rjmp	.+8      	; 0x213e <prvProcessReceivedCommands+0x124>
                                {
                                    vPortFree( pxTimer );
    2136:	c5 01       	movw	r24, r10
    2138:	0e 94 2a 02 	call	0x454	; 0x454 <vPortFree>
    213c:	02 c0       	rjmp	.+4      	; 0x2142 <prvProcessReceivedCommands+0x128>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    213e:	8e 7f       	andi	r24, 0xFE	; 254
    2140:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	a9 01       	movw	r20, r18
    2148:	be 01       	movw	r22, r28
    214a:	6f 5f       	subi	r22, 0xFF	; 255
    214c:	7f 4f       	sbci	r23, 0xFF	; 255
    214e:	80 91 ed 0c 	lds	r24, 0x0CED	; 0x800ced <xTimerQueue>
    2152:	90 91 ee 0c 	lds	r25, 0x0CEE	; 0x800cee <xTimerQueue+0x1>
    2156:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <xQueueReceive>
    215a:	81 11       	cpse	r24, r1
    215c:	71 cf       	rjmp	.-286    	; 0x2040 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    215e:	28 96       	adiw	r28, 0x08	; 8
    2160:	0f b6       	in	r0, 0x3f	; 63
    2162:	f8 94       	cli
    2164:	de bf       	out	0x3e, r29	; 62
    2166:	0f be       	out	0x3f, r0	; 63
    2168:	cd bf       	out	0x3d, r28	; 61
    216a:	df 91       	pop	r29
    216c:	cf 91       	pop	r28
    216e:	1f 91       	pop	r17
    2170:	0f 91       	pop	r16
    2172:	ff 90       	pop	r15
    2174:	ef 90       	pop	r14
    2176:	df 90       	pop	r13
    2178:	cf 90       	pop	r12
    217a:	bf 90       	pop	r11
    217c:	af 90       	pop	r10
    217e:	08 95       	ret

00002180 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2180:	08 95       	ret

00002182 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2182:	84 b1       	in	r24, 0x04	; 4
    2184:	80 68       	ori	r24, 0x80	; 128
    2186:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2188:	85 b1       	in	r24, 0x05	; 5
    218a:	80 68       	ori	r24, 0x80	; 128
    218c:	85 b9       	out	0x05, r24	; 5
    218e:	08 95       	ret

00002190 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    2190:	83 b1       	in	r24, 0x03	; 3
    2192:	80 68       	ori	r24, 0x80	; 128
    2194:	83 b9       	out	0x03, r24	; 3
    2196:	08 95       	ret

00002198 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    2198:	f4 df       	rcall	.-24     	; 0x2182 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    219a:	2f ef       	ldi	r18, 0xFF	; 255
    219c:	80 e7       	ldi	r24, 0x70	; 112
    219e:	92 e0       	ldi	r25, 0x02	; 2
    21a0:	21 50       	subi	r18, 0x01	; 1
    21a2:	80 40       	sbci	r24, 0x00	; 0
    21a4:	90 40       	sbci	r25, 0x00	; 0
    21a6:	e1 f7       	brne	.-8      	; 0x21a0 <vApplicationMallocFailedHook+0x8>
    21a8:	00 c0       	rjmp	.+0      	; 0x21aa <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    21aa:	00 00       	nop
    21ac:	f1 df       	rcall	.-30     	; 0x2190 <prvBlinkMainLed>
    21ae:	f5 cf       	rjmp	.-22     	; 0x219a <vApplicationMallocFailedHook+0x2>

000021b0 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    21b0:	e8 df       	rcall	.-48     	; 0x2182 <prvSetMainLedOn>
    21b2:	2f ef       	ldi	r18, 0xFF	; 255
    21b4:	87 ea       	ldi	r24, 0xA7	; 167
    21b6:	91 e6       	ldi	r25, 0x61	; 97
    21b8:	21 50       	subi	r18, 0x01	; 1
    21ba:	80 40       	sbci	r24, 0x00	; 0
    21bc:	90 40       	sbci	r25, 0x00	; 0
    21be:	e1 f7       	brne	.-8      	; 0x21b8 <vApplicationStackOverflowHook+0x8>
    21c0:	00 c0       	rjmp	.+0      	; 0x21c2 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    21c2:	00 00       	nop
    21c4:	e5 df       	rcall	.-54     	; 0x2190 <prvBlinkMainLed>
    21c6:	f5 cf       	rjmp	.-22     	; 0x21b2 <vApplicationStackOverflowHook+0x2>

000021c8 <usart_getchar>:
    21c8:	cf 93       	push	r28
    21ca:	df 93       	push	r29
    21cc:	1f 92       	push	r1
    21ce:	cd b7       	in	r28, 0x3d	; 61
    21d0:	de b7       	in	r29, 0x3e	; 62
    21d2:	be 01       	movw	r22, r28
    21d4:	6f 5f       	subi	r22, 0xFF	; 255
    21d6:	7f 4f       	sbci	r23, 0xFF	; 255
    21d8:	80 91 09 0d 	lds	r24, 0x0D09	; 0x800d09 <_com_serial_instance>
    21dc:	90 91 0a 0d 	lds	r25, 0x0D0A	; 0x800d0a <_com_serial_instance+0x1>
    21e0:	01 d1       	rcall	.+514    	; 0x23e4 <serial_getByte>
    21e2:	81 11       	cpse	r24, r1
    21e4:	f6 cf       	rjmp	.-20     	; 0x21d2 <usart_getchar+0xa>
    21e6:	89 81       	ldd	r24, Y+1	; 0x01
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	0f 90       	pop	r0
    21ec:	df 91       	pop	r29
    21ee:	cf 91       	pop	r28
    21f0:	08 95       	ret

000021f2 <usart_putchar>:
    21f2:	68 2f       	mov	r22, r24
    21f4:	80 91 09 0d 	lds	r24, 0x0D09	; 0x800d09 <_com_serial_instance>
    21f8:	90 91 0a 0d 	lds	r25, 0x0D0A	; 0x800d0a <_com_serial_instance+0x1>
    21fc:	c8 d0       	rcall	.+400    	; 0x238e <serial_sendByte>
    21fe:	80 e0       	ldi	r24, 0x00	; 0
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	08 95       	ret

00002204 <stdio_initialise>:
    2204:	8f 92       	push	r8
    2206:	9f 92       	push	r9
    2208:	af 92       	push	r10
    220a:	cf 92       	push	r12
    220c:	ef 92       	push	r14
    220e:	0f 93       	push	r16
    2210:	81 2c       	mov	r8, r1
    2212:	91 2c       	mov	r9, r1
    2214:	68 94       	set
    2216:	aa 24       	eor	r10, r10
    2218:	a7 f8       	bld	r10, 7
    221a:	68 94       	set
    221c:	cc 24       	eor	r12, r12
    221e:	c7 f8       	bld	r12, 7
    2220:	e1 2c       	mov	r14, r1
    2222:	00 e0       	ldi	r16, 0x00	; 0
    2224:	23 e0       	ldi	r18, 0x03	; 3
    2226:	40 e0       	ldi	r20, 0x00	; 0
    2228:	51 ee       	ldi	r21, 0xE1	; 225
    222a:	60 e0       	ldi	r22, 0x00	; 0
    222c:	70 e0       	ldi	r23, 0x00	; 0
    222e:	13 d0       	rcall	.+38     	; 0x2256 <serial_create>
    2230:	90 93 0a 0d 	sts	0x0D0A, r25	; 0x800d0a <_com_serial_instance+0x1>
    2234:	80 93 09 0d 	sts	0x0D09, r24	; 0x800d09 <_com_serial_instance>
    2238:	e7 e1       	ldi	r30, 0x17	; 23
    223a:	fd e0       	ldi	r31, 0x0D	; 13
    223c:	87 e0       	ldi	r24, 0x07	; 7
    223e:	92 e0       	ldi	r25, 0x02	; 2
    2240:	91 83       	std	Z+1, r25	; 0x01
    2242:	80 83       	st	Z, r24
    2244:	93 83       	std	Z+3, r25	; 0x03
    2246:	82 83       	std	Z+2, r24	; 0x02
    2248:	0f 91       	pop	r16
    224a:	ef 90       	pop	r14
    224c:	cf 90       	pop	r12
    224e:	af 90       	pop	r10
    2250:	9f 90       	pop	r9
    2252:	8f 90       	pop	r8
    2254:	08 95       	ret

00002256 <serial_create>:
    2256:	2f 92       	push	r2
    2258:	3f 92       	push	r3
    225a:	4f 92       	push	r4
    225c:	5f 92       	push	r5
    225e:	6f 92       	push	r6
    2260:	7f 92       	push	r7
    2262:	8f 92       	push	r8
    2264:	9f 92       	push	r9
    2266:	af 92       	push	r10
    2268:	cf 92       	push	r12
    226a:	ef 92       	push	r14
    226c:	ff 92       	push	r15
    226e:	0f 93       	push	r16
    2270:	1f 93       	push	r17
    2272:	cf 93       	push	r28
    2274:	df 93       	push	r29
    2276:	cd b7       	in	r28, 0x3d	; 61
    2278:	de b7       	in	r29, 0x3e	; 62
    227a:	f8 2e       	mov	r15, r24
    227c:	2a 01       	movw	r4, r20
    227e:	3b 01       	movw	r6, r22
    2280:	88 e0       	ldi	r24, 0x08	; 8
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	35 d5       	rcall	.+2666   	; 0x2cf0 <malloc>
    2286:	8c 01       	movw	r16, r24
    2288:	8f 2d       	mov	r24, r15
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	fc 01       	movw	r30, r24
    228e:	ee 0f       	add	r30, r30
    2290:	ff 1f       	adc	r31, r31
    2292:	e5 5f       	subi	r30, 0xF5	; 245
    2294:	f2 4f       	sbci	r31, 0xF2	; 242
    2296:	11 83       	std	Z+1, r17	; 0x01
    2298:	00 83       	st	Z, r16
    229a:	01 15       	cp	r16, r1
    229c:	11 05       	cpc	r17, r1
    229e:	09 f4       	brne	.+2      	; 0x22a2 <serial_create+0x4c>
    22a0:	64 c0       	rjmp	.+200    	; 0x236a <serial_create+0x114>
    22a2:	88 0f       	add	r24, r24
    22a4:	99 1f       	adc	r25, r25
    22a6:	fc 01       	movw	r30, r24
    22a8:	eb 5e       	subi	r30, 0xEB	; 235
    22aa:	fd 4f       	sbci	r31, 0xFD	; 253
    22ac:	80 81       	ld	r24, Z
    22ae:	91 81       	ldd	r25, Z+1	; 0x01
    22b0:	d8 01       	movw	r26, r16
    22b2:	8d 93       	st	X+, r24
    22b4:	9c 93       	st	X, r25
    22b6:	8c 2d       	mov	r24, r12
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	88 0f       	add	r24, r24
    22bc:	99 1f       	adc	r25, r25
    22be:	88 0f       	add	r24, r24
    22c0:	99 1f       	adc	r25, r25
    22c2:	16 d5       	rcall	.+2604   	; 0x2cf0 <malloc>
    22c4:	1c 01       	movw	r2, r24
    22c6:	86 e0       	ldi	r24, 0x06	; 6
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	12 d5       	rcall	.+2596   	; 0x2cf0 <malloc>
    22cc:	7c 01       	movw	r14, r24
    22ce:	4c 2d       	mov	r20, r12
    22d0:	b1 01       	movw	r22, r2
    22d2:	00 d3       	rcall	.+1536   	; 0x28d4 <fifo_init>
    22d4:	f8 01       	movw	r30, r16
    22d6:	f5 82       	std	Z+5, r15	; 0x05
    22d8:	e4 82       	std	Z+4, r14	; 0x04
    22da:	8a 2d       	mov	r24, r10
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	88 0f       	add	r24, r24
    22e0:	99 1f       	adc	r25, r25
    22e2:	88 0f       	add	r24, r24
    22e4:	99 1f       	adc	r25, r25
    22e6:	04 d5       	rcall	.+2568   	; 0x2cf0 <malloc>
    22e8:	1c 01       	movw	r2, r24
    22ea:	86 e0       	ldi	r24, 0x06	; 6
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	00 d5       	rcall	.+2560   	; 0x2cf0 <malloc>
    22f0:	7c 01       	movw	r14, r24
    22f2:	4a 2d       	mov	r20, r10
    22f4:	b1 01       	movw	r22, r2
    22f6:	ee d2       	rcall	.+1500   	; 0x28d4 <fifo_init>
    22f8:	d8 01       	movw	r26, r16
    22fa:	13 96       	adiw	r26, 0x03	; 3
    22fc:	fc 92       	st	X, r15
    22fe:	ee 92       	st	-X, r14
    2300:	12 97       	sbiw	r26, 0x02	; 2
    2302:	17 96       	adiw	r26, 0x07	; 7
    2304:	9c 92       	st	X, r9
    2306:	8e 92       	st	-X, r8
    2308:	16 97       	sbiw	r26, 0x06	; 6
    230a:	ff b6       	in	r15, 0x3f	; 63
    230c:	f8 94       	cli
    230e:	ed 91       	ld	r30, X+
    2310:	fc 91       	ld	r31, X
    2312:	11 97       	sbiw	r26, 0x01	; 1
    2314:	36 97       	sbiw	r30, 0x06	; 6
    2316:	80 81       	ld	r24, Z
    2318:	82 60       	ori	r24, 0x02	; 2
    231a:	80 83       	st	Z, r24
    231c:	8d 90       	ld	r8, X+
    231e:	9c 90       	ld	r9, X
    2320:	c3 01       	movw	r24, r6
    2322:	b2 01       	movw	r22, r4
    2324:	ec d3       	rcall	.+2008   	; 0x2afe <__floatunsisf>
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	40 e0       	ldi	r20, 0x00	; 0
    232c:	51 e4       	ldi	r21, 0x41	; 65
    232e:	75 d4       	rcall	.+2282   	; 0x2c1a <__mulsf3>
    2330:	9b 01       	movw	r18, r22
    2332:	ac 01       	movw	r20, r24
    2334:	60 e0       	ldi	r22, 0x00	; 0
    2336:	74 e2       	ldi	r23, 0x24	; 36
    2338:	84 e7       	ldi	r24, 0x74	; 116
    233a:	9b e4       	ldi	r25, 0x4B	; 75
    233c:	4c d3       	rcall	.+1688   	; 0x29d6 <__divsf3>
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	40 e8       	ldi	r20, 0x80	; 128
    2344:	5f e3       	ldi	r21, 0x3F	; 63
    2346:	e2 d2       	rcall	.+1476   	; 0x290c <__subsf3>
    2348:	ae d3       	rcall	.+1884   	; 0x2aa6 <__fixunssfsi>
    234a:	f4 01       	movw	r30, r8
    234c:	32 97       	sbiw	r30, 0x02	; 2
    234e:	60 83       	st	Z, r22
    2350:	d8 01       	movw	r26, r16
    2352:	ed 91       	ld	r30, X+
    2354:	fc 91       	ld	r31, X
    2356:	11 97       	sbiw	r26, 0x01	; 1
    2358:	35 97       	sbiw	r30, 0x05	; 5
    235a:	88 e9       	ldi	r24, 0x98	; 152
    235c:	80 83       	st	Z, r24
    235e:	ed 91       	ld	r30, X+
    2360:	fc 91       	ld	r31, X
    2362:	34 97       	sbiw	r30, 0x04	; 4
    2364:	86 e0       	ldi	r24, 0x06	; 6
    2366:	80 83       	st	Z, r24
    2368:	ff be       	out	0x3f, r15	; 63
    236a:	c8 01       	movw	r24, r16
    236c:	df 91       	pop	r29
    236e:	cf 91       	pop	r28
    2370:	1f 91       	pop	r17
    2372:	0f 91       	pop	r16
    2374:	ff 90       	pop	r15
    2376:	ef 90       	pop	r14
    2378:	cf 90       	pop	r12
    237a:	af 90       	pop	r10
    237c:	9f 90       	pop	r9
    237e:	8f 90       	pop	r8
    2380:	7f 90       	pop	r7
    2382:	6f 90       	pop	r6
    2384:	5f 90       	pop	r5
    2386:	4f 90       	pop	r4
    2388:	3f 90       	pop	r3
    238a:	2f 90       	pop	r2
    238c:	08 95       	ret

0000238e <serial_sendByte>:
    238e:	cf 93       	push	r28
    2390:	df 93       	push	r29
    2392:	dc 01       	movw	r26, r24
    2394:	89 2b       	or	r24, r25
    2396:	01 f1       	breq	.+64     	; 0x23d8 <serial_sendByte+0x4a>
    2398:	12 96       	adiw	r26, 0x02	; 2
    239a:	ed 91       	ld	r30, X+
    239c:	fc 91       	ld	r31, X
    239e:	13 97       	sbiw	r26, 0x03	; 3
    23a0:	93 81       	ldd	r25, Z+3	; 0x03
    23a2:	82 81       	ldd	r24, Z+2	; 0x02
    23a4:	25 81       	ldd	r18, Z+5	; 0x05
    23a6:	98 1b       	sub	r25, r24
    23a8:	92 23       	and	r25, r18
    23aa:	84 81       	ldd	r24, Z+4	; 0x04
    23ac:	98 17       	cp	r25, r24
    23ae:	b1 f0       	breq	.+44     	; 0x23dc <serial_sendByte+0x4e>
    23b0:	83 81       	ldd	r24, Z+3	; 0x03
    23b2:	26 95       	lsr	r18
    23b4:	28 23       	and	r18, r24
    23b6:	c0 81       	ld	r28, Z
    23b8:	d1 81       	ldd	r29, Z+1	; 0x01
    23ba:	c2 0f       	add	r28, r18
    23bc:	d1 1d       	adc	r29, r1
    23be:	68 83       	st	Y, r22
    23c0:	8f 5f       	subi	r24, 0xFF	; 255
    23c2:	95 81       	ldd	r25, Z+5	; 0x05
    23c4:	89 23       	and	r24, r25
    23c6:	83 83       	std	Z+3, r24	; 0x03
    23c8:	ed 91       	ld	r30, X+
    23ca:	fc 91       	ld	r31, X
    23cc:	35 97       	sbiw	r30, 0x05	; 5
    23ce:	80 81       	ld	r24, Z
    23d0:	80 62       	ori	r24, 0x20	; 32
    23d2:	80 83       	st	Z, r24
    23d4:	80 e0       	ldi	r24, 0x00	; 0
    23d6:	03 c0       	rjmp	.+6      	; 0x23de <serial_sendByte+0x50>
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	01 c0       	rjmp	.+2      	; 0x23de <serial_sendByte+0x50>
    23dc:	82 e0       	ldi	r24, 0x02	; 2
    23de:	df 91       	pop	r29
    23e0:	cf 91       	pop	r28
    23e2:	08 95       	ret

000023e4 <serial_getByte>:
    23e4:	00 97       	sbiw	r24, 0x00	; 0
    23e6:	d1 f0       	breq	.+52     	; 0x241c <serial_getByte+0x38>
    23e8:	dc 01       	movw	r26, r24
    23ea:	14 96       	adiw	r26, 0x04	; 4
    23ec:	ed 91       	ld	r30, X+
    23ee:	fc 91       	ld	r31, X
    23f0:	15 97       	sbiw	r26, 0x05	; 5
    23f2:	93 81       	ldd	r25, Z+3	; 0x03
    23f4:	82 81       	ldd	r24, Z+2	; 0x02
    23f6:	98 17       	cp	r25, r24
    23f8:	99 f0       	breq	.+38     	; 0x2420 <serial_getByte+0x3c>
    23fa:	92 81       	ldd	r25, Z+2	; 0x02
    23fc:	85 81       	ldd	r24, Z+5	; 0x05
    23fe:	86 95       	lsr	r24
    2400:	89 23       	and	r24, r25
    2402:	a0 81       	ld	r26, Z
    2404:	b1 81       	ldd	r27, Z+1	; 0x01
    2406:	a8 0f       	add	r26, r24
    2408:	b1 1d       	adc	r27, r1
    240a:	8c 91       	ld	r24, X
    240c:	db 01       	movw	r26, r22
    240e:	8c 93       	st	X, r24
    2410:	9f 5f       	subi	r25, 0xFF	; 255
    2412:	85 81       	ldd	r24, Z+5	; 0x05
    2414:	98 23       	and	r25, r24
    2416:	92 83       	std	Z+2, r25	; 0x02
    2418:	80 e0       	ldi	r24, 0x00	; 0
    241a:	08 95       	ret
    241c:	81 e0       	ldi	r24, 0x01	; 1
    241e:	08 95       	ret
    2420:	83 e0       	ldi	r24, 0x03	; 3
    2422:	08 95       	ret

00002424 <__vector_25>:
    2424:	1f 92       	push	r1
    2426:	0f 92       	push	r0
    2428:	0f b6       	in	r0, 0x3f	; 63
    242a:	0f 92       	push	r0
    242c:	11 24       	eor	r1, r1
    242e:	0b b6       	in	r0, 0x3b	; 59
    2430:	0f 92       	push	r0
    2432:	2f 93       	push	r18
    2434:	3f 93       	push	r19
    2436:	4f 93       	push	r20
    2438:	5f 93       	push	r21
    243a:	6f 93       	push	r22
    243c:	7f 93       	push	r23
    243e:	8f 93       	push	r24
    2440:	9f 93       	push	r25
    2442:	af 93       	push	r26
    2444:	bf 93       	push	r27
    2446:	cf 93       	push	r28
    2448:	df 93       	push	r29
    244a:	ef 93       	push	r30
    244c:	ff 93       	push	r31
    244e:	a0 91 0b 0d 	lds	r26, 0x0D0B	; 0x800d0b <_ser_handle>
    2452:	b0 91 0c 0d 	lds	r27, 0x0D0C	; 0x800d0c <_ser_handle+0x1>
    2456:	10 97       	sbiw	r26, 0x00	; 0
    2458:	11 f1       	breq	.+68     	; 0x249e <__vector_25+0x7a>
    245a:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    245e:	14 96       	adiw	r26, 0x04	; 4
    2460:	ed 91       	ld	r30, X+
    2462:	fc 91       	ld	r31, X
    2464:	15 97       	sbiw	r26, 0x05	; 5
    2466:	93 81       	ldd	r25, Z+3	; 0x03
    2468:	82 81       	ldd	r24, Z+2	; 0x02
    246a:	25 81       	ldd	r18, Z+5	; 0x05
    246c:	98 1b       	sub	r25, r24
    246e:	92 23       	and	r25, r18
    2470:	84 81       	ldd	r24, Z+4	; 0x04
    2472:	98 17       	cp	r25, r24
    2474:	61 f0       	breq	.+24     	; 0x248e <__vector_25+0x6a>
    2476:	83 81       	ldd	r24, Z+3	; 0x03
    2478:	26 95       	lsr	r18
    247a:	28 23       	and	r18, r24
    247c:	c0 81       	ld	r28, Z
    247e:	d1 81       	ldd	r29, Z+1	; 0x01
    2480:	c2 0f       	add	r28, r18
    2482:	d1 1d       	adc	r29, r1
    2484:	68 83       	st	Y, r22
    2486:	8f 5f       	subi	r24, 0xFF	; 255
    2488:	95 81       	ldd	r25, Z+5	; 0x05
    248a:	89 23       	and	r24, r25
    248c:	83 83       	std	Z+3, r24	; 0x03
    248e:	16 96       	adiw	r26, 0x06	; 6
    2490:	ed 91       	ld	r30, X+
    2492:	fc 91       	ld	r31, X
    2494:	17 97       	sbiw	r26, 0x07	; 7
    2496:	30 97       	sbiw	r30, 0x00	; 0
    2498:	11 f0       	breq	.+4      	; 0x249e <__vector_25+0x7a>
    249a:	cd 01       	movw	r24, r26
    249c:	19 95       	eicall
    249e:	ff 91       	pop	r31
    24a0:	ef 91       	pop	r30
    24a2:	df 91       	pop	r29
    24a4:	cf 91       	pop	r28
    24a6:	bf 91       	pop	r27
    24a8:	af 91       	pop	r26
    24aa:	9f 91       	pop	r25
    24ac:	8f 91       	pop	r24
    24ae:	7f 91       	pop	r23
    24b0:	6f 91       	pop	r22
    24b2:	5f 91       	pop	r21
    24b4:	4f 91       	pop	r20
    24b6:	3f 91       	pop	r19
    24b8:	2f 91       	pop	r18
    24ba:	0f 90       	pop	r0
    24bc:	0b be       	out	0x3b, r0	; 59
    24be:	0f 90       	pop	r0
    24c0:	0f be       	out	0x3f, r0	; 63
    24c2:	0f 90       	pop	r0
    24c4:	1f 90       	pop	r1
    24c6:	18 95       	reti

000024c8 <__vector_26>:
    24c8:	1f 92       	push	r1
    24ca:	0f 92       	push	r0
    24cc:	0f b6       	in	r0, 0x3f	; 63
    24ce:	0f 92       	push	r0
    24d0:	11 24       	eor	r1, r1
    24d2:	0b b6       	in	r0, 0x3b	; 59
    24d4:	0f 92       	push	r0
    24d6:	2f 93       	push	r18
    24d8:	8f 93       	push	r24
    24da:	9f 93       	push	r25
    24dc:	af 93       	push	r26
    24de:	bf 93       	push	r27
    24e0:	ef 93       	push	r30
    24e2:	ff 93       	push	r31
    24e4:	e0 91 0b 0d 	lds	r30, 0x0D0B	; 0x800d0b <_ser_handle>
    24e8:	f0 91 0c 0d 	lds	r31, 0x0D0C	; 0x800d0c <_ser_handle+0x1>
    24ec:	30 97       	sbiw	r30, 0x00	; 0
    24ee:	b9 f0       	breq	.+46     	; 0x251e <__vector_26+0x56>
    24f0:	02 80       	ldd	r0, Z+2	; 0x02
    24f2:	f3 81       	ldd	r31, Z+3	; 0x03
    24f4:	e0 2d       	mov	r30, r0
    24f6:	93 81       	ldd	r25, Z+3	; 0x03
    24f8:	82 81       	ldd	r24, Z+2	; 0x02
    24fa:	98 17       	cp	r25, r24
    24fc:	b1 f0       	breq	.+44     	; 0x252a <__vector_26+0x62>
    24fe:	92 81       	ldd	r25, Z+2	; 0x02
    2500:	85 81       	ldd	r24, Z+5	; 0x05
    2502:	28 2f       	mov	r18, r24
    2504:	26 95       	lsr	r18
    2506:	29 23       	and	r18, r25
    2508:	a0 81       	ld	r26, Z
    250a:	b1 81       	ldd	r27, Z+1	; 0x01
    250c:	a2 0f       	add	r26, r18
    250e:	b1 1d       	adc	r27, r1
    2510:	2c 91       	ld	r18, X
    2512:	9f 5f       	subi	r25, 0xFF	; 255
    2514:	89 23       	and	r24, r25
    2516:	82 83       	std	Z+2, r24	; 0x02
    2518:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    251c:	0b c0       	rjmp	.+22     	; 0x2534 <__vector_26+0x6c>
    251e:	e1 ec       	ldi	r30, 0xC1	; 193
    2520:	f0 e0       	ldi	r31, 0x00	; 0
    2522:	80 81       	ld	r24, Z
    2524:	8f 7d       	andi	r24, 0xDF	; 223
    2526:	80 83       	st	Z, r24
    2528:	05 c0       	rjmp	.+10     	; 0x2534 <__vector_26+0x6c>
    252a:	e1 ec       	ldi	r30, 0xC1	; 193
    252c:	f0 e0       	ldi	r31, 0x00	; 0
    252e:	80 81       	ld	r24, Z
    2530:	8f 7d       	andi	r24, 0xDF	; 223
    2532:	80 83       	st	Z, r24
    2534:	ff 91       	pop	r31
    2536:	ef 91       	pop	r30
    2538:	bf 91       	pop	r27
    253a:	af 91       	pop	r26
    253c:	9f 91       	pop	r25
    253e:	8f 91       	pop	r24
    2540:	2f 91       	pop	r18
    2542:	0f 90       	pop	r0
    2544:	0b be       	out	0x3b, r0	; 59
    2546:	0f 90       	pop	r0
    2548:	0f be       	out	0x3f, r0	; 63
    254a:	0f 90       	pop	r0
    254c:	1f 90       	pop	r1
    254e:	18 95       	reti

00002550 <__vector_36>:
    2550:	1f 92       	push	r1
    2552:	0f 92       	push	r0
    2554:	0f b6       	in	r0, 0x3f	; 63
    2556:	0f 92       	push	r0
    2558:	11 24       	eor	r1, r1
    255a:	0b b6       	in	r0, 0x3b	; 59
    255c:	0f 92       	push	r0
    255e:	2f 93       	push	r18
    2560:	3f 93       	push	r19
    2562:	4f 93       	push	r20
    2564:	5f 93       	push	r21
    2566:	6f 93       	push	r22
    2568:	7f 93       	push	r23
    256a:	8f 93       	push	r24
    256c:	9f 93       	push	r25
    256e:	af 93       	push	r26
    2570:	bf 93       	push	r27
    2572:	cf 93       	push	r28
    2574:	df 93       	push	r29
    2576:	ef 93       	push	r30
    2578:	ff 93       	push	r31
    257a:	a0 91 0d 0d 	lds	r26, 0x0D0D	; 0x800d0d <_ser_handle+0x2>
    257e:	b0 91 0e 0d 	lds	r27, 0x0D0E	; 0x800d0e <_ser_handle+0x3>
    2582:	10 97       	sbiw	r26, 0x00	; 0
    2584:	11 f1       	breq	.+68     	; 0x25ca <__vector_36+0x7a>
    2586:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    258a:	14 96       	adiw	r26, 0x04	; 4
    258c:	ed 91       	ld	r30, X+
    258e:	fc 91       	ld	r31, X
    2590:	15 97       	sbiw	r26, 0x05	; 5
    2592:	93 81       	ldd	r25, Z+3	; 0x03
    2594:	82 81       	ldd	r24, Z+2	; 0x02
    2596:	25 81       	ldd	r18, Z+5	; 0x05
    2598:	98 1b       	sub	r25, r24
    259a:	92 23       	and	r25, r18
    259c:	84 81       	ldd	r24, Z+4	; 0x04
    259e:	98 17       	cp	r25, r24
    25a0:	61 f0       	breq	.+24     	; 0x25ba <__vector_36+0x6a>
    25a2:	83 81       	ldd	r24, Z+3	; 0x03
    25a4:	26 95       	lsr	r18
    25a6:	28 23       	and	r18, r24
    25a8:	c0 81       	ld	r28, Z
    25aa:	d1 81       	ldd	r29, Z+1	; 0x01
    25ac:	c2 0f       	add	r28, r18
    25ae:	d1 1d       	adc	r29, r1
    25b0:	68 83       	st	Y, r22
    25b2:	8f 5f       	subi	r24, 0xFF	; 255
    25b4:	95 81       	ldd	r25, Z+5	; 0x05
    25b6:	89 23       	and	r24, r25
    25b8:	83 83       	std	Z+3, r24	; 0x03
    25ba:	16 96       	adiw	r26, 0x06	; 6
    25bc:	ed 91       	ld	r30, X+
    25be:	fc 91       	ld	r31, X
    25c0:	17 97       	sbiw	r26, 0x07	; 7
    25c2:	30 97       	sbiw	r30, 0x00	; 0
    25c4:	11 f0       	breq	.+4      	; 0x25ca <__vector_36+0x7a>
    25c6:	cd 01       	movw	r24, r26
    25c8:	19 95       	eicall
    25ca:	ff 91       	pop	r31
    25cc:	ef 91       	pop	r30
    25ce:	df 91       	pop	r29
    25d0:	cf 91       	pop	r28
    25d2:	bf 91       	pop	r27
    25d4:	af 91       	pop	r26
    25d6:	9f 91       	pop	r25
    25d8:	8f 91       	pop	r24
    25da:	7f 91       	pop	r23
    25dc:	6f 91       	pop	r22
    25de:	5f 91       	pop	r21
    25e0:	4f 91       	pop	r20
    25e2:	3f 91       	pop	r19
    25e4:	2f 91       	pop	r18
    25e6:	0f 90       	pop	r0
    25e8:	0b be       	out	0x3b, r0	; 59
    25ea:	0f 90       	pop	r0
    25ec:	0f be       	out	0x3f, r0	; 63
    25ee:	0f 90       	pop	r0
    25f0:	1f 90       	pop	r1
    25f2:	18 95       	reti

000025f4 <__vector_37>:
    25f4:	1f 92       	push	r1
    25f6:	0f 92       	push	r0
    25f8:	0f b6       	in	r0, 0x3f	; 63
    25fa:	0f 92       	push	r0
    25fc:	11 24       	eor	r1, r1
    25fe:	0b b6       	in	r0, 0x3b	; 59
    2600:	0f 92       	push	r0
    2602:	2f 93       	push	r18
    2604:	8f 93       	push	r24
    2606:	9f 93       	push	r25
    2608:	af 93       	push	r26
    260a:	bf 93       	push	r27
    260c:	ef 93       	push	r30
    260e:	ff 93       	push	r31
    2610:	e0 91 0d 0d 	lds	r30, 0x0D0D	; 0x800d0d <_ser_handle+0x2>
    2614:	f0 91 0e 0d 	lds	r31, 0x0D0E	; 0x800d0e <_ser_handle+0x3>
    2618:	30 97       	sbiw	r30, 0x00	; 0
    261a:	b9 f0       	breq	.+46     	; 0x264a <__vector_37+0x56>
    261c:	02 80       	ldd	r0, Z+2	; 0x02
    261e:	f3 81       	ldd	r31, Z+3	; 0x03
    2620:	e0 2d       	mov	r30, r0
    2622:	93 81       	ldd	r25, Z+3	; 0x03
    2624:	82 81       	ldd	r24, Z+2	; 0x02
    2626:	98 17       	cp	r25, r24
    2628:	b1 f0       	breq	.+44     	; 0x2656 <__vector_37+0x62>
    262a:	92 81       	ldd	r25, Z+2	; 0x02
    262c:	85 81       	ldd	r24, Z+5	; 0x05
    262e:	28 2f       	mov	r18, r24
    2630:	26 95       	lsr	r18
    2632:	29 23       	and	r18, r25
    2634:	a0 81       	ld	r26, Z
    2636:	b1 81       	ldd	r27, Z+1	; 0x01
    2638:	a2 0f       	add	r26, r18
    263a:	b1 1d       	adc	r27, r1
    263c:	2c 91       	ld	r18, X
    263e:	9f 5f       	subi	r25, 0xFF	; 255
    2640:	89 23       	and	r24, r25
    2642:	82 83       	std	Z+2, r24	; 0x02
    2644:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    2648:	0b c0       	rjmp	.+22     	; 0x2660 <__vector_37+0x6c>
    264a:	e9 ec       	ldi	r30, 0xC9	; 201
    264c:	f0 e0       	ldi	r31, 0x00	; 0
    264e:	80 81       	ld	r24, Z
    2650:	8f 7d       	andi	r24, 0xDF	; 223
    2652:	80 83       	st	Z, r24
    2654:	05 c0       	rjmp	.+10     	; 0x2660 <__vector_37+0x6c>
    2656:	e9 ec       	ldi	r30, 0xC9	; 201
    2658:	f0 e0       	ldi	r31, 0x00	; 0
    265a:	80 81       	ld	r24, Z
    265c:	8f 7d       	andi	r24, 0xDF	; 223
    265e:	80 83       	st	Z, r24
    2660:	ff 91       	pop	r31
    2662:	ef 91       	pop	r30
    2664:	bf 91       	pop	r27
    2666:	af 91       	pop	r26
    2668:	9f 91       	pop	r25
    266a:	8f 91       	pop	r24
    266c:	2f 91       	pop	r18
    266e:	0f 90       	pop	r0
    2670:	0b be       	out	0x3b, r0	; 59
    2672:	0f 90       	pop	r0
    2674:	0f be       	out	0x3f, r0	; 63
    2676:	0f 90       	pop	r0
    2678:	1f 90       	pop	r1
    267a:	18 95       	reti

0000267c <__vector_51>:
    267c:	1f 92       	push	r1
    267e:	0f 92       	push	r0
    2680:	0f b6       	in	r0, 0x3f	; 63
    2682:	0f 92       	push	r0
    2684:	11 24       	eor	r1, r1
    2686:	0b b6       	in	r0, 0x3b	; 59
    2688:	0f 92       	push	r0
    268a:	2f 93       	push	r18
    268c:	3f 93       	push	r19
    268e:	4f 93       	push	r20
    2690:	5f 93       	push	r21
    2692:	6f 93       	push	r22
    2694:	7f 93       	push	r23
    2696:	8f 93       	push	r24
    2698:	9f 93       	push	r25
    269a:	af 93       	push	r26
    269c:	bf 93       	push	r27
    269e:	cf 93       	push	r28
    26a0:	df 93       	push	r29
    26a2:	ef 93       	push	r30
    26a4:	ff 93       	push	r31
    26a6:	a0 91 0f 0d 	lds	r26, 0x0D0F	; 0x800d0f <_ser_handle+0x4>
    26aa:	b0 91 10 0d 	lds	r27, 0x0D10	; 0x800d10 <_ser_handle+0x5>
    26ae:	10 97       	sbiw	r26, 0x00	; 0
    26b0:	11 f1       	breq	.+68     	; 0x26f6 <__vector_51+0x7a>
    26b2:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    26b6:	14 96       	adiw	r26, 0x04	; 4
    26b8:	ed 91       	ld	r30, X+
    26ba:	fc 91       	ld	r31, X
    26bc:	15 97       	sbiw	r26, 0x05	; 5
    26be:	93 81       	ldd	r25, Z+3	; 0x03
    26c0:	82 81       	ldd	r24, Z+2	; 0x02
    26c2:	25 81       	ldd	r18, Z+5	; 0x05
    26c4:	98 1b       	sub	r25, r24
    26c6:	92 23       	and	r25, r18
    26c8:	84 81       	ldd	r24, Z+4	; 0x04
    26ca:	98 17       	cp	r25, r24
    26cc:	61 f0       	breq	.+24     	; 0x26e6 <__vector_51+0x6a>
    26ce:	83 81       	ldd	r24, Z+3	; 0x03
    26d0:	26 95       	lsr	r18
    26d2:	28 23       	and	r18, r24
    26d4:	c0 81       	ld	r28, Z
    26d6:	d1 81       	ldd	r29, Z+1	; 0x01
    26d8:	c2 0f       	add	r28, r18
    26da:	d1 1d       	adc	r29, r1
    26dc:	68 83       	st	Y, r22
    26de:	8f 5f       	subi	r24, 0xFF	; 255
    26e0:	95 81       	ldd	r25, Z+5	; 0x05
    26e2:	89 23       	and	r24, r25
    26e4:	83 83       	std	Z+3, r24	; 0x03
    26e6:	16 96       	adiw	r26, 0x06	; 6
    26e8:	ed 91       	ld	r30, X+
    26ea:	fc 91       	ld	r31, X
    26ec:	17 97       	sbiw	r26, 0x07	; 7
    26ee:	30 97       	sbiw	r30, 0x00	; 0
    26f0:	11 f0       	breq	.+4      	; 0x26f6 <__vector_51+0x7a>
    26f2:	cd 01       	movw	r24, r26
    26f4:	19 95       	eicall
    26f6:	ff 91       	pop	r31
    26f8:	ef 91       	pop	r30
    26fa:	df 91       	pop	r29
    26fc:	cf 91       	pop	r28
    26fe:	bf 91       	pop	r27
    2700:	af 91       	pop	r26
    2702:	9f 91       	pop	r25
    2704:	8f 91       	pop	r24
    2706:	7f 91       	pop	r23
    2708:	6f 91       	pop	r22
    270a:	5f 91       	pop	r21
    270c:	4f 91       	pop	r20
    270e:	3f 91       	pop	r19
    2710:	2f 91       	pop	r18
    2712:	0f 90       	pop	r0
    2714:	0b be       	out	0x3b, r0	; 59
    2716:	0f 90       	pop	r0
    2718:	0f be       	out	0x3f, r0	; 63
    271a:	0f 90       	pop	r0
    271c:	1f 90       	pop	r1
    271e:	18 95       	reti

00002720 <__vector_52>:
    2720:	1f 92       	push	r1
    2722:	0f 92       	push	r0
    2724:	0f b6       	in	r0, 0x3f	; 63
    2726:	0f 92       	push	r0
    2728:	11 24       	eor	r1, r1
    272a:	0b b6       	in	r0, 0x3b	; 59
    272c:	0f 92       	push	r0
    272e:	2f 93       	push	r18
    2730:	8f 93       	push	r24
    2732:	9f 93       	push	r25
    2734:	af 93       	push	r26
    2736:	bf 93       	push	r27
    2738:	ef 93       	push	r30
    273a:	ff 93       	push	r31
    273c:	e0 91 0f 0d 	lds	r30, 0x0D0F	; 0x800d0f <_ser_handle+0x4>
    2740:	f0 91 10 0d 	lds	r31, 0x0D10	; 0x800d10 <_ser_handle+0x5>
    2744:	30 97       	sbiw	r30, 0x00	; 0
    2746:	b9 f0       	breq	.+46     	; 0x2776 <__vector_52+0x56>
    2748:	02 80       	ldd	r0, Z+2	; 0x02
    274a:	f3 81       	ldd	r31, Z+3	; 0x03
    274c:	e0 2d       	mov	r30, r0
    274e:	93 81       	ldd	r25, Z+3	; 0x03
    2750:	82 81       	ldd	r24, Z+2	; 0x02
    2752:	98 17       	cp	r25, r24
    2754:	b1 f0       	breq	.+44     	; 0x2782 <__vector_52+0x62>
    2756:	92 81       	ldd	r25, Z+2	; 0x02
    2758:	85 81       	ldd	r24, Z+5	; 0x05
    275a:	28 2f       	mov	r18, r24
    275c:	26 95       	lsr	r18
    275e:	29 23       	and	r18, r25
    2760:	a0 81       	ld	r26, Z
    2762:	b1 81       	ldd	r27, Z+1	; 0x01
    2764:	a2 0f       	add	r26, r18
    2766:	b1 1d       	adc	r27, r1
    2768:	2c 91       	ld	r18, X
    276a:	9f 5f       	subi	r25, 0xFF	; 255
    276c:	89 23       	and	r24, r25
    276e:	82 83       	std	Z+2, r24	; 0x02
    2770:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    2774:	0b c0       	rjmp	.+22     	; 0x278c <__vector_52+0x6c>
    2776:	e1 ed       	ldi	r30, 0xD1	; 209
    2778:	f0 e0       	ldi	r31, 0x00	; 0
    277a:	80 81       	ld	r24, Z
    277c:	8f 7d       	andi	r24, 0xDF	; 223
    277e:	80 83       	st	Z, r24
    2780:	05 c0       	rjmp	.+10     	; 0x278c <__vector_52+0x6c>
    2782:	e1 ed       	ldi	r30, 0xD1	; 209
    2784:	f0 e0       	ldi	r31, 0x00	; 0
    2786:	80 81       	ld	r24, Z
    2788:	8f 7d       	andi	r24, 0xDF	; 223
    278a:	80 83       	st	Z, r24
    278c:	ff 91       	pop	r31
    278e:	ef 91       	pop	r30
    2790:	bf 91       	pop	r27
    2792:	af 91       	pop	r26
    2794:	9f 91       	pop	r25
    2796:	8f 91       	pop	r24
    2798:	2f 91       	pop	r18
    279a:	0f 90       	pop	r0
    279c:	0b be       	out	0x3b, r0	; 59
    279e:	0f 90       	pop	r0
    27a0:	0f be       	out	0x3f, r0	; 63
    27a2:	0f 90       	pop	r0
    27a4:	1f 90       	pop	r1
    27a6:	18 95       	reti

000027a8 <__vector_54>:
    27a8:	1f 92       	push	r1
    27aa:	0f 92       	push	r0
    27ac:	0f b6       	in	r0, 0x3f	; 63
    27ae:	0f 92       	push	r0
    27b0:	11 24       	eor	r1, r1
    27b2:	0b b6       	in	r0, 0x3b	; 59
    27b4:	0f 92       	push	r0
    27b6:	2f 93       	push	r18
    27b8:	3f 93       	push	r19
    27ba:	4f 93       	push	r20
    27bc:	5f 93       	push	r21
    27be:	6f 93       	push	r22
    27c0:	7f 93       	push	r23
    27c2:	8f 93       	push	r24
    27c4:	9f 93       	push	r25
    27c6:	af 93       	push	r26
    27c8:	bf 93       	push	r27
    27ca:	cf 93       	push	r28
    27cc:	df 93       	push	r29
    27ce:	ef 93       	push	r30
    27d0:	ff 93       	push	r31
    27d2:	a0 91 11 0d 	lds	r26, 0x0D11	; 0x800d11 <_ser_handle+0x6>
    27d6:	b0 91 12 0d 	lds	r27, 0x0D12	; 0x800d12 <_ser_handle+0x7>
    27da:	10 97       	sbiw	r26, 0x00	; 0
    27dc:	11 f1       	breq	.+68     	; 0x2822 <__vector_54+0x7a>
    27de:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    27e2:	14 96       	adiw	r26, 0x04	; 4
    27e4:	ed 91       	ld	r30, X+
    27e6:	fc 91       	ld	r31, X
    27e8:	15 97       	sbiw	r26, 0x05	; 5
    27ea:	93 81       	ldd	r25, Z+3	; 0x03
    27ec:	82 81       	ldd	r24, Z+2	; 0x02
    27ee:	25 81       	ldd	r18, Z+5	; 0x05
    27f0:	98 1b       	sub	r25, r24
    27f2:	92 23       	and	r25, r18
    27f4:	84 81       	ldd	r24, Z+4	; 0x04
    27f6:	98 17       	cp	r25, r24
    27f8:	61 f0       	breq	.+24     	; 0x2812 <__vector_54+0x6a>
    27fa:	83 81       	ldd	r24, Z+3	; 0x03
    27fc:	26 95       	lsr	r18
    27fe:	28 23       	and	r18, r24
    2800:	c0 81       	ld	r28, Z
    2802:	d1 81       	ldd	r29, Z+1	; 0x01
    2804:	c2 0f       	add	r28, r18
    2806:	d1 1d       	adc	r29, r1
    2808:	68 83       	st	Y, r22
    280a:	8f 5f       	subi	r24, 0xFF	; 255
    280c:	95 81       	ldd	r25, Z+5	; 0x05
    280e:	89 23       	and	r24, r25
    2810:	83 83       	std	Z+3, r24	; 0x03
    2812:	16 96       	adiw	r26, 0x06	; 6
    2814:	ed 91       	ld	r30, X+
    2816:	fc 91       	ld	r31, X
    2818:	17 97       	sbiw	r26, 0x07	; 7
    281a:	30 97       	sbiw	r30, 0x00	; 0
    281c:	11 f0       	breq	.+4      	; 0x2822 <__vector_54+0x7a>
    281e:	cd 01       	movw	r24, r26
    2820:	19 95       	eicall
    2822:	ff 91       	pop	r31
    2824:	ef 91       	pop	r30
    2826:	df 91       	pop	r29
    2828:	cf 91       	pop	r28
    282a:	bf 91       	pop	r27
    282c:	af 91       	pop	r26
    282e:	9f 91       	pop	r25
    2830:	8f 91       	pop	r24
    2832:	7f 91       	pop	r23
    2834:	6f 91       	pop	r22
    2836:	5f 91       	pop	r21
    2838:	4f 91       	pop	r20
    283a:	3f 91       	pop	r19
    283c:	2f 91       	pop	r18
    283e:	0f 90       	pop	r0
    2840:	0b be       	out	0x3b, r0	; 59
    2842:	0f 90       	pop	r0
    2844:	0f be       	out	0x3f, r0	; 63
    2846:	0f 90       	pop	r0
    2848:	1f 90       	pop	r1
    284a:	18 95       	reti

0000284c <__vector_55>:
    284c:	1f 92       	push	r1
    284e:	0f 92       	push	r0
    2850:	0f b6       	in	r0, 0x3f	; 63
    2852:	0f 92       	push	r0
    2854:	11 24       	eor	r1, r1
    2856:	0b b6       	in	r0, 0x3b	; 59
    2858:	0f 92       	push	r0
    285a:	2f 93       	push	r18
    285c:	8f 93       	push	r24
    285e:	9f 93       	push	r25
    2860:	af 93       	push	r26
    2862:	bf 93       	push	r27
    2864:	ef 93       	push	r30
    2866:	ff 93       	push	r31
    2868:	e0 91 11 0d 	lds	r30, 0x0D11	; 0x800d11 <_ser_handle+0x6>
    286c:	f0 91 12 0d 	lds	r31, 0x0D12	; 0x800d12 <_ser_handle+0x7>
    2870:	30 97       	sbiw	r30, 0x00	; 0
    2872:	b9 f0       	breq	.+46     	; 0x28a2 <__vector_55+0x56>
    2874:	02 80       	ldd	r0, Z+2	; 0x02
    2876:	f3 81       	ldd	r31, Z+3	; 0x03
    2878:	e0 2d       	mov	r30, r0
    287a:	93 81       	ldd	r25, Z+3	; 0x03
    287c:	82 81       	ldd	r24, Z+2	; 0x02
    287e:	98 17       	cp	r25, r24
    2880:	b1 f0       	breq	.+44     	; 0x28ae <__vector_55+0x62>
    2882:	92 81       	ldd	r25, Z+2	; 0x02
    2884:	85 81       	ldd	r24, Z+5	; 0x05
    2886:	28 2f       	mov	r18, r24
    2888:	26 95       	lsr	r18
    288a:	29 23       	and	r18, r25
    288c:	a0 81       	ld	r26, Z
    288e:	b1 81       	ldd	r27, Z+1	; 0x01
    2890:	a2 0f       	add	r26, r18
    2892:	b1 1d       	adc	r27, r1
    2894:	2c 91       	ld	r18, X
    2896:	9f 5f       	subi	r25, 0xFF	; 255
    2898:	89 23       	and	r24, r25
    289a:	82 83       	std	Z+2, r24	; 0x02
    289c:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    28a0:	0b c0       	rjmp	.+22     	; 0x28b8 <__vector_55+0x6c>
    28a2:	e1 e3       	ldi	r30, 0x31	; 49
    28a4:	f1 e0       	ldi	r31, 0x01	; 1
    28a6:	80 81       	ld	r24, Z
    28a8:	8f 7d       	andi	r24, 0xDF	; 223
    28aa:	80 83       	st	Z, r24
    28ac:	05 c0       	rjmp	.+10     	; 0x28b8 <__vector_55+0x6c>
    28ae:	e1 e3       	ldi	r30, 0x31	; 49
    28b0:	f1 e0       	ldi	r31, 0x01	; 1
    28b2:	80 81       	ld	r24, Z
    28b4:	8f 7d       	andi	r24, 0xDF	; 223
    28b6:	80 83       	st	Z, r24
    28b8:	ff 91       	pop	r31
    28ba:	ef 91       	pop	r30
    28bc:	bf 91       	pop	r27
    28be:	af 91       	pop	r26
    28c0:	9f 91       	pop	r25
    28c2:	8f 91       	pop	r24
    28c4:	2f 91       	pop	r18
    28c6:	0f 90       	pop	r0
    28c8:	0b be       	out	0x3b, r0	; 59
    28ca:	0f 90       	pop	r0
    28cc:	0f be       	out	0x3f, r0	; 63
    28ce:	0f 90       	pop	r0
    28d0:	1f 90       	pop	r1
    28d2:	18 95       	reti

000028d4 <fifo_init>:
    28d4:	fc 01       	movw	r30, r24
    28d6:	41 11       	cpse	r20, r1
    28d8:	01 c0       	rjmp	.+2      	; 0x28dc <fifo_init+0x8>
    28da:	2b d3       	rcall	.+1622   	; 0x2f32 <abort>
    28dc:	84 2f       	mov	r24, r20
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	9c 01       	movw	r18, r24
    28e2:	21 50       	subi	r18, 0x01	; 1
    28e4:	31 09       	sbc	r19, r1
    28e6:	82 23       	and	r24, r18
    28e8:	93 23       	and	r25, r19
    28ea:	89 2b       	or	r24, r25
    28ec:	09 f0       	breq	.+2      	; 0x28f0 <fifo_init+0x1c>
    28ee:	21 d3       	rcall	.+1602   	; 0x2f32 <abort>
    28f0:	41 38       	cpi	r20, 0x81	; 129
    28f2:	08 f0       	brcs	.+2      	; 0x28f6 <fifo_init+0x22>
    28f4:	1e d3       	rcall	.+1596   	; 0x2f32 <abort>
    28f6:	12 82       	std	Z+2, r1	; 0x02
    28f8:	13 82       	std	Z+3, r1	; 0x03
    28fa:	44 83       	std	Z+4, r20	; 0x04
    28fc:	44 0f       	add	r20, r20
    28fe:	41 50       	subi	r20, 0x01	; 1
    2900:	45 83       	std	Z+5, r20	; 0x05
    2902:	71 83       	std	Z+1, r23	; 0x01
    2904:	60 83       	st	Z, r22
    2906:	80 e0       	ldi	r24, 0x00	; 0
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	08 95       	ret

0000290c <__subsf3>:
    290c:	50 58       	subi	r21, 0x80	; 128

0000290e <__addsf3>:
    290e:	bb 27       	eor	r27, r27
    2910:	aa 27       	eor	r26, r26
    2912:	0e d0       	rcall	.+28     	; 0x2930 <__addsf3x>
    2914:	48 c1       	rjmp	.+656    	; 0x2ba6 <__fp_round>
    2916:	39 d1       	rcall	.+626    	; 0x2b8a <__fp_pscA>
    2918:	30 f0       	brcs	.+12     	; 0x2926 <__addsf3+0x18>
    291a:	3e d1       	rcall	.+636    	; 0x2b98 <__fp_pscB>
    291c:	20 f0       	brcs	.+8      	; 0x2926 <__addsf3+0x18>
    291e:	31 f4       	brne	.+12     	; 0x292c <__addsf3+0x1e>
    2920:	9f 3f       	cpi	r25, 0xFF	; 255
    2922:	11 f4       	brne	.+4      	; 0x2928 <__addsf3+0x1a>
    2924:	1e f4       	brtc	.+6      	; 0x292c <__addsf3+0x1e>
    2926:	2e c1       	rjmp	.+604    	; 0x2b84 <__fp_nan>
    2928:	0e f4       	brtc	.+2      	; 0x292c <__addsf3+0x1e>
    292a:	e0 95       	com	r30
    292c:	e7 fb       	bst	r30, 7
    292e:	24 c1       	rjmp	.+584    	; 0x2b78 <__fp_inf>

00002930 <__addsf3x>:
    2930:	e9 2f       	mov	r30, r25
    2932:	4a d1       	rcall	.+660    	; 0x2bc8 <__fp_split3>
    2934:	80 f3       	brcs	.-32     	; 0x2916 <__addsf3+0x8>
    2936:	ba 17       	cp	r27, r26
    2938:	62 07       	cpc	r22, r18
    293a:	73 07       	cpc	r23, r19
    293c:	84 07       	cpc	r24, r20
    293e:	95 07       	cpc	r25, r21
    2940:	18 f0       	brcs	.+6      	; 0x2948 <__addsf3x+0x18>
    2942:	71 f4       	brne	.+28     	; 0x2960 <__addsf3x+0x30>
    2944:	9e f5       	brtc	.+102    	; 0x29ac <__addsf3x+0x7c>
    2946:	62 c1       	rjmp	.+708    	; 0x2c0c <__fp_zero>
    2948:	0e f4       	brtc	.+2      	; 0x294c <__addsf3x+0x1c>
    294a:	e0 95       	com	r30
    294c:	0b 2e       	mov	r0, r27
    294e:	ba 2f       	mov	r27, r26
    2950:	a0 2d       	mov	r26, r0
    2952:	0b 01       	movw	r0, r22
    2954:	b9 01       	movw	r22, r18
    2956:	90 01       	movw	r18, r0
    2958:	0c 01       	movw	r0, r24
    295a:	ca 01       	movw	r24, r20
    295c:	a0 01       	movw	r20, r0
    295e:	11 24       	eor	r1, r1
    2960:	ff 27       	eor	r31, r31
    2962:	59 1b       	sub	r21, r25
    2964:	99 f0       	breq	.+38     	; 0x298c <__addsf3x+0x5c>
    2966:	59 3f       	cpi	r21, 0xF9	; 249
    2968:	50 f4       	brcc	.+20     	; 0x297e <__addsf3x+0x4e>
    296a:	50 3e       	cpi	r21, 0xE0	; 224
    296c:	68 f1       	brcs	.+90     	; 0x29c8 <__addsf3x+0x98>
    296e:	1a 16       	cp	r1, r26
    2970:	f0 40       	sbci	r31, 0x00	; 0
    2972:	a2 2f       	mov	r26, r18
    2974:	23 2f       	mov	r18, r19
    2976:	34 2f       	mov	r19, r20
    2978:	44 27       	eor	r20, r20
    297a:	58 5f       	subi	r21, 0xF8	; 248
    297c:	f3 cf       	rjmp	.-26     	; 0x2964 <__addsf3x+0x34>
    297e:	46 95       	lsr	r20
    2980:	37 95       	ror	r19
    2982:	27 95       	ror	r18
    2984:	a7 95       	ror	r26
    2986:	f0 40       	sbci	r31, 0x00	; 0
    2988:	53 95       	inc	r21
    298a:	c9 f7       	brne	.-14     	; 0x297e <__addsf3x+0x4e>
    298c:	7e f4       	brtc	.+30     	; 0x29ac <__addsf3x+0x7c>
    298e:	1f 16       	cp	r1, r31
    2990:	ba 0b       	sbc	r27, r26
    2992:	62 0b       	sbc	r22, r18
    2994:	73 0b       	sbc	r23, r19
    2996:	84 0b       	sbc	r24, r20
    2998:	ba f0       	brmi	.+46     	; 0x29c8 <__addsf3x+0x98>
    299a:	91 50       	subi	r25, 0x01	; 1
    299c:	a1 f0       	breq	.+40     	; 0x29c6 <__addsf3x+0x96>
    299e:	ff 0f       	add	r31, r31
    29a0:	bb 1f       	adc	r27, r27
    29a2:	66 1f       	adc	r22, r22
    29a4:	77 1f       	adc	r23, r23
    29a6:	88 1f       	adc	r24, r24
    29a8:	c2 f7       	brpl	.-16     	; 0x299a <__addsf3x+0x6a>
    29aa:	0e c0       	rjmp	.+28     	; 0x29c8 <__addsf3x+0x98>
    29ac:	ba 0f       	add	r27, r26
    29ae:	62 1f       	adc	r22, r18
    29b0:	73 1f       	adc	r23, r19
    29b2:	84 1f       	adc	r24, r20
    29b4:	48 f4       	brcc	.+18     	; 0x29c8 <__addsf3x+0x98>
    29b6:	87 95       	ror	r24
    29b8:	77 95       	ror	r23
    29ba:	67 95       	ror	r22
    29bc:	b7 95       	ror	r27
    29be:	f7 95       	ror	r31
    29c0:	9e 3f       	cpi	r25, 0xFE	; 254
    29c2:	08 f0       	brcs	.+2      	; 0x29c6 <__addsf3x+0x96>
    29c4:	b3 cf       	rjmp	.-154    	; 0x292c <__addsf3+0x1e>
    29c6:	93 95       	inc	r25
    29c8:	88 0f       	add	r24, r24
    29ca:	08 f0       	brcs	.+2      	; 0x29ce <__addsf3x+0x9e>
    29cc:	99 27       	eor	r25, r25
    29ce:	ee 0f       	add	r30, r30
    29d0:	97 95       	ror	r25
    29d2:	87 95       	ror	r24
    29d4:	08 95       	ret

000029d6 <__divsf3>:
    29d6:	0c d0       	rcall	.+24     	; 0x29f0 <__divsf3x>
    29d8:	e6 c0       	rjmp	.+460    	; 0x2ba6 <__fp_round>
    29da:	de d0       	rcall	.+444    	; 0x2b98 <__fp_pscB>
    29dc:	40 f0       	brcs	.+16     	; 0x29ee <__divsf3+0x18>
    29de:	d5 d0       	rcall	.+426    	; 0x2b8a <__fp_pscA>
    29e0:	30 f0       	brcs	.+12     	; 0x29ee <__divsf3+0x18>
    29e2:	21 f4       	brne	.+8      	; 0x29ec <__divsf3+0x16>
    29e4:	5f 3f       	cpi	r21, 0xFF	; 255
    29e6:	19 f0       	breq	.+6      	; 0x29ee <__divsf3+0x18>
    29e8:	c7 c0       	rjmp	.+398    	; 0x2b78 <__fp_inf>
    29ea:	51 11       	cpse	r21, r1
    29ec:	10 c1       	rjmp	.+544    	; 0x2c0e <__fp_szero>
    29ee:	ca c0       	rjmp	.+404    	; 0x2b84 <__fp_nan>

000029f0 <__divsf3x>:
    29f0:	eb d0       	rcall	.+470    	; 0x2bc8 <__fp_split3>
    29f2:	98 f3       	brcs	.-26     	; 0x29da <__divsf3+0x4>

000029f4 <__divsf3_pse>:
    29f4:	99 23       	and	r25, r25
    29f6:	c9 f3       	breq	.-14     	; 0x29ea <__divsf3+0x14>
    29f8:	55 23       	and	r21, r21
    29fa:	b1 f3       	breq	.-20     	; 0x29e8 <__divsf3+0x12>
    29fc:	95 1b       	sub	r25, r21
    29fe:	55 0b       	sbc	r21, r21
    2a00:	bb 27       	eor	r27, r27
    2a02:	aa 27       	eor	r26, r26
    2a04:	62 17       	cp	r22, r18
    2a06:	73 07       	cpc	r23, r19
    2a08:	84 07       	cpc	r24, r20
    2a0a:	38 f0       	brcs	.+14     	; 0x2a1a <__divsf3_pse+0x26>
    2a0c:	9f 5f       	subi	r25, 0xFF	; 255
    2a0e:	5f 4f       	sbci	r21, 0xFF	; 255
    2a10:	22 0f       	add	r18, r18
    2a12:	33 1f       	adc	r19, r19
    2a14:	44 1f       	adc	r20, r20
    2a16:	aa 1f       	adc	r26, r26
    2a18:	a9 f3       	breq	.-22     	; 0x2a04 <__divsf3_pse+0x10>
    2a1a:	33 d0       	rcall	.+102    	; 0x2a82 <__divsf3_pse+0x8e>
    2a1c:	0e 2e       	mov	r0, r30
    2a1e:	3a f0       	brmi	.+14     	; 0x2a2e <__divsf3_pse+0x3a>
    2a20:	e0 e8       	ldi	r30, 0x80	; 128
    2a22:	30 d0       	rcall	.+96     	; 0x2a84 <__divsf3_pse+0x90>
    2a24:	91 50       	subi	r25, 0x01	; 1
    2a26:	50 40       	sbci	r21, 0x00	; 0
    2a28:	e6 95       	lsr	r30
    2a2a:	00 1c       	adc	r0, r0
    2a2c:	ca f7       	brpl	.-14     	; 0x2a20 <__divsf3_pse+0x2c>
    2a2e:	29 d0       	rcall	.+82     	; 0x2a82 <__divsf3_pse+0x8e>
    2a30:	fe 2f       	mov	r31, r30
    2a32:	27 d0       	rcall	.+78     	; 0x2a82 <__divsf3_pse+0x8e>
    2a34:	66 0f       	add	r22, r22
    2a36:	77 1f       	adc	r23, r23
    2a38:	88 1f       	adc	r24, r24
    2a3a:	bb 1f       	adc	r27, r27
    2a3c:	26 17       	cp	r18, r22
    2a3e:	37 07       	cpc	r19, r23
    2a40:	48 07       	cpc	r20, r24
    2a42:	ab 07       	cpc	r26, r27
    2a44:	b0 e8       	ldi	r27, 0x80	; 128
    2a46:	09 f0       	breq	.+2      	; 0x2a4a <__divsf3_pse+0x56>
    2a48:	bb 0b       	sbc	r27, r27
    2a4a:	80 2d       	mov	r24, r0
    2a4c:	bf 01       	movw	r22, r30
    2a4e:	ff 27       	eor	r31, r31
    2a50:	93 58       	subi	r25, 0x83	; 131
    2a52:	5f 4f       	sbci	r21, 0xFF	; 255
    2a54:	2a f0       	brmi	.+10     	; 0x2a60 <__divsf3_pse+0x6c>
    2a56:	9e 3f       	cpi	r25, 0xFE	; 254
    2a58:	51 05       	cpc	r21, r1
    2a5a:	68 f0       	brcs	.+26     	; 0x2a76 <__divsf3_pse+0x82>
    2a5c:	8d c0       	rjmp	.+282    	; 0x2b78 <__fp_inf>
    2a5e:	d7 c0       	rjmp	.+430    	; 0x2c0e <__fp_szero>
    2a60:	5f 3f       	cpi	r21, 0xFF	; 255
    2a62:	ec f3       	brlt	.-6      	; 0x2a5e <__divsf3_pse+0x6a>
    2a64:	98 3e       	cpi	r25, 0xE8	; 232
    2a66:	dc f3       	brlt	.-10     	; 0x2a5e <__divsf3_pse+0x6a>
    2a68:	86 95       	lsr	r24
    2a6a:	77 95       	ror	r23
    2a6c:	67 95       	ror	r22
    2a6e:	b7 95       	ror	r27
    2a70:	f7 95       	ror	r31
    2a72:	9f 5f       	subi	r25, 0xFF	; 255
    2a74:	c9 f7       	brne	.-14     	; 0x2a68 <__divsf3_pse+0x74>
    2a76:	88 0f       	add	r24, r24
    2a78:	91 1d       	adc	r25, r1
    2a7a:	96 95       	lsr	r25
    2a7c:	87 95       	ror	r24
    2a7e:	97 f9       	bld	r25, 7
    2a80:	08 95       	ret
    2a82:	e1 e0       	ldi	r30, 0x01	; 1
    2a84:	66 0f       	add	r22, r22
    2a86:	77 1f       	adc	r23, r23
    2a88:	88 1f       	adc	r24, r24
    2a8a:	bb 1f       	adc	r27, r27
    2a8c:	62 17       	cp	r22, r18
    2a8e:	73 07       	cpc	r23, r19
    2a90:	84 07       	cpc	r24, r20
    2a92:	ba 07       	cpc	r27, r26
    2a94:	20 f0       	brcs	.+8      	; 0x2a9e <__divsf3_pse+0xaa>
    2a96:	62 1b       	sub	r22, r18
    2a98:	73 0b       	sbc	r23, r19
    2a9a:	84 0b       	sbc	r24, r20
    2a9c:	ba 0b       	sbc	r27, r26
    2a9e:	ee 1f       	adc	r30, r30
    2aa0:	88 f7       	brcc	.-30     	; 0x2a84 <__divsf3_pse+0x90>
    2aa2:	e0 95       	com	r30
    2aa4:	08 95       	ret

00002aa6 <__fixunssfsi>:
    2aa6:	98 d0       	rcall	.+304    	; 0x2bd8 <__fp_splitA>
    2aa8:	88 f0       	brcs	.+34     	; 0x2acc <__fixunssfsi+0x26>
    2aaa:	9f 57       	subi	r25, 0x7F	; 127
    2aac:	90 f0       	brcs	.+36     	; 0x2ad2 <__fixunssfsi+0x2c>
    2aae:	b9 2f       	mov	r27, r25
    2ab0:	99 27       	eor	r25, r25
    2ab2:	b7 51       	subi	r27, 0x17	; 23
    2ab4:	a0 f0       	brcs	.+40     	; 0x2ade <__fixunssfsi+0x38>
    2ab6:	d1 f0       	breq	.+52     	; 0x2aec <__fixunssfsi+0x46>
    2ab8:	66 0f       	add	r22, r22
    2aba:	77 1f       	adc	r23, r23
    2abc:	88 1f       	adc	r24, r24
    2abe:	99 1f       	adc	r25, r25
    2ac0:	1a f0       	brmi	.+6      	; 0x2ac8 <__fixunssfsi+0x22>
    2ac2:	ba 95       	dec	r27
    2ac4:	c9 f7       	brne	.-14     	; 0x2ab8 <__fixunssfsi+0x12>
    2ac6:	12 c0       	rjmp	.+36     	; 0x2aec <__fixunssfsi+0x46>
    2ac8:	b1 30       	cpi	r27, 0x01	; 1
    2aca:	81 f0       	breq	.+32     	; 0x2aec <__fixunssfsi+0x46>
    2acc:	9f d0       	rcall	.+318    	; 0x2c0c <__fp_zero>
    2ace:	b1 e0       	ldi	r27, 0x01	; 1
    2ad0:	08 95       	ret
    2ad2:	9c c0       	rjmp	.+312    	; 0x2c0c <__fp_zero>
    2ad4:	67 2f       	mov	r22, r23
    2ad6:	78 2f       	mov	r23, r24
    2ad8:	88 27       	eor	r24, r24
    2ada:	b8 5f       	subi	r27, 0xF8	; 248
    2adc:	39 f0       	breq	.+14     	; 0x2aec <__fixunssfsi+0x46>
    2ade:	b9 3f       	cpi	r27, 0xF9	; 249
    2ae0:	cc f3       	brlt	.-14     	; 0x2ad4 <__fixunssfsi+0x2e>
    2ae2:	86 95       	lsr	r24
    2ae4:	77 95       	ror	r23
    2ae6:	67 95       	ror	r22
    2ae8:	b3 95       	inc	r27
    2aea:	d9 f7       	brne	.-10     	; 0x2ae2 <__fixunssfsi+0x3c>
    2aec:	3e f4       	brtc	.+14     	; 0x2afc <__fixunssfsi+0x56>
    2aee:	90 95       	com	r25
    2af0:	80 95       	com	r24
    2af2:	70 95       	com	r23
    2af4:	61 95       	neg	r22
    2af6:	7f 4f       	sbci	r23, 0xFF	; 255
    2af8:	8f 4f       	sbci	r24, 0xFF	; 255
    2afa:	9f 4f       	sbci	r25, 0xFF	; 255
    2afc:	08 95       	ret

00002afe <__floatunsisf>:
    2afe:	e8 94       	clt
    2b00:	09 c0       	rjmp	.+18     	; 0x2b14 <__floatsisf+0x12>

00002b02 <__floatsisf>:
    2b02:	97 fb       	bst	r25, 7
    2b04:	3e f4       	brtc	.+14     	; 0x2b14 <__floatsisf+0x12>
    2b06:	90 95       	com	r25
    2b08:	80 95       	com	r24
    2b0a:	70 95       	com	r23
    2b0c:	61 95       	neg	r22
    2b0e:	7f 4f       	sbci	r23, 0xFF	; 255
    2b10:	8f 4f       	sbci	r24, 0xFF	; 255
    2b12:	9f 4f       	sbci	r25, 0xFF	; 255
    2b14:	99 23       	and	r25, r25
    2b16:	a9 f0       	breq	.+42     	; 0x2b42 <__floatsisf+0x40>
    2b18:	f9 2f       	mov	r31, r25
    2b1a:	96 e9       	ldi	r25, 0x96	; 150
    2b1c:	bb 27       	eor	r27, r27
    2b1e:	93 95       	inc	r25
    2b20:	f6 95       	lsr	r31
    2b22:	87 95       	ror	r24
    2b24:	77 95       	ror	r23
    2b26:	67 95       	ror	r22
    2b28:	b7 95       	ror	r27
    2b2a:	f1 11       	cpse	r31, r1
    2b2c:	f8 cf       	rjmp	.-16     	; 0x2b1e <__floatsisf+0x1c>
    2b2e:	fa f4       	brpl	.+62     	; 0x2b6e <__floatsisf+0x6c>
    2b30:	bb 0f       	add	r27, r27
    2b32:	11 f4       	brne	.+4      	; 0x2b38 <__floatsisf+0x36>
    2b34:	60 ff       	sbrs	r22, 0
    2b36:	1b c0       	rjmp	.+54     	; 0x2b6e <__floatsisf+0x6c>
    2b38:	6f 5f       	subi	r22, 0xFF	; 255
    2b3a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b3c:	8f 4f       	sbci	r24, 0xFF	; 255
    2b3e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b40:	16 c0       	rjmp	.+44     	; 0x2b6e <__floatsisf+0x6c>
    2b42:	88 23       	and	r24, r24
    2b44:	11 f0       	breq	.+4      	; 0x2b4a <__floatsisf+0x48>
    2b46:	96 e9       	ldi	r25, 0x96	; 150
    2b48:	11 c0       	rjmp	.+34     	; 0x2b6c <__floatsisf+0x6a>
    2b4a:	77 23       	and	r23, r23
    2b4c:	21 f0       	breq	.+8      	; 0x2b56 <__floatsisf+0x54>
    2b4e:	9e e8       	ldi	r25, 0x8E	; 142
    2b50:	87 2f       	mov	r24, r23
    2b52:	76 2f       	mov	r23, r22
    2b54:	05 c0       	rjmp	.+10     	; 0x2b60 <__floatsisf+0x5e>
    2b56:	66 23       	and	r22, r22
    2b58:	71 f0       	breq	.+28     	; 0x2b76 <__floatsisf+0x74>
    2b5a:	96 e8       	ldi	r25, 0x86	; 134
    2b5c:	86 2f       	mov	r24, r22
    2b5e:	70 e0       	ldi	r23, 0x00	; 0
    2b60:	60 e0       	ldi	r22, 0x00	; 0
    2b62:	2a f0       	brmi	.+10     	; 0x2b6e <__floatsisf+0x6c>
    2b64:	9a 95       	dec	r25
    2b66:	66 0f       	add	r22, r22
    2b68:	77 1f       	adc	r23, r23
    2b6a:	88 1f       	adc	r24, r24
    2b6c:	da f7       	brpl	.-10     	; 0x2b64 <__floatsisf+0x62>
    2b6e:	88 0f       	add	r24, r24
    2b70:	96 95       	lsr	r25
    2b72:	87 95       	ror	r24
    2b74:	97 f9       	bld	r25, 7
    2b76:	08 95       	ret

00002b78 <__fp_inf>:
    2b78:	97 f9       	bld	r25, 7
    2b7a:	9f 67       	ori	r25, 0x7F	; 127
    2b7c:	80 e8       	ldi	r24, 0x80	; 128
    2b7e:	70 e0       	ldi	r23, 0x00	; 0
    2b80:	60 e0       	ldi	r22, 0x00	; 0
    2b82:	08 95       	ret

00002b84 <__fp_nan>:
    2b84:	9f ef       	ldi	r25, 0xFF	; 255
    2b86:	80 ec       	ldi	r24, 0xC0	; 192
    2b88:	08 95       	ret

00002b8a <__fp_pscA>:
    2b8a:	00 24       	eor	r0, r0
    2b8c:	0a 94       	dec	r0
    2b8e:	16 16       	cp	r1, r22
    2b90:	17 06       	cpc	r1, r23
    2b92:	18 06       	cpc	r1, r24
    2b94:	09 06       	cpc	r0, r25
    2b96:	08 95       	ret

00002b98 <__fp_pscB>:
    2b98:	00 24       	eor	r0, r0
    2b9a:	0a 94       	dec	r0
    2b9c:	12 16       	cp	r1, r18
    2b9e:	13 06       	cpc	r1, r19
    2ba0:	14 06       	cpc	r1, r20
    2ba2:	05 06       	cpc	r0, r21
    2ba4:	08 95       	ret

00002ba6 <__fp_round>:
    2ba6:	09 2e       	mov	r0, r25
    2ba8:	03 94       	inc	r0
    2baa:	00 0c       	add	r0, r0
    2bac:	11 f4       	brne	.+4      	; 0x2bb2 <__fp_round+0xc>
    2bae:	88 23       	and	r24, r24
    2bb0:	52 f0       	brmi	.+20     	; 0x2bc6 <__fp_round+0x20>
    2bb2:	bb 0f       	add	r27, r27
    2bb4:	40 f4       	brcc	.+16     	; 0x2bc6 <__fp_round+0x20>
    2bb6:	bf 2b       	or	r27, r31
    2bb8:	11 f4       	brne	.+4      	; 0x2bbe <__fp_round+0x18>
    2bba:	60 ff       	sbrs	r22, 0
    2bbc:	04 c0       	rjmp	.+8      	; 0x2bc6 <__fp_round+0x20>
    2bbe:	6f 5f       	subi	r22, 0xFF	; 255
    2bc0:	7f 4f       	sbci	r23, 0xFF	; 255
    2bc2:	8f 4f       	sbci	r24, 0xFF	; 255
    2bc4:	9f 4f       	sbci	r25, 0xFF	; 255
    2bc6:	08 95       	ret

00002bc8 <__fp_split3>:
    2bc8:	57 fd       	sbrc	r21, 7
    2bca:	90 58       	subi	r25, 0x80	; 128
    2bcc:	44 0f       	add	r20, r20
    2bce:	55 1f       	adc	r21, r21
    2bd0:	59 f0       	breq	.+22     	; 0x2be8 <__fp_splitA+0x10>
    2bd2:	5f 3f       	cpi	r21, 0xFF	; 255
    2bd4:	71 f0       	breq	.+28     	; 0x2bf2 <__fp_splitA+0x1a>
    2bd6:	47 95       	ror	r20

00002bd8 <__fp_splitA>:
    2bd8:	88 0f       	add	r24, r24
    2bda:	97 fb       	bst	r25, 7
    2bdc:	99 1f       	adc	r25, r25
    2bde:	61 f0       	breq	.+24     	; 0x2bf8 <__fp_splitA+0x20>
    2be0:	9f 3f       	cpi	r25, 0xFF	; 255
    2be2:	79 f0       	breq	.+30     	; 0x2c02 <__fp_splitA+0x2a>
    2be4:	87 95       	ror	r24
    2be6:	08 95       	ret
    2be8:	12 16       	cp	r1, r18
    2bea:	13 06       	cpc	r1, r19
    2bec:	14 06       	cpc	r1, r20
    2bee:	55 1f       	adc	r21, r21
    2bf0:	f2 cf       	rjmp	.-28     	; 0x2bd6 <__fp_split3+0xe>
    2bf2:	46 95       	lsr	r20
    2bf4:	f1 df       	rcall	.-30     	; 0x2bd8 <__fp_splitA>
    2bf6:	08 c0       	rjmp	.+16     	; 0x2c08 <__fp_splitA+0x30>
    2bf8:	16 16       	cp	r1, r22
    2bfa:	17 06       	cpc	r1, r23
    2bfc:	18 06       	cpc	r1, r24
    2bfe:	99 1f       	adc	r25, r25
    2c00:	f1 cf       	rjmp	.-30     	; 0x2be4 <__fp_splitA+0xc>
    2c02:	86 95       	lsr	r24
    2c04:	71 05       	cpc	r23, r1
    2c06:	61 05       	cpc	r22, r1
    2c08:	08 94       	sec
    2c0a:	08 95       	ret

00002c0c <__fp_zero>:
    2c0c:	e8 94       	clt

00002c0e <__fp_szero>:
    2c0e:	bb 27       	eor	r27, r27
    2c10:	66 27       	eor	r22, r22
    2c12:	77 27       	eor	r23, r23
    2c14:	cb 01       	movw	r24, r22
    2c16:	97 f9       	bld	r25, 7
    2c18:	08 95       	ret

00002c1a <__mulsf3>:
    2c1a:	0b d0       	rcall	.+22     	; 0x2c32 <__mulsf3x>
    2c1c:	c4 cf       	rjmp	.-120    	; 0x2ba6 <__fp_round>
    2c1e:	b5 df       	rcall	.-150    	; 0x2b8a <__fp_pscA>
    2c20:	28 f0       	brcs	.+10     	; 0x2c2c <__mulsf3+0x12>
    2c22:	ba df       	rcall	.-140    	; 0x2b98 <__fp_pscB>
    2c24:	18 f0       	brcs	.+6      	; 0x2c2c <__mulsf3+0x12>
    2c26:	95 23       	and	r25, r21
    2c28:	09 f0       	breq	.+2      	; 0x2c2c <__mulsf3+0x12>
    2c2a:	a6 cf       	rjmp	.-180    	; 0x2b78 <__fp_inf>
    2c2c:	ab cf       	rjmp	.-170    	; 0x2b84 <__fp_nan>
    2c2e:	11 24       	eor	r1, r1
    2c30:	ee cf       	rjmp	.-36     	; 0x2c0e <__fp_szero>

00002c32 <__mulsf3x>:
    2c32:	ca df       	rcall	.-108    	; 0x2bc8 <__fp_split3>
    2c34:	a0 f3       	brcs	.-24     	; 0x2c1e <__mulsf3+0x4>

00002c36 <__mulsf3_pse>:
    2c36:	95 9f       	mul	r25, r21
    2c38:	d1 f3       	breq	.-12     	; 0x2c2e <__mulsf3+0x14>
    2c3a:	95 0f       	add	r25, r21
    2c3c:	50 e0       	ldi	r21, 0x00	; 0
    2c3e:	55 1f       	adc	r21, r21
    2c40:	62 9f       	mul	r22, r18
    2c42:	f0 01       	movw	r30, r0
    2c44:	72 9f       	mul	r23, r18
    2c46:	bb 27       	eor	r27, r27
    2c48:	f0 0d       	add	r31, r0
    2c4a:	b1 1d       	adc	r27, r1
    2c4c:	63 9f       	mul	r22, r19
    2c4e:	aa 27       	eor	r26, r26
    2c50:	f0 0d       	add	r31, r0
    2c52:	b1 1d       	adc	r27, r1
    2c54:	aa 1f       	adc	r26, r26
    2c56:	64 9f       	mul	r22, r20
    2c58:	66 27       	eor	r22, r22
    2c5a:	b0 0d       	add	r27, r0
    2c5c:	a1 1d       	adc	r26, r1
    2c5e:	66 1f       	adc	r22, r22
    2c60:	82 9f       	mul	r24, r18
    2c62:	22 27       	eor	r18, r18
    2c64:	b0 0d       	add	r27, r0
    2c66:	a1 1d       	adc	r26, r1
    2c68:	62 1f       	adc	r22, r18
    2c6a:	73 9f       	mul	r23, r19
    2c6c:	b0 0d       	add	r27, r0
    2c6e:	a1 1d       	adc	r26, r1
    2c70:	62 1f       	adc	r22, r18
    2c72:	83 9f       	mul	r24, r19
    2c74:	a0 0d       	add	r26, r0
    2c76:	61 1d       	adc	r22, r1
    2c78:	22 1f       	adc	r18, r18
    2c7a:	74 9f       	mul	r23, r20
    2c7c:	33 27       	eor	r19, r19
    2c7e:	a0 0d       	add	r26, r0
    2c80:	61 1d       	adc	r22, r1
    2c82:	23 1f       	adc	r18, r19
    2c84:	84 9f       	mul	r24, r20
    2c86:	60 0d       	add	r22, r0
    2c88:	21 1d       	adc	r18, r1
    2c8a:	82 2f       	mov	r24, r18
    2c8c:	76 2f       	mov	r23, r22
    2c8e:	6a 2f       	mov	r22, r26
    2c90:	11 24       	eor	r1, r1
    2c92:	9f 57       	subi	r25, 0x7F	; 127
    2c94:	50 40       	sbci	r21, 0x00	; 0
    2c96:	8a f0       	brmi	.+34     	; 0x2cba <__mulsf3_pse+0x84>
    2c98:	e1 f0       	breq	.+56     	; 0x2cd2 <__mulsf3_pse+0x9c>
    2c9a:	88 23       	and	r24, r24
    2c9c:	4a f0       	brmi	.+18     	; 0x2cb0 <__mulsf3_pse+0x7a>
    2c9e:	ee 0f       	add	r30, r30
    2ca0:	ff 1f       	adc	r31, r31
    2ca2:	bb 1f       	adc	r27, r27
    2ca4:	66 1f       	adc	r22, r22
    2ca6:	77 1f       	adc	r23, r23
    2ca8:	88 1f       	adc	r24, r24
    2caa:	91 50       	subi	r25, 0x01	; 1
    2cac:	50 40       	sbci	r21, 0x00	; 0
    2cae:	a9 f7       	brne	.-22     	; 0x2c9a <__mulsf3_pse+0x64>
    2cb0:	9e 3f       	cpi	r25, 0xFE	; 254
    2cb2:	51 05       	cpc	r21, r1
    2cb4:	70 f0       	brcs	.+28     	; 0x2cd2 <__mulsf3_pse+0x9c>
    2cb6:	60 cf       	rjmp	.-320    	; 0x2b78 <__fp_inf>
    2cb8:	aa cf       	rjmp	.-172    	; 0x2c0e <__fp_szero>
    2cba:	5f 3f       	cpi	r21, 0xFF	; 255
    2cbc:	ec f3       	brlt	.-6      	; 0x2cb8 <__mulsf3_pse+0x82>
    2cbe:	98 3e       	cpi	r25, 0xE8	; 232
    2cc0:	dc f3       	brlt	.-10     	; 0x2cb8 <__mulsf3_pse+0x82>
    2cc2:	86 95       	lsr	r24
    2cc4:	77 95       	ror	r23
    2cc6:	67 95       	ror	r22
    2cc8:	b7 95       	ror	r27
    2cca:	f7 95       	ror	r31
    2ccc:	e7 95       	ror	r30
    2cce:	9f 5f       	subi	r25, 0xFF	; 255
    2cd0:	c1 f7       	brne	.-16     	; 0x2cc2 <__mulsf3_pse+0x8c>
    2cd2:	fe 2b       	or	r31, r30
    2cd4:	88 0f       	add	r24, r24
    2cd6:	91 1d       	adc	r25, r1
    2cd8:	96 95       	lsr	r25
    2cda:	87 95       	ror	r24
    2cdc:	97 f9       	bld	r25, 7
    2cde:	08 95       	ret

00002ce0 <__tablejump2__>:
    2ce0:	ee 0f       	add	r30, r30
    2ce2:	ff 1f       	adc	r31, r31
    2ce4:	88 1f       	adc	r24, r24
    2ce6:	8b bf       	out	0x3b, r24	; 59
    2ce8:	07 90       	elpm	r0, Z+
    2cea:	f6 91       	elpm	r31, Z
    2cec:	e0 2d       	mov	r30, r0
    2cee:	19 94       	eijmp

00002cf0 <malloc>:
    2cf0:	0f 93       	push	r16
    2cf2:	1f 93       	push	r17
    2cf4:	cf 93       	push	r28
    2cf6:	df 93       	push	r29
    2cf8:	82 30       	cpi	r24, 0x02	; 2
    2cfa:	91 05       	cpc	r25, r1
    2cfc:	10 f4       	brcc	.+4      	; 0x2d02 <malloc+0x12>
    2cfe:	82 e0       	ldi	r24, 0x02	; 2
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	e0 91 15 0d 	lds	r30, 0x0D15	; 0x800d15 <__flp>
    2d06:	f0 91 16 0d 	lds	r31, 0x0D16	; 0x800d16 <__flp+0x1>
    2d0a:	20 e0       	ldi	r18, 0x00	; 0
    2d0c:	30 e0       	ldi	r19, 0x00	; 0
    2d0e:	a0 e0       	ldi	r26, 0x00	; 0
    2d10:	b0 e0       	ldi	r27, 0x00	; 0
    2d12:	30 97       	sbiw	r30, 0x00	; 0
    2d14:	19 f1       	breq	.+70     	; 0x2d5c <malloc+0x6c>
    2d16:	40 81       	ld	r20, Z
    2d18:	51 81       	ldd	r21, Z+1	; 0x01
    2d1a:	02 81       	ldd	r16, Z+2	; 0x02
    2d1c:	13 81       	ldd	r17, Z+3	; 0x03
    2d1e:	48 17       	cp	r20, r24
    2d20:	59 07       	cpc	r21, r25
    2d22:	c8 f0       	brcs	.+50     	; 0x2d56 <malloc+0x66>
    2d24:	84 17       	cp	r24, r20
    2d26:	95 07       	cpc	r25, r21
    2d28:	69 f4       	brne	.+26     	; 0x2d44 <malloc+0x54>
    2d2a:	10 97       	sbiw	r26, 0x00	; 0
    2d2c:	31 f0       	breq	.+12     	; 0x2d3a <malloc+0x4a>
    2d2e:	12 96       	adiw	r26, 0x02	; 2
    2d30:	0c 93       	st	X, r16
    2d32:	12 97       	sbiw	r26, 0x02	; 2
    2d34:	13 96       	adiw	r26, 0x03	; 3
    2d36:	1c 93       	st	X, r17
    2d38:	27 c0       	rjmp	.+78     	; 0x2d88 <malloc+0x98>
    2d3a:	00 93 15 0d 	sts	0x0D15, r16	; 0x800d15 <__flp>
    2d3e:	10 93 16 0d 	sts	0x0D16, r17	; 0x800d16 <__flp+0x1>
    2d42:	22 c0       	rjmp	.+68     	; 0x2d88 <malloc+0x98>
    2d44:	21 15       	cp	r18, r1
    2d46:	31 05       	cpc	r19, r1
    2d48:	19 f0       	breq	.+6      	; 0x2d50 <malloc+0x60>
    2d4a:	42 17       	cp	r20, r18
    2d4c:	53 07       	cpc	r21, r19
    2d4e:	18 f4       	brcc	.+6      	; 0x2d56 <malloc+0x66>
    2d50:	9a 01       	movw	r18, r20
    2d52:	bd 01       	movw	r22, r26
    2d54:	ef 01       	movw	r28, r30
    2d56:	df 01       	movw	r26, r30
    2d58:	f8 01       	movw	r30, r16
    2d5a:	db cf       	rjmp	.-74     	; 0x2d12 <malloc+0x22>
    2d5c:	21 15       	cp	r18, r1
    2d5e:	31 05       	cpc	r19, r1
    2d60:	f9 f0       	breq	.+62     	; 0x2da0 <malloc+0xb0>
    2d62:	28 1b       	sub	r18, r24
    2d64:	39 0b       	sbc	r19, r25
    2d66:	24 30       	cpi	r18, 0x04	; 4
    2d68:	31 05       	cpc	r19, r1
    2d6a:	80 f4       	brcc	.+32     	; 0x2d8c <malloc+0x9c>
    2d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d6e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d70:	61 15       	cp	r22, r1
    2d72:	71 05       	cpc	r23, r1
    2d74:	21 f0       	breq	.+8      	; 0x2d7e <malloc+0x8e>
    2d76:	fb 01       	movw	r30, r22
    2d78:	93 83       	std	Z+3, r25	; 0x03
    2d7a:	82 83       	std	Z+2, r24	; 0x02
    2d7c:	04 c0       	rjmp	.+8      	; 0x2d86 <malloc+0x96>
    2d7e:	90 93 16 0d 	sts	0x0D16, r25	; 0x800d16 <__flp+0x1>
    2d82:	80 93 15 0d 	sts	0x0D15, r24	; 0x800d15 <__flp>
    2d86:	fe 01       	movw	r30, r28
    2d88:	32 96       	adiw	r30, 0x02	; 2
    2d8a:	44 c0       	rjmp	.+136    	; 0x2e14 <malloc+0x124>
    2d8c:	fe 01       	movw	r30, r28
    2d8e:	e2 0f       	add	r30, r18
    2d90:	f3 1f       	adc	r31, r19
    2d92:	81 93       	st	Z+, r24
    2d94:	91 93       	st	Z+, r25
    2d96:	22 50       	subi	r18, 0x02	; 2
    2d98:	31 09       	sbc	r19, r1
    2d9a:	39 83       	std	Y+1, r19	; 0x01
    2d9c:	28 83       	st	Y, r18
    2d9e:	3a c0       	rjmp	.+116    	; 0x2e14 <malloc+0x124>
    2da0:	20 91 13 0d 	lds	r18, 0x0D13	; 0x800d13 <__brkval>
    2da4:	30 91 14 0d 	lds	r19, 0x0D14	; 0x800d14 <__brkval+0x1>
    2da8:	23 2b       	or	r18, r19
    2daa:	41 f4       	brne	.+16     	; 0x2dbc <malloc+0xcc>
    2dac:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    2db0:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    2db4:	30 93 14 0d 	sts	0x0D14, r19	; 0x800d14 <__brkval+0x1>
    2db8:	20 93 13 0d 	sts	0x0D13, r18	; 0x800d13 <__brkval>
    2dbc:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    2dc0:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    2dc4:	21 15       	cp	r18, r1
    2dc6:	31 05       	cpc	r19, r1
    2dc8:	41 f4       	brne	.+16     	; 0x2dda <malloc+0xea>
    2dca:	2d b7       	in	r18, 0x3d	; 61
    2dcc:	3e b7       	in	r19, 0x3e	; 62
    2dce:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    2dd2:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    2dd6:	24 1b       	sub	r18, r20
    2dd8:	35 0b       	sbc	r19, r21
    2dda:	e0 91 13 0d 	lds	r30, 0x0D13	; 0x800d13 <__brkval>
    2dde:	f0 91 14 0d 	lds	r31, 0x0D14	; 0x800d14 <__brkval+0x1>
    2de2:	e2 17       	cp	r30, r18
    2de4:	f3 07       	cpc	r31, r19
    2de6:	a0 f4       	brcc	.+40     	; 0x2e10 <malloc+0x120>
    2de8:	2e 1b       	sub	r18, r30
    2dea:	3f 0b       	sbc	r19, r31
    2dec:	28 17       	cp	r18, r24
    2dee:	39 07       	cpc	r19, r25
    2df0:	78 f0       	brcs	.+30     	; 0x2e10 <malloc+0x120>
    2df2:	ac 01       	movw	r20, r24
    2df4:	4e 5f       	subi	r20, 0xFE	; 254
    2df6:	5f 4f       	sbci	r21, 0xFF	; 255
    2df8:	24 17       	cp	r18, r20
    2dfa:	35 07       	cpc	r19, r21
    2dfc:	48 f0       	brcs	.+18     	; 0x2e10 <malloc+0x120>
    2dfe:	4e 0f       	add	r20, r30
    2e00:	5f 1f       	adc	r21, r31
    2e02:	50 93 14 0d 	sts	0x0D14, r21	; 0x800d14 <__brkval+0x1>
    2e06:	40 93 13 0d 	sts	0x0D13, r20	; 0x800d13 <__brkval>
    2e0a:	81 93       	st	Z+, r24
    2e0c:	91 93       	st	Z+, r25
    2e0e:	02 c0       	rjmp	.+4      	; 0x2e14 <malloc+0x124>
    2e10:	e0 e0       	ldi	r30, 0x00	; 0
    2e12:	f0 e0       	ldi	r31, 0x00	; 0
    2e14:	cf 01       	movw	r24, r30
    2e16:	df 91       	pop	r29
    2e18:	cf 91       	pop	r28
    2e1a:	1f 91       	pop	r17
    2e1c:	0f 91       	pop	r16
    2e1e:	08 95       	ret

00002e20 <free>:
    2e20:	cf 93       	push	r28
    2e22:	df 93       	push	r29
    2e24:	00 97       	sbiw	r24, 0x00	; 0
    2e26:	09 f4       	brne	.+2      	; 0x2e2a <free+0xa>
    2e28:	81 c0       	rjmp	.+258    	; 0x2f2c <free+0x10c>
    2e2a:	fc 01       	movw	r30, r24
    2e2c:	32 97       	sbiw	r30, 0x02	; 2
    2e2e:	13 82       	std	Z+3, r1	; 0x03
    2e30:	12 82       	std	Z+2, r1	; 0x02
    2e32:	a0 91 15 0d 	lds	r26, 0x0D15	; 0x800d15 <__flp>
    2e36:	b0 91 16 0d 	lds	r27, 0x0D16	; 0x800d16 <__flp+0x1>
    2e3a:	10 97       	sbiw	r26, 0x00	; 0
    2e3c:	81 f4       	brne	.+32     	; 0x2e5e <free+0x3e>
    2e3e:	20 81       	ld	r18, Z
    2e40:	31 81       	ldd	r19, Z+1	; 0x01
    2e42:	82 0f       	add	r24, r18
    2e44:	93 1f       	adc	r25, r19
    2e46:	20 91 13 0d 	lds	r18, 0x0D13	; 0x800d13 <__brkval>
    2e4a:	30 91 14 0d 	lds	r19, 0x0D14	; 0x800d14 <__brkval+0x1>
    2e4e:	28 17       	cp	r18, r24
    2e50:	39 07       	cpc	r19, r25
    2e52:	51 f5       	brne	.+84     	; 0x2ea8 <free+0x88>
    2e54:	f0 93 14 0d 	sts	0x0D14, r31	; 0x800d14 <__brkval+0x1>
    2e58:	e0 93 13 0d 	sts	0x0D13, r30	; 0x800d13 <__brkval>
    2e5c:	67 c0       	rjmp	.+206    	; 0x2f2c <free+0x10c>
    2e5e:	ed 01       	movw	r28, r26
    2e60:	20 e0       	ldi	r18, 0x00	; 0
    2e62:	30 e0       	ldi	r19, 0x00	; 0
    2e64:	ce 17       	cp	r28, r30
    2e66:	df 07       	cpc	r29, r31
    2e68:	40 f4       	brcc	.+16     	; 0x2e7a <free+0x5a>
    2e6a:	4a 81       	ldd	r20, Y+2	; 0x02
    2e6c:	5b 81       	ldd	r21, Y+3	; 0x03
    2e6e:	9e 01       	movw	r18, r28
    2e70:	41 15       	cp	r20, r1
    2e72:	51 05       	cpc	r21, r1
    2e74:	f1 f0       	breq	.+60     	; 0x2eb2 <free+0x92>
    2e76:	ea 01       	movw	r28, r20
    2e78:	f5 cf       	rjmp	.-22     	; 0x2e64 <free+0x44>
    2e7a:	d3 83       	std	Z+3, r29	; 0x03
    2e7c:	c2 83       	std	Z+2, r28	; 0x02
    2e7e:	40 81       	ld	r20, Z
    2e80:	51 81       	ldd	r21, Z+1	; 0x01
    2e82:	84 0f       	add	r24, r20
    2e84:	95 1f       	adc	r25, r21
    2e86:	c8 17       	cp	r28, r24
    2e88:	d9 07       	cpc	r29, r25
    2e8a:	59 f4       	brne	.+22     	; 0x2ea2 <free+0x82>
    2e8c:	88 81       	ld	r24, Y
    2e8e:	99 81       	ldd	r25, Y+1	; 0x01
    2e90:	84 0f       	add	r24, r20
    2e92:	95 1f       	adc	r25, r21
    2e94:	02 96       	adiw	r24, 0x02	; 2
    2e96:	91 83       	std	Z+1, r25	; 0x01
    2e98:	80 83       	st	Z, r24
    2e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e9c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e9e:	93 83       	std	Z+3, r25	; 0x03
    2ea0:	82 83       	std	Z+2, r24	; 0x02
    2ea2:	21 15       	cp	r18, r1
    2ea4:	31 05       	cpc	r19, r1
    2ea6:	29 f4       	brne	.+10     	; 0x2eb2 <free+0x92>
    2ea8:	f0 93 16 0d 	sts	0x0D16, r31	; 0x800d16 <__flp+0x1>
    2eac:	e0 93 15 0d 	sts	0x0D15, r30	; 0x800d15 <__flp>
    2eb0:	3d c0       	rjmp	.+122    	; 0x2f2c <free+0x10c>
    2eb2:	e9 01       	movw	r28, r18
    2eb4:	fb 83       	std	Y+3, r31	; 0x03
    2eb6:	ea 83       	std	Y+2, r30	; 0x02
    2eb8:	49 91       	ld	r20, Y+
    2eba:	59 91       	ld	r21, Y+
    2ebc:	c4 0f       	add	r28, r20
    2ebe:	d5 1f       	adc	r29, r21
    2ec0:	ec 17       	cp	r30, r28
    2ec2:	fd 07       	cpc	r31, r29
    2ec4:	61 f4       	brne	.+24     	; 0x2ede <free+0xbe>
    2ec6:	80 81       	ld	r24, Z
    2ec8:	91 81       	ldd	r25, Z+1	; 0x01
    2eca:	84 0f       	add	r24, r20
    2ecc:	95 1f       	adc	r25, r21
    2ece:	02 96       	adiw	r24, 0x02	; 2
    2ed0:	e9 01       	movw	r28, r18
    2ed2:	99 83       	std	Y+1, r25	; 0x01
    2ed4:	88 83       	st	Y, r24
    2ed6:	82 81       	ldd	r24, Z+2	; 0x02
    2ed8:	93 81       	ldd	r25, Z+3	; 0x03
    2eda:	9b 83       	std	Y+3, r25	; 0x03
    2edc:	8a 83       	std	Y+2, r24	; 0x02
    2ede:	e0 e0       	ldi	r30, 0x00	; 0
    2ee0:	f0 e0       	ldi	r31, 0x00	; 0
    2ee2:	12 96       	adiw	r26, 0x02	; 2
    2ee4:	8d 91       	ld	r24, X+
    2ee6:	9c 91       	ld	r25, X
    2ee8:	13 97       	sbiw	r26, 0x03	; 3
    2eea:	00 97       	sbiw	r24, 0x00	; 0
    2eec:	19 f0       	breq	.+6      	; 0x2ef4 <free+0xd4>
    2eee:	fd 01       	movw	r30, r26
    2ef0:	dc 01       	movw	r26, r24
    2ef2:	f7 cf       	rjmp	.-18     	; 0x2ee2 <free+0xc2>
    2ef4:	8d 91       	ld	r24, X+
    2ef6:	9c 91       	ld	r25, X
    2ef8:	11 97       	sbiw	r26, 0x01	; 1
    2efa:	9d 01       	movw	r18, r26
    2efc:	2e 5f       	subi	r18, 0xFE	; 254
    2efe:	3f 4f       	sbci	r19, 0xFF	; 255
    2f00:	82 0f       	add	r24, r18
    2f02:	93 1f       	adc	r25, r19
    2f04:	20 91 13 0d 	lds	r18, 0x0D13	; 0x800d13 <__brkval>
    2f08:	30 91 14 0d 	lds	r19, 0x0D14	; 0x800d14 <__brkval+0x1>
    2f0c:	28 17       	cp	r18, r24
    2f0e:	39 07       	cpc	r19, r25
    2f10:	69 f4       	brne	.+26     	; 0x2f2c <free+0x10c>
    2f12:	30 97       	sbiw	r30, 0x00	; 0
    2f14:	29 f4       	brne	.+10     	; 0x2f20 <free+0x100>
    2f16:	10 92 16 0d 	sts	0x0D16, r1	; 0x800d16 <__flp+0x1>
    2f1a:	10 92 15 0d 	sts	0x0D15, r1	; 0x800d15 <__flp>
    2f1e:	02 c0       	rjmp	.+4      	; 0x2f24 <free+0x104>
    2f20:	13 82       	std	Z+3, r1	; 0x03
    2f22:	12 82       	std	Z+2, r1	; 0x02
    2f24:	b0 93 14 0d 	sts	0x0D14, r27	; 0x800d14 <__brkval+0x1>
    2f28:	a0 93 13 0d 	sts	0x0D13, r26	; 0x800d13 <__brkval>
    2f2c:	df 91       	pop	r29
    2f2e:	cf 91       	pop	r28
    2f30:	08 95       	ret

00002f32 <abort>:
    2f32:	81 e0       	ldi	r24, 0x01	; 1
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	f8 94       	cli
    2f38:	00 c3       	rjmp	.+1536   	; 0x353a <_exit>

00002f3a <memcpy>:
    2f3a:	fb 01       	movw	r30, r22
    2f3c:	dc 01       	movw	r26, r24
    2f3e:	02 c0       	rjmp	.+4      	; 0x2f44 <memcpy+0xa>
    2f40:	01 90       	ld	r0, Z+
    2f42:	0d 92       	st	X+, r0
    2f44:	41 50       	subi	r20, 0x01	; 1
    2f46:	50 40       	sbci	r21, 0x00	; 0
    2f48:	d8 f7       	brcc	.-10     	; 0x2f40 <memcpy+0x6>
    2f4a:	08 95       	ret

00002f4c <memset>:
    2f4c:	dc 01       	movw	r26, r24
    2f4e:	01 c0       	rjmp	.+2      	; 0x2f52 <memset+0x6>
    2f50:	6d 93       	st	X+, r22
    2f52:	41 50       	subi	r20, 0x01	; 1
    2f54:	50 40       	sbci	r21, 0x00	; 0
    2f56:	e0 f7       	brcc	.-8      	; 0x2f50 <memset+0x4>
    2f58:	08 95       	ret

00002f5a <printf>:
    2f5a:	cf 93       	push	r28
    2f5c:	df 93       	push	r29
    2f5e:	cd b7       	in	r28, 0x3d	; 61
    2f60:	de b7       	in	r29, 0x3e	; 62
    2f62:	ae 01       	movw	r20, r28
    2f64:	4a 5f       	subi	r20, 0xFA	; 250
    2f66:	5f 4f       	sbci	r21, 0xFF	; 255
    2f68:	fa 01       	movw	r30, r20
    2f6a:	61 91       	ld	r22, Z+
    2f6c:	71 91       	ld	r23, Z+
    2f6e:	af 01       	movw	r20, r30
    2f70:	80 91 19 0d 	lds	r24, 0x0D19	; 0x800d19 <__iob+0x2>
    2f74:	90 91 1a 0d 	lds	r25, 0x0D1A	; 0x800d1a <__iob+0x3>
    2f78:	33 d0       	rcall	.+102    	; 0x2fe0 <vfprintf>
    2f7a:	df 91       	pop	r29
    2f7c:	cf 91       	pop	r28
    2f7e:	08 95       	ret

00002f80 <puts>:
    2f80:	0f 93       	push	r16
    2f82:	1f 93       	push	r17
    2f84:	cf 93       	push	r28
    2f86:	df 93       	push	r29
    2f88:	e0 91 19 0d 	lds	r30, 0x0D19	; 0x800d19 <__iob+0x2>
    2f8c:	f0 91 1a 0d 	lds	r31, 0x0D1A	; 0x800d1a <__iob+0x3>
    2f90:	23 81       	ldd	r18, Z+3	; 0x03
    2f92:	21 ff       	sbrs	r18, 1
    2f94:	1b c0       	rjmp	.+54     	; 0x2fcc <puts+0x4c>
    2f96:	8c 01       	movw	r16, r24
    2f98:	d0 e0       	ldi	r29, 0x00	; 0
    2f9a:	c0 e0       	ldi	r28, 0x00	; 0
    2f9c:	f8 01       	movw	r30, r16
    2f9e:	81 91       	ld	r24, Z+
    2fa0:	8f 01       	movw	r16, r30
    2fa2:	60 91 19 0d 	lds	r22, 0x0D19	; 0x800d19 <__iob+0x2>
    2fa6:	70 91 1a 0d 	lds	r23, 0x0D1A	; 0x800d1a <__iob+0x3>
    2faa:	db 01       	movw	r26, r22
    2fac:	18 96       	adiw	r26, 0x08	; 8
    2fae:	ed 91       	ld	r30, X+
    2fb0:	fc 91       	ld	r31, X
    2fb2:	19 97       	sbiw	r26, 0x09	; 9
    2fb4:	88 23       	and	r24, r24
    2fb6:	31 f0       	breq	.+12     	; 0x2fc4 <puts+0x44>
    2fb8:	19 95       	eicall
    2fba:	89 2b       	or	r24, r25
    2fbc:	79 f3       	breq	.-34     	; 0x2f9c <puts+0x1c>
    2fbe:	df ef       	ldi	r29, 0xFF	; 255
    2fc0:	cf ef       	ldi	r28, 0xFF	; 255
    2fc2:	ec cf       	rjmp	.-40     	; 0x2f9c <puts+0x1c>
    2fc4:	8a e0       	ldi	r24, 0x0A	; 10
    2fc6:	19 95       	eicall
    2fc8:	89 2b       	or	r24, r25
    2fca:	19 f0       	breq	.+6      	; 0x2fd2 <puts+0x52>
    2fcc:	8f ef       	ldi	r24, 0xFF	; 255
    2fce:	9f ef       	ldi	r25, 0xFF	; 255
    2fd0:	02 c0       	rjmp	.+4      	; 0x2fd6 <puts+0x56>
    2fd2:	8d 2f       	mov	r24, r29
    2fd4:	9c 2f       	mov	r25, r28
    2fd6:	df 91       	pop	r29
    2fd8:	cf 91       	pop	r28
    2fda:	1f 91       	pop	r17
    2fdc:	0f 91       	pop	r16
    2fde:	08 95       	ret

00002fe0 <vfprintf>:
    2fe0:	2f 92       	push	r2
    2fe2:	3f 92       	push	r3
    2fe4:	4f 92       	push	r4
    2fe6:	5f 92       	push	r5
    2fe8:	6f 92       	push	r6
    2fea:	7f 92       	push	r7
    2fec:	8f 92       	push	r8
    2fee:	9f 92       	push	r9
    2ff0:	af 92       	push	r10
    2ff2:	bf 92       	push	r11
    2ff4:	cf 92       	push	r12
    2ff6:	df 92       	push	r13
    2ff8:	ef 92       	push	r14
    2ffa:	ff 92       	push	r15
    2ffc:	0f 93       	push	r16
    2ffe:	1f 93       	push	r17
    3000:	cf 93       	push	r28
    3002:	df 93       	push	r29
    3004:	cd b7       	in	r28, 0x3d	; 61
    3006:	de b7       	in	r29, 0x3e	; 62
    3008:	2b 97       	sbiw	r28, 0x0b	; 11
    300a:	0f b6       	in	r0, 0x3f	; 63
    300c:	f8 94       	cli
    300e:	de bf       	out	0x3e, r29	; 62
    3010:	0f be       	out	0x3f, r0	; 63
    3012:	cd bf       	out	0x3d, r28	; 61
    3014:	6c 01       	movw	r12, r24
    3016:	7b 01       	movw	r14, r22
    3018:	8a 01       	movw	r16, r20
    301a:	fc 01       	movw	r30, r24
    301c:	17 82       	std	Z+7, r1	; 0x07
    301e:	16 82       	std	Z+6, r1	; 0x06
    3020:	83 81       	ldd	r24, Z+3	; 0x03
    3022:	81 ff       	sbrs	r24, 1
    3024:	bf c1       	rjmp	.+894    	; 0x33a4 <vfprintf+0x3c4>
    3026:	ce 01       	movw	r24, r28
    3028:	01 96       	adiw	r24, 0x01	; 1
    302a:	3c 01       	movw	r6, r24
    302c:	f6 01       	movw	r30, r12
    302e:	93 81       	ldd	r25, Z+3	; 0x03
    3030:	f7 01       	movw	r30, r14
    3032:	93 fd       	sbrc	r25, 3
    3034:	85 91       	lpm	r24, Z+
    3036:	93 ff       	sbrs	r25, 3
    3038:	81 91       	ld	r24, Z+
    303a:	7f 01       	movw	r14, r30
    303c:	88 23       	and	r24, r24
    303e:	09 f4       	brne	.+2      	; 0x3042 <vfprintf+0x62>
    3040:	ad c1       	rjmp	.+858    	; 0x339c <vfprintf+0x3bc>
    3042:	85 32       	cpi	r24, 0x25	; 37
    3044:	39 f4       	brne	.+14     	; 0x3054 <vfprintf+0x74>
    3046:	93 fd       	sbrc	r25, 3
    3048:	85 91       	lpm	r24, Z+
    304a:	93 ff       	sbrs	r25, 3
    304c:	81 91       	ld	r24, Z+
    304e:	7f 01       	movw	r14, r30
    3050:	85 32       	cpi	r24, 0x25	; 37
    3052:	21 f4       	brne	.+8      	; 0x305c <vfprintf+0x7c>
    3054:	b6 01       	movw	r22, r12
    3056:	90 e0       	ldi	r25, 0x00	; 0
    3058:	d6 d1       	rcall	.+940    	; 0x3406 <fputc>
    305a:	e8 cf       	rjmp	.-48     	; 0x302c <vfprintf+0x4c>
    305c:	91 2c       	mov	r9, r1
    305e:	21 2c       	mov	r2, r1
    3060:	31 2c       	mov	r3, r1
    3062:	ff e1       	ldi	r31, 0x1F	; 31
    3064:	f3 15       	cp	r31, r3
    3066:	d8 f0       	brcs	.+54     	; 0x309e <vfprintf+0xbe>
    3068:	8b 32       	cpi	r24, 0x2B	; 43
    306a:	79 f0       	breq	.+30     	; 0x308a <vfprintf+0xaa>
    306c:	38 f4       	brcc	.+14     	; 0x307c <vfprintf+0x9c>
    306e:	80 32       	cpi	r24, 0x20	; 32
    3070:	79 f0       	breq	.+30     	; 0x3090 <vfprintf+0xb0>
    3072:	83 32       	cpi	r24, 0x23	; 35
    3074:	a1 f4       	brne	.+40     	; 0x309e <vfprintf+0xbe>
    3076:	23 2d       	mov	r18, r3
    3078:	20 61       	ori	r18, 0x10	; 16
    307a:	1d c0       	rjmp	.+58     	; 0x30b6 <vfprintf+0xd6>
    307c:	8d 32       	cpi	r24, 0x2D	; 45
    307e:	61 f0       	breq	.+24     	; 0x3098 <vfprintf+0xb8>
    3080:	80 33       	cpi	r24, 0x30	; 48
    3082:	69 f4       	brne	.+26     	; 0x309e <vfprintf+0xbe>
    3084:	23 2d       	mov	r18, r3
    3086:	21 60       	ori	r18, 0x01	; 1
    3088:	16 c0       	rjmp	.+44     	; 0x30b6 <vfprintf+0xd6>
    308a:	83 2d       	mov	r24, r3
    308c:	82 60       	ori	r24, 0x02	; 2
    308e:	38 2e       	mov	r3, r24
    3090:	e3 2d       	mov	r30, r3
    3092:	e4 60       	ori	r30, 0x04	; 4
    3094:	3e 2e       	mov	r3, r30
    3096:	2a c0       	rjmp	.+84     	; 0x30ec <vfprintf+0x10c>
    3098:	f3 2d       	mov	r31, r3
    309a:	f8 60       	ori	r31, 0x08	; 8
    309c:	1d c0       	rjmp	.+58     	; 0x30d8 <vfprintf+0xf8>
    309e:	37 fc       	sbrc	r3, 7
    30a0:	2d c0       	rjmp	.+90     	; 0x30fc <vfprintf+0x11c>
    30a2:	20 ed       	ldi	r18, 0xD0	; 208
    30a4:	28 0f       	add	r18, r24
    30a6:	2a 30       	cpi	r18, 0x0A	; 10
    30a8:	40 f0       	brcs	.+16     	; 0x30ba <vfprintf+0xda>
    30aa:	8e 32       	cpi	r24, 0x2E	; 46
    30ac:	b9 f4       	brne	.+46     	; 0x30dc <vfprintf+0xfc>
    30ae:	36 fc       	sbrc	r3, 6
    30b0:	75 c1       	rjmp	.+746    	; 0x339c <vfprintf+0x3bc>
    30b2:	23 2d       	mov	r18, r3
    30b4:	20 64       	ori	r18, 0x40	; 64
    30b6:	32 2e       	mov	r3, r18
    30b8:	19 c0       	rjmp	.+50     	; 0x30ec <vfprintf+0x10c>
    30ba:	36 fe       	sbrs	r3, 6
    30bc:	06 c0       	rjmp	.+12     	; 0x30ca <vfprintf+0xea>
    30be:	8a e0       	ldi	r24, 0x0A	; 10
    30c0:	98 9e       	mul	r9, r24
    30c2:	20 0d       	add	r18, r0
    30c4:	11 24       	eor	r1, r1
    30c6:	92 2e       	mov	r9, r18
    30c8:	11 c0       	rjmp	.+34     	; 0x30ec <vfprintf+0x10c>
    30ca:	ea e0       	ldi	r30, 0x0A	; 10
    30cc:	2e 9e       	mul	r2, r30
    30ce:	20 0d       	add	r18, r0
    30d0:	11 24       	eor	r1, r1
    30d2:	22 2e       	mov	r2, r18
    30d4:	f3 2d       	mov	r31, r3
    30d6:	f0 62       	ori	r31, 0x20	; 32
    30d8:	3f 2e       	mov	r3, r31
    30da:	08 c0       	rjmp	.+16     	; 0x30ec <vfprintf+0x10c>
    30dc:	8c 36       	cpi	r24, 0x6C	; 108
    30de:	21 f4       	brne	.+8      	; 0x30e8 <vfprintf+0x108>
    30e0:	83 2d       	mov	r24, r3
    30e2:	80 68       	ori	r24, 0x80	; 128
    30e4:	38 2e       	mov	r3, r24
    30e6:	02 c0       	rjmp	.+4      	; 0x30ec <vfprintf+0x10c>
    30e8:	88 36       	cpi	r24, 0x68	; 104
    30ea:	41 f4       	brne	.+16     	; 0x30fc <vfprintf+0x11c>
    30ec:	f7 01       	movw	r30, r14
    30ee:	93 fd       	sbrc	r25, 3
    30f0:	85 91       	lpm	r24, Z+
    30f2:	93 ff       	sbrs	r25, 3
    30f4:	81 91       	ld	r24, Z+
    30f6:	7f 01       	movw	r14, r30
    30f8:	81 11       	cpse	r24, r1
    30fa:	b3 cf       	rjmp	.-154    	; 0x3062 <vfprintf+0x82>
    30fc:	98 2f       	mov	r25, r24
    30fe:	9f 7d       	andi	r25, 0xDF	; 223
    3100:	95 54       	subi	r25, 0x45	; 69
    3102:	93 30       	cpi	r25, 0x03	; 3
    3104:	28 f4       	brcc	.+10     	; 0x3110 <vfprintf+0x130>
    3106:	0c 5f       	subi	r16, 0xFC	; 252
    3108:	1f 4f       	sbci	r17, 0xFF	; 255
    310a:	9f e3       	ldi	r25, 0x3F	; 63
    310c:	99 83       	std	Y+1, r25	; 0x01
    310e:	0d c0       	rjmp	.+26     	; 0x312a <vfprintf+0x14a>
    3110:	83 36       	cpi	r24, 0x63	; 99
    3112:	31 f0       	breq	.+12     	; 0x3120 <vfprintf+0x140>
    3114:	83 37       	cpi	r24, 0x73	; 115
    3116:	71 f0       	breq	.+28     	; 0x3134 <vfprintf+0x154>
    3118:	83 35       	cpi	r24, 0x53	; 83
    311a:	09 f0       	breq	.+2      	; 0x311e <vfprintf+0x13e>
    311c:	55 c0       	rjmp	.+170    	; 0x31c8 <vfprintf+0x1e8>
    311e:	20 c0       	rjmp	.+64     	; 0x3160 <vfprintf+0x180>
    3120:	f8 01       	movw	r30, r16
    3122:	80 81       	ld	r24, Z
    3124:	89 83       	std	Y+1, r24	; 0x01
    3126:	0e 5f       	subi	r16, 0xFE	; 254
    3128:	1f 4f       	sbci	r17, 0xFF	; 255
    312a:	88 24       	eor	r8, r8
    312c:	83 94       	inc	r8
    312e:	91 2c       	mov	r9, r1
    3130:	53 01       	movw	r10, r6
    3132:	12 c0       	rjmp	.+36     	; 0x3158 <vfprintf+0x178>
    3134:	28 01       	movw	r4, r16
    3136:	f2 e0       	ldi	r31, 0x02	; 2
    3138:	4f 0e       	add	r4, r31
    313a:	51 1c       	adc	r5, r1
    313c:	f8 01       	movw	r30, r16
    313e:	a0 80       	ld	r10, Z
    3140:	b1 80       	ldd	r11, Z+1	; 0x01
    3142:	36 fe       	sbrs	r3, 6
    3144:	03 c0       	rjmp	.+6      	; 0x314c <vfprintf+0x16c>
    3146:	69 2d       	mov	r22, r9
    3148:	70 e0       	ldi	r23, 0x00	; 0
    314a:	02 c0       	rjmp	.+4      	; 0x3150 <vfprintf+0x170>
    314c:	6f ef       	ldi	r22, 0xFF	; 255
    314e:	7f ef       	ldi	r23, 0xFF	; 255
    3150:	c5 01       	movw	r24, r10
    3152:	4e d1       	rcall	.+668    	; 0x33f0 <strnlen>
    3154:	4c 01       	movw	r8, r24
    3156:	82 01       	movw	r16, r4
    3158:	f3 2d       	mov	r31, r3
    315a:	ff 77       	andi	r31, 0x7F	; 127
    315c:	3f 2e       	mov	r3, r31
    315e:	15 c0       	rjmp	.+42     	; 0x318a <vfprintf+0x1aa>
    3160:	28 01       	movw	r4, r16
    3162:	22 e0       	ldi	r18, 0x02	; 2
    3164:	42 0e       	add	r4, r18
    3166:	51 1c       	adc	r5, r1
    3168:	f8 01       	movw	r30, r16
    316a:	a0 80       	ld	r10, Z
    316c:	b1 80       	ldd	r11, Z+1	; 0x01
    316e:	36 fe       	sbrs	r3, 6
    3170:	03 c0       	rjmp	.+6      	; 0x3178 <vfprintf+0x198>
    3172:	69 2d       	mov	r22, r9
    3174:	70 e0       	ldi	r23, 0x00	; 0
    3176:	02 c0       	rjmp	.+4      	; 0x317c <vfprintf+0x19c>
    3178:	6f ef       	ldi	r22, 0xFF	; 255
    317a:	7f ef       	ldi	r23, 0xFF	; 255
    317c:	c5 01       	movw	r24, r10
    317e:	2d d1       	rcall	.+602    	; 0x33da <strnlen_P>
    3180:	4c 01       	movw	r8, r24
    3182:	f3 2d       	mov	r31, r3
    3184:	f0 68       	ori	r31, 0x80	; 128
    3186:	3f 2e       	mov	r3, r31
    3188:	82 01       	movw	r16, r4
    318a:	33 fc       	sbrc	r3, 3
    318c:	19 c0       	rjmp	.+50     	; 0x31c0 <vfprintf+0x1e0>
    318e:	82 2d       	mov	r24, r2
    3190:	90 e0       	ldi	r25, 0x00	; 0
    3192:	88 16       	cp	r8, r24
    3194:	99 06       	cpc	r9, r25
    3196:	a0 f4       	brcc	.+40     	; 0x31c0 <vfprintf+0x1e0>
    3198:	b6 01       	movw	r22, r12
    319a:	80 e2       	ldi	r24, 0x20	; 32
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	33 d1       	rcall	.+614    	; 0x3406 <fputc>
    31a0:	2a 94       	dec	r2
    31a2:	f5 cf       	rjmp	.-22     	; 0x318e <vfprintf+0x1ae>
    31a4:	f5 01       	movw	r30, r10
    31a6:	37 fc       	sbrc	r3, 7
    31a8:	85 91       	lpm	r24, Z+
    31aa:	37 fe       	sbrs	r3, 7
    31ac:	81 91       	ld	r24, Z+
    31ae:	5f 01       	movw	r10, r30
    31b0:	b6 01       	movw	r22, r12
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	28 d1       	rcall	.+592    	; 0x3406 <fputc>
    31b6:	21 10       	cpse	r2, r1
    31b8:	2a 94       	dec	r2
    31ba:	21 e0       	ldi	r18, 0x01	; 1
    31bc:	82 1a       	sub	r8, r18
    31be:	91 08       	sbc	r9, r1
    31c0:	81 14       	cp	r8, r1
    31c2:	91 04       	cpc	r9, r1
    31c4:	79 f7       	brne	.-34     	; 0x31a4 <vfprintf+0x1c4>
    31c6:	e1 c0       	rjmp	.+450    	; 0x338a <vfprintf+0x3aa>
    31c8:	84 36       	cpi	r24, 0x64	; 100
    31ca:	11 f0       	breq	.+4      	; 0x31d0 <vfprintf+0x1f0>
    31cc:	89 36       	cpi	r24, 0x69	; 105
    31ce:	39 f5       	brne	.+78     	; 0x321e <vfprintf+0x23e>
    31d0:	f8 01       	movw	r30, r16
    31d2:	37 fe       	sbrs	r3, 7
    31d4:	07 c0       	rjmp	.+14     	; 0x31e4 <vfprintf+0x204>
    31d6:	60 81       	ld	r22, Z
    31d8:	71 81       	ldd	r23, Z+1	; 0x01
    31da:	82 81       	ldd	r24, Z+2	; 0x02
    31dc:	93 81       	ldd	r25, Z+3	; 0x03
    31de:	0c 5f       	subi	r16, 0xFC	; 252
    31e0:	1f 4f       	sbci	r17, 0xFF	; 255
    31e2:	08 c0       	rjmp	.+16     	; 0x31f4 <vfprintf+0x214>
    31e4:	60 81       	ld	r22, Z
    31e6:	71 81       	ldd	r23, Z+1	; 0x01
    31e8:	07 2e       	mov	r0, r23
    31ea:	00 0c       	add	r0, r0
    31ec:	88 0b       	sbc	r24, r24
    31ee:	99 0b       	sbc	r25, r25
    31f0:	0e 5f       	subi	r16, 0xFE	; 254
    31f2:	1f 4f       	sbci	r17, 0xFF	; 255
    31f4:	f3 2d       	mov	r31, r3
    31f6:	ff 76       	andi	r31, 0x6F	; 111
    31f8:	3f 2e       	mov	r3, r31
    31fa:	97 ff       	sbrs	r25, 7
    31fc:	09 c0       	rjmp	.+18     	; 0x3210 <vfprintf+0x230>
    31fe:	90 95       	com	r25
    3200:	80 95       	com	r24
    3202:	70 95       	com	r23
    3204:	61 95       	neg	r22
    3206:	7f 4f       	sbci	r23, 0xFF	; 255
    3208:	8f 4f       	sbci	r24, 0xFF	; 255
    320a:	9f 4f       	sbci	r25, 0xFF	; 255
    320c:	f0 68       	ori	r31, 0x80	; 128
    320e:	3f 2e       	mov	r3, r31
    3210:	2a e0       	ldi	r18, 0x0A	; 10
    3212:	30 e0       	ldi	r19, 0x00	; 0
    3214:	a3 01       	movw	r20, r6
    3216:	33 d1       	rcall	.+614    	; 0x347e <__ultoa_invert>
    3218:	88 2e       	mov	r8, r24
    321a:	86 18       	sub	r8, r6
    321c:	44 c0       	rjmp	.+136    	; 0x32a6 <vfprintf+0x2c6>
    321e:	85 37       	cpi	r24, 0x75	; 117
    3220:	31 f4       	brne	.+12     	; 0x322e <vfprintf+0x24e>
    3222:	23 2d       	mov	r18, r3
    3224:	2f 7e       	andi	r18, 0xEF	; 239
    3226:	b2 2e       	mov	r11, r18
    3228:	2a e0       	ldi	r18, 0x0A	; 10
    322a:	30 e0       	ldi	r19, 0x00	; 0
    322c:	25 c0       	rjmp	.+74     	; 0x3278 <vfprintf+0x298>
    322e:	93 2d       	mov	r25, r3
    3230:	99 7f       	andi	r25, 0xF9	; 249
    3232:	b9 2e       	mov	r11, r25
    3234:	8f 36       	cpi	r24, 0x6F	; 111
    3236:	c1 f0       	breq	.+48     	; 0x3268 <vfprintf+0x288>
    3238:	18 f4       	brcc	.+6      	; 0x3240 <vfprintf+0x260>
    323a:	88 35       	cpi	r24, 0x58	; 88
    323c:	79 f0       	breq	.+30     	; 0x325c <vfprintf+0x27c>
    323e:	ae c0       	rjmp	.+348    	; 0x339c <vfprintf+0x3bc>
    3240:	80 37       	cpi	r24, 0x70	; 112
    3242:	19 f0       	breq	.+6      	; 0x324a <vfprintf+0x26a>
    3244:	88 37       	cpi	r24, 0x78	; 120
    3246:	21 f0       	breq	.+8      	; 0x3250 <vfprintf+0x270>
    3248:	a9 c0       	rjmp	.+338    	; 0x339c <vfprintf+0x3bc>
    324a:	e9 2f       	mov	r30, r25
    324c:	e0 61       	ori	r30, 0x10	; 16
    324e:	be 2e       	mov	r11, r30
    3250:	b4 fe       	sbrs	r11, 4
    3252:	0d c0       	rjmp	.+26     	; 0x326e <vfprintf+0x28e>
    3254:	fb 2d       	mov	r31, r11
    3256:	f4 60       	ori	r31, 0x04	; 4
    3258:	bf 2e       	mov	r11, r31
    325a:	09 c0       	rjmp	.+18     	; 0x326e <vfprintf+0x28e>
    325c:	34 fe       	sbrs	r3, 4
    325e:	0a c0       	rjmp	.+20     	; 0x3274 <vfprintf+0x294>
    3260:	29 2f       	mov	r18, r25
    3262:	26 60       	ori	r18, 0x06	; 6
    3264:	b2 2e       	mov	r11, r18
    3266:	06 c0       	rjmp	.+12     	; 0x3274 <vfprintf+0x294>
    3268:	28 e0       	ldi	r18, 0x08	; 8
    326a:	30 e0       	ldi	r19, 0x00	; 0
    326c:	05 c0       	rjmp	.+10     	; 0x3278 <vfprintf+0x298>
    326e:	20 e1       	ldi	r18, 0x10	; 16
    3270:	30 e0       	ldi	r19, 0x00	; 0
    3272:	02 c0       	rjmp	.+4      	; 0x3278 <vfprintf+0x298>
    3274:	20 e1       	ldi	r18, 0x10	; 16
    3276:	32 e0       	ldi	r19, 0x02	; 2
    3278:	f8 01       	movw	r30, r16
    327a:	b7 fe       	sbrs	r11, 7
    327c:	07 c0       	rjmp	.+14     	; 0x328c <vfprintf+0x2ac>
    327e:	60 81       	ld	r22, Z
    3280:	71 81       	ldd	r23, Z+1	; 0x01
    3282:	82 81       	ldd	r24, Z+2	; 0x02
    3284:	93 81       	ldd	r25, Z+3	; 0x03
    3286:	0c 5f       	subi	r16, 0xFC	; 252
    3288:	1f 4f       	sbci	r17, 0xFF	; 255
    328a:	06 c0       	rjmp	.+12     	; 0x3298 <vfprintf+0x2b8>
    328c:	60 81       	ld	r22, Z
    328e:	71 81       	ldd	r23, Z+1	; 0x01
    3290:	80 e0       	ldi	r24, 0x00	; 0
    3292:	90 e0       	ldi	r25, 0x00	; 0
    3294:	0e 5f       	subi	r16, 0xFE	; 254
    3296:	1f 4f       	sbci	r17, 0xFF	; 255
    3298:	a3 01       	movw	r20, r6
    329a:	f1 d0       	rcall	.+482    	; 0x347e <__ultoa_invert>
    329c:	88 2e       	mov	r8, r24
    329e:	86 18       	sub	r8, r6
    32a0:	fb 2d       	mov	r31, r11
    32a2:	ff 77       	andi	r31, 0x7F	; 127
    32a4:	3f 2e       	mov	r3, r31
    32a6:	36 fe       	sbrs	r3, 6
    32a8:	0d c0       	rjmp	.+26     	; 0x32c4 <vfprintf+0x2e4>
    32aa:	23 2d       	mov	r18, r3
    32ac:	2e 7f       	andi	r18, 0xFE	; 254
    32ae:	a2 2e       	mov	r10, r18
    32b0:	89 14       	cp	r8, r9
    32b2:	58 f4       	brcc	.+22     	; 0x32ca <vfprintf+0x2ea>
    32b4:	34 fe       	sbrs	r3, 4
    32b6:	0b c0       	rjmp	.+22     	; 0x32ce <vfprintf+0x2ee>
    32b8:	32 fc       	sbrc	r3, 2
    32ba:	09 c0       	rjmp	.+18     	; 0x32ce <vfprintf+0x2ee>
    32bc:	83 2d       	mov	r24, r3
    32be:	8e 7e       	andi	r24, 0xEE	; 238
    32c0:	a8 2e       	mov	r10, r24
    32c2:	05 c0       	rjmp	.+10     	; 0x32ce <vfprintf+0x2ee>
    32c4:	b8 2c       	mov	r11, r8
    32c6:	a3 2c       	mov	r10, r3
    32c8:	03 c0       	rjmp	.+6      	; 0x32d0 <vfprintf+0x2f0>
    32ca:	b8 2c       	mov	r11, r8
    32cc:	01 c0       	rjmp	.+2      	; 0x32d0 <vfprintf+0x2f0>
    32ce:	b9 2c       	mov	r11, r9
    32d0:	a4 fe       	sbrs	r10, 4
    32d2:	0f c0       	rjmp	.+30     	; 0x32f2 <vfprintf+0x312>
    32d4:	fe 01       	movw	r30, r28
    32d6:	e8 0d       	add	r30, r8
    32d8:	f1 1d       	adc	r31, r1
    32da:	80 81       	ld	r24, Z
    32dc:	80 33       	cpi	r24, 0x30	; 48
    32de:	21 f4       	brne	.+8      	; 0x32e8 <vfprintf+0x308>
    32e0:	9a 2d       	mov	r25, r10
    32e2:	99 7e       	andi	r25, 0xE9	; 233
    32e4:	a9 2e       	mov	r10, r25
    32e6:	09 c0       	rjmp	.+18     	; 0x32fa <vfprintf+0x31a>
    32e8:	a2 fe       	sbrs	r10, 2
    32ea:	06 c0       	rjmp	.+12     	; 0x32f8 <vfprintf+0x318>
    32ec:	b3 94       	inc	r11
    32ee:	b3 94       	inc	r11
    32f0:	04 c0       	rjmp	.+8      	; 0x32fa <vfprintf+0x31a>
    32f2:	8a 2d       	mov	r24, r10
    32f4:	86 78       	andi	r24, 0x86	; 134
    32f6:	09 f0       	breq	.+2      	; 0x32fa <vfprintf+0x31a>
    32f8:	b3 94       	inc	r11
    32fa:	a3 fc       	sbrc	r10, 3
    32fc:	10 c0       	rjmp	.+32     	; 0x331e <vfprintf+0x33e>
    32fe:	a0 fe       	sbrs	r10, 0
    3300:	06 c0       	rjmp	.+12     	; 0x330e <vfprintf+0x32e>
    3302:	b2 14       	cp	r11, r2
    3304:	80 f4       	brcc	.+32     	; 0x3326 <vfprintf+0x346>
    3306:	28 0c       	add	r2, r8
    3308:	92 2c       	mov	r9, r2
    330a:	9b 18       	sub	r9, r11
    330c:	0d c0       	rjmp	.+26     	; 0x3328 <vfprintf+0x348>
    330e:	b2 14       	cp	r11, r2
    3310:	58 f4       	brcc	.+22     	; 0x3328 <vfprintf+0x348>
    3312:	b6 01       	movw	r22, r12
    3314:	80 e2       	ldi	r24, 0x20	; 32
    3316:	90 e0       	ldi	r25, 0x00	; 0
    3318:	76 d0       	rcall	.+236    	; 0x3406 <fputc>
    331a:	b3 94       	inc	r11
    331c:	f8 cf       	rjmp	.-16     	; 0x330e <vfprintf+0x32e>
    331e:	b2 14       	cp	r11, r2
    3320:	18 f4       	brcc	.+6      	; 0x3328 <vfprintf+0x348>
    3322:	2b 18       	sub	r2, r11
    3324:	02 c0       	rjmp	.+4      	; 0x332a <vfprintf+0x34a>
    3326:	98 2c       	mov	r9, r8
    3328:	21 2c       	mov	r2, r1
    332a:	a4 fe       	sbrs	r10, 4
    332c:	0f c0       	rjmp	.+30     	; 0x334c <vfprintf+0x36c>
    332e:	b6 01       	movw	r22, r12
    3330:	80 e3       	ldi	r24, 0x30	; 48
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	68 d0       	rcall	.+208    	; 0x3406 <fputc>
    3336:	a2 fe       	sbrs	r10, 2
    3338:	16 c0       	rjmp	.+44     	; 0x3366 <vfprintf+0x386>
    333a:	a1 fc       	sbrc	r10, 1
    333c:	03 c0       	rjmp	.+6      	; 0x3344 <vfprintf+0x364>
    333e:	88 e7       	ldi	r24, 0x78	; 120
    3340:	90 e0       	ldi	r25, 0x00	; 0
    3342:	02 c0       	rjmp	.+4      	; 0x3348 <vfprintf+0x368>
    3344:	88 e5       	ldi	r24, 0x58	; 88
    3346:	90 e0       	ldi	r25, 0x00	; 0
    3348:	b6 01       	movw	r22, r12
    334a:	0c c0       	rjmp	.+24     	; 0x3364 <vfprintf+0x384>
    334c:	8a 2d       	mov	r24, r10
    334e:	86 78       	andi	r24, 0x86	; 134
    3350:	51 f0       	breq	.+20     	; 0x3366 <vfprintf+0x386>
    3352:	a1 fe       	sbrs	r10, 1
    3354:	02 c0       	rjmp	.+4      	; 0x335a <vfprintf+0x37a>
    3356:	8b e2       	ldi	r24, 0x2B	; 43
    3358:	01 c0       	rjmp	.+2      	; 0x335c <vfprintf+0x37c>
    335a:	80 e2       	ldi	r24, 0x20	; 32
    335c:	a7 fc       	sbrc	r10, 7
    335e:	8d e2       	ldi	r24, 0x2D	; 45
    3360:	b6 01       	movw	r22, r12
    3362:	90 e0       	ldi	r25, 0x00	; 0
    3364:	50 d0       	rcall	.+160    	; 0x3406 <fputc>
    3366:	89 14       	cp	r8, r9
    3368:	30 f4       	brcc	.+12     	; 0x3376 <vfprintf+0x396>
    336a:	b6 01       	movw	r22, r12
    336c:	80 e3       	ldi	r24, 0x30	; 48
    336e:	90 e0       	ldi	r25, 0x00	; 0
    3370:	4a d0       	rcall	.+148    	; 0x3406 <fputc>
    3372:	9a 94       	dec	r9
    3374:	f8 cf       	rjmp	.-16     	; 0x3366 <vfprintf+0x386>
    3376:	8a 94       	dec	r8
    3378:	f3 01       	movw	r30, r6
    337a:	e8 0d       	add	r30, r8
    337c:	f1 1d       	adc	r31, r1
    337e:	80 81       	ld	r24, Z
    3380:	b6 01       	movw	r22, r12
    3382:	90 e0       	ldi	r25, 0x00	; 0
    3384:	40 d0       	rcall	.+128    	; 0x3406 <fputc>
    3386:	81 10       	cpse	r8, r1
    3388:	f6 cf       	rjmp	.-20     	; 0x3376 <vfprintf+0x396>
    338a:	22 20       	and	r2, r2
    338c:	09 f4       	brne	.+2      	; 0x3390 <vfprintf+0x3b0>
    338e:	4e ce       	rjmp	.-868    	; 0x302c <vfprintf+0x4c>
    3390:	b6 01       	movw	r22, r12
    3392:	80 e2       	ldi	r24, 0x20	; 32
    3394:	90 e0       	ldi	r25, 0x00	; 0
    3396:	37 d0       	rcall	.+110    	; 0x3406 <fputc>
    3398:	2a 94       	dec	r2
    339a:	f7 cf       	rjmp	.-18     	; 0x338a <vfprintf+0x3aa>
    339c:	f6 01       	movw	r30, r12
    339e:	86 81       	ldd	r24, Z+6	; 0x06
    33a0:	97 81       	ldd	r25, Z+7	; 0x07
    33a2:	02 c0       	rjmp	.+4      	; 0x33a8 <vfprintf+0x3c8>
    33a4:	8f ef       	ldi	r24, 0xFF	; 255
    33a6:	9f ef       	ldi	r25, 0xFF	; 255
    33a8:	2b 96       	adiw	r28, 0x0b	; 11
    33aa:	0f b6       	in	r0, 0x3f	; 63
    33ac:	f8 94       	cli
    33ae:	de bf       	out	0x3e, r29	; 62
    33b0:	0f be       	out	0x3f, r0	; 63
    33b2:	cd bf       	out	0x3d, r28	; 61
    33b4:	df 91       	pop	r29
    33b6:	cf 91       	pop	r28
    33b8:	1f 91       	pop	r17
    33ba:	0f 91       	pop	r16
    33bc:	ff 90       	pop	r15
    33be:	ef 90       	pop	r14
    33c0:	df 90       	pop	r13
    33c2:	cf 90       	pop	r12
    33c4:	bf 90       	pop	r11
    33c6:	af 90       	pop	r10
    33c8:	9f 90       	pop	r9
    33ca:	8f 90       	pop	r8
    33cc:	7f 90       	pop	r7
    33ce:	6f 90       	pop	r6
    33d0:	5f 90       	pop	r5
    33d2:	4f 90       	pop	r4
    33d4:	3f 90       	pop	r3
    33d6:	2f 90       	pop	r2
    33d8:	08 95       	ret

000033da <strnlen_P>:
    33da:	fc 01       	movw	r30, r24
    33dc:	05 90       	lpm	r0, Z+
    33de:	61 50       	subi	r22, 0x01	; 1
    33e0:	70 40       	sbci	r23, 0x00	; 0
    33e2:	01 10       	cpse	r0, r1
    33e4:	d8 f7       	brcc	.-10     	; 0x33dc <strnlen_P+0x2>
    33e6:	80 95       	com	r24
    33e8:	90 95       	com	r25
    33ea:	8e 0f       	add	r24, r30
    33ec:	9f 1f       	adc	r25, r31
    33ee:	08 95       	ret

000033f0 <strnlen>:
    33f0:	fc 01       	movw	r30, r24
    33f2:	61 50       	subi	r22, 0x01	; 1
    33f4:	70 40       	sbci	r23, 0x00	; 0
    33f6:	01 90       	ld	r0, Z+
    33f8:	01 10       	cpse	r0, r1
    33fa:	d8 f7       	brcc	.-10     	; 0x33f2 <strnlen+0x2>
    33fc:	80 95       	com	r24
    33fe:	90 95       	com	r25
    3400:	8e 0f       	add	r24, r30
    3402:	9f 1f       	adc	r25, r31
    3404:	08 95       	ret

00003406 <fputc>:
    3406:	0f 93       	push	r16
    3408:	1f 93       	push	r17
    340a:	cf 93       	push	r28
    340c:	df 93       	push	r29
    340e:	fb 01       	movw	r30, r22
    3410:	23 81       	ldd	r18, Z+3	; 0x03
    3412:	21 fd       	sbrc	r18, 1
    3414:	03 c0       	rjmp	.+6      	; 0x341c <fputc+0x16>
    3416:	8f ef       	ldi	r24, 0xFF	; 255
    3418:	9f ef       	ldi	r25, 0xFF	; 255
    341a:	2c c0       	rjmp	.+88     	; 0x3474 <fputc+0x6e>
    341c:	22 ff       	sbrs	r18, 2
    341e:	16 c0       	rjmp	.+44     	; 0x344c <fputc+0x46>
    3420:	46 81       	ldd	r20, Z+6	; 0x06
    3422:	57 81       	ldd	r21, Z+7	; 0x07
    3424:	24 81       	ldd	r18, Z+4	; 0x04
    3426:	35 81       	ldd	r19, Z+5	; 0x05
    3428:	42 17       	cp	r20, r18
    342a:	53 07       	cpc	r21, r19
    342c:	44 f4       	brge	.+16     	; 0x343e <fputc+0x38>
    342e:	a0 81       	ld	r26, Z
    3430:	b1 81       	ldd	r27, Z+1	; 0x01
    3432:	9d 01       	movw	r18, r26
    3434:	2f 5f       	subi	r18, 0xFF	; 255
    3436:	3f 4f       	sbci	r19, 0xFF	; 255
    3438:	31 83       	std	Z+1, r19	; 0x01
    343a:	20 83       	st	Z, r18
    343c:	8c 93       	st	X, r24
    343e:	26 81       	ldd	r18, Z+6	; 0x06
    3440:	37 81       	ldd	r19, Z+7	; 0x07
    3442:	2f 5f       	subi	r18, 0xFF	; 255
    3444:	3f 4f       	sbci	r19, 0xFF	; 255
    3446:	37 83       	std	Z+7, r19	; 0x07
    3448:	26 83       	std	Z+6, r18	; 0x06
    344a:	14 c0       	rjmp	.+40     	; 0x3474 <fputc+0x6e>
    344c:	8b 01       	movw	r16, r22
    344e:	ec 01       	movw	r28, r24
    3450:	fb 01       	movw	r30, r22
    3452:	00 84       	ldd	r0, Z+8	; 0x08
    3454:	f1 85       	ldd	r31, Z+9	; 0x09
    3456:	e0 2d       	mov	r30, r0
    3458:	19 95       	eicall
    345a:	89 2b       	or	r24, r25
    345c:	e1 f6       	brne	.-72     	; 0x3416 <fputc+0x10>
    345e:	d8 01       	movw	r26, r16
    3460:	16 96       	adiw	r26, 0x06	; 6
    3462:	8d 91       	ld	r24, X+
    3464:	9c 91       	ld	r25, X
    3466:	17 97       	sbiw	r26, 0x07	; 7
    3468:	01 96       	adiw	r24, 0x01	; 1
    346a:	17 96       	adiw	r26, 0x07	; 7
    346c:	9c 93       	st	X, r25
    346e:	8e 93       	st	-X, r24
    3470:	16 97       	sbiw	r26, 0x06	; 6
    3472:	ce 01       	movw	r24, r28
    3474:	df 91       	pop	r29
    3476:	cf 91       	pop	r28
    3478:	1f 91       	pop	r17
    347a:	0f 91       	pop	r16
    347c:	08 95       	ret

0000347e <__ultoa_invert>:
    347e:	fa 01       	movw	r30, r20
    3480:	aa 27       	eor	r26, r26
    3482:	28 30       	cpi	r18, 0x08	; 8
    3484:	51 f1       	breq	.+84     	; 0x34da <__ultoa_invert+0x5c>
    3486:	20 31       	cpi	r18, 0x10	; 16
    3488:	81 f1       	breq	.+96     	; 0x34ea <__ultoa_invert+0x6c>
    348a:	e8 94       	clt
    348c:	6f 93       	push	r22
    348e:	6e 7f       	andi	r22, 0xFE	; 254
    3490:	6e 5f       	subi	r22, 0xFE	; 254
    3492:	7f 4f       	sbci	r23, 0xFF	; 255
    3494:	8f 4f       	sbci	r24, 0xFF	; 255
    3496:	9f 4f       	sbci	r25, 0xFF	; 255
    3498:	af 4f       	sbci	r26, 0xFF	; 255
    349a:	b1 e0       	ldi	r27, 0x01	; 1
    349c:	3e d0       	rcall	.+124    	; 0x351a <__ultoa_invert+0x9c>
    349e:	b4 e0       	ldi	r27, 0x04	; 4
    34a0:	3c d0       	rcall	.+120    	; 0x351a <__ultoa_invert+0x9c>
    34a2:	67 0f       	add	r22, r23
    34a4:	78 1f       	adc	r23, r24
    34a6:	89 1f       	adc	r24, r25
    34a8:	9a 1f       	adc	r25, r26
    34aa:	a1 1d       	adc	r26, r1
    34ac:	68 0f       	add	r22, r24
    34ae:	79 1f       	adc	r23, r25
    34b0:	8a 1f       	adc	r24, r26
    34b2:	91 1d       	adc	r25, r1
    34b4:	a1 1d       	adc	r26, r1
    34b6:	6a 0f       	add	r22, r26
    34b8:	71 1d       	adc	r23, r1
    34ba:	81 1d       	adc	r24, r1
    34bc:	91 1d       	adc	r25, r1
    34be:	a1 1d       	adc	r26, r1
    34c0:	20 d0       	rcall	.+64     	; 0x3502 <__ultoa_invert+0x84>
    34c2:	09 f4       	brne	.+2      	; 0x34c6 <__ultoa_invert+0x48>
    34c4:	68 94       	set
    34c6:	3f 91       	pop	r19
    34c8:	2a e0       	ldi	r18, 0x0A	; 10
    34ca:	26 9f       	mul	r18, r22
    34cc:	11 24       	eor	r1, r1
    34ce:	30 19       	sub	r19, r0
    34d0:	30 5d       	subi	r19, 0xD0	; 208
    34d2:	31 93       	st	Z+, r19
    34d4:	de f6       	brtc	.-74     	; 0x348c <__ultoa_invert+0xe>
    34d6:	cf 01       	movw	r24, r30
    34d8:	08 95       	ret
    34da:	46 2f       	mov	r20, r22
    34dc:	47 70       	andi	r20, 0x07	; 7
    34de:	40 5d       	subi	r20, 0xD0	; 208
    34e0:	41 93       	st	Z+, r20
    34e2:	b3 e0       	ldi	r27, 0x03	; 3
    34e4:	0f d0       	rcall	.+30     	; 0x3504 <__ultoa_invert+0x86>
    34e6:	c9 f7       	brne	.-14     	; 0x34da <__ultoa_invert+0x5c>
    34e8:	f6 cf       	rjmp	.-20     	; 0x34d6 <__ultoa_invert+0x58>
    34ea:	46 2f       	mov	r20, r22
    34ec:	4f 70       	andi	r20, 0x0F	; 15
    34ee:	40 5d       	subi	r20, 0xD0	; 208
    34f0:	4a 33       	cpi	r20, 0x3A	; 58
    34f2:	18 f0       	brcs	.+6      	; 0x34fa <__ultoa_invert+0x7c>
    34f4:	49 5d       	subi	r20, 0xD9	; 217
    34f6:	31 fd       	sbrc	r19, 1
    34f8:	40 52       	subi	r20, 0x20	; 32
    34fa:	41 93       	st	Z+, r20
    34fc:	02 d0       	rcall	.+4      	; 0x3502 <__ultoa_invert+0x84>
    34fe:	a9 f7       	brne	.-22     	; 0x34ea <__ultoa_invert+0x6c>
    3500:	ea cf       	rjmp	.-44     	; 0x34d6 <__ultoa_invert+0x58>
    3502:	b4 e0       	ldi	r27, 0x04	; 4
    3504:	a6 95       	lsr	r26
    3506:	97 95       	ror	r25
    3508:	87 95       	ror	r24
    350a:	77 95       	ror	r23
    350c:	67 95       	ror	r22
    350e:	ba 95       	dec	r27
    3510:	c9 f7       	brne	.-14     	; 0x3504 <__ultoa_invert+0x86>
    3512:	00 97       	sbiw	r24, 0x00	; 0
    3514:	61 05       	cpc	r22, r1
    3516:	71 05       	cpc	r23, r1
    3518:	08 95       	ret
    351a:	9b 01       	movw	r18, r22
    351c:	ac 01       	movw	r20, r24
    351e:	0a 2e       	mov	r0, r26
    3520:	06 94       	lsr	r0
    3522:	57 95       	ror	r21
    3524:	47 95       	ror	r20
    3526:	37 95       	ror	r19
    3528:	27 95       	ror	r18
    352a:	ba 95       	dec	r27
    352c:	c9 f7       	brne	.-14     	; 0x3520 <__ultoa_invert+0xa2>
    352e:	62 0f       	add	r22, r18
    3530:	73 1f       	adc	r23, r19
    3532:	84 1f       	adc	r24, r20
    3534:	95 1f       	adc	r25, r21
    3536:	a0 1d       	adc	r26, r0
    3538:	08 95       	ret

0000353a <_exit>:
    353a:	f8 94       	cli

0000353c <__stop_program>:
    353c:	ff cf       	rjmp	.-2      	; 0x353c <__stop_program>
